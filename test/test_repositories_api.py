# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from foreman.api.repositories_api import RepositoriesApi


class TestRepositoriesApi(unittest.TestCase):
    """RepositoriesApi unit test stubs"""

    def setUp(self) -> None:
        self.api = RepositoriesApi()

    def tearDown(self) -> None:
        pass

    def test_delete_repositories_id(self) -> None:
        """Test case for delete_repositories_id

        Destroy a custom repository
        """
        pass

    def test_get_content_types(self) -> None:
        """Test case for get_content_types

        Return the enabled content types
        """
        pass

    def test_get_content_views_id_repositories(self) -> None:
        """Test case for get_content_views_id_repositories

        List of repositories for a content view
        """
        pass

    def test_get_environments_environment_id_products_product_id_repositories(
        self,
    ) -> None:
        """Test case for get_environments_environment_id_products_product_id_repositories

        List of repositories belonging to a product in an environment
        """
        pass

    def test_get_organizations_organization_id_environments_environment_id_repositories(
        self,
    ) -> None:
        """Test case for get_organizations_organization_id_environments_environment_id_repositories

        List repositories in the environment
        """
        pass

    def test_get_organizations_organization_id_repositories(self) -> None:
        """Test case for get_organizations_organization_id_repositories

        List of repositories in an organization
        """
        pass

    def test_get_products_product_id_repositories(self) -> None:
        """Test case for get_products_product_id_repositories

        List of repositories for a product
        """
        pass

    def test_get_repositories(self) -> None:
        """Test case for get_repositories

        List of enabled repositories
        """
        pass

    def test_get_repositories_compare(self) -> None:
        """Test case for get_repositories_compare

        List :resource
        """
        pass

    def test_get_repositories_id(self) -> None:
        """Test case for get_repositories_id

        Show a repository
        """
        pass

    def test_get_repositories_id_gpg_key_content(self) -> None:
        """Test case for get_repositories_id_gpg_key_content

        Return the content of a repo gpg key, used directly by yum
        """
        pass

    def test_get_repositories_repository_types(self) -> None:
        """Test case for get_repositories_repository_types

        Show the available repository types
        """
        pass

    def test_post_repositories(self) -> None:
        """Test case for post_repositories

        Create a custom repository
        """
        pass

    def test_post_repositories_id_reclaim_space(self) -> None:
        """Test case for post_repositories_id_reclaim_space

        Reclaim space from an On Demand repository
        """
        pass

    def test_post_repositories_id_sync(self) -> None:
        """Test case for post_repositories_id_sync

        Sync a repository
        """
        pass

    def test_post_repositories_id_upload_content(self) -> None:
        """Test case for post_repositories_id_upload_content

        Upload content into the repository
        """
        pass

    def test_post_repositories_id_verify_checksum(self) -> None:
        """Test case for post_repositories_id_verify_checksum

        Verify checksum of repository contents
        """
        pass

    def test_put_repositories_id(self) -> None:
        """Test case for put_repositories_id

        Update a repository
        """
        pass

    def test_put_repositories_id_import_uploads(self) -> None:
        """Test case for put_repositories_id_import_uploads

        Import uploads into a repository
        """
        pass

    def test_put_repositories_id_remove_content(self) -> None:
        """Test case for put_repositories_id_remove_content"""
        pass

    def test_put_repositories_id_remove_docker_manifests(self) -> None:
        """Test case for put_repositories_id_remove_docker_manifests"""
        pass

    def test_put_repositories_id_remove_packages(self) -> None:
        """Test case for put_repositories_id_remove_packages"""
        pass

    def test_put_repositories_id_republish(self) -> None:
        """Test case for put_repositories_id_republish

        Forces a republish of the specified repository, regenerating metadata and symlinks on the filesystem. Not allowed for repositories with the 'Complete Mirroring' mirroring policy.
        """
        pass


if __name__ == "__main__":
    unittest.main()
