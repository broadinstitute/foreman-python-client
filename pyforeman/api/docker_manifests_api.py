# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class DockerManifestsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_content_view_filters_content_view_filter_id_docker_manifests(
        self, content_view_filter_id, repository_id, **kwargs
    ):  # noqa: E501
        """List docker_manifests  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_filters_content_view_filter_id_docker_manifests(content_view_filter_id, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: content view filter identifier (required)
        :param float repository_id: repository identifier (required)
        :param float organization_id: organization identifier
        :param float content_view_version_id: content view version identifier
        :param float content_view_filter_rule_id: content view filter rule identifier
        :param float environment_id: environment identifier
        :param list[str] ids: ids to filter content by
        :param bool include_filter_ids: Includes associated content view filter ids in response
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_view_filters_content_view_filter_id_docker_manifests_with_http_info(
                content_view_filter_id, repository_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_content_view_filters_content_view_filter_id_docker_manifests_with_http_info(
                content_view_filter_id, repository_id, **kwargs
            )  # noqa: E501
            return data

    def get_content_view_filters_content_view_filter_id_docker_manifests_with_http_info(
        self, content_view_filter_id, repository_id, **kwargs
    ):  # noqa: E501
        """List docker_manifests  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_filters_content_view_filter_id_docker_manifests_with_http_info(content_view_filter_id, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: content view filter identifier (required)
        :param float repository_id: repository identifier (required)
        :param float organization_id: organization identifier
        :param float content_view_version_id: content view version identifier
        :param float content_view_filter_rule_id: content view filter rule identifier
        :param float environment_id: environment identifier
        :param list[str] ids: ids to filter content by
        :param bool include_filter_ids: Includes associated content view filter ids in response
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_filter_id",
            "repository_id",
            "organization_id",
            "content_view_version_id",
            "content_view_filter_rule_id",
            "environment_id",
            "ids",
            "include_filter_ids",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_view_filters_content_view_filter_id_docker_manifests"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_filter_id' is set
        if self.api_client.client_side_validation and (
            "content_view_filter_id" not in params
            or params["content_view_filter_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_filter_id` when calling `get_content_view_filters_content_view_filter_id_docker_manifests`"
            )  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and (
            "repository_id" not in params or params["repository_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `repository_id` when calling `get_content_view_filters_content_view_filter_id_docker_manifests`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_filter_id" in params:
            path_params["content_view_filter_id"] = params[
                "content_view_filter_id"
            ]  # noqa: E501

        query_params = []
        if "repository_id" in params:
            query_params.append(
                ("repository_id", params["repository_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "content_view_version_id" in params:
            query_params.append(
                ("content_view_version_id", params["content_view_version_id"])
            )  # noqa: E501
        if "content_view_filter_rule_id" in params:
            query_params.append(
                ("content_view_filter_rule_id", params["content_view_filter_rule_id"])
            )  # noqa: E501
        if "environment_id" in params:
            query_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "ids" in params:
            query_params.append(("ids", params["ids"]))  # noqa: E501
            collection_formats["ids"] = "csv"  # noqa: E501
        if "include_filter_ids" in params:
            query_params.append(
                ("include_filter_ids", params["include_filter_ids"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters/{content_view_filter_id}/docker_manifests",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_views_content_view_id_filters_filter_id_docker_manifests(
        self,
        content_view_id,
        filter_id,
        content_view_filter_id,
        repository_id,
        **kwargs
    ):  # noqa: E501
        """List docker_manifests  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views_content_view_id_filters_filter_id_docker_manifests(content_view_id, filter_id, content_view_filter_id, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: (required)
        :param float filter_id: (required)
        :param float content_view_filter_id: content view filter identifier (required)
        :param float repository_id: repository identifier (required)
        :param float organization_id: organization identifier
        :param float content_view_version_id: content view version identifier
        :param float content_view_filter_rule_id: content view filter rule identifier
        :param float environment_id: environment identifier
        :param list[str] ids: ids to filter content by
        :param bool include_filter_ids: Includes associated content view filter ids in response
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_views_content_view_id_filters_filter_id_docker_manifests_with_http_info(
                content_view_id,
                filter_id,
                content_view_filter_id,
                repository_id,
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_content_views_content_view_id_filters_filter_id_docker_manifests_with_http_info(
                content_view_id,
                filter_id,
                content_view_filter_id,
                repository_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_content_views_content_view_id_filters_filter_id_docker_manifests_with_http_info(
        self,
        content_view_id,
        filter_id,
        content_view_filter_id,
        repository_id,
        **kwargs
    ):  # noqa: E501
        """List docker_manifests  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views_content_view_id_filters_filter_id_docker_manifests_with_http_info(content_view_id, filter_id, content_view_filter_id, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: (required)
        :param float filter_id: (required)
        :param float content_view_filter_id: content view filter identifier (required)
        :param float repository_id: repository identifier (required)
        :param float organization_id: organization identifier
        :param float content_view_version_id: content view version identifier
        :param float content_view_filter_rule_id: content view filter rule identifier
        :param float environment_id: environment identifier
        :param list[str] ids: ids to filter content by
        :param bool include_filter_ids: Includes associated content view filter ids in response
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_id",
            "filter_id",
            "content_view_filter_id",
            "repository_id",
            "organization_id",
            "content_view_version_id",
            "content_view_filter_rule_id",
            "environment_id",
            "ids",
            "include_filter_ids",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_views_content_view_id_filters_filter_id_docker_manifests"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `get_content_views_content_view_id_filters_filter_id_docker_manifests`"
            )  # noqa: E501
        # verify the required parameter 'filter_id' is set
        if self.api_client.client_side_validation and (
            "filter_id" not in params or params["filter_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `filter_id` when calling `get_content_views_content_view_id_filters_filter_id_docker_manifests`"
            )  # noqa: E501
        # verify the required parameter 'content_view_filter_id' is set
        if self.api_client.client_side_validation and (
            "content_view_filter_id" not in params
            or params["content_view_filter_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_filter_id` when calling `get_content_views_content_view_id_filters_filter_id_docker_manifests`"
            )  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and (
            "repository_id" not in params or params["repository_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `repository_id` when calling `get_content_views_content_view_id_filters_filter_id_docker_manifests`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_id" in params:
            path_params["content_view_id"] = params["content_view_id"]  # noqa: E501
        if "filter_id" in params:
            path_params["filter_id"] = params["filter_id"]  # noqa: E501

        query_params = []
        if "content_view_filter_id" in params:
            query_params.append(
                ("content_view_filter_id", params["content_view_filter_id"])
            )  # noqa: E501
        if "repository_id" in params:
            query_params.append(
                ("repository_id", params["repository_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "content_view_version_id" in params:
            query_params.append(
                ("content_view_version_id", params["content_view_version_id"])
            )  # noqa: E501
        if "content_view_filter_rule_id" in params:
            query_params.append(
                ("content_view_filter_rule_id", params["content_view_filter_rule_id"])
            )  # noqa: E501
        if "environment_id" in params:
            query_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "ids" in params:
            query_params.append(("ids", params["ids"]))  # noqa: E501
            collection_formats["ids"] = "csv"  # noqa: E501
        if "include_filter_ids" in params:
            query_params.append(
                ("include_filter_ids", params["include_filter_ids"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{content_view_id}/filters/{filter_id}/docker_manifests",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_docker_manifests(
        self, content_view_filter_id, repository_id, **kwargs
    ):  # noqa: E501
        """List docker_manifests  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_docker_manifests(content_view_filter_id, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: content view filter identifier (required)
        :param float repository_id: repository identifier (required)
        :param float organization_id: organization identifier
        :param float content_view_version_id: content view version identifier
        :param float content_view_filter_rule_id: content view filter rule identifier
        :param float environment_id: environment identifier
        :param list[str] ids: ids to filter content by
        :param bool include_filter_ids: Includes associated content view filter ids in response
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_docker_manifests_with_http_info(
                content_view_filter_id, repository_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_docker_manifests_with_http_info(
                content_view_filter_id, repository_id, **kwargs
            )  # noqa: E501
            return data

    def get_docker_manifests_with_http_info(
        self, content_view_filter_id, repository_id, **kwargs
    ):  # noqa: E501
        """List docker_manifests  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_docker_manifests_with_http_info(content_view_filter_id, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: content view filter identifier (required)
        :param float repository_id: repository identifier (required)
        :param float organization_id: organization identifier
        :param float content_view_version_id: content view version identifier
        :param float content_view_filter_rule_id: content view filter rule identifier
        :param float environment_id: environment identifier
        :param list[str] ids: ids to filter content by
        :param bool include_filter_ids: Includes associated content view filter ids in response
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_filter_id",
            "repository_id",
            "organization_id",
            "content_view_version_id",
            "content_view_filter_rule_id",
            "environment_id",
            "ids",
            "include_filter_ids",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_docker_manifests" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_filter_id' is set
        if self.api_client.client_side_validation and (
            "content_view_filter_id" not in params
            or params["content_view_filter_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_filter_id` when calling `get_docker_manifests`"
            )  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and (
            "repository_id" not in params or params["repository_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `repository_id` when calling `get_docker_manifests`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "content_view_filter_id" in params:
            query_params.append(
                ("content_view_filter_id", params["content_view_filter_id"])
            )  # noqa: E501
        if "repository_id" in params:
            query_params.append(
                ("repository_id", params["repository_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "content_view_version_id" in params:
            query_params.append(
                ("content_view_version_id", params["content_view_version_id"])
            )  # noqa: E501
        if "content_view_filter_rule_id" in params:
            query_params.append(
                ("content_view_filter_rule_id", params["content_view_filter_rule_id"])
            )  # noqa: E501
        if "environment_id" in params:
            query_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "ids" in params:
            query_params.append(("ids", params["ids"]))  # noqa: E501
            collection_formats["ids"] = "csv"  # noqa: E501
        if "include_filter_ids" in params:
            query_params.append(
                ("include_filter_ids", params["include_filter_ids"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/docker_manifests",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_docker_manifests_compare(self, **kwargs):  # noqa: E501
        """List docker_manifests  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_docker_manifests_compare(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] content_view_version_ids: content view versions to compare
        :param float repository_id: Library repository id to restrict comparisons to
        :param str restrict_comparison: Return same, different or all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_docker_manifests_compare_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_docker_manifests_compare_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def get_docker_manifests_compare_with_http_info(self, **kwargs):  # noqa: E501
        """List docker_manifests  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_docker_manifests_compare_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] content_view_version_ids: content view versions to compare
        :param float repository_id: Library repository id to restrict comparisons to
        :param str restrict_comparison: Return same, different or all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_version_ids",
            "repository_id",
            "restrict_comparison",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_docker_manifests_compare" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "content_view_version_ids" in params:
            query_params.append(
                ("content_view_version_ids", params["content_view_version_ids"])
            )  # noqa: E501
            collection_formats["content_view_version_ids"] = "csv"  # noqa: E501
        if "repository_id" in params:
            query_params.append(
                ("repository_id", params["repository_id"])
            )  # noqa: E501
        if "restrict_comparison" in params:
            query_params.append(
                ("restrict_comparison", params["restrict_comparison"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/docker_manifests/compare",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_docker_manifests_id(self, id, repository_id, **kwargs):  # noqa: E501
        """Show a docker manifest  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_docker_manifests_id(id, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: :a_resource identifier (required)
        :param float repository_id: repository identifier (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_docker_manifests_id_with_http_info(
                id, repository_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_docker_manifests_id_with_http_info(
                id, repository_id, **kwargs
            )  # noqa: E501
            return data

    def get_docker_manifests_id_with_http_info(
        self, id, repository_id, **kwargs
    ):  # noqa: E501
        """Show a docker manifest  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_docker_manifests_id_with_http_info(id, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: :a_resource identifier (required)
        :param float repository_id: repository identifier (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "repository_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_docker_manifests_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_docker_manifests_id`"
            )  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and (
            "repository_id" not in params or params["repository_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `repository_id` when calling `get_docker_manifests_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "repository_id" in params:
            query_params.append(
                ("repository_id", params["repository_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/docker_manifests/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repositories_repository_id_docker_manifests(
        self, repository_id, content_view_filter_id, **kwargs
    ):  # noqa: E501
        """List docker_manifests  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories_repository_id_docker_manifests(repository_id, content_view_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float repository_id: repository identifier (required)
        :param float content_view_filter_id: content view filter identifier (required)
        :param float organization_id: organization identifier
        :param float content_view_version_id: content view version identifier
        :param float content_view_filter_rule_id: content view filter rule identifier
        :param float environment_id: environment identifier
        :param list[str] ids: ids to filter content by
        :param bool include_filter_ids: Includes associated content view filter ids in response
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repositories_repository_id_docker_manifests_with_http_info(
                repository_id, content_view_filter_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_repositories_repository_id_docker_manifests_with_http_info(
                repository_id, content_view_filter_id, **kwargs
            )  # noqa: E501
            return data

    def get_repositories_repository_id_docker_manifests_with_http_info(
        self, repository_id, content_view_filter_id, **kwargs
    ):  # noqa: E501
        """List docker_manifests  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories_repository_id_docker_manifests_with_http_info(repository_id, content_view_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float repository_id: repository identifier (required)
        :param float content_view_filter_id: content view filter identifier (required)
        :param float organization_id: organization identifier
        :param float content_view_version_id: content view version identifier
        :param float content_view_filter_rule_id: content view filter rule identifier
        :param float environment_id: environment identifier
        :param list[str] ids: ids to filter content by
        :param bool include_filter_ids: Includes associated content view filter ids in response
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "repository_id",
            "content_view_filter_id",
            "organization_id",
            "content_view_version_id",
            "content_view_filter_rule_id",
            "environment_id",
            "ids",
            "include_filter_ids",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repositories_repository_id_docker_manifests" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and (
            "repository_id" not in params or params["repository_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `repository_id` when calling `get_repositories_repository_id_docker_manifests`"
            )  # noqa: E501
        # verify the required parameter 'content_view_filter_id' is set
        if self.api_client.client_side_validation and (
            "content_view_filter_id" not in params
            or params["content_view_filter_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_filter_id` when calling `get_repositories_repository_id_docker_manifests`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_id" in params:
            path_params["repository_id"] = params["repository_id"]  # noqa: E501

        query_params = []
        if "content_view_filter_id" in params:
            query_params.append(
                ("content_view_filter_id", params["content_view_filter_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "content_view_version_id" in params:
            query_params.append(
                ("content_view_version_id", params["content_view_version_id"])
            )  # noqa: E501
        if "content_view_filter_rule_id" in params:
            query_params.append(
                ("content_view_filter_rule_id", params["content_view_filter_rule_id"])
            )  # noqa: E501
        if "environment_id" in params:
            query_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "ids" in params:
            query_params.append(("ids", params["ids"]))  # noqa: E501
            collection_formats["ids"] = "csv"  # noqa: E501
        if "include_filter_ids" in params:
            query_params.append(
                ("include_filter_ids", params["include_filter_ids"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/repositories/{repository_id}/docker_manifests",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repositories_repository_id_docker_manifests_id(
        self, repository_id, id, **kwargs
    ):  # noqa: E501
        """Show a docker manifest  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories_repository_id_docker_manifests_id(repository_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float repository_id: repository identifier (required)
        :param str id: :a_resource identifier (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_repositories_repository_id_docker_manifests_id_with_http_info(
                    repository_id, id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_repositories_repository_id_docker_manifests_id_with_http_info(
                repository_id, id, **kwargs
            )  # noqa: E501
            return data

    def get_repositories_repository_id_docker_manifests_id_with_http_info(
        self, repository_id, id, **kwargs
    ):  # noqa: E501
        """Show a docker manifest  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories_repository_id_docker_manifests_id_with_http_info(repository_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float repository_id: repository identifier (required)
        :param str id: :a_resource identifier (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_id", "id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repositories_repository_id_docker_manifests_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and (
            "repository_id" not in params or params["repository_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `repository_id` when calling `get_repositories_repository_id_docker_manifests_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_repositories_repository_id_docker_manifests_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_id" in params:
            path_params["repository_id"] = params["repository_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/repositories/{repository_id}/docker_manifests/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
