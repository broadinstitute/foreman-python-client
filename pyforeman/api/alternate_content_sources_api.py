# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class AlternateContentSourcesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_alternate_content_sources_id(self, id, **kwargs):  # noqa: E501
        """Destroy an alternate content source.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_alternate_content_sources_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Alternate content source ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_alternate_content_sources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_alternate_content_sources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_alternate_content_sources_id_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Destroy an alternate content source.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_alternate_content_sources_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Alternate content source ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_alternate_content_sources_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_alternate_content_sources_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/alternate_content_sources/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_alternate_content_sources(self, **kwargs):  # noqa: E501
        """List alternate content sources.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alternate_content_sources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of the alternate content source
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_alternate_content_sources_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_alternate_content_sources_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def get_alternate_content_sources_with_http_info(self, **kwargs):  # noqa: E501
        """List alternate content sources.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alternate_content_sources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of the alternate content source
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "name",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alternate_content_sources" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/alternate_content_sources",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_alternate_content_sources_id(self, id, **kwargs):  # noqa: E501
        """Show an alternate content source.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alternate_content_sources_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Alternate content source ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_alternate_content_sources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_alternate_content_sources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_alternate_content_sources_id_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Show an alternate content source.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alternate_content_sources_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Alternate content source ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alternate_content_sources_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_alternate_content_sources_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/alternate_content_sources/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_alternate_content_sources(self, **kwargs):  # noqa: E501
        """Create an alternate content source to download content from during repository syncing.  Note: alternate content sources are global and affect ALL sync actions on their smart proxies regardless of organization.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_alternate_content_sources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: The content type for the Alternate Content Source
        :param str alternate_content_source_type: The Alternate Content Source type
        :param str name: Name of the alternate content source
        :param str description: Description for the alternate content source
        :param str base_url: Base URL for finding alternate content
        :param list[str] subpaths: Path suffixes for finding alternate content
        :param list[str] smart_proxy_ids: Ids of smart proxies to associate
        :param list[str] smart_proxy_names: Names of smart proxies to associate
        :param str upstream_username: Basic authentication username
        :param str upstream_password: Basic authentication password
        :param float ssl_ca_cert_id: Identifier of the content credential containing the SSL CA Cert
        :param float ssl_client_cert_id: Identifier of the content credential containing the SSL Client Cert
        :param float ssl_client_key_id: Identifier of the content credential containing the SSL Client Key
        :param bool verify_ssl: If SSL should be verified for the upstream URL
        :param bool use_http_proxies: If the smart proxies' assigned HTTP proxies should be used
        :param list[str] product_ids: IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_alternate_content_sources_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_alternate_content_sources_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def post_alternate_content_sources_with_http_info(self, **kwargs):  # noqa: E501
        """Create an alternate content source to download content from during repository syncing.  Note: alternate content sources are global and affect ALL sync actions on their smart proxies regardless of organization.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_alternate_content_sources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: The content type for the Alternate Content Source
        :param str alternate_content_source_type: The Alternate Content Source type
        :param str name: Name of the alternate content source
        :param str description: Description for the alternate content source
        :param str base_url: Base URL for finding alternate content
        :param list[str] subpaths: Path suffixes for finding alternate content
        :param list[str] smart_proxy_ids: Ids of smart proxies to associate
        :param list[str] smart_proxy_names: Names of smart proxies to associate
        :param str upstream_username: Basic authentication username
        :param str upstream_password: Basic authentication password
        :param float ssl_ca_cert_id: Identifier of the content credential containing the SSL CA Cert
        :param float ssl_client_cert_id: Identifier of the content credential containing the SSL Client Cert
        :param float ssl_client_key_id: Identifier of the content credential containing the SSL Client Key
        :param bool verify_ssl: If SSL should be verified for the upstream URL
        :param bool use_http_proxies: If the smart proxies' assigned HTTP proxies should be used
        :param list[str] product_ids: IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_type",
            "alternate_content_source_type",
            "name",
            "description",
            "base_url",
            "subpaths",
            "smart_proxy_ids",
            "smart_proxy_names",
            "upstream_username",
            "upstream_password",
            "ssl_ca_cert_id",
            "ssl_client_cert_id",
            "ssl_client_key_id",
            "verify_ssl",
            "use_http_proxies",
            "product_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_alternate_content_sources" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "content_type" in params:
            form_params.append(("content_type", params["content_type"]))  # noqa: E501
        if "alternate_content_source_type" in params:
            form_params.append(
                (
                    "alternate_content_source_type",
                    params["alternate_content_source_type"],
                )
            )  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "base_url" in params:
            form_params.append(("base_url", params["base_url"]))  # noqa: E501
        if "subpaths" in params:
            form_params.append(("subpaths", params["subpaths"]))  # noqa: E501
            collection_formats["subpaths"] = "csv"  # noqa: E501
        if "smart_proxy_ids" in params:
            form_params.append(
                ("smart_proxy_ids", params["smart_proxy_ids"])
            )  # noqa: E501
            collection_formats["smart_proxy_ids"] = "csv"  # noqa: E501
        if "smart_proxy_names" in params:
            form_params.append(
                ("smart_proxy_names", params["smart_proxy_names"])
            )  # noqa: E501
            collection_formats["smart_proxy_names"] = "csv"  # noqa: E501
        if "upstream_username" in params:
            form_params.append(
                ("upstream_username", params["upstream_username"])
            )  # noqa: E501
        if "upstream_password" in params:
            form_params.append(
                ("upstream_password", params["upstream_password"])
            )  # noqa: E501
        if "ssl_ca_cert_id" in params:
            form_params.append(
                ("ssl_ca_cert_id", params["ssl_ca_cert_id"])
            )  # noqa: E501
        if "ssl_client_cert_id" in params:
            form_params.append(
                ("ssl_client_cert_id", params["ssl_client_cert_id"])
            )  # noqa: E501
        if "ssl_client_key_id" in params:
            form_params.append(
                ("ssl_client_key_id", params["ssl_client_key_id"])
            )  # noqa: E501
        if "verify_ssl" in params:
            form_params.append(("verify_ssl", params["verify_ssl"]))  # noqa: E501
        if "use_http_proxies" in params:
            form_params.append(
                ("use_http_proxies", params["use_http_proxies"])
            )  # noqa: E501
        if "product_ids" in params:
            form_params.append(("product_ids", params["product_ids"]))  # noqa: E501
            collection_formats["product_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/alternate_content_sources",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_alternate_content_sources_id_refresh(self, id, **kwargs):  # noqa: E501
        """Refresh an alternate content source. Refreshing, like repository syncing, is required before using an alternate content source.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_alternate_content_sources_id_refresh(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Alternate content source ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_alternate_content_sources_id_refresh_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_alternate_content_sources_id_refresh_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def post_alternate_content_sources_id_refresh_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Refresh an alternate content source. Refreshing, like repository syncing, is required before using an alternate content source.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_alternate_content_sources_id_refresh_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Alternate content source ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_alternate_content_sources_id_refresh" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_alternate_content_sources_id_refresh`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/alternate_content_sources/{id}/refresh",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_alternate_content_sources_id(self, id, **kwargs):  # noqa: E501
        """Update an alternate content source.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_alternate_content_sources_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Alternate content source ID (required)
        :param str name: Name of the alternate content source
        :param str description: Description for the alternate content source
        :param str base_url: Base URL for finding alternate content
        :param list[str] subpaths: Path suffixes for finding alternate content
        :param list[str] smart_proxy_ids: Ids of smart proxies to associate
        :param list[str] smart_proxy_names: Names of smart proxies to associate
        :param str upstream_username: Basic authentication username
        :param str upstream_password: Basic authentication password
        :param float ssl_ca_cert_id: Identifier of the content credential containing the SSL CA Cert
        :param float ssl_client_cert_id: Identifier of the content credential containing the SSL Client Cert
        :param float ssl_client_key_id: Identifier of the content credential containing the SSL Client Key
        :param bool verify_ssl: If SSL should be verified for the upstream URL
        :param bool use_http_proxies: If the smart proxies' assigned HTTP proxies should be used
        :param list[str] product_ids: IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_alternate_content_sources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_alternate_content_sources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_alternate_content_sources_id_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Update an alternate content source.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_alternate_content_sources_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Alternate content source ID (required)
        :param str name: Name of the alternate content source
        :param str description: Description for the alternate content source
        :param str base_url: Base URL for finding alternate content
        :param list[str] subpaths: Path suffixes for finding alternate content
        :param list[str] smart_proxy_ids: Ids of smart proxies to associate
        :param list[str] smart_proxy_names: Names of smart proxies to associate
        :param str upstream_username: Basic authentication username
        :param str upstream_password: Basic authentication password
        :param float ssl_ca_cert_id: Identifier of the content credential containing the SSL CA Cert
        :param float ssl_client_cert_id: Identifier of the content credential containing the SSL Client Cert
        :param float ssl_client_key_id: Identifier of the content credential containing the SSL Client Key
        :param bool verify_ssl: If SSL should be verified for the upstream URL
        :param bool use_http_proxies: If the smart proxies' assigned HTTP proxies should be used
        :param list[str] product_ids: IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "name",
            "description",
            "base_url",
            "subpaths",
            "smart_proxy_ids",
            "smart_proxy_names",
            "upstream_username",
            "upstream_password",
            "ssl_ca_cert_id",
            "ssl_client_cert_id",
            "ssl_client_key_id",
            "verify_ssl",
            "use_http_proxies",
            "product_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_alternate_content_sources_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_alternate_content_sources_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "base_url" in params:
            form_params.append(("base_url", params["base_url"]))  # noqa: E501
        if "subpaths" in params:
            form_params.append(("subpaths", params["subpaths"]))  # noqa: E501
            collection_formats["subpaths"] = "csv"  # noqa: E501
        if "smart_proxy_ids" in params:
            form_params.append(
                ("smart_proxy_ids", params["smart_proxy_ids"])
            )  # noqa: E501
            collection_formats["smart_proxy_ids"] = "csv"  # noqa: E501
        if "smart_proxy_names" in params:
            form_params.append(
                ("smart_proxy_names", params["smart_proxy_names"])
            )  # noqa: E501
            collection_formats["smart_proxy_names"] = "csv"  # noqa: E501
        if "upstream_username" in params:
            form_params.append(
                ("upstream_username", params["upstream_username"])
            )  # noqa: E501
        if "upstream_password" in params:
            form_params.append(
                ("upstream_password", params["upstream_password"])
            )  # noqa: E501
        if "ssl_ca_cert_id" in params:
            form_params.append(
                ("ssl_ca_cert_id", params["ssl_ca_cert_id"])
            )  # noqa: E501
        if "ssl_client_cert_id" in params:
            form_params.append(
                ("ssl_client_cert_id", params["ssl_client_cert_id"])
            )  # noqa: E501
        if "ssl_client_key_id" in params:
            form_params.append(
                ("ssl_client_key_id", params["ssl_client_key_id"])
            )  # noqa: E501
        if "verify_ssl" in params:
            form_params.append(("verify_ssl", params["verify_ssl"]))  # noqa: E501
        if "use_http_proxies" in params:
            form_params.append(
                ("use_http_proxies", params["use_http_proxies"])
            )  # noqa: E501
        if "product_ids" in params:
            form_params.append(("product_ids", params["product_ids"]))  # noqa: E501
            collection_formats["product_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/alternate_content_sources/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
