# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class LifecycleEnvironmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_environments_id(self, id, organization_id, **kwargs):  # noqa: E501
        """Destroy an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_environments_id(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the environment (required)
        :param float organization_id: organization identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_environments_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_environments_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def delete_environments_id_with_http_info(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Destroy an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_environments_id_with_http_info(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the environment (required)
        :param float organization_id: organization identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_environments_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_environments_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_environments_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/environments/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_organizations_organization_id_environments_id(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Destroy an environment in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_organization_id_environments_id(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the environment (required)
        :param float organization_id: organization identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_organizations_organization_id_environments_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_organizations_organization_id_environments_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def delete_organizations_organization_id_environments_id_with_http_info(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Destroy an environment in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_organization_id_environments_id_with_http_info(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the environment (required)
        :param float organization_id: organization identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_organization_id_environments_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_organizations_organization_id_environments_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_organizations_organization_id_environments_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/environments/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_environments(self, organization_id, **kwargs):  # noqa: E501
        """List environments in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environments(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param bool library: set true if you want to see only library environments
        :param str name: filter only environments containing this name
        :param str label: filter only environments containing this label
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_environments_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_environments_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_environments_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """List environments in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environments_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param bool library: set true if you want to see only library environments
        :param str name: filter only environments containing this name
        :param str label: filter only environments containing this label
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "library",
            "name",
            "label",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environments" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_environments`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "library" in params:
            query_params.append(("library", params["library"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "label" in params:
            query_params.append(("label", params["label"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/environments",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_environments_id(self, id, organization_id, **kwargs):  # noqa: E501
        """Show an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environments_id(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the environment (required)
        :param float organization_id: ID of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_environments_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_environments_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_environments_id_with_http_info(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Show an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environments_id_with_http_info(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the environment (required)
        :param float organization_id: ID of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environments_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_environments_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_environments_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/environments/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_environments(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """List environments in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_environments(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param bool library: set true if you want to see only library environments
        :param str name: filter only environments containing this name
        :param str label: filter only environments containing this label
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_environments_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_organization_id_environments_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_environments_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """List environments in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_environments_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param bool library: set true if you want to see only library environments
        :param str name: filter only environments containing this name
        :param str label: filter only environments containing this label
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "library",
            "name",
            "label",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_environments" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_environments`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "library" in params:
            query_params.append(("library", params["library"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "label" in params:
            query_params.append(("label", params["label"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/environments",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_environments_environment_id(
        self, organization_id, environment_id, id, **kwargs
    ):  # noqa: E501
        """Show an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_environments_environment_id(organization_id, environment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float environment_id: (required)
        :param float id: ID of the environment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_environments_environment_id_with_http_info(
                organization_id, environment_id, id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_environments_environment_id_with_http_info(
                organization_id, environment_id, id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_environments_environment_id_with_http_info(
        self, organization_id, environment_id, id, **kwargs
    ):  # noqa: E501
        """Show an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_environments_environment_id_with_http_info(organization_id, environment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float environment_id: (required)
        :param float id: ID of the environment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "environment_id", "id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_environments_environment_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_environments_environment_id`"
            )  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and (
            "environment_id" not in params or params["environment_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `environment_id` when calling `get_organizations_organization_id_environments_environment_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_organizations_organization_id_environments_environment_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "environment_id" in params:
            path_params["environment_id"] = params["environment_id"]  # noqa: E501

        query_params = []
        if "id" in params:
            query_params.append(("id", params["id"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/environments/{environment_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_environments_paths(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """List environment paths  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_environments_paths(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param float content_source_id: Show whether each lifecycle environment is associated with the given Smart Proxy id.
        :param str permission_type:       The associated permission type. One of (readable | promotable)       Default: readable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_environments_paths_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_environments_paths_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_environments_paths_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """List environment paths  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_environments_paths_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param float content_source_id: Show whether each lifecycle environment is associated with the given Smart Proxy id.
        :param str permission_type:       The associated permission type. One of (readable | promotable)       Default: readable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "content_source_id",
            "permission_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_environments_paths"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_environments_paths`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "content_source_id" in params:
            query_params.append(
                ("content_source_id", params["content_source_id"])
            )  # noqa: E501
        if "permission_type" in params:
            query_params.append(
                ("permission_type", params["permission_type"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/environments/paths",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_environments(
        self, organization_id, name, prior_id, **kwargs
    ):  # noqa: E501
        """Create an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_environments(organization_id, name, prior_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: name of organization (required)
        :param str name: name of the environment (required)
        :param float prior_id:       ID of an environment that is prior to the new environment in the chain. It has to be       either the ID of Library or the ID of an environment at the end of a chain.  (required)
        :param str label: label of the environment
        :param str description: description of the environment
        :param str registry_name_pattern: pattern for container image names
        :param bool registry_unauthenticated_pull: allow unauthenticed pull of container images
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_environments_with_http_info(
                organization_id, name, prior_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_environments_with_http_info(
                organization_id, name, prior_id, **kwargs
            )  # noqa: E501
            return data

    def post_environments_with_http_info(
        self, organization_id, name, prior_id, **kwargs
    ):  # noqa: E501
        """Create an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_environments_with_http_info(organization_id, name, prior_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: name of organization (required)
        :param str name: name of the environment (required)
        :param float prior_id:       ID of an environment that is prior to the new environment in the chain. It has to be       either the ID of Library or the ID of an environment at the end of a chain.  (required)
        :param str label: label of the environment
        :param str description: description of the environment
        :param str registry_name_pattern: pattern for container image names
        :param bool registry_unauthenticated_pull: allow unauthenticed pull of container images
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "name",
            "prior_id",
            "label",
            "description",
            "registry_name_pattern",
            "registry_unauthenticated_pull",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_environments" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_environments`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_environments`"
            )  # noqa: E501
        # verify the required parameter 'prior_id' is set
        if self.api_client.client_side_validation and (
            "prior_id" not in params or params["prior_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `prior_id` when calling `post_environments`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "prior_id" in params:
            form_params.append(("prior_id", params["prior_id"]))  # noqa: E501
        if "label" in params:
            form_params.append(("label", params["label"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "registry_name_pattern" in params:
            form_params.append(
                ("registry_name_pattern", params["registry_name_pattern"])
            )  # noqa: E501
        if "registry_unauthenticated_pull" in params:
            form_params.append(
                (
                    "registry_unauthenticated_pull",
                    params["registry_unauthenticated_pull"],
                )
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/environments",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organizations_organization_id_environments(
        self, organization_id, name, prior_id, **kwargs
    ):  # noqa: E501
        """Create an environment in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_environments(organization_id, name, prior_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: name of organization (required)
        :param str name: name of the environment (required)
        :param float prior_id:       ID of an environment that is prior to the new environment in the chain. It has to be       either the ID of Library or the ID of an environment at the end of a chain.  (required)
        :param str label: label of the environment
        :param str description: description of the environment
        :param str registry_name_pattern: pattern for container image names
        :param bool registry_unauthenticated_pull: allow unauthenticed pull of container images
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organizations_organization_id_environments_with_http_info(
                organization_id, name, prior_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.post_organizations_organization_id_environments_with_http_info(
                organization_id, name, prior_id, **kwargs
            )  # noqa: E501
            return data

    def post_organizations_organization_id_environments_with_http_info(
        self, organization_id, name, prior_id, **kwargs
    ):  # noqa: E501
        """Create an environment in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_environments_with_http_info(organization_id, name, prior_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: name of organization (required)
        :param str name: name of the environment (required)
        :param float prior_id:       ID of an environment that is prior to the new environment in the chain. It has to be       either the ID of Library or the ID of an environment at the end of a chain.  (required)
        :param str label: label of the environment
        :param str description: description of the environment
        :param str registry_name_pattern: pattern for container image names
        :param bool registry_unauthenticated_pull: allow unauthenticed pull of container images
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "name",
            "prior_id",
            "label",
            "description",
            "registry_name_pattern",
            "registry_unauthenticated_pull",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations_organization_id_environments" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organizations_organization_id_environments`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_organizations_organization_id_environments`"
            )  # noqa: E501
        # verify the required parameter 'prior_id' is set
        if self.api_client.client_side_validation and (
            "prior_id" not in params or params["prior_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `prior_id` when calling `post_organizations_organization_id_environments`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "prior_id" in params:
            form_params.append(("prior_id", params["prior_id"]))  # noqa: E501
        if "label" in params:
            form_params.append(("label", params["label"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "registry_name_pattern" in params:
            form_params.append(
                ("registry_name_pattern", params["registry_name_pattern"])
            )  # noqa: E501
        if "registry_unauthenticated_pull" in params:
            form_params.append(
                (
                    "registry_unauthenticated_pull",
                    params["registry_unauthenticated_pull"],
                )
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/environments",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_environments_id(self, id, organization_id, **kwargs):  # noqa: E501
        """Update an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_environments_id(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the environment (required)
        :param float organization_id: name of the organization (required)
        :param str new_name: new name to be given to the environment
        :param str description: description of the environment
        :param str registry_name_pattern: pattern for container image names
        :param bool registry_unauthenticated_pull: allow unauthenticed pull of container images
        :param bool _async: Do not wait for the update action to finish. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_environments_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_environments_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_environments_id_with_http_info(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Update an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_environments_id_with_http_info(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the environment (required)
        :param float organization_id: name of the organization (required)
        :param str new_name: new name to be given to the environment
        :param str description: description of the environment
        :param str registry_name_pattern: pattern for container image names
        :param bool registry_unauthenticated_pull: allow unauthenticed pull of container images
        :param bool _async: Do not wait for the update action to finish. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "organization_id",
            "new_name",
            "description",
            "registry_name_pattern",
            "registry_unauthenticated_pull",
            "_async",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_environments_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_environments_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_environments_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "new_name" in params:
            form_params.append(("new_name", params["new_name"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "registry_name_pattern" in params:
            form_params.append(
                ("registry_name_pattern", params["registry_name_pattern"])
            )  # noqa: E501
        if "registry_unauthenticated_pull" in params:
            form_params.append(
                (
                    "registry_unauthenticated_pull",
                    params["registry_unauthenticated_pull"],
                )
            )  # noqa: E501
        if "_async" in params:
            form_params.append(("async", params["_async"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/environments/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_organization_id_environments_id(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Update an environment in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_environments_id(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the environment (required)
        :param float organization_id: name of the organization (required)
        :param str new_name: new name to be given to the environment
        :param str description: description of the environment
        :param str registry_name_pattern: pattern for container image names
        :param bool registry_unauthenticated_pull: allow unauthenticed pull of container images
        :param bool _async: Do not wait for the update action to finish. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.put_organizations_organization_id_environments_id_with_http_info(
                    id, organization_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_organizations_organization_id_environments_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_organizations_organization_id_environments_id_with_http_info(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Update an environment in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_environments_id_with_http_info(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the environment (required)
        :param float organization_id: name of the organization (required)
        :param str new_name: new name to be given to the environment
        :param str description: description of the environment
        :param str registry_name_pattern: pattern for container image names
        :param bool registry_unauthenticated_pull: allow unauthenticed pull of container images
        :param bool _async: Do not wait for the update action to finish. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "organization_id",
            "new_name",
            "description",
            "registry_name_pattern",
            "registry_unauthenticated_pull",
            "_async",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_organization_id_environments_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_organizations_organization_id_environments_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organizations_organization_id_environments_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "new_name" in params:
            form_params.append(("new_name", params["new_name"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "registry_name_pattern" in params:
            form_params.append(
                ("registry_name_pattern", params["registry_name_pattern"])
            )  # noqa: E501
        if "registry_unauthenticated_pull" in params:
            form_params.append(
                (
                    "registry_unauthenticated_pull",
                    params["registry_unauthenticated_pull"],
                )
            )  # noqa: E501
        if "_async" in params:
            form_params.append(("async", params["_async"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/environments/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
