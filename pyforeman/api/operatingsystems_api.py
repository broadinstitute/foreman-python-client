# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class OperatingsystemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_operatingsystems_id(self, id, **kwargs):  # noqa: E501
        """Delete an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_operatingsystems_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_operatingsystems_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_operatingsystems_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_operatingsystems_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_operatingsystems_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_operatingsystems_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_operatingsystems_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_architectures_architecture_id_operatingsystems(
        self, architecture_id, medium_id, ptable_id, provisioning_template_id, **kwargs
    ):  # noqa: E501
        """List all operating systems for nested architecture  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_architectures_architecture_id_operatingsystems(architecture_id, medium_id, ptable_id, provisioning_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str architecture_id: ID of architecture (required)
        :param str medium_id: ID of medium (required)
        :param str ptable_id: ID of partition table (required)
        :param str provisioning_template_id: ID of template (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] os_parameters_attributes: Array of parameters
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_architectures_architecture_id_operatingsystems_with_http_info(
                    architecture_id,
                    medium_id,
                    ptable_id,
                    provisioning_template_id,
                    **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_architectures_architecture_id_operatingsystems_with_http_info(
                architecture_id,
                medium_id,
                ptable_id,
                provisioning_template_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_architectures_architecture_id_operatingsystems_with_http_info(
        self, architecture_id, medium_id, ptable_id, provisioning_template_id, **kwargs
    ):  # noqa: E501
        """List all operating systems for nested architecture  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_architectures_architecture_id_operatingsystems_with_http_info(architecture_id, medium_id, ptable_id, provisioning_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str architecture_id: ID of architecture (required)
        :param str medium_id: ID of medium (required)
        :param str ptable_id: ID of partition table (required)
        :param str provisioning_template_id: ID of template (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] os_parameters_attributes: Array of parameters
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "architecture_id",
            "medium_id",
            "ptable_id",
            "provisioning_template_id",
            "location_id",
            "organization_id",
            "os_parameters_attributes",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architectures_architecture_id_operatingsystems"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'architecture_id' is set
        if self.api_client.client_side_validation and (
            "architecture_id" not in params or params["architecture_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `architecture_id` when calling `get_architectures_architecture_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'medium_id' is set
        if self.api_client.client_side_validation and (
            "medium_id" not in params or params["medium_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `medium_id` when calling `get_architectures_architecture_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'ptable_id' is set
        if self.api_client.client_side_validation and (
            "ptable_id" not in params or params["ptable_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ptable_id` when calling `get_architectures_architecture_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'provisioning_template_id' is set
        if self.api_client.client_side_validation and (
            "provisioning_template_id" not in params
            or params["provisioning_template_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `provisioning_template_id` when calling `get_architectures_architecture_id_operatingsystems`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "architecture_id" in params:
            path_params["architecture_id"] = params["architecture_id"]  # noqa: E501

        query_params = []
        if "medium_id" in params:
            query_params.append(("medium_id", params["medium_id"]))  # noqa: E501
        if "ptable_id" in params:
            query_params.append(("ptable_id", params["ptable_id"]))  # noqa: E501
        if "provisioning_template_id" in params:
            query_params.append(
                ("provisioning_template_id", params["provisioning_template_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "os_parameters_attributes" in params:
            query_params.append(
                ("os_parameters_attributes", params["os_parameters_attributes"])
            )  # noqa: E501
            collection_formats["os_parameters_attributes"] = "csv"  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/architectures/{architecture_id}/operatingsystems",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_media_medium_id_operatingsystems(
        self, medium_id, architecture_id, ptable_id, provisioning_template_id, **kwargs
    ):  # noqa: E501
        """List all operating systems for nested medium  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_media_medium_id_operatingsystems(medium_id, architecture_id, ptable_id, provisioning_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str medium_id: ID of medium (required)
        :param str architecture_id: ID of architecture (required)
        :param str ptable_id: ID of partition table (required)
        :param str provisioning_template_id: ID of template (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] os_parameters_attributes: Array of parameters
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_media_medium_id_operatingsystems_with_http_info(
                medium_id,
                architecture_id,
                ptable_id,
                provisioning_template_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_media_medium_id_operatingsystems_with_http_info(
                medium_id,
                architecture_id,
                ptable_id,
                provisioning_template_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_media_medium_id_operatingsystems_with_http_info(
        self, medium_id, architecture_id, ptable_id, provisioning_template_id, **kwargs
    ):  # noqa: E501
        """List all operating systems for nested medium  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_media_medium_id_operatingsystems_with_http_info(medium_id, architecture_id, ptable_id, provisioning_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str medium_id: ID of medium (required)
        :param str architecture_id: ID of architecture (required)
        :param str ptable_id: ID of partition table (required)
        :param str provisioning_template_id: ID of template (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] os_parameters_attributes: Array of parameters
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "medium_id",
            "architecture_id",
            "ptable_id",
            "provisioning_template_id",
            "location_id",
            "organization_id",
            "os_parameters_attributes",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_media_medium_id_operatingsystems" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'medium_id' is set
        if self.api_client.client_side_validation and (
            "medium_id" not in params or params["medium_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `medium_id` when calling `get_media_medium_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'architecture_id' is set
        if self.api_client.client_side_validation and (
            "architecture_id" not in params or params["architecture_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `architecture_id` when calling `get_media_medium_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'ptable_id' is set
        if self.api_client.client_side_validation and (
            "ptable_id" not in params or params["ptable_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ptable_id` when calling `get_media_medium_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'provisioning_template_id' is set
        if self.api_client.client_side_validation and (
            "provisioning_template_id" not in params
            or params["provisioning_template_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `provisioning_template_id` when calling `get_media_medium_id_operatingsystems`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "medium_id" in params:
            path_params["medium_id"] = params["medium_id"]  # noqa: E501

        query_params = []
        if "architecture_id" in params:
            query_params.append(
                ("architecture_id", params["architecture_id"])
            )  # noqa: E501
        if "ptable_id" in params:
            query_params.append(("ptable_id", params["ptable_id"]))  # noqa: E501
        if "provisioning_template_id" in params:
            query_params.append(
                ("provisioning_template_id", params["provisioning_template_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "os_parameters_attributes" in params:
            query_params.append(
                ("os_parameters_attributes", params["os_parameters_attributes"])
            )  # noqa: E501
            collection_formats["os_parameters_attributes"] = "csv"  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/media/{medium_id}/operatingsystems",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_operatingsystems(
        self, architecture_id, medium_id, ptable_id, provisioning_template_id, **kwargs
    ):  # noqa: E501
        """List all operating systems  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems(architecture_id, medium_id, ptable_id, provisioning_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str architecture_id: ID of architecture (required)
        :param str medium_id: ID of medium (required)
        :param str ptable_id: ID of partition table (required)
        :param str provisioning_template_id: ID of template (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] os_parameters_attributes: Array of parameters
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_operatingsystems_with_http_info(
                architecture_id,
                medium_id,
                ptable_id,
                provisioning_template_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_operatingsystems_with_http_info(
                architecture_id,
                medium_id,
                ptable_id,
                provisioning_template_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_operatingsystems_with_http_info(
        self, architecture_id, medium_id, ptable_id, provisioning_template_id, **kwargs
    ):  # noqa: E501
        """List all operating systems  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_with_http_info(architecture_id, medium_id, ptable_id, provisioning_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str architecture_id: ID of architecture (required)
        :param str medium_id: ID of medium (required)
        :param str ptable_id: ID of partition table (required)
        :param str provisioning_template_id: ID of template (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] os_parameters_attributes: Array of parameters
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "architecture_id",
            "medium_id",
            "ptable_id",
            "provisioning_template_id",
            "location_id",
            "organization_id",
            "os_parameters_attributes",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_operatingsystems" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'architecture_id' is set
        if self.api_client.client_side_validation and (
            "architecture_id" not in params or params["architecture_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `architecture_id` when calling `get_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'medium_id' is set
        if self.api_client.client_side_validation and (
            "medium_id" not in params or params["medium_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `medium_id` when calling `get_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'ptable_id' is set
        if self.api_client.client_side_validation and (
            "ptable_id" not in params or params["ptable_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ptable_id` when calling `get_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'provisioning_template_id' is set
        if self.api_client.client_side_validation and (
            "provisioning_template_id" not in params
            or params["provisioning_template_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `provisioning_template_id` when calling `get_operatingsystems`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "architecture_id" in params:
            query_params.append(
                ("architecture_id", params["architecture_id"])
            )  # noqa: E501
        if "medium_id" in params:
            query_params.append(("medium_id", params["medium_id"]))  # noqa: E501
        if "ptable_id" in params:
            query_params.append(("ptable_id", params["ptable_id"]))  # noqa: E501
        if "provisioning_template_id" in params:
            query_params.append(
                ("provisioning_template_id", params["provisioning_template_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "os_parameters_attributes" in params:
            query_params.append(
                ("os_parameters_attributes", params["os_parameters_attributes"])
            )  # noqa: E501
            collection_formats["os_parameters_attributes"] = "csv"  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_operatingsystems_id(self, id, **kwargs):  # noqa: E501
        """Show an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool show_hidden_parameters: Display hidden parameter values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_operatingsystems_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_operatingsystems_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_operatingsystems_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool show_hidden_parameters: Display hidden parameter values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "show_hidden_parameters",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_operatingsystems_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_operatingsystems_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "show_hidden_parameters" in params:
            query_params.append(
                ("show_hidden_parameters", params["show_hidden_parameters"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_operatingsystems_id_bootfiles(self, id, **kwargs):  # noqa: E501
        """List boot files for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_id_bootfiles(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str medium:
        :param str architecture:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_operatingsystems_id_bootfiles_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_operatingsystems_id_bootfiles_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_operatingsystems_id_bootfiles_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List boot files for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_id_bootfiles_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str medium:
        :param str architecture:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "medium",
            "architecture",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_operatingsystems_id_bootfiles" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_operatingsystems_id_bootfiles`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "medium" in params:
            query_params.append(("medium", params["medium"]))  # noqa: E501
        if "architecture" in params:
            query_params.append(("architecture", params["architecture"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{id}/bootfiles",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_provisioning_templates_provisioning_template_id_operatingsystems(
        self, provisioning_template_id, architecture_id, medium_id, ptable_id, **kwargs
    ):  # noqa: E501
        """List all operating systems for nested provisioning template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_templates_provisioning_template_id_operatingsystems(provisioning_template_id, architecture_id, medium_id, ptable_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provisioning_template_id: ID of template (required)
        :param str architecture_id: ID of architecture (required)
        :param str medium_id: ID of medium (required)
        :param str ptable_id: ID of partition table (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] os_parameters_attributes: Array of parameters
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_provisioning_templates_provisioning_template_id_operatingsystems_with_http_info(
                provisioning_template_id,
                architecture_id,
                medium_id,
                ptable_id,
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_provisioning_templates_provisioning_template_id_operatingsystems_with_http_info(
                provisioning_template_id,
                architecture_id,
                medium_id,
                ptable_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_provisioning_templates_provisioning_template_id_operatingsystems_with_http_info(
        self, provisioning_template_id, architecture_id, medium_id, ptable_id, **kwargs
    ):  # noqa: E501
        """List all operating systems for nested provisioning template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_templates_provisioning_template_id_operatingsystems_with_http_info(provisioning_template_id, architecture_id, medium_id, ptable_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provisioning_template_id: ID of template (required)
        :param str architecture_id: ID of architecture (required)
        :param str medium_id: ID of medium (required)
        :param str ptable_id: ID of partition table (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] os_parameters_attributes: Array of parameters
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "provisioning_template_id",
            "architecture_id",
            "medium_id",
            "ptable_id",
            "location_id",
            "organization_id",
            "os_parameters_attributes",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provisioning_templates_provisioning_template_id_operatingsystems"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'provisioning_template_id' is set
        if self.api_client.client_side_validation and (
            "provisioning_template_id" not in params
            or params["provisioning_template_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `provisioning_template_id` when calling `get_provisioning_templates_provisioning_template_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'architecture_id' is set
        if self.api_client.client_side_validation and (
            "architecture_id" not in params or params["architecture_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `architecture_id` when calling `get_provisioning_templates_provisioning_template_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'medium_id' is set
        if self.api_client.client_side_validation and (
            "medium_id" not in params or params["medium_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `medium_id` when calling `get_provisioning_templates_provisioning_template_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'ptable_id' is set
        if self.api_client.client_side_validation and (
            "ptable_id" not in params or params["ptable_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ptable_id` when calling `get_provisioning_templates_provisioning_template_id_operatingsystems`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "provisioning_template_id" in params:
            path_params["provisioning_template_id"] = params[
                "provisioning_template_id"
            ]  # noqa: E501

        query_params = []
        if "architecture_id" in params:
            query_params.append(
                ("architecture_id", params["architecture_id"])
            )  # noqa: E501
        if "medium_id" in params:
            query_params.append(("medium_id", params["medium_id"]))  # noqa: E501
        if "ptable_id" in params:
            query_params.append(("ptable_id", params["ptable_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "os_parameters_attributes" in params:
            query_params.append(
                ("os_parameters_attributes", params["os_parameters_attributes"])
            )  # noqa: E501
            collection_formats["os_parameters_attributes"] = "csv"  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/provisioning_templates/{provisioning_template_id}/operatingsystems",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_ptables_ptable_id_operatingsystems(
        self, ptable_id, architecture_id, medium_id, provisioning_template_id, **kwargs
    ):  # noqa: E501
        """List all operating systems for nested partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ptables_ptable_id_operatingsystems(ptable_id, architecture_id, medium_id, provisioning_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ptable_id: ID of partition table (required)
        :param str architecture_id: ID of architecture (required)
        :param str medium_id: ID of medium (required)
        :param str provisioning_template_id: ID of template (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] os_parameters_attributes: Array of parameters
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_ptables_ptable_id_operatingsystems_with_http_info(
                ptable_id,
                architecture_id,
                medium_id,
                provisioning_template_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_ptables_ptable_id_operatingsystems_with_http_info(
                ptable_id,
                architecture_id,
                medium_id,
                provisioning_template_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_ptables_ptable_id_operatingsystems_with_http_info(
        self, ptable_id, architecture_id, medium_id, provisioning_template_id, **kwargs
    ):  # noqa: E501
        """List all operating systems for nested partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ptables_ptable_id_operatingsystems_with_http_info(ptable_id, architecture_id, medium_id, provisioning_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ptable_id: ID of partition table (required)
        :param str architecture_id: ID of architecture (required)
        :param str medium_id: ID of medium (required)
        :param str provisioning_template_id: ID of template (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] os_parameters_attributes: Array of parameters
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "ptable_id",
            "architecture_id",
            "medium_id",
            "provisioning_template_id",
            "location_id",
            "organization_id",
            "os_parameters_attributes",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ptables_ptable_id_operatingsystems" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'ptable_id' is set
        if self.api_client.client_side_validation and (
            "ptable_id" not in params or params["ptable_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ptable_id` when calling `get_ptables_ptable_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'architecture_id' is set
        if self.api_client.client_side_validation and (
            "architecture_id" not in params or params["architecture_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `architecture_id` when calling `get_ptables_ptable_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'medium_id' is set
        if self.api_client.client_side_validation and (
            "medium_id" not in params or params["medium_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `medium_id` when calling `get_ptables_ptable_id_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'provisioning_template_id' is set
        if self.api_client.client_side_validation and (
            "provisioning_template_id" not in params
            or params["provisioning_template_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `provisioning_template_id` when calling `get_ptables_ptable_id_operatingsystems`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "ptable_id" in params:
            path_params["ptable_id"] = params["ptable_id"]  # noqa: E501

        query_params = []
        if "architecture_id" in params:
            query_params.append(
                ("architecture_id", params["architecture_id"])
            )  # noqa: E501
        if "medium_id" in params:
            query_params.append(("medium_id", params["medium_id"]))  # noqa: E501
        if "provisioning_template_id" in params:
            query_params.append(
                ("provisioning_template_id", params["provisioning_template_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "os_parameters_attributes" in params:
            query_params.append(
                ("os_parameters_attributes", params["os_parameters_attributes"])
            )  # noqa: E501
            collection_formats["os_parameters_attributes"] = "csv"  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/ptables/{ptable_id}/operatingsystems",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_operatingsystems(
        self, operatingsystem_name, operatingsystem_major, **kwargs
    ):  # noqa: E501
        """Create an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_operatingsystems(operatingsystem_name, operatingsystem_major, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operatingsystem_name: (required)
        :param str operatingsystem_major: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str operatingsystem_minor:
        :param str operatingsystem_description:
        :param str operatingsystem_family:
        :param str operatingsystem_release_name:
        :param list[str] operatingsystem_os_parameters_attributes: Array of parameters
        :param str operatingsystem_password_hash: Root password hash function to use
        :param list[str] operatingsystem_architecture_ids: IDs of associated architectures
        :param list[str] operatingsystem_provisioning_template_ids: IDs of associated provisioning templates
        :param list[str] operatingsystem_medium_ids: IDs of associated media
        :param list[str] operatingsystem_ptable_ids: IDs of associated partition tables
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_operatingsystems_with_http_info(
                operatingsystem_name, operatingsystem_major, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_operatingsystems_with_http_info(
                operatingsystem_name, operatingsystem_major, **kwargs
            )  # noqa: E501
            return data

    def post_operatingsystems_with_http_info(
        self, operatingsystem_name, operatingsystem_major, **kwargs
    ):  # noqa: E501
        """Create an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_operatingsystems_with_http_info(operatingsystem_name, operatingsystem_major, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str operatingsystem_name: (required)
        :param str operatingsystem_major: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str operatingsystem_minor:
        :param str operatingsystem_description:
        :param str operatingsystem_family:
        :param str operatingsystem_release_name:
        :param list[str] operatingsystem_os_parameters_attributes: Array of parameters
        :param str operatingsystem_password_hash: Root password hash function to use
        :param list[str] operatingsystem_architecture_ids: IDs of associated architectures
        :param list[str] operatingsystem_provisioning_template_ids: IDs of associated provisioning templates
        :param list[str] operatingsystem_medium_ids: IDs of associated media
        :param list[str] operatingsystem_ptable_ids: IDs of associated partition tables
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_name",
            "operatingsystem_major",
            "location_id",
            "organization_id",
            "operatingsystem_minor",
            "operatingsystem_description",
            "operatingsystem_family",
            "operatingsystem_release_name",
            "operatingsystem_os_parameters_attributes",
            "operatingsystem_password_hash",
            "operatingsystem_architecture_ids",
            "operatingsystem_provisioning_template_ids",
            "operatingsystem_medium_ids",
            "operatingsystem_ptable_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_operatingsystems" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_name' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_name" not in params
            or params["operatingsystem_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_name` when calling `post_operatingsystems`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_major' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_major" not in params
            or params["operatingsystem_major"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_major` when calling `post_operatingsystems`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "operatingsystem_name" in params:
            form_params.append(
                ("operatingsystem[name]", params["operatingsystem_name"])
            )  # noqa: E501
        if "operatingsystem_major" in params:
            form_params.append(
                ("operatingsystem[major]", params["operatingsystem_major"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "operatingsystem_minor" in params:
            form_params.append(
                ("operatingsystem[minor]", params["operatingsystem_minor"])
            )  # noqa: E501
        if "operatingsystem_description" in params:
            form_params.append(
                ("operatingsystem[description]", params["operatingsystem_description"])
            )  # noqa: E501
        if "operatingsystem_family" in params:
            form_params.append(
                ("operatingsystem[family]", params["operatingsystem_family"])
            )  # noqa: E501
        if "operatingsystem_release_name" in params:
            form_params.append(
                (
                    "operatingsystem[release_name]",
                    params["operatingsystem_release_name"],
                )
            )  # noqa: E501
        if "operatingsystem_os_parameters_attributes" in params:
            form_params.append(
                (
                    "operatingsystem[os_parameters_attributes]",
                    params["operatingsystem_os_parameters_attributes"],
                )
            )  # noqa: E501
            collection_formats[
                "operatingsystem[os_parameters_attributes]"
            ] = "csv"  # noqa: E501
        if "operatingsystem_password_hash" in params:
            form_params.append(
                (
                    "operatingsystem[password_hash]",
                    params["operatingsystem_password_hash"],
                )
            )  # noqa: E501
        if "operatingsystem_architecture_ids" in params:
            form_params.append(
                (
                    "operatingsystem[architecture_ids]",
                    params["operatingsystem_architecture_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "operatingsystem[architecture_ids]"
            ] = "csv"  # noqa: E501
        if "operatingsystem_provisioning_template_ids" in params:
            form_params.append(
                (
                    "operatingsystem[provisioning_template_ids]",
                    params["operatingsystem_provisioning_template_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "operatingsystem[provisioning_template_ids]"
            ] = "csv"  # noqa: E501
        if "operatingsystem_medium_ids" in params:
            form_params.append(
                ("operatingsystem[medium_ids]", params["operatingsystem_medium_ids"])
            )  # noqa: E501
            collection_formats["operatingsystem[medium_ids]"] = "csv"  # noqa: E501
        if "operatingsystem_ptable_ids" in params:
            form_params.append(
                ("operatingsystem[ptable_ids]", params["operatingsystem_ptable_ids"])
            )  # noqa: E501
            collection_formats["operatingsystem[ptable_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_operatingsystems_id(self, id, **kwargs):  # noqa: E501
        """Update an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_operatingsystems_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str operatingsystem_name:
        :param str operatingsystem_major:
        :param str operatingsystem_minor:
        :param str operatingsystem_description:
        :param str operatingsystem_family:
        :param str operatingsystem_release_name:
        :param list[str] operatingsystem_os_parameters_attributes: Array of parameters
        :param str operatingsystem_password_hash: Root password hash function to use
        :param list[str] operatingsystem_architecture_ids: IDs of associated architectures
        :param list[str] operatingsystem_provisioning_template_ids: IDs of associated provisioning templates
        :param list[str] operatingsystem_medium_ids: IDs of associated media
        :param list[str] operatingsystem_ptable_ids: IDs of associated partition tables
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_operatingsystems_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_operatingsystems_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_operatingsystems_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_operatingsystems_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str operatingsystem_name:
        :param str operatingsystem_major:
        :param str operatingsystem_minor:
        :param str operatingsystem_description:
        :param str operatingsystem_family:
        :param str operatingsystem_release_name:
        :param list[str] operatingsystem_os_parameters_attributes: Array of parameters
        :param str operatingsystem_password_hash: Root password hash function to use
        :param list[str] operatingsystem_architecture_ids: IDs of associated architectures
        :param list[str] operatingsystem_provisioning_template_ids: IDs of associated provisioning templates
        :param list[str] operatingsystem_medium_ids: IDs of associated media
        :param list[str] operatingsystem_ptable_ids: IDs of associated partition tables
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "operatingsystem_name",
            "operatingsystem_major",
            "operatingsystem_minor",
            "operatingsystem_description",
            "operatingsystem_family",
            "operatingsystem_release_name",
            "operatingsystem_os_parameters_attributes",
            "operatingsystem_password_hash",
            "operatingsystem_architecture_ids",
            "operatingsystem_provisioning_template_ids",
            "operatingsystem_medium_ids",
            "operatingsystem_ptable_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_operatingsystems_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_operatingsystems_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "operatingsystem_name" in params:
            form_params.append(
                ("operatingsystem[name]", params["operatingsystem_name"])
            )  # noqa: E501
        if "operatingsystem_major" in params:
            form_params.append(
                ("operatingsystem[major]", params["operatingsystem_major"])
            )  # noqa: E501
        if "operatingsystem_minor" in params:
            form_params.append(
                ("operatingsystem[minor]", params["operatingsystem_minor"])
            )  # noqa: E501
        if "operatingsystem_description" in params:
            form_params.append(
                ("operatingsystem[description]", params["operatingsystem_description"])
            )  # noqa: E501
        if "operatingsystem_family" in params:
            form_params.append(
                ("operatingsystem[family]", params["operatingsystem_family"])
            )  # noqa: E501
        if "operatingsystem_release_name" in params:
            form_params.append(
                (
                    "operatingsystem[release_name]",
                    params["operatingsystem_release_name"],
                )
            )  # noqa: E501
        if "operatingsystem_os_parameters_attributes" in params:
            form_params.append(
                (
                    "operatingsystem[os_parameters_attributes]",
                    params["operatingsystem_os_parameters_attributes"],
                )
            )  # noqa: E501
            collection_formats[
                "operatingsystem[os_parameters_attributes]"
            ] = "csv"  # noqa: E501
        if "operatingsystem_password_hash" in params:
            form_params.append(
                (
                    "operatingsystem[password_hash]",
                    params["operatingsystem_password_hash"],
                )
            )  # noqa: E501
        if "operatingsystem_architecture_ids" in params:
            form_params.append(
                (
                    "operatingsystem[architecture_ids]",
                    params["operatingsystem_architecture_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "operatingsystem[architecture_ids]"
            ] = "csv"  # noqa: E501
        if "operatingsystem_provisioning_template_ids" in params:
            form_params.append(
                (
                    "operatingsystem[provisioning_template_ids]",
                    params["operatingsystem_provisioning_template_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "operatingsystem[provisioning_template_ids]"
            ] = "csv"  # noqa: E501
        if "operatingsystem_medium_ids" in params:
            form_params.append(
                ("operatingsystem[medium_ids]", params["operatingsystem_medium_ids"])
            )  # noqa: E501
            collection_formats["operatingsystem[medium_ids]"] = "csv"  # noqa: E501
        if "operatingsystem_ptable_ids" in params:
            form_params.append(
                ("operatingsystem[ptable_ids]", params["operatingsystem_ptable_ids"])
            )  # noqa: E501
            collection_formats["operatingsystem[ptable_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
