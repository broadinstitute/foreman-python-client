# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class UsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_users_id(self, id, **kwargs):  # noqa: E501
        """Delete a user  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_users_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_users_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_users_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_users_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a user  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_users_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_users_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_users_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/users/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_auth_source_externals_auth_source_external_id_users(
        self,
        auth_source_external_id,
        auth_source_ldap_id,
        usergroup_id,
        role_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users for external authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auth_source_externals_auth_source_external_id_users(auth_source_external_id, auth_source_ldap_id, usergroup_id, role_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float auth_source_external_id: (required)
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param str role_id: ID of role (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_auth_source_externals_auth_source_external_id_users_with_http_info(
                auth_source_external_id,
                auth_source_ldap_id,
                usergroup_id,
                role_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_auth_source_externals_auth_source_external_id_users_with_http_info(
                auth_source_external_id,
                auth_source_ldap_id,
                usergroup_id,
                role_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_auth_source_externals_auth_source_external_id_users_with_http_info(
        self,
        auth_source_external_id,
        auth_source_ldap_id,
        usergroup_id,
        role_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users for external authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auth_source_externals_auth_source_external_id_users_with_http_info(auth_source_external_id, auth_source_ldap_id, usergroup_id, role_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float auth_source_external_id: (required)
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param str role_id: ID of role (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "auth_source_external_id",
            "auth_source_ldap_id",
            "usergroup_id",
            "role_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_source_externals_auth_source_external_id_users"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'auth_source_external_id' is set
        if self.api_client.client_side_validation and (
            "auth_source_external_id" not in params
            or params["auth_source_external_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `auth_source_external_id` when calling `get_auth_source_externals_auth_source_external_id_users`"
            )  # noqa: E501
        # verify the required parameter 'auth_source_ldap_id' is set
        if self.api_client.client_side_validation and (
            "auth_source_ldap_id" not in params or params["auth_source_ldap_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `auth_source_ldap_id` when calling `get_auth_source_externals_auth_source_external_id_users`"
            )  # noqa: E501
        # verify the required parameter 'usergroup_id' is set
        if self.api_client.client_side_validation and (
            "usergroup_id" not in params or params["usergroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `usergroup_id` when calling `get_auth_source_externals_auth_source_external_id_users`"
            )  # noqa: E501
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and (
            "role_id" not in params or params["role_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `role_id` when calling `get_auth_source_externals_auth_source_external_id_users`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_auth_source_externals_auth_source_external_id_users`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_auth_source_externals_auth_source_external_id_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "auth_source_external_id" in params:
            path_params["auth_source_external_id"] = params[
                "auth_source_external_id"
            ]  # noqa: E501

        query_params = []
        if "auth_source_ldap_id" in params:
            query_params.append(
                ("auth_source_ldap_id", params["auth_source_ldap_id"])
            )  # noqa: E501
        if "usergroup_id" in params:
            query_params.append(("usergroup_id", params["usergroup_id"]))  # noqa: E501
        if "role_id" in params:
            query_params.append(("role_id", params["role_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth_source_externals/{auth_source_external_id}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_auth_source_ldaps_auth_source_ldap_id_users(
        self,
        auth_source_ldap_id,
        usergroup_id,
        role_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users for LDAP authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auth_source_ldaps_auth_source_ldap_id_users(auth_source_ldap_id, usergroup_id, role_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param str role_id: ID of role (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_auth_source_ldaps_auth_source_ldap_id_users_with_http_info(
                auth_source_ldap_id,
                usergroup_id,
                role_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_auth_source_ldaps_auth_source_ldap_id_users_with_http_info(
                auth_source_ldap_id,
                usergroup_id,
                role_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_auth_source_ldaps_auth_source_ldap_id_users_with_http_info(
        self,
        auth_source_ldap_id,
        usergroup_id,
        role_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users for LDAP authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auth_source_ldaps_auth_source_ldap_id_users_with_http_info(auth_source_ldap_id, usergroup_id, role_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param str role_id: ID of role (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "auth_source_ldap_id",
            "usergroup_id",
            "role_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_source_ldaps_auth_source_ldap_id_users" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'auth_source_ldap_id' is set
        if self.api_client.client_side_validation and (
            "auth_source_ldap_id" not in params or params["auth_source_ldap_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `auth_source_ldap_id` when calling `get_auth_source_ldaps_auth_source_ldap_id_users`"
            )  # noqa: E501
        # verify the required parameter 'usergroup_id' is set
        if self.api_client.client_side_validation and (
            "usergroup_id" not in params or params["usergroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `usergroup_id` when calling `get_auth_source_ldaps_auth_source_ldap_id_users`"
            )  # noqa: E501
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and (
            "role_id" not in params or params["role_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `role_id` when calling `get_auth_source_ldaps_auth_source_ldap_id_users`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_auth_source_ldaps_auth_source_ldap_id_users`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_auth_source_ldaps_auth_source_ldap_id_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "auth_source_ldap_id" in params:
            path_params["auth_source_ldap_id"] = params[
                "auth_source_ldap_id"
            ]  # noqa: E501

        query_params = []
        if "usergroup_id" in params:
            query_params.append(("usergroup_id", params["usergroup_id"]))  # noqa: E501
        if "role_id" in params:
            query_params.append(("role_id", params["role_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth_source_ldaps/{auth_source_ldap_id}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_current_user(self, **kwargs):  # noqa: E501
        """Show the currently logged-in user  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_current_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_current_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_current_user_with_http_info(self, **kwargs):  # noqa: E501
        """Show the currently logged-in user  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_user" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/current_user",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_location_id_users(
        self,
        location_id,
        auth_source_ldap_id,
        usergroup_id,
        role_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users for location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_users(location_id, auth_source_ldap_id, usergroup_id, role_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param str role_id: ID of role (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_location_id_users_with_http_info(
                location_id,
                auth_source_ldap_id,
                usergroup_id,
                role_id,
                organization_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_locations_location_id_users_with_http_info(
                location_id,
                auth_source_ldap_id,
                usergroup_id,
                role_id,
                organization_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_locations_location_id_users_with_http_info(
        self,
        location_id,
        auth_source_ldap_id,
        usergroup_id,
        role_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users for location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_users_with_http_info(location_id, auth_source_ldap_id, usergroup_id, role_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param str role_id: ID of role (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "auth_source_ldap_id",
            "usergroup_id",
            "role_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_location_id_users" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_locations_location_id_users`"
            )  # noqa: E501
        # verify the required parameter 'auth_source_ldap_id' is set
        if self.api_client.client_side_validation and (
            "auth_source_ldap_id" not in params or params["auth_source_ldap_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `auth_source_ldap_id` when calling `get_locations_location_id_users`"
            )  # noqa: E501
        # verify the required parameter 'usergroup_id' is set
        if self.api_client.client_side_validation and (
            "usergroup_id" not in params or params["usergroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `usergroup_id` when calling `get_locations_location_id_users`"
            )  # noqa: E501
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and (
            "role_id" not in params or params["role_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `role_id` when calling `get_locations_location_id_users`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_locations_location_id_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []
        if "auth_source_ldap_id" in params:
            query_params.append(
                ("auth_source_ldap_id", params["auth_source_ldap_id"])
            )  # noqa: E501
        if "usergroup_id" in params:
            query_params.append(("usergroup_id", params["usergroup_id"]))  # noqa: E501
        if "role_id" in params:
            query_params.append(("role_id", params["role_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_users(
        self,
        organization_id,
        auth_source_ldap_id,
        usergroup_id,
        role_id,
        location_id,
        **kwargs
    ):  # noqa: E501
        """List all users for organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_users(organization_id, auth_source_ldap_id, usergroup_id, role_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param str role_id: ID of role (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_users_with_http_info(
                organization_id,
                auth_source_ldap_id,
                usergroup_id,
                role_id,
                location_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_organization_id_users_with_http_info(
                organization_id,
                auth_source_ldap_id,
                usergroup_id,
                role_id,
                location_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_users_with_http_info(
        self,
        organization_id,
        auth_source_ldap_id,
        usergroup_id,
        role_id,
        location_id,
        **kwargs
    ):  # noqa: E501
        """List all users for organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_users_with_http_info(organization_id, auth_source_ldap_id, usergroup_id, role_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param str role_id: ID of role (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "auth_source_ldap_id",
            "usergroup_id",
            "role_id",
            "location_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_users" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_users`"
            )  # noqa: E501
        # verify the required parameter 'auth_source_ldap_id' is set
        if self.api_client.client_side_validation and (
            "auth_source_ldap_id" not in params or params["auth_source_ldap_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `auth_source_ldap_id` when calling `get_organizations_organization_id_users`"
            )  # noqa: E501
        # verify the required parameter 'usergroup_id' is set
        if self.api_client.client_side_validation and (
            "usergroup_id" not in params or params["usergroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `usergroup_id` when calling `get_organizations_organization_id_users`"
            )  # noqa: E501
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and (
            "role_id" not in params or params["role_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `role_id` when calling `get_organizations_organization_id_users`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_organizations_organization_id_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "auth_source_ldap_id" in params:
            query_params.append(
                ("auth_source_ldap_id", params["auth_source_ldap_id"])
            )  # noqa: E501
        if "usergroup_id" in params:
            query_params.append(("usergroup_id", params["usergroup_id"]))  # noqa: E501
        if "role_id" in params:
            query_params.append(("role_id", params["role_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_roles_role_id_users(
        self,
        role_id,
        auth_source_ldap_id,
        usergroup_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users for role  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_roles_role_id_users(role_id, auth_source_ldap_id, usergroup_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_id: ID of role (required)
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_roles_role_id_users_with_http_info(
                role_id,
                auth_source_ldap_id,
                usergroup_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_roles_role_id_users_with_http_info(
                role_id,
                auth_source_ldap_id,
                usergroup_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_roles_role_id_users_with_http_info(
        self,
        role_id,
        auth_source_ldap_id,
        usergroup_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users for role  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_roles_role_id_users_with_http_info(role_id, auth_source_ldap_id, usergroup_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role_id: ID of role (required)
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "role_id",
            "auth_source_ldap_id",
            "usergroup_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_roles_role_id_users" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and (
            "role_id" not in params or params["role_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `role_id` when calling `get_roles_role_id_users`"
            )  # noqa: E501
        # verify the required parameter 'auth_source_ldap_id' is set
        if self.api_client.client_side_validation and (
            "auth_source_ldap_id" not in params or params["auth_source_ldap_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `auth_source_ldap_id` when calling `get_roles_role_id_users`"
            )  # noqa: E501
        # verify the required parameter 'usergroup_id' is set
        if self.api_client.client_side_validation and (
            "usergroup_id" not in params or params["usergroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `usergroup_id` when calling `get_roles_role_id_users`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_roles_role_id_users`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_roles_role_id_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "role_id" in params:
            path_params["role_id"] = params["role_id"]  # noqa: E501

        query_params = []
        if "auth_source_ldap_id" in params:
            query_params.append(
                ("auth_source_ldap_id", params["auth_source_ldap_id"])
            )  # noqa: E501
        if "usergroup_id" in params:
            query_params.append(("usergroup_id", params["usergroup_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/roles/{role_id}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_usergroups_usergroup_id_users(
        self,
        usergroup_id,
        auth_source_ldap_id,
        role_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users for user group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_usergroups_usergroup_id_users(usergroup_id, auth_source_ldap_id, role_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str usergroup_id: ID of user group (required)
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str role_id: ID of role (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_usergroups_usergroup_id_users_with_http_info(
                usergroup_id,
                auth_source_ldap_id,
                role_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_usergroups_usergroup_id_users_with_http_info(
                usergroup_id,
                auth_source_ldap_id,
                role_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_usergroups_usergroup_id_users_with_http_info(
        self,
        usergroup_id,
        auth_source_ldap_id,
        role_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users for user group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_usergroups_usergroup_id_users_with_http_info(usergroup_id, auth_source_ldap_id, role_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str usergroup_id: ID of user group (required)
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str role_id: ID of role (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "usergroup_id",
            "auth_source_ldap_id",
            "role_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_usergroups_usergroup_id_users" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'usergroup_id' is set
        if self.api_client.client_side_validation and (
            "usergroup_id" not in params or params["usergroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `usergroup_id` when calling `get_usergroups_usergroup_id_users`"
            )  # noqa: E501
        # verify the required parameter 'auth_source_ldap_id' is set
        if self.api_client.client_side_validation and (
            "auth_source_ldap_id" not in params or params["auth_source_ldap_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `auth_source_ldap_id` when calling `get_usergroups_usergroup_id_users`"
            )  # noqa: E501
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and (
            "role_id" not in params or params["role_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `role_id` when calling `get_usergroups_usergroup_id_users`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_usergroups_usergroup_id_users`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_usergroups_usergroup_id_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "usergroup_id" in params:
            path_params["usergroup_id"] = params["usergroup_id"]  # noqa: E501

        query_params = []
        if "auth_source_ldap_id" in params:
            query_params.append(
                ("auth_source_ldap_id", params["auth_source_ldap_id"])
            )  # noqa: E501
        if "role_id" in params:
            query_params.append(("role_id", params["role_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/usergroups/{usergroup_id}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_users(
        self,
        auth_source_ldap_id,
        usergroup_id,
        role_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users(auth_source_ldap_id, usergroup_id, role_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param str role_id: ID of role (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_users_with_http_info(
                auth_source_ldap_id,
                usergroup_id,
                role_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_users_with_http_info(
                auth_source_ldap_id,
                usergroup_id,
                role_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_users_with_http_info(
        self,
        auth_source_ldap_id,
        usergroup_id,
        role_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all users  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_with_http_info(auth_source_ldap_id, usergroup_id, role_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_source_ldap_id: ID of LDAP authentication source (required)
        :param str usergroup_id: ID of user group (required)
        :param str role_id: ID of role (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "auth_source_ldap_id",
            "usergroup_id",
            "role_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'auth_source_ldap_id' is set
        if self.api_client.client_side_validation and (
            "auth_source_ldap_id" not in params or params["auth_source_ldap_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `auth_source_ldap_id` when calling `get_users`"
            )  # noqa: E501
        # verify the required parameter 'usergroup_id' is set
        if self.api_client.client_side_validation and (
            "usergroup_id" not in params or params["usergroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `usergroup_id` when calling `get_users`"
            )  # noqa: E501
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and (
            "role_id" not in params or params["role_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `role_id` when calling `get_users`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_users`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "auth_source_ldap_id" in params:
            query_params.append(
                ("auth_source_ldap_id", params["auth_source_ldap_id"])
            )  # noqa: E501
        if "usergroup_id" in params:
            query_params.append(("usergroup_id", params["usergroup_id"]))  # noqa: E501
        if "role_id" in params:
            query_params.append(("role_id", params["role_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_users_extlogin(self, **kwargs):  # noqa: E501
        """Use to authenticate against external authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_extlogin(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_users_extlogin_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_users_extlogin_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_users_extlogin_with_http_info(self, **kwargs):  # noqa: E501
        """Use to authenticate against external authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_extlogin_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_extlogin" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/users/extlogin",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_users_id(self, id, **kwargs):  # noqa: E501
        """Show a user  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_users_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_users_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a user  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_users_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/users/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_users(
        self, user_login, user_mail, user_auth_source_id, **kwargs
    ):  # noqa: E501
        """Create a user  # noqa: E501

                Adds role 'Default role' to the user by default   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_users(user_login, user_mail, user_auth_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_login: (required)
        :param str user_mail: (required)
        :param float user_auth_source_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str user_firstname:
        :param str user_lastname:
        :param str user_description:
        :param bool user_disabled:
        :param bool user_admin: is an admin account
        :param str user_password: Required unless user is in an external authentication source
        :param float user_default_location_id:
        :param float user_default_organization_id:
        :param str user_timezone: User's timezone
        :param str user_locale: User's preferred locale
        :param list[str] user_role_ids:
        :param bool user_mail_enabled: Enable user's email
        :param list[str] user_location_ids: REPLACE locations with given ids
        :param list[str] user_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_users_with_http_info(
                user_login, user_mail, user_auth_source_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_users_with_http_info(
                user_login, user_mail, user_auth_source_id, **kwargs
            )  # noqa: E501
            return data

    def post_users_with_http_info(
        self, user_login, user_mail, user_auth_source_id, **kwargs
    ):  # noqa: E501
        """Create a user  # noqa: E501

                Adds role 'Default role' to the user by default   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_users_with_http_info(user_login, user_mail, user_auth_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_login: (required)
        :param str user_mail: (required)
        :param float user_auth_source_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str user_firstname:
        :param str user_lastname:
        :param str user_description:
        :param bool user_disabled:
        :param bool user_admin: is an admin account
        :param str user_password: Required unless user is in an external authentication source
        :param float user_default_location_id:
        :param float user_default_organization_id:
        :param str user_timezone: User's timezone
        :param str user_locale: User's preferred locale
        :param list[str] user_role_ids:
        :param bool user_mail_enabled: Enable user's email
        :param list[str] user_location_ids: REPLACE locations with given ids
        :param list[str] user_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "user_login",
            "user_mail",
            "user_auth_source_id",
            "location_id",
            "organization_id",
            "user_firstname",
            "user_lastname",
            "user_description",
            "user_disabled",
            "user_admin",
            "user_password",
            "user_default_location_id",
            "user_default_organization_id",
            "user_timezone",
            "user_locale",
            "user_role_ids",
            "user_mail_enabled",
            "user_location_ids",
            "user_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_users" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_login' is set
        if self.api_client.client_side_validation and (
            "user_login" not in params or params["user_login"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `user_login` when calling `post_users`"
            )  # noqa: E501
        # verify the required parameter 'user_mail' is set
        if self.api_client.client_side_validation and (
            "user_mail" not in params or params["user_mail"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `user_mail` when calling `post_users`"
            )  # noqa: E501
        # verify the required parameter 'user_auth_source_id' is set
        if self.api_client.client_side_validation and (
            "user_auth_source_id" not in params or params["user_auth_source_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `user_auth_source_id` when calling `post_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "user_login" in params:
            form_params.append(("user[login]", params["user_login"]))  # noqa: E501
        if "user_mail" in params:
            form_params.append(("user[mail]", params["user_mail"]))  # noqa: E501
        if "user_auth_source_id" in params:
            form_params.append(
                ("user[auth_source_id]", params["user_auth_source_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "user_firstname" in params:
            form_params.append(
                ("user[firstname]", params["user_firstname"])
            )  # noqa: E501
        if "user_lastname" in params:
            form_params.append(
                ("user[lastname]", params["user_lastname"])
            )  # noqa: E501
        if "user_description" in params:
            form_params.append(
                ("user[description]", params["user_description"])
            )  # noqa: E501
        if "user_disabled" in params:
            form_params.append(
                ("user[disabled]", params["user_disabled"])
            )  # noqa: E501
        if "user_admin" in params:
            form_params.append(("user[admin]", params["user_admin"]))  # noqa: E501
        if "user_password" in params:
            form_params.append(
                ("user[password]", params["user_password"])
            )  # noqa: E501
        if "user_default_location_id" in params:
            form_params.append(
                ("user[default_location_id]", params["user_default_location_id"])
            )  # noqa: E501
        if "user_default_organization_id" in params:
            form_params.append(
                (
                    "user[default_organization_id]",
                    params["user_default_organization_id"],
                )
            )  # noqa: E501
        if "user_timezone" in params:
            form_params.append(
                ("user[timezone]", params["user_timezone"])
            )  # noqa: E501
        if "user_locale" in params:
            form_params.append(("user[locale]", params["user_locale"]))  # noqa: E501
        if "user_role_ids" in params:
            form_params.append(
                ("user[role_ids]", params["user_role_ids"])
            )  # noqa: E501
            collection_formats["user[role_ids]"] = "csv"  # noqa: E501
        if "user_mail_enabled" in params:
            form_params.append(
                ("user[mail_enabled]", params["user_mail_enabled"])
            )  # noqa: E501
        if "user_location_ids" in params:
            form_params.append(
                ("user[location_ids]", params["user_location_ids"])
            )  # noqa: E501
            collection_formats["user[location_ids]"] = "csv"  # noqa: E501
        if "user_organization_ids" in params:
            form_params.append(
                ("user[organization_ids]", params["user_organization_ids"])
            )  # noqa: E501
            collection_formats["user[organization_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_users_id(self, id, **kwargs):  # noqa: E501
        """Update a user  # noqa: E501

                Adds role 'Default role' to the user if it is not already present.         Only another admin can change the admin account attribute.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_users_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str user_login:
        :param str user_firstname:
        :param str user_lastname:
        :param str user_mail:
        :param str user_description:
        :param bool user_disabled:
        :param bool user_admin: is an admin account
        :param str user_password: Required unless user is in an external authentication source
        :param float user_default_location_id:
        :param float user_default_organization_id:
        :param float user_auth_source_id:
        :param str user_timezone: User's timezone
        :param str user_locale: User's preferred locale
        :param list[str] user_role_ids:
        :param bool user_mail_enabled: Enable user's email
        :param list[str] user_location_ids: REPLACE locations with given ids
        :param list[str] user_organization_ids: REPLACE organizations with given ids.
        :param str user_current_password: Required when user want to change own password
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_users_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_users_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_users_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a user  # noqa: E501

                Adds role 'Default role' to the user if it is not already present.         Only another admin can change the admin account attribute.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_users_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str user_login:
        :param str user_firstname:
        :param str user_lastname:
        :param str user_mail:
        :param str user_description:
        :param bool user_disabled:
        :param bool user_admin: is an admin account
        :param str user_password: Required unless user is in an external authentication source
        :param float user_default_location_id:
        :param float user_default_organization_id:
        :param float user_auth_source_id:
        :param str user_timezone: User's timezone
        :param str user_locale: User's preferred locale
        :param list[str] user_role_ids:
        :param bool user_mail_enabled: Enable user's email
        :param list[str] user_location_ids: REPLACE locations with given ids
        :param list[str] user_organization_ids: REPLACE organizations with given ids.
        :param str user_current_password: Required when user want to change own password
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "user_login",
            "user_firstname",
            "user_lastname",
            "user_mail",
            "user_description",
            "user_disabled",
            "user_admin",
            "user_password",
            "user_default_location_id",
            "user_default_organization_id",
            "user_auth_source_id",
            "user_timezone",
            "user_locale",
            "user_role_ids",
            "user_mail_enabled",
            "user_location_ids",
            "user_organization_ids",
            "user_current_password",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_users_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_users_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "user_login" in params:
            form_params.append(("user[login]", params["user_login"]))  # noqa: E501
        if "user_firstname" in params:
            form_params.append(
                ("user[firstname]", params["user_firstname"])
            )  # noqa: E501
        if "user_lastname" in params:
            form_params.append(
                ("user[lastname]", params["user_lastname"])
            )  # noqa: E501
        if "user_mail" in params:
            form_params.append(("user[mail]", params["user_mail"]))  # noqa: E501
        if "user_description" in params:
            form_params.append(
                ("user[description]", params["user_description"])
            )  # noqa: E501
        if "user_disabled" in params:
            form_params.append(
                ("user[disabled]", params["user_disabled"])
            )  # noqa: E501
        if "user_admin" in params:
            form_params.append(("user[admin]", params["user_admin"]))  # noqa: E501
        if "user_password" in params:
            form_params.append(
                ("user[password]", params["user_password"])
            )  # noqa: E501
        if "user_default_location_id" in params:
            form_params.append(
                ("user[default_location_id]", params["user_default_location_id"])
            )  # noqa: E501
        if "user_default_organization_id" in params:
            form_params.append(
                (
                    "user[default_organization_id]",
                    params["user_default_organization_id"],
                )
            )  # noqa: E501
        if "user_auth_source_id" in params:
            form_params.append(
                ("user[auth_source_id]", params["user_auth_source_id"])
            )  # noqa: E501
        if "user_timezone" in params:
            form_params.append(
                ("user[timezone]", params["user_timezone"])
            )  # noqa: E501
        if "user_locale" in params:
            form_params.append(("user[locale]", params["user_locale"]))  # noqa: E501
        if "user_role_ids" in params:
            form_params.append(
                ("user[role_ids]", params["user_role_ids"])
            )  # noqa: E501
            collection_formats["user[role_ids]"] = "csv"  # noqa: E501
        if "user_mail_enabled" in params:
            form_params.append(
                ("user[mail_enabled]", params["user_mail_enabled"])
            )  # noqa: E501
        if "user_location_ids" in params:
            form_params.append(
                ("user[location_ids]", params["user_location_ids"])
            )  # noqa: E501
            collection_formats["user[location_ids]"] = "csv"  # noqa: E501
        if "user_organization_ids" in params:
            form_params.append(
                ("user[organization_ids]", params["user_organization_ids"])
            )  # noqa: E501
            collection_formats["user[organization_ids]"] = "csv"  # noqa: E501
        if "user_current_password" in params:
            form_params.append(
                ("user[current_password]", params["user_current_password"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/users/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
