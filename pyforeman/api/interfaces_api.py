# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class InterfacesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_hosts_host_id_interfaces_id(self, host_id, id, **kwargs):  # noqa: E501
        """Delete a host's interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_host_id_interfaces_id(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID or name of host (required)
        :param str id: ID of interface (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_hosts_host_id_interfaces_id_with_http_info(
                host_id, id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_hosts_host_id_interfaces_id_with_http_info(
                host_id, id, **kwargs
            )  # noqa: E501
            return data

    def delete_hosts_host_id_interfaces_id_with_http_info(
        self, host_id, id, **kwargs
    ):  # noqa: E501
        """Delete a host's interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_host_id_interfaces_id_with_http_info(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID or name of host (required)
        :param str id: ID of interface (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["host_id", "id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hosts_host_id_interfaces_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_hosts_host_id_interfaces_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_hosts_host_id_interfaces_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/interfaces/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_domains_domain_id_interfaces(
        self, domain_id, host_id, subnet_id, **kwargs
    ):  # noqa: E501
        """List all interfaces for domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains_domain_id_interfaces(domain_id, host_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID or name of domain (required)
        :param str host_id: ID or name of host (required)
        :param str subnet_id: ID or name of subnet (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_domains_domain_id_interfaces_with_http_info(
                domain_id, host_id, subnet_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_domains_domain_id_interfaces_with_http_info(
                domain_id, host_id, subnet_id, **kwargs
            )  # noqa: E501
            return data

    def get_domains_domain_id_interfaces_with_http_info(
        self, domain_id, host_id, subnet_id, **kwargs
    ):  # noqa: E501
        """List all interfaces for domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains_domain_id_interfaces_with_http_info(domain_id, host_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID or name of domain (required)
        :param str host_id: ID or name of host (required)
        :param str subnet_id: ID or name of subnet (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "domain_id",
            "host_id",
            "subnet_id",
            "location_id",
            "organization_id",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_domains_domain_id_interfaces" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_domains_domain_id_interfaces`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_domains_domain_id_interfaces`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_domains_domain_id_interfaces`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "domain_id" in params:
            path_params["domain_id"] = params["domain_id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/domains/{domain_id}/interfaces",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_host_id_interfaces(
        self, host_id, domain_id, subnet_id, **kwargs
    ):  # noqa: E501
        """List all interfaces for host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_interfaces(host_id, domain_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID or name of host (required)
        :param str domain_id: ID or name of domain (required)
        :param str subnet_id: ID or name of subnet (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_host_id_interfaces_with_http_info(
                host_id, domain_id, subnet_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hosts_host_id_interfaces_with_http_info(
                host_id, domain_id, subnet_id, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_host_id_interfaces_with_http_info(
        self, host_id, domain_id, subnet_id, **kwargs
    ):  # noqa: E501
        """List all interfaces for host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_interfaces_with_http_info(host_id, domain_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID or name of host (required)
        :param str domain_id: ID or name of domain (required)
        :param str subnet_id: ID or name of subnet (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "domain_id",
            "subnet_id",
            "location_id",
            "organization_id",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_host_id_interfaces" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_hosts_host_id_interfaces`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_hosts_host_id_interfaces`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_hosts_host_id_interfaces`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/interfaces",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_host_id_interfaces_id(self, host_id, id, **kwargs):  # noqa: E501
        """Show an interface for host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_interfaces_id(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID or name of host (required)
        :param str id: ID or name of interface (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_host_id_interfaces_id_with_http_info(
                host_id, id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hosts_host_id_interfaces_id_with_http_info(
                host_id, id, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_host_id_interfaces_id_with_http_info(
        self, host_id, id, **kwargs
    ):  # noqa: E501
        """Show an interface for host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_interfaces_id_with_http_info(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID or name of host (required)
        :param str id: ID or name of interface (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["host_id", "id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_host_id_interfaces_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_hosts_host_id_interfaces_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hosts_host_id_interfaces_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/interfaces/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_subnets_subnet_id_interfaces(
        self, subnet_id, host_id, domain_id, **kwargs
    ):  # noqa: E501
        """List all interfaces for subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets_subnet_id_interfaces(subnet_id, host_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: ID or name of subnet (required)
        :param str host_id: ID or name of host (required)
        :param str domain_id: ID or name of domain (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_subnets_subnet_id_interfaces_with_http_info(
                subnet_id, host_id, domain_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_subnets_subnet_id_interfaces_with_http_info(
                subnet_id, host_id, domain_id, **kwargs
            )  # noqa: E501
            return data

    def get_subnets_subnet_id_interfaces_with_http_info(
        self, subnet_id, host_id, domain_id, **kwargs
    ):  # noqa: E501
        """List all interfaces for subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets_subnet_id_interfaces_with_http_info(subnet_id, host_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: ID or name of subnet (required)
        :param str host_id: ID or name of host (required)
        :param str domain_id: ID or name of domain (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "subnet_id",
            "host_id",
            "domain_id",
            "location_id",
            "organization_id",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subnets_subnet_id_interfaces" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_subnets_subnet_id_interfaces`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_subnets_subnet_id_interfaces`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_subnets_subnet_id_interfaces`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "subnet_id" in params:
            path_params["subnet_id"] = params["subnet_id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets/{subnet_id}/interfaces",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hosts_host_id_interfaces(self, host_id, **kwargs):  # noqa: E501
        """Create an interface on a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_host_id_interfaces(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID or name of host (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str interface_mac: MAC address of interface. Required for managed interfaces on bare metal.
        :param str interface_ip: IPv4 address of interface
        :param str interface_ip6: IPv6 address of interface
        :param str interface_type: Interface type, e.g. bmc. Default is interface
        :param str interface_name: Interface's DNS name
        :param float interface_subnet_id: Foreman subnet ID of IPv4 interface
        :param float interface_subnet6_id: Foreman subnet ID of IPv6 interface
        :param float interface_domain_id: Foreman domain ID of interface. Required for primary interfaces on managed hosts.
        :param str interface_identifier: Device identifier, e.g. eth0 or eth1.1
        :param bool interface_managed: Should this interface be managed via DHCP and DNS smart proxy and should it be configured during provisioning?
        :param bool interface_primary: Should this interface be used for constructing the FQDN of the host? Each managed hosts needs to have one primary interface.
        :param bool interface_provision: Should this interface be used for TFTP of PXELinux (or SSH for image-based hosts)? Each managed hosts needs to have one provision interface.
        :param str interface_username: Only for BMC interfaces.
        :param str interface_password: Only for BMC interfaces.
        :param str interface_provider: Interface provider, e.g. IPMI. Only for BMC interfaces.
        :param bool interface_virtual: Alias or VLAN device
        :param str interface_tag: VLAN tag, this attribute has precedence over the subnet VLAN ID. Only for virtual interfaces.
        :param float interface_mtu: MTU, this attribute has precedence over the subnet MTU.
        :param str interface_attached_to: Identifier of the interface to which this interface belongs, e.g. eth1. Only for virtual interfaces.
        :param str interface_mode: Bond mode of the interface, e.g. balance-rr. Only for bond interfaces.
        :param list[str] interface_attached_devices: Identifiers of attached interfaces, e.g. `['eth1', 'eth2']`. For bond interfaces those are the slaves. Only for bond and bridges interfaces.
        :param str interface_bond_options: Space separated options, e.g. miimon=100. Only for bond interfaces.
        :param bool interface_execution: Should this interface be used for remote execution?
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hosts_host_id_interfaces_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hosts_host_id_interfaces_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
            return data

    def post_hosts_host_id_interfaces_with_http_info(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Create an interface on a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_host_id_interfaces_with_http_info(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID or name of host (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str interface_mac: MAC address of interface. Required for managed interfaces on bare metal.
        :param str interface_ip: IPv4 address of interface
        :param str interface_ip6: IPv6 address of interface
        :param str interface_type: Interface type, e.g. bmc. Default is interface
        :param str interface_name: Interface's DNS name
        :param float interface_subnet_id: Foreman subnet ID of IPv4 interface
        :param float interface_subnet6_id: Foreman subnet ID of IPv6 interface
        :param float interface_domain_id: Foreman domain ID of interface. Required for primary interfaces on managed hosts.
        :param str interface_identifier: Device identifier, e.g. eth0 or eth1.1
        :param bool interface_managed: Should this interface be managed via DHCP and DNS smart proxy and should it be configured during provisioning?
        :param bool interface_primary: Should this interface be used for constructing the FQDN of the host? Each managed hosts needs to have one primary interface.
        :param bool interface_provision: Should this interface be used for TFTP of PXELinux (or SSH for image-based hosts)? Each managed hosts needs to have one provision interface.
        :param str interface_username: Only for BMC interfaces.
        :param str interface_password: Only for BMC interfaces.
        :param str interface_provider: Interface provider, e.g. IPMI. Only for BMC interfaces.
        :param bool interface_virtual: Alias or VLAN device
        :param str interface_tag: VLAN tag, this attribute has precedence over the subnet VLAN ID. Only for virtual interfaces.
        :param float interface_mtu: MTU, this attribute has precedence over the subnet MTU.
        :param str interface_attached_to: Identifier of the interface to which this interface belongs, e.g. eth1. Only for virtual interfaces.
        :param str interface_mode: Bond mode of the interface, e.g. balance-rr. Only for bond interfaces.
        :param list[str] interface_attached_devices: Identifiers of attached interfaces, e.g. `['eth1', 'eth2']`. For bond interfaces those are the slaves. Only for bond and bridges interfaces.
        :param str interface_bond_options: Space separated options, e.g. miimon=100. Only for bond interfaces.
        :param bool interface_execution: Should this interface be used for remote execution?
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "location_id",
            "organization_id",
            "interface_mac",
            "interface_ip",
            "interface_ip6",
            "interface_type",
            "interface_name",
            "interface_subnet_id",
            "interface_subnet6_id",
            "interface_domain_id",
            "interface_identifier",
            "interface_managed",
            "interface_primary",
            "interface_provision",
            "interface_username",
            "interface_password",
            "interface_provider",
            "interface_virtual",
            "interface_tag",
            "interface_mtu",
            "interface_attached_to",
            "interface_mode",
            "interface_attached_devices",
            "interface_bond_options",
            "interface_execution",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hosts_host_id_interfaces" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `post_hosts_host_id_interfaces`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "interface_mac" in params:
            form_params.append(
                ("interface[mac]", params["interface_mac"])
            )  # noqa: E501
        if "interface_ip" in params:
            form_params.append(("interface[ip]", params["interface_ip"]))  # noqa: E501
        if "interface_ip6" in params:
            form_params.append(
                ("interface[ip6]", params["interface_ip6"])
            )  # noqa: E501
        if "interface_type" in params:
            form_params.append(
                ("interface[type]", params["interface_type"])
            )  # noqa: E501
        if "interface_name" in params:
            form_params.append(
                ("interface[name]", params["interface_name"])
            )  # noqa: E501
        if "interface_subnet_id" in params:
            form_params.append(
                ("interface[subnet_id]", params["interface_subnet_id"])
            )  # noqa: E501
        if "interface_subnet6_id" in params:
            form_params.append(
                ("interface[subnet6_id]", params["interface_subnet6_id"])
            )  # noqa: E501
        if "interface_domain_id" in params:
            form_params.append(
                ("interface[domain_id]", params["interface_domain_id"])
            )  # noqa: E501
        if "interface_identifier" in params:
            form_params.append(
                ("interface[identifier]", params["interface_identifier"])
            )  # noqa: E501
        if "interface_managed" in params:
            form_params.append(
                ("interface[managed]", params["interface_managed"])
            )  # noqa: E501
        if "interface_primary" in params:
            form_params.append(
                ("interface[primary]", params["interface_primary"])
            )  # noqa: E501
        if "interface_provision" in params:
            form_params.append(
                ("interface[provision]", params["interface_provision"])
            )  # noqa: E501
        if "interface_username" in params:
            form_params.append(
                ("interface[username]", params["interface_username"])
            )  # noqa: E501
        if "interface_password" in params:
            form_params.append(
                ("interface[password]", params["interface_password"])
            )  # noqa: E501
        if "interface_provider" in params:
            form_params.append(
                ("interface[provider]", params["interface_provider"])
            )  # noqa: E501
        if "interface_virtual" in params:
            form_params.append(
                ("interface[virtual]", params["interface_virtual"])
            )  # noqa: E501
        if "interface_tag" in params:
            form_params.append(
                ("interface[tag]", params["interface_tag"])
            )  # noqa: E501
        if "interface_mtu" in params:
            form_params.append(
                ("interface[mtu]", params["interface_mtu"])
            )  # noqa: E501
        if "interface_attached_to" in params:
            form_params.append(
                ("interface[attached_to]", params["interface_attached_to"])
            )  # noqa: E501
        if "interface_mode" in params:
            form_params.append(
                ("interface[mode]", params["interface_mode"])
            )  # noqa: E501
        if "interface_attached_devices" in params:
            form_params.append(
                ("interface[attached_devices]", params["interface_attached_devices"])
            )  # noqa: E501
            collection_formats["interface[attached_devices]"] = "csv"  # noqa: E501
        if "interface_bond_options" in params:
            form_params.append(
                ("interface[bond_options]", params["interface_bond_options"])
            )  # noqa: E501
        if "interface_execution" in params:
            form_params.append(
                ("interface[execution]", params["interface_execution"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/interfaces",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_host_id_interfaces_id(self, host_id, id, **kwargs):  # noqa: E501
        """Update a host's interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_interfaces_id(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID or name of host (required)
        :param str id: ID of interface (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str interface_mac: MAC address of interface. Required for managed interfaces on bare metal.
        :param str interface_ip: IPv4 address of interface
        :param str interface_ip6: IPv6 address of interface
        :param str interface_type: Interface type, e.g. bmc. Default is interface
        :param str interface_name: Interface's DNS name
        :param float interface_subnet_id: Foreman subnet ID of IPv4 interface
        :param float interface_subnet6_id: Foreman subnet ID of IPv6 interface
        :param float interface_domain_id: Foreman domain ID of interface. Required for primary interfaces on managed hosts.
        :param str interface_identifier: Device identifier, e.g. eth0 or eth1.1
        :param bool interface_managed: Should this interface be managed via DHCP and DNS smart proxy and should it be configured during provisioning?
        :param bool interface_primary: Should this interface be used for constructing the FQDN of the host? Each managed hosts needs to have one primary interface.
        :param bool interface_provision: Should this interface be used for TFTP of PXELinux (or SSH for image-based hosts)? Each managed hosts needs to have one provision interface.
        :param str interface_username: Only for BMC interfaces.
        :param str interface_password: Only for BMC interfaces.
        :param str interface_provider: Interface provider, e.g. IPMI. Only for BMC interfaces.
        :param bool interface_virtual: Alias or VLAN device
        :param str interface_tag: VLAN tag, this attribute has precedence over the subnet VLAN ID. Only for virtual interfaces.
        :param float interface_mtu: MTU, this attribute has precedence over the subnet MTU.
        :param str interface_attached_to: Identifier of the interface to which this interface belongs, e.g. eth1. Only for virtual interfaces.
        :param str interface_mode: Bond mode of the interface, e.g. balance-rr. Only for bond interfaces.
        :param list[str] interface_attached_devices: Identifiers of attached interfaces, e.g. `['eth1', 'eth2']`. For bond interfaces those are the slaves. Only for bond and bridges interfaces.
        :param str interface_bond_options: Space separated options, e.g. miimon=100. Only for bond interfaces.
        :param bool interface_execution: Should this interface be used for remote execution?
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_host_id_interfaces_id_with_http_info(
                host_id, id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_host_id_interfaces_id_with_http_info(
                host_id, id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_host_id_interfaces_id_with_http_info(
        self, host_id, id, **kwargs
    ):  # noqa: E501
        """Update a host's interface  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_interfaces_id_with_http_info(host_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID or name of host (required)
        :param str id: ID of interface (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str interface_mac: MAC address of interface. Required for managed interfaces on bare metal.
        :param str interface_ip: IPv4 address of interface
        :param str interface_ip6: IPv6 address of interface
        :param str interface_type: Interface type, e.g. bmc. Default is interface
        :param str interface_name: Interface's DNS name
        :param float interface_subnet_id: Foreman subnet ID of IPv4 interface
        :param float interface_subnet6_id: Foreman subnet ID of IPv6 interface
        :param float interface_domain_id: Foreman domain ID of interface. Required for primary interfaces on managed hosts.
        :param str interface_identifier: Device identifier, e.g. eth0 or eth1.1
        :param bool interface_managed: Should this interface be managed via DHCP and DNS smart proxy and should it be configured during provisioning?
        :param bool interface_primary: Should this interface be used for constructing the FQDN of the host? Each managed hosts needs to have one primary interface.
        :param bool interface_provision: Should this interface be used for TFTP of PXELinux (or SSH for image-based hosts)? Each managed hosts needs to have one provision interface.
        :param str interface_username: Only for BMC interfaces.
        :param str interface_password: Only for BMC interfaces.
        :param str interface_provider: Interface provider, e.g. IPMI. Only for BMC interfaces.
        :param bool interface_virtual: Alias or VLAN device
        :param str interface_tag: VLAN tag, this attribute has precedence over the subnet VLAN ID. Only for virtual interfaces.
        :param float interface_mtu: MTU, this attribute has precedence over the subnet MTU.
        :param str interface_attached_to: Identifier of the interface to which this interface belongs, e.g. eth1. Only for virtual interfaces.
        :param str interface_mode: Bond mode of the interface, e.g. balance-rr. Only for bond interfaces.
        :param list[str] interface_attached_devices: Identifiers of attached interfaces, e.g. `['eth1', 'eth2']`. For bond interfaces those are the slaves. Only for bond and bridges interfaces.
        :param str interface_bond_options: Space separated options, e.g. miimon=100. Only for bond interfaces.
        :param bool interface_execution: Should this interface be used for remote execution?
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "id",
            "location_id",
            "organization_id",
            "interface_mac",
            "interface_ip",
            "interface_ip6",
            "interface_type",
            "interface_name",
            "interface_subnet_id",
            "interface_subnet6_id",
            "interface_domain_id",
            "interface_identifier",
            "interface_managed",
            "interface_primary",
            "interface_provision",
            "interface_username",
            "interface_password",
            "interface_provider",
            "interface_virtual",
            "interface_tag",
            "interface_mtu",
            "interface_attached_to",
            "interface_mode",
            "interface_attached_devices",
            "interface_bond_options",
            "interface_execution",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_host_id_interfaces_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_hosts_host_id_interfaces_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_hosts_host_id_interfaces_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "interface_mac" in params:
            form_params.append(
                ("interface[mac]", params["interface_mac"])
            )  # noqa: E501
        if "interface_ip" in params:
            form_params.append(("interface[ip]", params["interface_ip"]))  # noqa: E501
        if "interface_ip6" in params:
            form_params.append(
                ("interface[ip6]", params["interface_ip6"])
            )  # noqa: E501
        if "interface_type" in params:
            form_params.append(
                ("interface[type]", params["interface_type"])
            )  # noqa: E501
        if "interface_name" in params:
            form_params.append(
                ("interface[name]", params["interface_name"])
            )  # noqa: E501
        if "interface_subnet_id" in params:
            form_params.append(
                ("interface[subnet_id]", params["interface_subnet_id"])
            )  # noqa: E501
        if "interface_subnet6_id" in params:
            form_params.append(
                ("interface[subnet6_id]", params["interface_subnet6_id"])
            )  # noqa: E501
        if "interface_domain_id" in params:
            form_params.append(
                ("interface[domain_id]", params["interface_domain_id"])
            )  # noqa: E501
        if "interface_identifier" in params:
            form_params.append(
                ("interface[identifier]", params["interface_identifier"])
            )  # noqa: E501
        if "interface_managed" in params:
            form_params.append(
                ("interface[managed]", params["interface_managed"])
            )  # noqa: E501
        if "interface_primary" in params:
            form_params.append(
                ("interface[primary]", params["interface_primary"])
            )  # noqa: E501
        if "interface_provision" in params:
            form_params.append(
                ("interface[provision]", params["interface_provision"])
            )  # noqa: E501
        if "interface_username" in params:
            form_params.append(
                ("interface[username]", params["interface_username"])
            )  # noqa: E501
        if "interface_password" in params:
            form_params.append(
                ("interface[password]", params["interface_password"])
            )  # noqa: E501
        if "interface_provider" in params:
            form_params.append(
                ("interface[provider]", params["interface_provider"])
            )  # noqa: E501
        if "interface_virtual" in params:
            form_params.append(
                ("interface[virtual]", params["interface_virtual"])
            )  # noqa: E501
        if "interface_tag" in params:
            form_params.append(
                ("interface[tag]", params["interface_tag"])
            )  # noqa: E501
        if "interface_mtu" in params:
            form_params.append(
                ("interface[mtu]", params["interface_mtu"])
            )  # noqa: E501
        if "interface_attached_to" in params:
            form_params.append(
                ("interface[attached_to]", params["interface_attached_to"])
            )  # noqa: E501
        if "interface_mode" in params:
            form_params.append(
                ("interface[mode]", params["interface_mode"])
            )  # noqa: E501
        if "interface_attached_devices" in params:
            form_params.append(
                ("interface[attached_devices]", params["interface_attached_devices"])
            )  # noqa: E501
            collection_formats["interface[attached_devices]"] = "csv"  # noqa: E501
        if "interface_bond_options" in params:
            form_params.append(
                ("interface[bond_options]", params["interface_bond_options"])
            )  # noqa: E501
        if "interface_execution" in params:
            form_params.append(
                ("interface[execution]", params["interface_execution"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/interfaces/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
