# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class CapsuleContentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_capsules_id_content_lifecycle_environments_environment_id(
        self, id, environment_id, **kwargs
    ):  # noqa: E501
        """Remove lifecycle environments from the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_capsules_id_content_lifecycle_environments_environment_id(id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float environment_id: Id of the lifecycle environment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_capsules_id_content_lifecycle_environments_environment_id_with_http_info(
                id, environment_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_capsules_id_content_lifecycle_environments_environment_id_with_http_info(
                id, environment_id, **kwargs
            )  # noqa: E501
            return data

    def delete_capsules_id_content_lifecycle_environments_environment_id_with_http_info(
        self, id, environment_id, **kwargs
    ):  # noqa: E501
        """Remove lifecycle environments from the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_capsules_id_content_lifecycle_environments_environment_id_with_http_info(id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float environment_id: Id of the lifecycle environment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "environment_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_capsules_id_content_lifecycle_environments_environment_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_capsules_id_content_lifecycle_environments_environment_id`"
            )  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and (
            "environment_id" not in params or params["environment_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `environment_id` when calling `delete_capsules_id_content_lifecycle_environments_environment_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "environment_id" in params:
            path_params["environment_id"] = params["environment_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/capsules/{id}/content/lifecycle_environments/{environment_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_capsules_id_content_sync(self, id, **kwargs):  # noqa: E501
        """Cancel running smart proxy synchronization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_capsules_id_content_sync(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_capsules_id_content_sync_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_capsules_id_content_sync_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_capsules_id_content_sync_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Cancel running smart proxy synchronization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_capsules_id_content_sync_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_capsules_id_content_sync" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_capsules_id_content_sync`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/capsules/{id}/content/sync",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_capsules_id_content_available_lifecycle_environments(
        self, id, **kwargs
    ):  # noqa: E501
        """List the lifecycle environments not attached to the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capsules_id_content_available_lifecycle_environments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float organization_id: Id of the organization to limit environments on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_capsules_id_content_available_lifecycle_environments_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_capsules_id_content_available_lifecycle_environments_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_capsules_id_content_available_lifecycle_environments_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List the lifecycle environments not attached to the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capsules_id_content_available_lifecycle_environments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float organization_id: Id of the organization to limit environments on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_capsules_id_content_available_lifecycle_environments"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_capsules_id_content_available_lifecycle_environments`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/capsules/{id}/content/available_lifecycle_environments",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_capsules_id_content_counts(self, id, **kwargs):  # noqa: E501
        """List content counts for the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capsules_id_content_counts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_capsules_id_content_counts_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_capsules_id_content_counts_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_capsules_id_content_counts_with_http_info(self, id, **kwargs):  # noqa: E501
        """List content counts for the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capsules_id_content_counts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_capsules_id_content_counts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_capsules_id_content_counts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/capsules/{id}/content/counts",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_capsules_id_content_lifecycle_environments(
        self, id, **kwargs
    ):  # noqa: E501
        """List the lifecycle environments attached to the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capsules_id_content_lifecycle_environments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float organization_id: Id of the organization to limit environments on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_capsules_id_content_lifecycle_environments_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_capsules_id_content_lifecycle_environments_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_capsules_id_content_lifecycle_environments_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List the lifecycle environments attached to the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capsules_id_content_lifecycle_environments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float organization_id: Id of the organization to limit environments on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_capsules_id_content_lifecycle_environments" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_capsules_id_content_lifecycle_environments`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/capsules/{id}/content/lifecycle_environments",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_capsules_id_content_sync(self, id, **kwargs):  # noqa: E501
        """Get current smart proxy synchronization status  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capsules_id_content_sync(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float organization_id: Id of the organization to get the status for
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_capsules_id_content_sync_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_capsules_id_content_sync_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_capsules_id_content_sync_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get current smart proxy synchronization status  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capsules_id_content_sync_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float organization_id: Id of the organization to get the status for
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_capsules_id_content_sync" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_capsules_id_content_sync`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/capsules/{id}/content/sync",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_capsules_id_content_lifecycle_environments(
        self, id, environment_id, **kwargs
    ):  # noqa: E501
        """Add lifecycle environments to the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_capsules_id_content_lifecycle_environments(id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float environment_id: Id of the lifecycle environment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_capsules_id_content_lifecycle_environments_with_http_info(
                id, environment_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.post_capsules_id_content_lifecycle_environments_with_http_info(
                id, environment_id, **kwargs
            )  # noqa: E501
            return data

    def post_capsules_id_content_lifecycle_environments_with_http_info(
        self, id, environment_id, **kwargs
    ):  # noqa: E501
        """Add lifecycle environments to the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_capsules_id_content_lifecycle_environments_with_http_info(id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float environment_id: Id of the lifecycle environment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "environment_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_capsules_id_content_lifecycle_environments" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_capsules_id_content_lifecycle_environments`"
            )  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and (
            "environment_id" not in params or params["environment_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `environment_id` when calling `post_capsules_id_content_lifecycle_environments`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "environment_id" in params:
            form_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/capsules/{id}/content/lifecycle_environments",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_capsules_id_content_reclaim_space(self, id, **kwargs):  # noqa: E501
        """Reclaim space from all On Demand repositories on a smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_capsules_id_content_reclaim_space(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_capsules_id_content_reclaim_space_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_capsules_id_content_reclaim_space_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def post_capsules_id_content_reclaim_space_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Reclaim space from all On Demand repositories on a smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_capsules_id_content_reclaim_space_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_capsules_id_content_reclaim_space" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_capsules_id_content_reclaim_space`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/capsules/{id}/content/reclaim_space",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_capsules_id_content_sync(self, id, **kwargs):  # noqa: E501
        """Synchronize the content to the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_capsules_id_content_sync(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float environment_id: Id of the environment to limit the synchronization on
        :param float content_view_id: Id of the content view to limit the synchronization on
        :param float repository_id: Id of the repository to limit the synchronization on
        :param bool skip_metadata_check: Skip metadata check on each repository on the smart proxy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_capsules_id_content_sync_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_capsules_id_content_sync_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def post_capsules_id_content_sync_with_http_info(self, id, **kwargs):  # noqa: E501
        """Synchronize the content to the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_capsules_id_content_sync_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :param float environment_id: Id of the environment to limit the synchronization on
        :param float content_view_id: Id of the content view to limit the synchronization on
        :param float repository_id: Id of the repository to limit the synchronization on
        :param bool skip_metadata_check: Skip metadata check on each repository on the smart proxy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "environment_id",
            "content_view_id",
            "repository_id",
            "skip_metadata_check",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_capsules_id_content_sync" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_capsules_id_content_sync`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "environment_id" in params:
            form_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "content_view_id" in params:
            form_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "repository_id" in params:
            form_params.append(("repository_id", params["repository_id"]))  # noqa: E501
        if "skip_metadata_check" in params:
            form_params.append(
                ("skip_metadata_check", params["skip_metadata_check"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/capsules/{id}/content/sync",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_capsules_id_content_update_counts(self, id, **kwargs):  # noqa: E501
        """Update content counts for the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_capsules_id_content_update_counts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_capsules_id_content_update_counts_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_capsules_id_content_update_counts_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def post_capsules_id_content_update_counts_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Update content counts for the smart proxy  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_capsules_id_content_update_counts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the smart proxy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_capsules_id_content_update_counts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_capsules_id_content_update_counts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/capsules/{id}/content/update_counts",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
