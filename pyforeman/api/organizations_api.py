# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class OrganizationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_organizations_id(self, id, **kwargs):  # noqa: E501
        """Delete an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Organization ID (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_organizations_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_organizations_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_organizations_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Organization ID (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_organizations_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations(self, **kwargs):  # noqa: E501
        """List all organizations  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_organizations_with_http_info(self, **kwargs):  # noqa: E501
        """List all organizations  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_id(self, id, **kwargs):  # noqa: E501
        """Show organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: organization ID (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: organization ID (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_organizations_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_id_redhat_provider(self, id, **kwargs):  # noqa: E501
        """List all :resource_id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_redhat_provider(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_id_redhat_provider_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_id_redhat_provider_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_id_redhat_provider_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List all :resource_id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_redhat_provider_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_redhat_provider" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_organizations_id_redhat_provider`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{id}/redhat_provider",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_id_releases(self, id, **kwargs):  # noqa: E501
        """List available releases in the organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_releases(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the Organization (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_id_releases_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_id_releases_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_id_releases_with_http_info(self, id, **kwargs):  # noqa: E501
        """List available releases in the organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_releases_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the Organization (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_releases" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_organizations_id_releases`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{id}/releases",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_label_download_debug_certificate(
        self, label, **kwargs
    ):  # noqa: E501
        """Download a debug certificate  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_label_download_debug_certificate(label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label: Organization label (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_organizations_label_download_debug_certificate_with_http_info(
                    label, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_label_download_debug_certificate_with_http_info(
                label, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_label_download_debug_certificate_with_http_info(
        self, label, **kwargs
    ):  # noqa: E501
        """Download a debug certificate  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_label_download_debug_certificate_with_http_info(label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label: Organization label (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["label", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_label_download_debug_certificate"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'label' is set
        if self.api_client.client_side_validation and (
            "label" not in params or params["label"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `label` when calling `get_organizations_label_download_debug_certificate`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "label" in params:
            path_params["label"] = params["label"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{label}/download_debug_certificate",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organizations(self, organization_name, **kwargs):  # noqa: E501
        """Create organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations(organization_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_name: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str organization_description:
        :param list[str] organization_user_ids: User IDs
        :param list[str] organization_smart_proxy_ids: Smart proxy IDs
        :param list[str] organization_compute_resource_ids: Compute resource IDs
        :param list[str] organization_medium_ids: Medium IDs
        :param list[str] organization_ptable_ids: Partition template IDs
        :param list[str] organization_provisioning_template_ids: Provisioning template IDs
        :param list[str] organization_domain_ids: Domain IDs
        :param list[str] organization_realm_ids: Realm IDs
        :param list[str] organization_hostgroup_ids: Host group IDs
        :param list[str] organization_environment_ids: Environment IDs
        :param list[str] organization_subnet_ids: Subnet IDs
        :param list[str] organization_ignore_types: List of resources types that will be automatically associated
        :param list[str] organization_location_ids: Associated location IDs
        :param str organization_label:
        :param bool simple_content_access: Whether to turn on Simple Content Access for the organization.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organizations_with_http_info(
                organization_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_organizations_with_http_info(
                organization_name, **kwargs
            )  # noqa: E501
            return data

    def post_organizations_with_http_info(
        self, organization_name, **kwargs
    ):  # noqa: E501
        """Create organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_with_http_info(organization_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_name: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str organization_description:
        :param list[str] organization_user_ids: User IDs
        :param list[str] organization_smart_proxy_ids: Smart proxy IDs
        :param list[str] organization_compute_resource_ids: Compute resource IDs
        :param list[str] organization_medium_ids: Medium IDs
        :param list[str] organization_ptable_ids: Partition template IDs
        :param list[str] organization_provisioning_template_ids: Provisioning template IDs
        :param list[str] organization_domain_ids: Domain IDs
        :param list[str] organization_realm_ids: Realm IDs
        :param list[str] organization_hostgroup_ids: Host group IDs
        :param list[str] organization_environment_ids: Environment IDs
        :param list[str] organization_subnet_ids: Subnet IDs
        :param list[str] organization_ignore_types: List of resources types that will be automatically associated
        :param list[str] organization_location_ids: Associated location IDs
        :param str organization_label:
        :param bool simple_content_access: Whether to turn on Simple Content Access for the organization.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_name",
            "location_id",
            "organization_id",
            "organization_description",
            "organization_user_ids",
            "organization_smart_proxy_ids",
            "organization_compute_resource_ids",
            "organization_medium_ids",
            "organization_ptable_ids",
            "organization_provisioning_template_ids",
            "organization_domain_ids",
            "organization_realm_ids",
            "organization_hostgroup_ids",
            "organization_environment_ids",
            "organization_subnet_ids",
            "organization_ignore_types",
            "organization_location_ids",
            "organization_label",
            "simple_content_access",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_name' is set
        if self.api_client.client_side_validation and (
            "organization_name" not in params or params["organization_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_name` when calling `post_organizations`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_name" in params:
            form_params.append(
                ("organization[name]", params["organization_name"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "organization_description" in params:
            form_params.append(
                ("organization[description]", params["organization_description"])
            )  # noqa: E501
        if "organization_user_ids" in params:
            form_params.append(
                ("organization[user_ids]", params["organization_user_ids"])
            )  # noqa: E501
            collection_formats["organization[user_ids]"] = "csv"  # noqa: E501
        if "organization_smart_proxy_ids" in params:
            form_params.append(
                (
                    "organization[smart_proxy_ids]",
                    params["organization_smart_proxy_ids"],
                )
            )  # noqa: E501
            collection_formats["organization[smart_proxy_ids]"] = "csv"  # noqa: E501
        if "organization_compute_resource_ids" in params:
            form_params.append(
                (
                    "organization[compute_resource_ids]",
                    params["organization_compute_resource_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "organization[compute_resource_ids]"
            ] = "csv"  # noqa: E501
        if "organization_medium_ids" in params:
            form_params.append(
                ("organization[medium_ids]", params["organization_medium_ids"])
            )  # noqa: E501
            collection_formats["organization[medium_ids]"] = "csv"  # noqa: E501
        if "organization_ptable_ids" in params:
            form_params.append(
                ("organization[ptable_ids]", params["organization_ptable_ids"])
            )  # noqa: E501
            collection_formats["organization[ptable_ids]"] = "csv"  # noqa: E501
        if "organization_provisioning_template_ids" in params:
            form_params.append(
                (
                    "organization[provisioning_template_ids]",
                    params["organization_provisioning_template_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "organization[provisioning_template_ids]"
            ] = "csv"  # noqa: E501
        if "organization_domain_ids" in params:
            form_params.append(
                ("organization[domain_ids]", params["organization_domain_ids"])
            )  # noqa: E501
            collection_formats["organization[domain_ids]"] = "csv"  # noqa: E501
        if "organization_realm_ids" in params:
            form_params.append(
                ("organization[realm_ids]", params["organization_realm_ids"])
            )  # noqa: E501
            collection_formats["organization[realm_ids]"] = "csv"  # noqa: E501
        if "organization_hostgroup_ids" in params:
            form_params.append(
                ("organization[hostgroup_ids]", params["organization_hostgroup_ids"])
            )  # noqa: E501
            collection_formats["organization[hostgroup_ids]"] = "csv"  # noqa: E501
        if "organization_environment_ids" in params:
            form_params.append(
                (
                    "organization[environment_ids]",
                    params["organization_environment_ids"],
                )
            )  # noqa: E501
            collection_formats["organization[environment_ids]"] = "csv"  # noqa: E501
        if "organization_subnet_ids" in params:
            form_params.append(
                ("organization[subnet_ids]", params["organization_subnet_ids"])
            )  # noqa: E501
            collection_formats["organization[subnet_ids]"] = "csv"  # noqa: E501
        if "organization_ignore_types" in params:
            form_params.append(
                ("organization[ignore_types]", params["organization_ignore_types"])
            )  # noqa: E501
            collection_formats["organization[ignore_types]"] = "csv"  # noqa: E501
        if "organization_location_ids" in params:
            form_params.append(
                ("organization[location_ids]", params["organization_location_ids"])
            )  # noqa: E501
            collection_formats["organization[location_ids]"] = "csv"  # noqa: E501
        if "organization_label" in params:
            form_params.append(
                ("organization[label]", params["organization_label"])
            )  # noqa: E501
        if "simple_content_access" in params:
            form_params.append(
                ("simple_content_access", params["simple_content_access"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_id(self, id, **kwargs):  # noqa: E501
        """Update organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: organization ID (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str redhat_repository_url: Red Hat CDN URL
        :param bool simple_content_access: Whether Simple Content Access should be enabled for the organization.
        :param str organization_name:
        :param str organization_description:
        :param list[str] organization_user_ids: User IDs
        :param list[str] organization_smart_proxy_ids: Smart proxy IDs
        :param list[str] organization_compute_resource_ids: Compute resource IDs
        :param list[str] organization_medium_ids: Medium IDs
        :param list[str] organization_ptable_ids: Partition template IDs
        :param list[str] organization_provisioning_template_ids: Provisioning template IDs
        :param list[str] organization_domain_ids: Domain IDs
        :param list[str] organization_realm_ids: Realm IDs
        :param list[str] organization_hostgroup_ids: Host group IDs
        :param list[str] organization_environment_ids: Environment IDs
        :param list[str] organization_subnet_ids: Subnet IDs
        :param list[str] organization_ignore_types: List of resources types that will be automatically associated
        :param list[str] organization_location_ids: Associated location IDs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organizations_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_organizations_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_organizations_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: organization ID (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str redhat_repository_url: Red Hat CDN URL
        :param bool simple_content_access: Whether Simple Content Access should be enabled for the organization.
        :param str organization_name:
        :param str organization_description:
        :param list[str] organization_user_ids: User IDs
        :param list[str] organization_smart_proxy_ids: Smart proxy IDs
        :param list[str] organization_compute_resource_ids: Compute resource IDs
        :param list[str] organization_medium_ids: Medium IDs
        :param list[str] organization_ptable_ids: Partition template IDs
        :param list[str] organization_provisioning_template_ids: Provisioning template IDs
        :param list[str] organization_domain_ids: Domain IDs
        :param list[str] organization_realm_ids: Realm IDs
        :param list[str] organization_hostgroup_ids: Host group IDs
        :param list[str] organization_environment_ids: Environment IDs
        :param list[str] organization_subnet_ids: Subnet IDs
        :param list[str] organization_ignore_types: List of resources types that will be automatically associated
        :param list[str] organization_location_ids: Associated location IDs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "redhat_repository_url",
            "simple_content_access",
            "organization_name",
            "organization_description",
            "organization_user_ids",
            "organization_smart_proxy_ids",
            "organization_compute_resource_ids",
            "organization_medium_ids",
            "organization_ptable_ids",
            "organization_provisioning_template_ids",
            "organization_domain_ids",
            "organization_realm_ids",
            "organization_hostgroup_ids",
            "organization_environment_ids",
            "organization_subnet_ids",
            "organization_ignore_types",
            "organization_location_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_organizations_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "redhat_repository_url" in params:
            form_params.append(
                ("redhat_repository_url", params["redhat_repository_url"])
            )  # noqa: E501
        if "simple_content_access" in params:
            form_params.append(
                ("simple_content_access", params["simple_content_access"])
            )  # noqa: E501
        if "organization_name" in params:
            form_params.append(
                ("organization[name]", params["organization_name"])
            )  # noqa: E501
        if "organization_description" in params:
            form_params.append(
                ("organization[description]", params["organization_description"])
            )  # noqa: E501
        if "organization_user_ids" in params:
            form_params.append(
                ("organization[user_ids]", params["organization_user_ids"])
            )  # noqa: E501
            collection_formats["organization[user_ids]"] = "csv"  # noqa: E501
        if "organization_smart_proxy_ids" in params:
            form_params.append(
                (
                    "organization[smart_proxy_ids]",
                    params["organization_smart_proxy_ids"],
                )
            )  # noqa: E501
            collection_formats["organization[smart_proxy_ids]"] = "csv"  # noqa: E501
        if "organization_compute_resource_ids" in params:
            form_params.append(
                (
                    "organization[compute_resource_ids]",
                    params["organization_compute_resource_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "organization[compute_resource_ids]"
            ] = "csv"  # noqa: E501
        if "organization_medium_ids" in params:
            form_params.append(
                ("organization[medium_ids]", params["organization_medium_ids"])
            )  # noqa: E501
            collection_formats["organization[medium_ids]"] = "csv"  # noqa: E501
        if "organization_ptable_ids" in params:
            form_params.append(
                ("organization[ptable_ids]", params["organization_ptable_ids"])
            )  # noqa: E501
            collection_formats["organization[ptable_ids]"] = "csv"  # noqa: E501
        if "organization_provisioning_template_ids" in params:
            form_params.append(
                (
                    "organization[provisioning_template_ids]",
                    params["organization_provisioning_template_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "organization[provisioning_template_ids]"
            ] = "csv"  # noqa: E501
        if "organization_domain_ids" in params:
            form_params.append(
                ("organization[domain_ids]", params["organization_domain_ids"])
            )  # noqa: E501
            collection_formats["organization[domain_ids]"] = "csv"  # noqa: E501
        if "organization_realm_ids" in params:
            form_params.append(
                ("organization[realm_ids]", params["organization_realm_ids"])
            )  # noqa: E501
            collection_formats["organization[realm_ids]"] = "csv"  # noqa: E501
        if "organization_hostgroup_ids" in params:
            form_params.append(
                ("organization[hostgroup_ids]", params["organization_hostgroup_ids"])
            )  # noqa: E501
            collection_formats["organization[hostgroup_ids]"] = "csv"  # noqa: E501
        if "organization_environment_ids" in params:
            form_params.append(
                (
                    "organization[environment_ids]",
                    params["organization_environment_ids"],
                )
            )  # noqa: E501
            collection_formats["organization[environment_ids]"] = "csv"  # noqa: E501
        if "organization_subnet_ids" in params:
            form_params.append(
                ("organization[subnet_ids]", params["organization_subnet_ids"])
            )  # noqa: E501
            collection_formats["organization[subnet_ids]"] = "csv"  # noqa: E501
        if "organization_ignore_types" in params:
            form_params.append(
                ("organization[ignore_types]", params["organization_ignore_types"])
            )  # noqa: E501
            collection_formats["organization[ignore_types]"] = "csv"  # noqa: E501
        if "organization_location_ids" in params:
            form_params.append(
                ("organization[location_ids]", params["organization_location_ids"])
            )  # noqa: E501
            collection_formats["organization[location_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_id_cdn_configuration(self, id, type, **kwargs):  # noqa: E501
        """Update the CDN configuration  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_cdn_configuration(id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the Organization (required)
        :param str type: CDN configuration type. One of redhat_cdn, network_sync, export_sync, custom_cdn. (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str url: Upstream foreman server to sync CDN content from. Relevant only for 'upstream_server' type.
        :param str username: Username for authentication. Relevant only for 'upstream_server' type.
        :param str password: Password for authentication. Relevant only for 'upstream_server' type.
        :param str upstream_organization_label: Upstream organization to sync CDN content from. Relevant only for 'upstream_server' type.
        :param str upstream_content_view_label: Upstream Content View Label, default: Default_Organization_View. Relevant only for 'upstream_server' type.
        :param str upstream_lifecycle_environment_label: Upstream Lifecycle Environment, default: Library. Relevant only for 'upstream_server' type.
        :param float ssl_ca_credential_id: Content Credential to use for SSL CA. Relevant only for 'upstream_server' type.
        :param bool custom_cdn_auth_enabled: If product certificates should be used to authenticate to a custom CDN.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organizations_id_cdn_configuration_with_http_info(
                id, type, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_organizations_id_cdn_configuration_with_http_info(
                id, type, **kwargs
            )  # noqa: E501
            return data

    def put_organizations_id_cdn_configuration_with_http_info(
        self, id, type, **kwargs
    ):  # noqa: E501
        """Update the CDN configuration  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_cdn_configuration_with_http_info(id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the Organization (required)
        :param str type: CDN configuration type. One of redhat_cdn, network_sync, export_sync, custom_cdn. (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str url: Upstream foreman server to sync CDN content from. Relevant only for 'upstream_server' type.
        :param str username: Username for authentication. Relevant only for 'upstream_server' type.
        :param str password: Password for authentication. Relevant only for 'upstream_server' type.
        :param str upstream_organization_label: Upstream organization to sync CDN content from. Relevant only for 'upstream_server' type.
        :param str upstream_content_view_label: Upstream Content View Label, default: Default_Organization_View. Relevant only for 'upstream_server' type.
        :param str upstream_lifecycle_environment_label: Upstream Lifecycle Environment, default: Library. Relevant only for 'upstream_server' type.
        :param float ssl_ca_credential_id: Content Credential to use for SSL CA. Relevant only for 'upstream_server' type.
        :param bool custom_cdn_auth_enabled: If product certificates should be used to authenticate to a custom CDN.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "type",
            "location_id",
            "organization_id",
            "url",
            "username",
            "password",
            "upstream_organization_label",
            "upstream_content_view_label",
            "upstream_lifecycle_environment_label",
            "ssl_ca_credential_id",
            "custom_cdn_auth_enabled",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_id_cdn_configuration" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_organizations_id_cdn_configuration`"
            )  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and (
            "type" not in params or params["type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `type` when calling `put_organizations_id_cdn_configuration`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "type" in params:
            form_params.append(("type", params["type"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "url" in params:
            form_params.append(("url", params["url"]))  # noqa: E501
        if "username" in params:
            form_params.append(("username", params["username"]))  # noqa: E501
        if "password" in params:
            form_params.append(("password", params["password"]))  # noqa: E501
        if "upstream_organization_label" in params:
            form_params.append(
                ("upstream_organization_label", params["upstream_organization_label"])
            )  # noqa: E501
        if "upstream_content_view_label" in params:
            form_params.append(
                ("upstream_content_view_label", params["upstream_content_view_label"])
            )  # noqa: E501
        if "upstream_lifecycle_environment_label" in params:
            form_params.append(
                (
                    "upstream_lifecycle_environment_label",
                    params["upstream_lifecycle_environment_label"],
                )
            )  # noqa: E501
        if "ssl_ca_credential_id" in params:
            form_params.append(
                ("ssl_ca_credential_id", params["ssl_ca_credential_id"])
            )  # noqa: E501
        if "custom_cdn_auth_enabled" in params:
            form_params.append(
                ("custom_cdn_auth_enabled", params["custom_cdn_auth_enabled"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{id}/cdn_configuration",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_id_repo_discover(self, id, **kwargs):  # noqa: E501
        """Discover Repositories  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_repo_discover(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Organization ID (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str url: Base URL to perform repo discovery on
        :param str content_type: One of yum or docker
        :param str upstream_username: Username to access URL
        :param str upstream_password: Password to access URL
        :param str search: Search pattern (defaults to '*')
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organizations_id_repo_discover_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_organizations_id_repo_discover_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_organizations_id_repo_discover_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Discover Repositories  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_repo_discover_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Organization ID (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str url: Base URL to perform repo discovery on
        :param str content_type: One of yum or docker
        :param str upstream_username: Username to access URL
        :param str upstream_password: Password to access URL
        :param str search: Search pattern (defaults to '*')
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "url",
            "content_type",
            "upstream_username",
            "upstream_password",
            "search",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_id_repo_discover" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_organizations_id_repo_discover`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "url" in params:
            form_params.append(("url", params["url"]))  # noqa: E501
        if "content_type" in params:
            form_params.append(("content_type", params["content_type"]))  # noqa: E501
        if "upstream_username" in params:
            form_params.append(
                ("upstream_username", params["upstream_username"])
            )  # noqa: E501
        if "upstream_password" in params:
            form_params.append(
                ("upstream_password", params["upstream_password"])
            )  # noqa: E501
        if "search" in params:
            form_params.append(("search", params["search"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{id}/repo_discover",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_label_cancel_repo_discover(
        self, label, **kwargs
    ):  # noqa: E501
        """Cancel repository discovery  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_label_cancel_repo_discover(label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label: Organization label (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str url: base url to perform repo discovery on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organizations_label_cancel_repo_discover_with_http_info(
                label, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_organizations_label_cancel_repo_discover_with_http_info(
                label, **kwargs
            )  # noqa: E501
            return data

    def put_organizations_label_cancel_repo_discover_with_http_info(
        self, label, **kwargs
    ):  # noqa: E501
        """Cancel repository discovery  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_label_cancel_repo_discover_with_http_info(label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label: Organization label (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str url: base url to perform repo discovery on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["label", "location_id", "organization_id", "url"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_label_cancel_repo_discover" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'label' is set
        if self.api_client.client_side_validation and (
            "label" not in params or params["label"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `label` when calling `put_organizations_label_cancel_repo_discover`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "label" in params:
            path_params["label"] = params["label"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "url" in params:
            form_params.append(("url", params["url"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{label}/cancel_repo_discover",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
