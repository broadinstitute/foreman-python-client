# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class HostCollectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_host_collections_id(self, id, **kwargs):  # noqa: E501
        """Destroy a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_host_collections_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the host collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_host_collections_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_host_collections_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_host_collections_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Destroy a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_host_collections_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the host collection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_host_collections_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_host_collections_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/host_collections/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_activation_keys_activation_key_id_host_collections(
        self, activation_key_id, organization_id, **kwargs
    ):  # noqa: E501
        """List host collections in an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_activation_key_id_host_collections(activation_key_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activation_key_id: activation key identifier (required)
        :param float organization_id: organization identifier (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: host collection name to filter by
        :param float host_id: Filter products by host id
        :param str available_for: Interpret specified object to return only Host Collections that can be associated with specified object. The value 'host' is supported.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_activation_keys_activation_key_id_host_collections_with_http_info(
                activation_key_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_activation_keys_activation_key_id_host_collections_with_http_info(
                activation_key_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_activation_keys_activation_key_id_host_collections_with_http_info(
        self, activation_key_id, organization_id, **kwargs
    ):  # noqa: E501
        """List host collections in an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_activation_key_id_host_collections_with_http_info(activation_key_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activation_key_id: activation key identifier (required)
        :param float organization_id: organization identifier (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: host collection name to filter by
        :param float host_id: Filter products by host id
        :param str available_for: Interpret specified object to return only Host Collections that can be associated with specified object. The value 'host' is supported.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "activation_key_id",
            "organization_id",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
            "name",
            "host_id",
            "available_for",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activation_keys_activation_key_id_host_collections"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'activation_key_id' is set
        if self.api_client.client_side_validation and (
            "activation_key_id" not in params or params["activation_key_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `activation_key_id` when calling `get_activation_keys_activation_key_id_host_collections`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_activation_keys_activation_key_id_host_collections`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "activation_key_id" in params:
            path_params["activation_key_id"] = params["activation_key_id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{activation_key_id}/host_collections",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_host_collections(
        self, organization_id, activation_key_id, **kwargs
    ):  # noqa: E501
        """List host collections  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_collections(organization_id, activation_key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param str activation_key_id: activation key identifier (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: host collection name to filter by
        :param float host_id: Filter products by host id
        :param str available_for: Interpret specified object to return only Host Collections that can be associated with specified object. The value 'host' is supported.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_host_collections_with_http_info(
                organization_id, activation_key_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_host_collections_with_http_info(
                organization_id, activation_key_id, **kwargs
            )  # noqa: E501
            return data

    def get_host_collections_with_http_info(
        self, organization_id, activation_key_id, **kwargs
    ):  # noqa: E501
        """List host collections  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_collections_with_http_info(organization_id, activation_key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param str activation_key_id: activation key identifier (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: host collection name to filter by
        :param float host_id: Filter products by host id
        :param str available_for: Interpret specified object to return only Host Collections that can be associated with specified object. The value 'host' is supported.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "activation_key_id",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
            "name",
            "host_id",
            "available_for",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_host_collections" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_host_collections`"
            )  # noqa: E501
        # verify the required parameter 'activation_key_id' is set
        if self.api_client.client_side_validation and (
            "activation_key_id" not in params or params["activation_key_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `activation_key_id` when calling `get_host_collections`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "activation_key_id" in params:
            query_params.append(
                ("activation_key_id", params["activation_key_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/host_collections",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_host_collections_id(self, id, **kwargs):  # noqa: E501
        """Show a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_collections_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the host collection (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_host_collections_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_host_collections_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_host_collections_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_collections_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the host collection (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_host_collections_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_host_collections_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/host_collections/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_host_collections(
        self, organization_id, activation_key_id, **kwargs
    ):  # noqa: E501
        """List host collections within an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_host_collections(organization_id, activation_key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param str activation_key_id: activation key identifier (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: host collection name to filter by
        :param float host_id: Filter products by host id
        :param str available_for: Interpret specified object to return only Host Collections that can be associated with specified object. The value 'host' is supported.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_organizations_organization_id_host_collections_with_http_info(
                    organization_id, activation_key_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_host_collections_with_http_info(
                organization_id, activation_key_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_host_collections_with_http_info(
        self, organization_id, activation_key_id, **kwargs
    ):  # noqa: E501
        """List host collections within an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_host_collections_with_http_info(organization_id, activation_key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param str activation_key_id: activation key identifier (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: host collection name to filter by
        :param float host_id: Filter products by host id
        :param str available_for: Interpret specified object to return only Host Collections that can be associated with specified object. The value 'host' is supported.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "activation_key_id",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
            "name",
            "host_id",
            "available_for",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_host_collections"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_host_collections`"
            )  # noqa: E501
        # verify the required parameter 'activation_key_id' is set
        if self.api_client.client_side_validation and (
            "activation_key_id" not in params or params["activation_key_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `activation_key_id` when calling `get_organizations_organization_id_host_collections`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "activation_key_id" in params:
            query_params.append(
                ("activation_key_id", params["activation_key_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/host_collections",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_host_collections(self, organization_id, name, **kwargs):  # noqa: E501
        """Create a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_host_collections(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param str name: Host Collection name (required)
        :param str description:
        :param list[str] host_ids: List of host ids to replace the hosts in host collection
        :param float max_hosts: Maximum number of hosts in the host collection
        :param bool unlimited_hosts: Whether or not the host collection may have unlimited hosts
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_host_collections_with_http_info(
                organization_id, name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_host_collections_with_http_info(
                organization_id, name, **kwargs
            )  # noqa: E501
            return data

    def post_host_collections_with_http_info(
        self, organization_id, name, **kwargs
    ):  # noqa: E501
        """Create a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_host_collections_with_http_info(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param str name: Host Collection name (required)
        :param str description:
        :param list[str] host_ids: List of host ids to replace the hosts in host collection
        :param float max_hosts: Maximum number of hosts in the host collection
        :param bool unlimited_hosts: Whether or not the host collection may have unlimited hosts
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "name",
            "description",
            "host_ids",
            "max_hosts",
            "unlimited_hosts",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_host_collections" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_host_collections`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_host_collections`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "host_ids" in params:
            form_params.append(("host_ids", params["host_ids"]))  # noqa: E501
            collection_formats["host_ids"] = "csv"  # noqa: E501
        if "max_hosts" in params:
            form_params.append(("max_hosts", params["max_hosts"]))  # noqa: E501
        if "unlimited_hosts" in params:
            form_params.append(
                ("unlimited_hosts", params["unlimited_hosts"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/host_collections",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_host_collections_id_copy(self, id, name, **kwargs):  # noqa: E501
        """Make copy of a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_host_collections_id_copy(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the host collection (required)
        :param str name: New host collection name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_host_collections_id_copy_with_http_info(
                id, name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_host_collections_id_copy_with_http_info(
                id, name, **kwargs
            )  # noqa: E501
            return data

    def post_host_collections_id_copy_with_http_info(
        self, id, name, **kwargs
    ):  # noqa: E501
        """Make copy of a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_host_collections_id_copy_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the host collection (required)
        :param str name: New host collection name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_host_collections_id_copy" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_host_collections_id_copy`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_host_collections_id_copy`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/host_collections/{id}/copy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organizations_organization_id_host_collections(
        self, organization_id, name, **kwargs
    ):  # noqa: E501
        """Create a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_host_collections(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param str name: Host Collection name (required)
        :param str description:
        :param list[str] host_ids: List of host ids to replace the hosts in host collection
        :param float max_hosts: Maximum number of hosts in the host collection
        :param bool unlimited_hosts: Whether or not the host collection may have unlimited hosts
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.post_organizations_organization_id_host_collections_with_http_info(
                    organization_id, name, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.post_organizations_organization_id_host_collections_with_http_info(
                organization_id, name, **kwargs
            )  # noqa: E501
            return data

    def post_organizations_organization_id_host_collections_with_http_info(
        self, organization_id, name, **kwargs
    ):  # noqa: E501
        """Create a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_host_collections_with_http_info(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param str name: Host Collection name (required)
        :param str description:
        :param list[str] host_ids: List of host ids to replace the hosts in host collection
        :param float max_hosts: Maximum number of hosts in the host collection
        :param bool unlimited_hosts: Whether or not the host collection may have unlimited hosts
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "name",
            "description",
            "host_ids",
            "max_hosts",
            "unlimited_hosts",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations_organization_id_host_collections"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organizations_organization_id_host_collections`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_organizations_organization_id_host_collections`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "host_ids" in params:
            form_params.append(("host_ids", params["host_ids"]))  # noqa: E501
            collection_formats["host_ids"] = "csv"  # noqa: E501
        if "max_hosts" in params:
            form_params.append(("max_hosts", params["max_hosts"]))  # noqa: E501
        if "unlimited_hosts" in params:
            form_params.append(
                ("unlimited_hosts", params["unlimited_hosts"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/host_collections",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_host_collections_id(self, id, **kwargs):  # noqa: E501
        """Update a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_host_collections_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the host collection (required)
        :param str name: Host Collection name
        :param str description:
        :param list[str] host_ids: List of host ids to replace the hosts in host collection
        :param float max_hosts: Maximum number of hosts in the host collection
        :param bool unlimited_hosts: Whether or not the host collection may have unlimited hosts
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_host_collections_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_host_collections_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_host_collections_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_host_collections_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the host collection (required)
        :param str name: Host Collection name
        :param str description:
        :param list[str] host_ids: List of host ids to replace the hosts in host collection
        :param float max_hosts: Maximum number of hosts in the host collection
        :param bool unlimited_hosts: Whether or not the host collection may have unlimited hosts
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "name",
            "description",
            "host_ids",
            "max_hosts",
            "unlimited_hosts",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_host_collections_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_host_collections_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "host_ids" in params:
            form_params.append(("host_ids", params["host_ids"]))  # noqa: E501
            collection_formats["host_ids"] = "csv"  # noqa: E501
        if "max_hosts" in params:
            form_params.append(("max_hosts", params["max_hosts"]))  # noqa: E501
        if "unlimited_hosts" in params:
            form_params.append(
                ("unlimited_hosts", params["unlimited_hosts"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/host_collections/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_host_collections_id_add_hosts(self, id, **kwargs):  # noqa: E501
        """Add host to the host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_host_collections_id_add_hosts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the host collection (required)
        :param list[str] host_ids: Array of host ids
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_host_collections_id_add_hosts_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_host_collections_id_add_hosts_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_host_collections_id_add_hosts_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Add host to the host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_host_collections_id_add_hosts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the host collection (required)
        :param list[str] host_ids: Array of host ids
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "host_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_host_collections_id_add_hosts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_host_collections_id_add_hosts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_ids" in params:
            form_params.append(("host_ids", params["host_ids"]))  # noqa: E501
            collection_formats["host_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/host_collections/{id}/add_hosts",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_host_collections_id_remove_hosts(self, id, **kwargs):  # noqa: E501
        """Remove hosts from the host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_host_collections_id_remove_hosts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the host collection (required)
        :param list[str] host_ids: Array of host ids
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_host_collections_id_remove_hosts_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_host_collections_id_remove_hosts_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_host_collections_id_remove_hosts_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Remove hosts from the host collection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_host_collections_id_remove_hosts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Id of the host collection (required)
        :param list[str] host_ids: Array of host ids
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "host_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_host_collections_id_remove_hosts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_host_collections_id_remove_hosts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_ids" in params:
            form_params.append(("host_ids", params["host_ids"]))  # noqa: E501
            collection_formats["host_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/host_collections/{id}/remove_hosts",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
