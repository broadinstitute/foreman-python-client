# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class HostsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_hosts_id(self, id, **kwargs):  # noqa: E501
        """Delete a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_hosts_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_hosts_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_hosts_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hosts_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_hosts_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_hosts_id_status_type(self, id, type, **kwargs):  # noqa: E501
        """Clear sub-status of host  # noqa: E501

        Clears a host sub-status of a given type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_id_status_type(id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str type: status type  (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_hosts_id_status_type_with_http_info(
                id, type, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_hosts_id_status_type_with_http_info(
                id, type, **kwargs
            )  # noqa: E501
            return data

    def delete_hosts_id_status_type_with_http_info(
        self, id, type, **kwargs
    ):  # noqa: E501
        """Clear sub-status of host  # noqa: E501

        Clears a host sub-status of a given type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_id_status_type_with_http_info(id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str type: status type  (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "type", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hosts_id_status_type" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_hosts_id_status_type`"
            )  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and (
            "type" not in params or params["type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `type` when calling `delete_hosts_id_status_type`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "type" in params:
            path_params["type"] = params["type"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/status/{type}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hostgroups_hostgroup_id_hosts(
        self, hostgroup_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all hosts for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups_hostgroup_id_hosts(hostgroup_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param bool thin: Only list ID and name of hosts
        :param str include: Array of extra information types to include
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hostgroups_hostgroup_id_hosts_with_http_info(
                hostgroup_id, location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hostgroups_hostgroup_id_hosts_with_http_info(
                hostgroup_id, location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_hostgroups_hostgroup_id_hosts_with_http_info(
        self, hostgroup_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all hosts for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups_hostgroup_id_hosts_with_http_info(hostgroup_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param bool thin: Only list ID and name of hosts
        :param str include: Array of extra information types to include
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "hostgroup_id",
            "location_id",
            "organization_id",
            "thin",
            "include",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hostgroups_hostgroup_id_hosts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_hostgroups_hostgroup_id_hosts`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_hostgroups_hostgroup_id_hosts`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_hostgroups_hostgroup_id_hosts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "hostgroup_id" in params:
            path_params["hostgroup_id"] = params["hostgroup_id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "thin" in params:
            query_params.append(("thin", params["thin"]))  # noqa: E501
        if "include" in params:
            query_params.append(("include", params["include"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{hostgroup_id}/hosts",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts(
        self, hostgroup_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts(hostgroup_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param bool thin: Only list ID and name of hosts
        :param str include: Array of extra information types to include
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_with_http_info(
                hostgroup_id, location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hosts_with_http_info(
                hostgroup_id, location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_with_http_info(
        self, hostgroup_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_with_http_info(hostgroup_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param bool thin: Only list ID and name of hosts
        :param str include: Array of extra information types to include
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "hostgroup_id",
            "location_id",
            "organization_id",
            "thin",
            "include",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_hosts`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_hosts`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_hosts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "thin" in params:
            query_params.append(("thin", params["thin"]))  # noqa: E501
        if "include" in params:
            query_params.append(("include", params["include"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_id(self, id, **kwargs):  # noqa: E501
        """Show a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool show_hidden_parameters: Display hidden parameter values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hosts_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_hosts_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool show_hidden_parameters: Display hidden parameter values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "show_hidden_parameters",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hosts_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "show_hidden_parameters" in params:
            query_params.append(
                ("show_hidden_parameters", params["show_hidden_parameters"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_id_enc(self, id, **kwargs):  # noqa: E501
        """Get ENC values of host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_enc(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_id_enc_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hosts_id_enc_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_hosts_id_enc_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get ENC values of host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_enc_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_id_enc" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hosts_id_enc`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/enc",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_id_inherited_parameters(self, id, **kwargs):  # noqa: E501
        """Get all inherited parameters for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_inherited_parameters(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_id_inherited_parameters_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hosts_id_inherited_parameters_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_id_inherited_parameters_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Get all inherited parameters for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_inherited_parameters_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_id_inherited_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hosts_id_inherited_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/inherited_parameters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_id_power(self, id, **kwargs):  # noqa: E501
        """Fetch the status of whether the host is powered on or not. Supported hosts are VMs and physical hosts with BMCs.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_power(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str timeout: Timeout to retrieve the power status of the host in seconds. Default is 3 seconds.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_id_power_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hosts_id_power_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_hosts_id_power_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fetch the status of whether the host is powered on or not. Supported hosts are VMs and physical hosts with BMCs.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_power_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str timeout: Timeout to retrieve the power status of the host in seconds. Default is 3 seconds.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id", "timeout"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_id_power" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hosts_id_power`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "timeout" in params:
            query_params.append(("timeout", params["timeout"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/power",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_id_status_type(self, id, type, **kwargs):  # noqa: E501
        """Get status of host  # noqa: E501

        Returns string representing a host status of a given type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_status_type(id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str type: status type, can be one of * global * configuration * build  (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_id_status_type_with_http_info(
                id, type, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hosts_id_status_type_with_http_info(
                id, type, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_id_status_type_with_http_info(self, id, type, **kwargs):  # noqa: E501
        """Get status of host  # noqa: E501

        Returns string representing a host status of a given type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_status_type_with_http_info(id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str type: status type, can be one of * global * configuration * build  (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "type", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_id_status_type" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hosts_id_status_type`"
            )  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and (
            "type" not in params or params["type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `type` when calling `get_hosts_id_status_type`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "type" in params:
            path_params["type"] = params["type"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/status/{type}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_id_template_kind(self, id, kind, **kwargs):  # noqa: E501
        """Preview rendered provisioning template content  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_template_kind(id, kind, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str kind: Template kinds, available values: Bootdisk, PXELinux, PXEGrub, PXEGrub2, iPXE, provision, finish, script, user_data, ZTP, POAP, cloud-init, host_init_config, registration, kexec (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_id_template_kind_with_http_info(
                id, kind, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hosts_id_template_kind_with_http_info(
                id, kind, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_id_template_kind_with_http_info(
        self, id, kind, **kwargs
    ):  # noqa: E501
        """Preview rendered provisioning template content  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_template_kind_with_http_info(id, kind, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str kind: Template kinds, available values: Bootdisk, PXELinux, PXEGrub, PXEGrub2, iPXE, provision, finish, script, user_data, ZTP, POAP, cloud-init, host_init_config, registration, kexec (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "kind", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_id_template_kind" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hosts_id_template_kind`"
            )  # noqa: E501
        # verify the required parameter 'kind' is set
        if self.api_client.client_side_validation and (
            "kind" not in params or params["kind"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `kind` when calling `get_hosts_id_template_kind`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "kind" in params:
            path_params["kind"] = params["kind"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/template/{kind}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_id_templates(self, id, **kwargs):  # noqa: E501
        """Get provisioning templates for the host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_templates(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_id_templates_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hosts_id_templates_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_id_templates_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get provisioning templates for the host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_templates_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_id_templates" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hosts_id_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/templates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_id_vm_compute_attributes(self, id, **kwargs):  # noqa: E501
        """Get vm attributes of host  # noqa: E501

        Return the host's compute attributes that can be used to create a clone of this VM   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_vm_compute_attributes(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_id_vm_compute_attributes_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hosts_id_vm_compute_attributes_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_id_vm_compute_attributes_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Get vm attributes of host  # noqa: E501

        Return the host's compute attributes that can be used to create a clone of this VM   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_id_vm_compute_attributes_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_id_vm_compute_attributes" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hosts_id_vm_compute_attributes`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/vm_compute_attributes",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_location_id_hosts(
        self, location_id, hostgroup_id, organization_id, **kwargs
    ):  # noqa: E501
        """List hosts per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_hosts(location_id, hostgroup_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str hostgroup_id: ID of host group (required)
        :param str organization_id: ID of organization (required)
        :param bool thin: Only list ID and name of hosts
        :param str include: Array of extra information types to include
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_location_id_hosts_with_http_info(
                location_id, hostgroup_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_locations_location_id_hosts_with_http_info(
                location_id, hostgroup_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_locations_location_id_hosts_with_http_info(
        self, location_id, hostgroup_id, organization_id, **kwargs
    ):  # noqa: E501
        """List hosts per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_hosts_with_http_info(location_id, hostgroup_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str hostgroup_id: ID of host group (required)
        :param str organization_id: ID of organization (required)
        :param bool thin: Only list ID and name of hosts
        :param str include: Array of extra information types to include
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "hostgroup_id",
            "organization_id",
            "thin",
            "include",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_location_id_hosts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_locations_location_id_hosts`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_locations_location_id_hosts`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_locations_location_id_hosts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "thin" in params:
            query_params.append(("thin", params["thin"]))  # noqa: E501
        if "include" in params:
            query_params.append(("include", params["include"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/hosts",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_hosts(
        self, organization_id, hostgroup_id, location_id, **kwargs
    ):  # noqa: E501
        """List hosts per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_hosts(organization_id, hostgroup_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str hostgroup_id: ID of host group (required)
        :param str location_id: ID of location (required)
        :param bool thin: Only list ID and name of hosts
        :param str include: Array of extra information types to include
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_hosts_with_http_info(
                organization_id, hostgroup_id, location_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_organization_id_hosts_with_http_info(
                organization_id, hostgroup_id, location_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_hosts_with_http_info(
        self, organization_id, hostgroup_id, location_id, **kwargs
    ):  # noqa: E501
        """List hosts per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_hosts_with_http_info(organization_id, hostgroup_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str hostgroup_id: ID of host group (required)
        :param str location_id: ID of location (required)
        :param bool thin: Only list ID and name of hosts
        :param str include: Array of extra information types to include
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "hostgroup_id",
            "location_id",
            "thin",
            "include",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_hosts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_hosts`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_organizations_organization_id_hosts`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_organizations_organization_id_hosts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "thin" in params:
            query_params.append(("thin", params["thin"]))  # noqa: E501
        if "include" in params:
            query_params.append(("include", params["include"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/hosts",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hosts(
        self, host_name, host_location_id, host_organization_id, **kwargs
    ):  # noqa: E501
        """Create a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts(host_name, host_location_id, host_organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_name: (required)
        :param float host_location_id: (required)
        :param float host_organization_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str host_ip: not required if using a subnet with DHCP proxy
        :param str host_mac: required for managed host that is bare metal, not required if it's a virtual machine
        :param float host_architecture_id: required if host is managed and value is not inherited from host group
        :param float host_domain_id: required if host is managed and value is not inherited from host group
        :param float host_realm_id:
        :param float host_puppet_proxy_id: Puppet proxy ID
        :param float host_puppet_ca_proxy_id: Puppet CA proxy ID
        :param float host_operatingsystem_id: required if host is managed and value is not inherited from host group
        :param str host_medium_id: required if not imaged based provisioning and host is managed and value is not inherited from host group
        :param str host_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :param float host_ptable_id: required if host is managed and custom partition has not been defined
        :param float host_subnet_id: required if host is managed and value is not inherited from host group
        :param float host_compute_resource_id: nil means host is bare metal
        :param str host_root_pass: required if host is managed and value is not inherited from host group or default password in settings
        :param float host_model_id:
        :param float host_hostgroup_id:
        :param float host_owner_id:
        :param str host_owner_type: Host's owner type
        :param float host_image_id:
        :param list[str] host_host_parameters_attributes: Host's parameters (array or indexed hash)
        :param bool host_build:
        :param bool host_enabled: Include this host within Foreman reporting
        :param str host_provision_method: The method used to provision the host.
        :param bool host_managed: True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not
        :param str host_progress_report_id: UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks
        :param str host_comment: Additional information about this host
        :param str host_capabilities:
        :param float host_compute_profile_id:
        :param list[str] host_interfaces_attributes: Host's network interfaces.
        :param float host_content_facet_attributes_content_view_id:
        :param float host_content_facet_attributes_lifecycle_environment_id:
        :param float host_content_facet_attributes_content_source_id:
        :param float host_content_facet_attributes_kickstart_repository_id: Repository Id associated with the kickstart repo used for provisioning
        :param str host_subscription_facet_attributes_release_version: Release version for this Host to use (7Server, 7.1, etc)
        :param bool host_subscription_facet_attributes_autoheal: Sets whether the Host will autoheal subscriptions upon checkin
        :param str host_subscription_facet_attributes_purpose_usage: Sets the system purpose usage
        :param str host_subscription_facet_attributes_purpose_role: Sets the system purpose usage
        :param list[str] host_subscription_facet_attributes_purpose_addons: Sets the system add-ons
        :param str host_subscription_facet_attributes_service_level: Service level to be used for autoheal
        :param list[str] host_subscription_facet_attributes_hypervisor_guest_uuids: List of hypervisor guest uuids
        :param list[str] host_subscription_facet_attributes_installed_products_attributes: List of products installed on the host
        :param bool host_overwrite: Overwrite existing host (true by default)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hosts_with_http_info(
                host_name, host_location_id, host_organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hosts_with_http_info(
                host_name, host_location_id, host_organization_id, **kwargs
            )  # noqa: E501
            return data

    def post_hosts_with_http_info(
        self, host_name, host_location_id, host_organization_id, **kwargs
    ):  # noqa: E501
        """Create a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_with_http_info(host_name, host_location_id, host_organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_name: (required)
        :param float host_location_id: (required)
        :param float host_organization_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str host_ip: not required if using a subnet with DHCP proxy
        :param str host_mac: required for managed host that is bare metal, not required if it's a virtual machine
        :param float host_architecture_id: required if host is managed and value is not inherited from host group
        :param float host_domain_id: required if host is managed and value is not inherited from host group
        :param float host_realm_id:
        :param float host_puppet_proxy_id: Puppet proxy ID
        :param float host_puppet_ca_proxy_id: Puppet CA proxy ID
        :param float host_operatingsystem_id: required if host is managed and value is not inherited from host group
        :param str host_medium_id: required if not imaged based provisioning and host is managed and value is not inherited from host group
        :param str host_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :param float host_ptable_id: required if host is managed and custom partition has not been defined
        :param float host_subnet_id: required if host is managed and value is not inherited from host group
        :param float host_compute_resource_id: nil means host is bare metal
        :param str host_root_pass: required if host is managed and value is not inherited from host group or default password in settings
        :param float host_model_id:
        :param float host_hostgroup_id:
        :param float host_owner_id:
        :param str host_owner_type: Host's owner type
        :param float host_image_id:
        :param list[str] host_host_parameters_attributes: Host's parameters (array or indexed hash)
        :param bool host_build:
        :param bool host_enabled: Include this host within Foreman reporting
        :param str host_provision_method: The method used to provision the host.
        :param bool host_managed: True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not
        :param str host_progress_report_id: UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks
        :param str host_comment: Additional information about this host
        :param str host_capabilities:
        :param float host_compute_profile_id:
        :param list[str] host_interfaces_attributes: Host's network interfaces.
        :param float host_content_facet_attributes_content_view_id:
        :param float host_content_facet_attributes_lifecycle_environment_id:
        :param float host_content_facet_attributes_content_source_id:
        :param float host_content_facet_attributes_kickstart_repository_id: Repository Id associated with the kickstart repo used for provisioning
        :param str host_subscription_facet_attributes_release_version: Release version for this Host to use (7Server, 7.1, etc)
        :param bool host_subscription_facet_attributes_autoheal: Sets whether the Host will autoheal subscriptions upon checkin
        :param str host_subscription_facet_attributes_purpose_usage: Sets the system purpose usage
        :param str host_subscription_facet_attributes_purpose_role: Sets the system purpose usage
        :param list[str] host_subscription_facet_attributes_purpose_addons: Sets the system add-ons
        :param str host_subscription_facet_attributes_service_level: Service level to be used for autoheal
        :param list[str] host_subscription_facet_attributes_hypervisor_guest_uuids: List of hypervisor guest uuids
        :param list[str] host_subscription_facet_attributes_installed_products_attributes: List of products installed on the host
        :param bool host_overwrite: Overwrite existing host (true by default)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_name",
            "host_location_id",
            "host_organization_id",
            "location_id",
            "organization_id",
            "host_ip",
            "host_mac",
            "host_architecture_id",
            "host_domain_id",
            "host_realm_id",
            "host_puppet_proxy_id",
            "host_puppet_ca_proxy_id",
            "host_operatingsystem_id",
            "host_medium_id",
            "host_pxe_loader",
            "host_ptable_id",
            "host_subnet_id",
            "host_compute_resource_id",
            "host_root_pass",
            "host_model_id",
            "host_hostgroup_id",
            "host_owner_id",
            "host_owner_type",
            "host_image_id",
            "host_host_parameters_attributes",
            "host_build",
            "host_enabled",
            "host_provision_method",
            "host_managed",
            "host_progress_report_id",
            "host_comment",
            "host_capabilities",
            "host_compute_profile_id",
            "host_interfaces_attributes",
            "host_content_facet_attributes_content_view_id",
            "host_content_facet_attributes_lifecycle_environment_id",
            "host_content_facet_attributes_content_source_id",
            "host_content_facet_attributes_kickstart_repository_id",
            "host_subscription_facet_attributes_release_version",
            "host_subscription_facet_attributes_autoheal",
            "host_subscription_facet_attributes_purpose_usage",
            "host_subscription_facet_attributes_purpose_role",
            "host_subscription_facet_attributes_purpose_addons",
            "host_subscription_facet_attributes_service_level",
            "host_subscription_facet_attributes_hypervisor_guest_uuids",
            "host_subscription_facet_attributes_installed_products_attributes",
            "host_overwrite",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hosts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_name' is set
        if self.api_client.client_side_validation and (
            "host_name" not in params or params["host_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_name` when calling `post_hosts`"
            )  # noqa: E501
        # verify the required parameter 'host_location_id' is set
        if self.api_client.client_side_validation and (
            "host_location_id" not in params or params["host_location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_location_id` when calling `post_hosts`"
            )  # noqa: E501
        # verify the required parameter 'host_organization_id' is set
        if self.api_client.client_side_validation and (
            "host_organization_id" not in params
            or params["host_organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_organization_id` when calling `post_hosts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_name" in params:
            form_params.append(("host[name]", params["host_name"]))  # noqa: E501
        if "host_location_id" in params:
            form_params.append(
                ("host[location_id]", params["host_location_id"])
            )  # noqa: E501
        if "host_organization_id" in params:
            form_params.append(
                ("host[organization_id]", params["host_organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "host_ip" in params:
            form_params.append(("host[ip]", params["host_ip"]))  # noqa: E501
        if "host_mac" in params:
            form_params.append(("host[mac]", params["host_mac"]))  # noqa: E501
        if "host_architecture_id" in params:
            form_params.append(
                ("host[architecture_id]", params["host_architecture_id"])
            )  # noqa: E501
        if "host_domain_id" in params:
            form_params.append(
                ("host[domain_id]", params["host_domain_id"])
            )  # noqa: E501
        if "host_realm_id" in params:
            form_params.append(
                ("host[realm_id]", params["host_realm_id"])
            )  # noqa: E501
        if "host_puppet_proxy_id" in params:
            form_params.append(
                ("host[puppet_proxy_id]", params["host_puppet_proxy_id"])
            )  # noqa: E501
        if "host_puppet_ca_proxy_id" in params:
            form_params.append(
                ("host[puppet_ca_proxy_id]", params["host_puppet_ca_proxy_id"])
            )  # noqa: E501
        if "host_operatingsystem_id" in params:
            form_params.append(
                ("host[operatingsystem_id]", params["host_operatingsystem_id"])
            )  # noqa: E501
        if "host_medium_id" in params:
            form_params.append(
                ("host[medium_id]", params["host_medium_id"])
            )  # noqa: E501
        if "host_pxe_loader" in params:
            form_params.append(
                ("host[pxe_loader]", params["host_pxe_loader"])
            )  # noqa: E501
        if "host_ptable_id" in params:
            form_params.append(
                ("host[ptable_id]", params["host_ptable_id"])
            )  # noqa: E501
        if "host_subnet_id" in params:
            form_params.append(
                ("host[subnet_id]", params["host_subnet_id"])
            )  # noqa: E501
        if "host_compute_resource_id" in params:
            form_params.append(
                ("host[compute_resource_id]", params["host_compute_resource_id"])
            )  # noqa: E501
        if "host_root_pass" in params:
            form_params.append(
                ("host[root_pass]", params["host_root_pass"])
            )  # noqa: E501
        if "host_model_id" in params:
            form_params.append(
                ("host[model_id]", params["host_model_id"])
            )  # noqa: E501
        if "host_hostgroup_id" in params:
            form_params.append(
                ("host[hostgroup_id]", params["host_hostgroup_id"])
            )  # noqa: E501
        if "host_owner_id" in params:
            form_params.append(
                ("host[owner_id]", params["host_owner_id"])
            )  # noqa: E501
        if "host_owner_type" in params:
            form_params.append(
                ("host[owner_type]", params["host_owner_type"])
            )  # noqa: E501
        if "host_image_id" in params:
            form_params.append(
                ("host[image_id]", params["host_image_id"])
            )  # noqa: E501
        if "host_host_parameters_attributes" in params:
            form_params.append(
                (
                    "host[host_parameters_attributes]",
                    params["host_host_parameters_attributes"],
                )
            )  # noqa: E501
            collection_formats["host[host_parameters_attributes]"] = "csv"  # noqa: E501
        if "host_build" in params:
            form_params.append(("host[build]", params["host_build"]))  # noqa: E501
        if "host_enabled" in params:
            form_params.append(("host[enabled]", params["host_enabled"]))  # noqa: E501
        if "host_provision_method" in params:
            form_params.append(
                ("host[provision_method]", params["host_provision_method"])
            )  # noqa: E501
        if "host_managed" in params:
            form_params.append(("host[managed]", params["host_managed"]))  # noqa: E501
        if "host_progress_report_id" in params:
            form_params.append(
                ("host[progress_report_id]", params["host_progress_report_id"])
            )  # noqa: E501
        if "host_comment" in params:
            form_params.append(("host[comment]", params["host_comment"]))  # noqa: E501
        if "host_capabilities" in params:
            form_params.append(
                ("host[capabilities]", params["host_capabilities"])
            )  # noqa: E501
        if "host_compute_profile_id" in params:
            form_params.append(
                ("host[compute_profile_id]", params["host_compute_profile_id"])
            )  # noqa: E501
        if "host_interfaces_attributes" in params:
            form_params.append(
                ("host[interfaces_attributes]", params["host_interfaces_attributes"])
            )  # noqa: E501
            collection_formats["host[interfaces_attributes]"] = "csv"  # noqa: E501
        if "host_content_facet_attributes_content_view_id" in params:
            form_params.append(
                (
                    "host[content_facet_attributes][content_view_id]",
                    params["host_content_facet_attributes_content_view_id"],
                )
            )  # noqa: E501
        if "host_content_facet_attributes_lifecycle_environment_id" in params:
            form_params.append(
                (
                    "host[content_facet_attributes][lifecycle_environment_id]",
                    params["host_content_facet_attributes_lifecycle_environment_id"],
                )
            )  # noqa: E501
        if "host_content_facet_attributes_content_source_id" in params:
            form_params.append(
                (
                    "host[content_facet_attributes][content_source_id]",
                    params["host_content_facet_attributes_content_source_id"],
                )
            )  # noqa: E501
        if "host_content_facet_attributes_kickstart_repository_id" in params:
            form_params.append(
                (
                    "host[content_facet_attributes][kickstart_repository_id]",
                    params["host_content_facet_attributes_kickstart_repository_id"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_release_version" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][release_version]",
                    params["host_subscription_facet_attributes_release_version"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_autoheal" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][autoheal]",
                    params["host_subscription_facet_attributes_autoheal"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_purpose_usage" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_usage]",
                    params["host_subscription_facet_attributes_purpose_usage"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_purpose_role" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_role]",
                    params["host_subscription_facet_attributes_purpose_role"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_purpose_addons" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_addons]",
                    params["host_subscription_facet_attributes_purpose_addons"],
                )
            )  # noqa: E501
            collection_formats[
                "host[subscription_facet_attributes][purpose_addons]"
            ] = "csv"  # noqa: E501
        if "host_subscription_facet_attributes_service_level" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][service_level]",
                    params["host_subscription_facet_attributes_service_level"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_hypervisor_guest_uuids" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][hypervisor_guest_uuids]",
                    params["host_subscription_facet_attributes_hypervisor_guest_uuids"],
                )
            )  # noqa: E501
            collection_formats[
                "host[subscription_facet_attributes][hypervisor_guest_uuids]"
            ] = "csv"  # noqa: E501
        if "host_subscription_facet_attributes_installed_products_attributes" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][installed_products_attributes]",
                    params[
                        "host_subscription_facet_attributes_installed_products_attributes"
                    ],
                )
            )  # noqa: E501
            collection_formats[
                "host[subscription_facet_attributes][installed_products_attributes]"
            ] = "csv"  # noqa: E501
        if "host_overwrite" in params:
            form_params.append(
                ("host[overwrite]", params["host_overwrite"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hosts_facts(self, name, **kwargs):  # noqa: E501
        """Upload facts for a host, creating the host if required  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_facts(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: hostname of the host (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str certname: optional: certname of the host
        :param str type: optional: the STI type of host to create
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hosts_facts_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_hosts_facts_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def post_hosts_facts_with_http_info(self, name, **kwargs):  # noqa: E501
        """Upload facts for a host, creating the host if required  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_facts_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: hostname of the host (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str certname: optional: certname of the host
        :param str type: optional: the STI type of host to create
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "name",
            "location_id",
            "organization_id",
            "certname",
            "type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hosts_facts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_hosts_facts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "certname" in params:
            form_params.append(("certname", params["certname"]))  # noqa: E501
        if "type" in params:
            form_params.append(("type", params["type"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/facts",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_host_id_host_collections(
        self, host_id, host_collection_ids, **kwargs
    ):  # noqa: E501
        """Alter a host's host collections  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_host_collections(host_id, host_collection_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: The id of the host to alter (required)
        :param list[str] host_collection_ids: List of host collection ids to update (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_host_id_host_collections_with_http_info(
                host_id, host_collection_ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_host_id_host_collections_with_http_info(
                host_id, host_collection_ids, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_host_id_host_collections_with_http_info(
        self, host_id, host_collection_ids, **kwargs
    ):  # noqa: E501
        """Alter a host's host collections  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_host_collections_with_http_info(host_id, host_collection_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: The id of the host to alter (required)
        :param list[str] host_collection_ids: List of host collection ids to update (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "host_collection_ids",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_host_id_host_collections" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_hosts_host_id_host_collections`"
            )  # noqa: E501
        # verify the required parameter 'host_collection_ids' is set
        if self.api_client.client_side_validation and (
            "host_collection_ids" not in params or params["host_collection_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_collection_ids` when calling `put_hosts_host_id_host_collections`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_collection_ids" in params:
            form_params.append(
                ("host_collection_ids", params["host_collection_ids"])
            )  # noqa: E501
            collection_formats["host_collection_ids"] = "csv"  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/host_collections",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_id(self, id, **kwargs):  # noqa: E501
        """Update a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str host_name:
        :param float host_location_id:
        :param float host_organization_id:
        :param str host_ip: not required if using a subnet with DHCP proxy
        :param str host_mac: required for managed host that is bare metal, not required if it's a virtual machine
        :param float host_architecture_id: required if host is managed and value is not inherited from host group
        :param float host_domain_id: required if host is managed and value is not inherited from host group
        :param float host_realm_id:
        :param float host_puppet_proxy_id: Puppet proxy ID
        :param float host_puppet_ca_proxy_id: Puppet CA proxy ID
        :param float host_operatingsystem_id: required if host is managed and value is not inherited from host group
        :param str host_medium_id: required if not imaged based provisioning and host is managed and value is not inherited from host group
        :param str host_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :param float host_ptable_id: required if host is managed and custom partition has not been defined
        :param float host_subnet_id: required if host is managed and value is not inherited from host group
        :param float host_compute_resource_id: nil means host is bare metal
        :param str host_root_pass: required if host is managed and value is not inherited from host group or default password in settings
        :param float host_model_id:
        :param float host_hostgroup_id:
        :param float host_owner_id:
        :param str host_owner_type: Host's owner type
        :param float host_image_id:
        :param list[str] host_host_parameters_attributes: Host's parameters (array or indexed hash)
        :param bool host_build:
        :param bool host_enabled: Include this host within Foreman reporting
        :param str host_provision_method: The method used to provision the host.
        :param bool host_managed: True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not
        :param str host_progress_report_id: UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks
        :param str host_comment: Additional information about this host
        :param str host_capabilities:
        :param float host_compute_profile_id:
        :param list[str] host_interfaces_attributes: Host's network interfaces.
        :param float host_content_facet_attributes_content_view_id:
        :param float host_content_facet_attributes_lifecycle_environment_id:
        :param float host_content_facet_attributes_content_source_id:
        :param float host_content_facet_attributes_kickstart_repository_id: Repository Id associated with the kickstart repo used for provisioning
        :param str host_subscription_facet_attributes_release_version: Release version for this Host to use (7Server, 7.1, etc)
        :param bool host_subscription_facet_attributes_autoheal: Sets whether the Host will autoheal subscriptions upon checkin
        :param str host_subscription_facet_attributes_purpose_usage: Sets the system purpose usage
        :param str host_subscription_facet_attributes_purpose_role: Sets the system purpose usage
        :param list[str] host_subscription_facet_attributes_purpose_addons: Sets the system add-ons
        :param str host_subscription_facet_attributes_service_level: Service level to be used for autoheal
        :param list[str] host_subscription_facet_attributes_hypervisor_guest_uuids: List of hypervisor guest uuids
        :param list[str] host_subscription_facet_attributes_installed_products_attributes: List of products installed on the host
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_hosts_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_hosts_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str host_name:
        :param float host_location_id:
        :param float host_organization_id:
        :param str host_ip: not required if using a subnet with DHCP proxy
        :param str host_mac: required for managed host that is bare metal, not required if it's a virtual machine
        :param float host_architecture_id: required if host is managed and value is not inherited from host group
        :param float host_domain_id: required if host is managed and value is not inherited from host group
        :param float host_realm_id:
        :param float host_puppet_proxy_id: Puppet proxy ID
        :param float host_puppet_ca_proxy_id: Puppet CA proxy ID
        :param float host_operatingsystem_id: required if host is managed and value is not inherited from host group
        :param str host_medium_id: required if not imaged based provisioning and host is managed and value is not inherited from host group
        :param str host_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :param float host_ptable_id: required if host is managed and custom partition has not been defined
        :param float host_subnet_id: required if host is managed and value is not inherited from host group
        :param float host_compute_resource_id: nil means host is bare metal
        :param str host_root_pass: required if host is managed and value is not inherited from host group or default password in settings
        :param float host_model_id:
        :param float host_hostgroup_id:
        :param float host_owner_id:
        :param str host_owner_type: Host's owner type
        :param float host_image_id:
        :param list[str] host_host_parameters_attributes: Host's parameters (array or indexed hash)
        :param bool host_build:
        :param bool host_enabled: Include this host within Foreman reporting
        :param str host_provision_method: The method used to provision the host.
        :param bool host_managed: True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not
        :param str host_progress_report_id: UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks
        :param str host_comment: Additional information about this host
        :param str host_capabilities:
        :param float host_compute_profile_id:
        :param list[str] host_interfaces_attributes: Host's network interfaces.
        :param float host_content_facet_attributes_content_view_id:
        :param float host_content_facet_attributes_lifecycle_environment_id:
        :param float host_content_facet_attributes_content_source_id:
        :param float host_content_facet_attributes_kickstart_repository_id: Repository Id associated with the kickstart repo used for provisioning
        :param str host_subscription_facet_attributes_release_version: Release version for this Host to use (7Server, 7.1, etc)
        :param bool host_subscription_facet_attributes_autoheal: Sets whether the Host will autoheal subscriptions upon checkin
        :param str host_subscription_facet_attributes_purpose_usage: Sets the system purpose usage
        :param str host_subscription_facet_attributes_purpose_role: Sets the system purpose usage
        :param list[str] host_subscription_facet_attributes_purpose_addons: Sets the system add-ons
        :param str host_subscription_facet_attributes_service_level: Service level to be used for autoheal
        :param list[str] host_subscription_facet_attributes_hypervisor_guest_uuids: List of hypervisor guest uuids
        :param list[str] host_subscription_facet_attributes_installed_products_attributes: List of products installed on the host
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "host_name",
            "host_location_id",
            "host_organization_id",
            "host_ip",
            "host_mac",
            "host_architecture_id",
            "host_domain_id",
            "host_realm_id",
            "host_puppet_proxy_id",
            "host_puppet_ca_proxy_id",
            "host_operatingsystem_id",
            "host_medium_id",
            "host_pxe_loader",
            "host_ptable_id",
            "host_subnet_id",
            "host_compute_resource_id",
            "host_root_pass",
            "host_model_id",
            "host_hostgroup_id",
            "host_owner_id",
            "host_owner_type",
            "host_image_id",
            "host_host_parameters_attributes",
            "host_build",
            "host_enabled",
            "host_provision_method",
            "host_managed",
            "host_progress_report_id",
            "host_comment",
            "host_capabilities",
            "host_compute_profile_id",
            "host_interfaces_attributes",
            "host_content_facet_attributes_content_view_id",
            "host_content_facet_attributes_lifecycle_environment_id",
            "host_content_facet_attributes_content_source_id",
            "host_content_facet_attributes_kickstart_repository_id",
            "host_subscription_facet_attributes_release_version",
            "host_subscription_facet_attributes_autoheal",
            "host_subscription_facet_attributes_purpose_usage",
            "host_subscription_facet_attributes_purpose_role",
            "host_subscription_facet_attributes_purpose_addons",
            "host_subscription_facet_attributes_service_level",
            "host_subscription_facet_attributes_hypervisor_guest_uuids",
            "host_subscription_facet_attributes_installed_products_attributes",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_hosts_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "host_name" in params:
            form_params.append(("host[name]", params["host_name"]))  # noqa: E501
        if "host_location_id" in params:
            form_params.append(
                ("host[location_id]", params["host_location_id"])
            )  # noqa: E501
        if "host_organization_id" in params:
            form_params.append(
                ("host[organization_id]", params["host_organization_id"])
            )  # noqa: E501
        if "host_ip" in params:
            form_params.append(("host[ip]", params["host_ip"]))  # noqa: E501
        if "host_mac" in params:
            form_params.append(("host[mac]", params["host_mac"]))  # noqa: E501
        if "host_architecture_id" in params:
            form_params.append(
                ("host[architecture_id]", params["host_architecture_id"])
            )  # noqa: E501
        if "host_domain_id" in params:
            form_params.append(
                ("host[domain_id]", params["host_domain_id"])
            )  # noqa: E501
        if "host_realm_id" in params:
            form_params.append(
                ("host[realm_id]", params["host_realm_id"])
            )  # noqa: E501
        if "host_puppet_proxy_id" in params:
            form_params.append(
                ("host[puppet_proxy_id]", params["host_puppet_proxy_id"])
            )  # noqa: E501
        if "host_puppet_ca_proxy_id" in params:
            form_params.append(
                ("host[puppet_ca_proxy_id]", params["host_puppet_ca_proxy_id"])
            )  # noqa: E501
        if "host_operatingsystem_id" in params:
            form_params.append(
                ("host[operatingsystem_id]", params["host_operatingsystem_id"])
            )  # noqa: E501
        if "host_medium_id" in params:
            form_params.append(
                ("host[medium_id]", params["host_medium_id"])
            )  # noqa: E501
        if "host_pxe_loader" in params:
            form_params.append(
                ("host[pxe_loader]", params["host_pxe_loader"])
            )  # noqa: E501
        if "host_ptable_id" in params:
            form_params.append(
                ("host[ptable_id]", params["host_ptable_id"])
            )  # noqa: E501
        if "host_subnet_id" in params:
            form_params.append(
                ("host[subnet_id]", params["host_subnet_id"])
            )  # noqa: E501
        if "host_compute_resource_id" in params:
            form_params.append(
                ("host[compute_resource_id]", params["host_compute_resource_id"])
            )  # noqa: E501
        if "host_root_pass" in params:
            form_params.append(
                ("host[root_pass]", params["host_root_pass"])
            )  # noqa: E501
        if "host_model_id" in params:
            form_params.append(
                ("host[model_id]", params["host_model_id"])
            )  # noqa: E501
        if "host_hostgroup_id" in params:
            form_params.append(
                ("host[hostgroup_id]", params["host_hostgroup_id"])
            )  # noqa: E501
        if "host_owner_id" in params:
            form_params.append(
                ("host[owner_id]", params["host_owner_id"])
            )  # noqa: E501
        if "host_owner_type" in params:
            form_params.append(
                ("host[owner_type]", params["host_owner_type"])
            )  # noqa: E501
        if "host_image_id" in params:
            form_params.append(
                ("host[image_id]", params["host_image_id"])
            )  # noqa: E501
        if "host_host_parameters_attributes" in params:
            form_params.append(
                (
                    "host[host_parameters_attributes]",
                    params["host_host_parameters_attributes"],
                )
            )  # noqa: E501
            collection_formats["host[host_parameters_attributes]"] = "csv"  # noqa: E501
        if "host_build" in params:
            form_params.append(("host[build]", params["host_build"]))  # noqa: E501
        if "host_enabled" in params:
            form_params.append(("host[enabled]", params["host_enabled"]))  # noqa: E501
        if "host_provision_method" in params:
            form_params.append(
                ("host[provision_method]", params["host_provision_method"])
            )  # noqa: E501
        if "host_managed" in params:
            form_params.append(("host[managed]", params["host_managed"]))  # noqa: E501
        if "host_progress_report_id" in params:
            form_params.append(
                ("host[progress_report_id]", params["host_progress_report_id"])
            )  # noqa: E501
        if "host_comment" in params:
            form_params.append(("host[comment]", params["host_comment"]))  # noqa: E501
        if "host_capabilities" in params:
            form_params.append(
                ("host[capabilities]", params["host_capabilities"])
            )  # noqa: E501
        if "host_compute_profile_id" in params:
            form_params.append(
                ("host[compute_profile_id]", params["host_compute_profile_id"])
            )  # noqa: E501
        if "host_interfaces_attributes" in params:
            form_params.append(
                ("host[interfaces_attributes]", params["host_interfaces_attributes"])
            )  # noqa: E501
            collection_formats["host[interfaces_attributes]"] = "csv"  # noqa: E501
        if "host_content_facet_attributes_content_view_id" in params:
            form_params.append(
                (
                    "host[content_facet_attributes][content_view_id]",
                    params["host_content_facet_attributes_content_view_id"],
                )
            )  # noqa: E501
        if "host_content_facet_attributes_lifecycle_environment_id" in params:
            form_params.append(
                (
                    "host[content_facet_attributes][lifecycle_environment_id]",
                    params["host_content_facet_attributes_lifecycle_environment_id"],
                )
            )  # noqa: E501
        if "host_content_facet_attributes_content_source_id" in params:
            form_params.append(
                (
                    "host[content_facet_attributes][content_source_id]",
                    params["host_content_facet_attributes_content_source_id"],
                )
            )  # noqa: E501
        if "host_content_facet_attributes_kickstart_repository_id" in params:
            form_params.append(
                (
                    "host[content_facet_attributes][kickstart_repository_id]",
                    params["host_content_facet_attributes_kickstart_repository_id"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_release_version" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][release_version]",
                    params["host_subscription_facet_attributes_release_version"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_autoheal" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][autoheal]",
                    params["host_subscription_facet_attributes_autoheal"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_purpose_usage" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_usage]",
                    params["host_subscription_facet_attributes_purpose_usage"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_purpose_role" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_role]",
                    params["host_subscription_facet_attributes_purpose_role"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_purpose_addons" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_addons]",
                    params["host_subscription_facet_attributes_purpose_addons"],
                )
            )  # noqa: E501
            collection_formats[
                "host[subscription_facet_attributes][purpose_addons]"
            ] = "csv"  # noqa: E501
        if "host_subscription_facet_attributes_service_level" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][service_level]",
                    params["host_subscription_facet_attributes_service_level"],
                )
            )  # noqa: E501
        if "host_subscription_facet_attributes_hypervisor_guest_uuids" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][hypervisor_guest_uuids]",
                    params["host_subscription_facet_attributes_hypervisor_guest_uuids"],
                )
            )  # noqa: E501
            collection_formats[
                "host[subscription_facet_attributes][hypervisor_guest_uuids]"
            ] = "csv"  # noqa: E501
        if "host_subscription_facet_attributes_installed_products_attributes" in params:
            form_params.append(
                (
                    "host[subscription_facet_attributes][installed_products_attributes]",
                    params[
                        "host_subscription_facet_attributes_installed_products_attributes"
                    ],
                )
            )  # noqa: E501
            collection_formats[
                "host[subscription_facet_attributes][installed_products_attributes]"
            ] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_id_boot(self, id, device, **kwargs):  # noqa: E501
        """Boot host from specified device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_id_boot(id, device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str device: boot device, valid devices are disk, cdrom, pxe, bios (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_id_boot_with_http_info(
                id, device, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_id_boot_with_http_info(
                id, device, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_id_boot_with_http_info(self, id, device, **kwargs):  # noqa: E501
        """Boot host from specified device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_id_boot_with_http_info(id, device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str device: boot device, valid devices are disk, cdrom, pxe, bios (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "device", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_id_boot" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_hosts_id_boot`"
            )  # noqa: E501
        # verify the required parameter 'device' is set
        if self.api_client.client_side_validation and (
            "device" not in params or params["device"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `device` when calling `put_hosts_id_boot`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "device" in params:
            form_params.append(("device", params["device"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/boot",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_id_disassociate(self, id, **kwargs):  # noqa: E501
        """Disassociate the host from a VM  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_id_disassociate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_id_disassociate_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_id_disassociate_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_id_disassociate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Disassociate the host from a VM  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_id_disassociate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_id_disassociate" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_hosts_id_disassociate`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/disassociate",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_id_power(self, id, power_action, **kwargs):  # noqa: E501
        """Run a power operation on host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_id_power(id, power_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str power_action: power action, valid actions are (on/start), (off/stop), (soft/reboot), (cycle/reset), (state/status) (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_id_power_with_http_info(
                id, power_action, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_id_power_with_http_info(
                id, power_action, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_id_power_with_http_info(
        self, id, power_action, **kwargs
    ):  # noqa: E501
        """Run a power operation on host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_id_power_with_http_info(id, power_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str power_action: power action, valid actions are (on/start), (off/stop), (soft/reboot), (cycle/reset), (state/status) (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "power_action",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_id_power" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_hosts_id_power`"
            )  # noqa: E501
        # verify the required parameter 'power_action' is set
        if self.api_client.client_side_validation and (
            "power_action" not in params or params["power_action"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `power_action` when calling `put_hosts_id_power`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "power_action" in params:
            form_params.append(("power_action", params["power_action"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/power",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_id_rebuild_config(self, id, **kwargs):  # noqa: E501
        """Rebuild orchestration config  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_id_rebuild_config(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] only: Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_id_rebuild_config_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_id_rebuild_config_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_id_rebuild_config_with_http_info(self, id, **kwargs):  # noqa: E501
        """Rebuild orchestration config  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_id_rebuild_config_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] only: Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id", "only"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_id_rebuild_config" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_hosts_id_rebuild_config`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "only" in params:
            form_params.append(("only", params["only"]))  # noqa: E501
            collection_formats["only"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{id}/rebuild_config",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
