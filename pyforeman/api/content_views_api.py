# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class ContentViewsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_content_views_id(self, id, **kwargs):  # noqa: E501
        """Delete a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_views_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_content_views_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_content_views_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_content_views_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_views_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_content_views_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_content_views_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_content_views_id_environments_environment_id(
        self, id, environment_id, **kwargs
    ):  # noqa: E501
        """Remove a content view from an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_views_id_environments_environment_id(id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :param float environment_id: environment numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.delete_content_views_id_environments_environment_id_with_http_info(
                    id, environment_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_content_views_id_environments_environment_id_with_http_info(
                id, environment_id, **kwargs
            )  # noqa: E501
            return data

    def delete_content_views_id_environments_environment_id_with_http_info(
        self, id, environment_id, **kwargs
    ):  # noqa: E501
        """Remove a content view from an environment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_views_id_environments_environment_id_with_http_info(id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :param float environment_id: environment numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "environment_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_content_views_id_environments_environment_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_content_views_id_environments_environment_id`"
            )  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and (
            "environment_id" not in params or params["environment_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `environment_id` when calling `delete_content_views_id_environments_environment_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "environment_id" in params:
            path_params["environment_id"] = params["environment_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{id}/environments/{environment_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_views(self, organization_id, **kwargs):  # noqa: E501
        """List content views  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param float environment_id: environment identifier
        :param bool nondefault: Filter out default content views
        :param bool noncomposite: Filter out composite content views
        :param bool composite: Filter only composite content views
        :param list[str] without: Do not include this array of content views
        :param str name: Name of the content view
        :param str label: Label of the content view
        :param bool include_generated: Include content views generated by imports/exports. Defaults to false
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_views_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_content_views_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_content_views_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """List content views  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param float environment_id: environment identifier
        :param bool nondefault: Filter out default content views
        :param bool noncomposite: Filter out composite content views
        :param bool composite: Filter only composite content views
        :param list[str] without: Do not include this array of content views
        :param str name: Name of the content view
        :param str label: Label of the content view
        :param bool include_generated: Include content views generated by imports/exports. Defaults to false
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "environment_id",
            "nondefault",
            "noncomposite",
            "composite",
            "without",
            "name",
            "label",
            "include_generated",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_views" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_content_views`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "environment_id" in params:
            query_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "nondefault" in params:
            query_params.append(("nondefault", params["nondefault"]))  # noqa: E501
        if "noncomposite" in params:
            query_params.append(("noncomposite", params["noncomposite"]))  # noqa: E501
        if "composite" in params:
            query_params.append(("composite", params["composite"]))  # noqa: E501
        if "without" in params:
            query_params.append(("without", params["without"]))  # noqa: E501
            collection_formats["without"] = "csv"  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "label" in params:
            query_params.append(("label", params["label"]))  # noqa: E501
        if "include_generated" in params:
            query_params.append(
                ("include_generated", params["include_generated"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_views_id(self, id, **kwargs):  # noqa: E501
        """Show a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_views_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_content_views_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_content_views_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_views_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_content_views_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_content_views(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """List content views  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_content_views(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param float environment_id: environment identifier
        :param bool nondefault: Filter out default content views
        :param bool noncomposite: Filter out composite content views
        :param bool composite: Filter only composite content views
        :param list[str] without: Do not include this array of content views
        :param str name: Name of the content view
        :param str label: Label of the content view
        :param bool include_generated: Include content views generated by imports/exports. Defaults to false
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_content_views_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_content_views_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_content_views_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """List content views  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_content_views_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param float environment_id: environment identifier
        :param bool nondefault: Filter out default content views
        :param bool noncomposite: Filter out composite content views
        :param bool composite: Filter only composite content views
        :param list[str] without: Do not include this array of content views
        :param str name: Name of the content view
        :param str label: Label of the content view
        :param bool include_generated: Include content views generated by imports/exports. Defaults to false
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "environment_id",
            "nondefault",
            "noncomposite",
            "composite",
            "without",
            "name",
            "label",
            "include_generated",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_content_views" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_content_views`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "environment_id" in params:
            query_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "nondefault" in params:
            query_params.append(("nondefault", params["nondefault"]))  # noqa: E501
        if "noncomposite" in params:
            query_params.append(("noncomposite", params["noncomposite"]))  # noqa: E501
        if "composite" in params:
            query_params.append(("composite", params["composite"]))  # noqa: E501
        if "without" in params:
            query_params.append(("without", params["without"]))  # noqa: E501
            collection_formats["without"] = "csv"  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "label" in params:
            query_params.append(("label", params["label"]))  # noqa: E501
        if "include_generated" in params:
            query_params.append(
                ("include_generated", params["include_generated"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/content_views",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_content_views(self, organization_id, name, **kwargs):  # noqa: E501
        """Create a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_views(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization identifier (required)
        :param str name: Name of the content view (required)
        :param str label: Content view label
        :param bool composite: Composite content view
        :param str description: Description for the content view
        :param list[str] repository_ids: List of repository ids
        :param list[str] component_ids: List of component content view version ids for composite views
        :param bool auto_publish: Enable/Disable auto publish of composite view
        :param bool solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :param bool import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_content_views_with_http_info(
                organization_id, name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_content_views_with_http_info(
                organization_id, name, **kwargs
            )  # noqa: E501
            return data

    def post_content_views_with_http_info(
        self, organization_id, name, **kwargs
    ):  # noqa: E501
        """Create a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_views_with_http_info(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization identifier (required)
        :param str name: Name of the content view (required)
        :param str label: Content view label
        :param bool composite: Composite content view
        :param str description: Description for the content view
        :param list[str] repository_ids: List of repository ids
        :param list[str] component_ids: List of component content view version ids for composite views
        :param bool auto_publish: Enable/Disable auto publish of composite view
        :param bool solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :param bool import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "name",
            "label",
            "composite",
            "description",
            "repository_ids",
            "component_ids",
            "auto_publish",
            "solve_dependencies",
            "import_only",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_content_views" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_content_views`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_content_views`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "label" in params:
            form_params.append(("label", params["label"]))  # noqa: E501
        if "composite" in params:
            form_params.append(("composite", params["composite"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "repository_ids" in params:
            form_params.append(
                ("repository_ids", params["repository_ids"])
            )  # noqa: E501
            collection_formats["repository_ids"] = "csv"  # noqa: E501
        if "component_ids" in params:
            form_params.append(("component_ids", params["component_ids"]))  # noqa: E501
            collection_formats["component_ids"] = "csv"  # noqa: E501
        if "auto_publish" in params:
            form_params.append(("auto_publish", params["auto_publish"]))  # noqa: E501
        if "solve_dependencies" in params:
            form_params.append(
                ("solve_dependencies", params["solve_dependencies"])
            )  # noqa: E501
        if "import_only" in params:
            form_params.append(("import_only", params["import_only"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_content_views_id_copy(self, id, name, **kwargs):  # noqa: E501
        """Make copy of a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_views_id_copy(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view numeric identifier (required)
        :param str name: New content view name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_content_views_id_copy_with_http_info(
                id, name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_content_views_id_copy_with_http_info(
                id, name, **kwargs
            )  # noqa: E501
            return data

    def post_content_views_id_copy_with_http_info(
        self, id, name, **kwargs
    ):  # noqa: E501
        """Make copy of a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_views_id_copy_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view numeric identifier (required)
        :param str name: New content view name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_content_views_id_copy" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_content_views_id_copy`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_content_views_id_copy`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{id}/copy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_content_views_id_publish(self, id, **kwargs):  # noqa: E501
        """Publish a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_views_id_publish(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view identifier (required)
        :param str description: Description for the new published content view version
        :param float major: Override the major version number
        :param float minor: Override the minor version number
        :param list[str] environment_ids: Identifiers for Lifecycle Environment
        :param bool publish_only_if_needed: Check audited changes and proceed only if content or filters have changed since last publish
        :param bool is_force_promote: Force content view promotion and bypass lifecycle environment restriction
        :param list[str] repos_units: Specify the list of units in each repo
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_content_views_id_publish_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_content_views_id_publish_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def post_content_views_id_publish_with_http_info(self, id, **kwargs):  # noqa: E501
        """Publish a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_views_id_publish_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view identifier (required)
        :param str description: Description for the new published content view version
        :param float major: Override the major version number
        :param float minor: Override the minor version number
        :param list[str] environment_ids: Identifiers for Lifecycle Environment
        :param bool publish_only_if_needed: Check audited changes and proceed only if content or filters have changed since last publish
        :param bool is_force_promote: Force content view promotion and bypass lifecycle environment restriction
        :param list[str] repos_units: Specify the list of units in each repo
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "description",
            "major",
            "minor",
            "environment_ids",
            "publish_only_if_needed",
            "is_force_promote",
            "repos_units",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_content_views_id_publish" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_content_views_id_publish`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "major" in params:
            form_params.append(("major", params["major"]))  # noqa: E501
        if "minor" in params:
            form_params.append(("minor", params["minor"]))  # noqa: E501
        if "environment_ids" in params:
            form_params.append(
                ("environment_ids", params["environment_ids"])
            )  # noqa: E501
            collection_formats["environment_ids"] = "csv"  # noqa: E501
        if "publish_only_if_needed" in params:
            form_params.append(
                ("publish_only_if_needed", params["publish_only_if_needed"])
            )  # noqa: E501
        if "is_force_promote" in params:
            form_params.append(
                ("is_force_promote", params["is_force_promote"])
            )  # noqa: E501
        if "repos_units" in params:
            form_params.append(("repos_units", params["repos_units"]))  # noqa: E501
            collection_formats["repos_units"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{id}/publish",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organizations_organization_id_content_views(
        self, organization_id, name, **kwargs
    ):  # noqa: E501
        """Create a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_content_views(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization identifier (required)
        :param str name: Name of the content view (required)
        :param str label: Content view label
        :param bool composite: Composite content view
        :param str description: Description for the content view
        :param list[str] repository_ids: List of repository ids
        :param list[str] component_ids: List of component content view version ids for composite views
        :param bool auto_publish: Enable/Disable auto publish of composite view
        :param bool solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :param bool import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organizations_organization_id_content_views_with_http_info(
                organization_id, name, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.post_organizations_organization_id_content_views_with_http_info(
                organization_id, name, **kwargs
            )  # noqa: E501
            return data

    def post_organizations_organization_id_content_views_with_http_info(
        self, organization_id, name, **kwargs
    ):  # noqa: E501
        """Create a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_content_views_with_http_info(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization identifier (required)
        :param str name: Name of the content view (required)
        :param str label: Content view label
        :param bool composite: Composite content view
        :param str description: Description for the content view
        :param list[str] repository_ids: List of repository ids
        :param list[str] component_ids: List of component content view version ids for composite views
        :param bool auto_publish: Enable/Disable auto publish of composite view
        :param bool solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :param bool import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "name",
            "label",
            "composite",
            "description",
            "repository_ids",
            "component_ids",
            "auto_publish",
            "solve_dependencies",
            "import_only",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations_organization_id_content_views" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organizations_organization_id_content_views`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_organizations_organization_id_content_views`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "label" in params:
            form_params.append(("label", params["label"]))  # noqa: E501
        if "composite" in params:
            form_params.append(("composite", params["composite"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "repository_ids" in params:
            form_params.append(
                ("repository_ids", params["repository_ids"])
            )  # noqa: E501
            collection_formats["repository_ids"] = "csv"  # noqa: E501
        if "component_ids" in params:
            form_params.append(("component_ids", params["component_ids"]))  # noqa: E501
            collection_formats["component_ids"] = "csv"  # noqa: E501
        if "auto_publish" in params:
            form_params.append(("auto_publish", params["auto_publish"]))  # noqa: E501
        if "solve_dependencies" in params:
            form_params.append(
                ("solve_dependencies", params["solve_dependencies"])
            )  # noqa: E501
        if "import_only" in params:
            form_params.append(("import_only", params["import_only"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/content_views",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_views_id(self, id, **kwargs):  # noqa: E501
        """Update a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view identifier (required)
        :param str name: New name for the content view
        :param str description: Description for the content view
        :param list[str] repository_ids: List of repository ids
        :param list[str] component_ids: List of component content view version ids for composite views
        :param bool auto_publish: Enable/Disable auto publish of composite view
        :param bool solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :param bool import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_views_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_content_views_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_content_views_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view identifier (required)
        :param str name: New name for the content view
        :param str description: Description for the content view
        :param list[str] repository_ids: List of repository ids
        :param list[str] component_ids: List of component content view version ids for composite views
        :param bool auto_publish: Enable/Disable auto publish of composite view
        :param bool solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :param bool import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "name",
            "description",
            "repository_ids",
            "component_ids",
            "auto_publish",
            "solve_dependencies",
            "import_only",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_views_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_views_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "repository_ids" in params:
            form_params.append(
                ("repository_ids", params["repository_ids"])
            )  # noqa: E501
            collection_formats["repository_ids"] = "csv"  # noqa: E501
        if "component_ids" in params:
            form_params.append(("component_ids", params["component_ids"]))  # noqa: E501
            collection_formats["component_ids"] = "csv"  # noqa: E501
        if "auto_publish" in params:
            form_params.append(("auto_publish", params["auto_publish"]))  # noqa: E501
        if "solve_dependencies" in params:
            form_params.append(
                ("solve_dependencies", params["solve_dependencies"])
            )  # noqa: E501
        if "import_only" in params:
            form_params.append(("import_only", params["import_only"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_views_id_bulk_delete_versions(self, id, **kwargs):  # noqa: E501
        """Bulk remove versions from a content view and reassign systems and keys  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_id_bulk_delete_versions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :param str included_search: Search string for versions to perform an action on
        :param list[str] included_ids: List of versions to perform an action on
        :param list[str] excluded_ids: List of versions to exclude and not run an action on
        :param float system_content_view_id: content view to reassign orphaned systems to
        :param float system_environment_id: environment to reassign orphaned systems to
        :param float key_content_view_id: content view to reassign orphaned activation keys to
        :param float key_environment_id: environment to reassign orphaned activation keys to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_views_id_bulk_delete_versions_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_content_views_id_bulk_delete_versions_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_content_views_id_bulk_delete_versions_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Bulk remove versions from a content view and reassign systems and keys  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_id_bulk_delete_versions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :param str included_search: Search string for versions to perform an action on
        :param list[str] included_ids: List of versions to perform an action on
        :param list[str] excluded_ids: List of versions to exclude and not run an action on
        :param float system_content_view_id: content view to reassign orphaned systems to
        :param float system_environment_id: environment to reassign orphaned systems to
        :param float key_content_view_id: content view to reassign orphaned activation keys to
        :param float key_environment_id: environment to reassign orphaned activation keys to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "included_search",
            "included_ids",
            "excluded_ids",
            "system_content_view_id",
            "system_environment_id",
            "key_content_view_id",
            "key_environment_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_views_id_bulk_delete_versions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_views_id_bulk_delete_versions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501
        if "system_content_view_id" in params:
            form_params.append(
                ("system_content_view_id", params["system_content_view_id"])
            )  # noqa: E501
        if "system_environment_id" in params:
            form_params.append(
                ("system_environment_id", params["system_environment_id"])
            )  # noqa: E501
        if "key_content_view_id" in params:
            form_params.append(
                ("key_content_view_id", params["key_content_view_id"])
            )  # noqa: E501
        if "key_environment_id" in params:
            form_params.append(
                ("key_environment_id", params["key_environment_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{id}/bulk_delete_versions",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_views_id_remove(self, id, **kwargs):  # noqa: E501
        """Remove versions and/or environments from a content view and reassign systems and keys  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_id_remove(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :param list[str] environment_ids: environment numeric identifiers to be removed
        :param list[str] content_view_version_ids: content view version identifiers to be deleted
        :param float system_content_view_id: content view to reassign orphaned systems to
        :param float system_environment_id: environment to reassign orphaned systems to
        :param float key_content_view_id: content view to reassign orphaned activation keys to
        :param float key_environment_id: environment to reassign orphaned activation keys to
        :param bool destroy_content_view: delete the content view with all the versions and environments
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_views_id_remove_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_content_views_id_remove_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_content_views_id_remove_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove versions and/or environments from a content view and reassign systems and keys  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_id_remove_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :param list[str] environment_ids: environment numeric identifiers to be removed
        :param list[str] content_view_version_ids: content view version identifiers to be deleted
        :param float system_content_view_id: content view to reassign orphaned systems to
        :param float system_environment_id: environment to reassign orphaned systems to
        :param float key_content_view_id: content view to reassign orphaned activation keys to
        :param float key_environment_id: environment to reassign orphaned activation keys to
        :param bool destroy_content_view: delete the content view with all the versions and environments
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "environment_ids",
            "content_view_version_ids",
            "system_content_view_id",
            "system_environment_id",
            "key_content_view_id",
            "key_environment_id",
            "destroy_content_view",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_views_id_remove" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_views_id_remove`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "environment_ids" in params:
            form_params.append(
                ("environment_ids", params["environment_ids"])
            )  # noqa: E501
            collection_formats["environment_ids"] = "csv"  # noqa: E501
        if "content_view_version_ids" in params:
            form_params.append(
                ("content_view_version_ids", params["content_view_version_ids"])
            )  # noqa: E501
            collection_formats["content_view_version_ids"] = "csv"  # noqa: E501
        if "system_content_view_id" in params:
            form_params.append(
                ("system_content_view_id", params["system_content_view_id"])
            )  # noqa: E501
        if "system_environment_id" in params:
            form_params.append(
                ("system_environment_id", params["system_environment_id"])
            )  # noqa: E501
        if "key_content_view_id" in params:
            form_params.append(
                ("key_content_view_id", params["key_content_view_id"])
            )  # noqa: E501
        if "key_environment_id" in params:
            form_params.append(
                ("key_environment_id", params["key_environment_id"])
            )  # noqa: E501
        if "destroy_content_view" in params:
            form_params.append(
                ("destroy_content_view", params["destroy_content_view"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{id}/remove",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_views_id_remove_filters(
        self, id, filter_ids, **kwargs
    ):  # noqa: E501
        """Delete multiple filters from a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_id_remove_filters(id, filter_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :param list[str] filter_ids: filter identifiers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_views_id_remove_filters_with_http_info(
                id, filter_ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_content_views_id_remove_filters_with_http_info(
                id, filter_ids, **kwargs
            )  # noqa: E501
            return data

    def put_content_views_id_remove_filters_with_http_info(
        self, id, filter_ids, **kwargs
    ):  # noqa: E501
        """Delete multiple filters from a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_id_remove_filters_with_http_info(id, filter_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: content view numeric identifier (required)
        :param list[str] filter_ids: filter identifiers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "filter_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_views_id_remove_filters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_views_id_remove_filters`"
            )  # noqa: E501
        # verify the required parameter 'filter_ids' is set
        if self.api_client.client_side_validation and (
            "filter_ids" not in params or params["filter_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `filter_ids` when calling `put_content_views_id_remove_filters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "filter_ids" in params:
            form_params.append(("filter_ids", params["filter_ids"]))  # noqa: E501
            collection_formats["filter_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{id}/remove_filters",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
