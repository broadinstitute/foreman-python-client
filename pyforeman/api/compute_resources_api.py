# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class ComputeResourcesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_compute_resources_id(self, id, **kwargs):  # noqa: E501
        """Delete a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_compute_resources_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_compute_resources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_compute_resources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_compute_resources_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_compute_resources_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_compute_resources_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_compute_resources_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_compute_resources_id_available_virtual_machines_vm_id(
        self, id, vm_id, **kwargs
    ):  # noqa: E501
        """Delete a Virtual Machine  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_compute_resources_id_available_virtual_machines_vm_id(id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str vm_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_compute_resources_id_available_virtual_machines_vm_id_with_http_info(
                id, vm_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_compute_resources_id_available_virtual_machines_vm_id_with_http_info(
                id, vm_id, **kwargs
            )  # noqa: E501
            return data

    def delete_compute_resources_id_available_virtual_machines_vm_id_with_http_info(
        self, id, vm_id, **kwargs
    ):  # noqa: E501
        """Delete a Virtual Machine  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_compute_resources_id_available_virtual_machines_vm_id_with_http_info(id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str vm_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "vm_id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_compute_resources_id_available_virtual_machines_vm_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_compute_resources_id_available_virtual_machines_vm_id`"
            )  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if self.api_client.client_side_validation and (
            "vm_id" not in params or params["vm_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `vm_id` when calling `delete_compute_resources_id_available_virtual_machines_vm_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "vm_id" in params:
            path_params["vm_id"] = params["vm_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_virtual_machines/{vm_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources(self, **kwargs):  # noqa: E501
        """List all compute resources  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations
        :param float organization_id: Scope by organizations
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_compute_resources_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_compute_resources_with_http_info(self, **kwargs):  # noqa: E501
        """List all compute resources  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations
        :param float organization_id: Scope by organizations
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id(self, id, **kwargs):  # noqa: E501
        """Show a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_compute_resources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_clusters(self, id, **kwargs):  # noqa: E501
        """List available clusters for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_clusters(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_clusters_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_compute_resources_id_available_clusters_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_clusters_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List available clusters for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_clusters_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_clusters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_clusters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_clusters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_clusters_cluster_id_available_networks(
        self, id, cluster_id, **kwargs
    ):  # noqa: E501
        """List available networks for a compute resource cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_clusters_cluster_id_available_networks(id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_clusters_cluster_id_available_networks_with_http_info(
                id, cluster_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_clusters_cluster_id_available_networks_with_http_info(
                id, cluster_id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_clusters_cluster_id_available_networks_with_http_info(
        self, id, cluster_id, **kwargs
    ):  # noqa: E501
        """List available networks for a compute resource cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_clusters_cluster_id_available_networks_with_http_info(id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "cluster_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_clusters_cluster_id_available_networks"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_clusters_cluster_id_available_networks`"
            )  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and (
            "cluster_id" not in params or params["cluster_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `cluster_id` when calling `get_compute_resources_id_available_clusters_cluster_id_available_networks`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "cluster_id" in params:
            path_params["cluster_id"] = params["cluster_id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_clusters/{cluster_id}/available_networks",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_clusters_cluster_id_available_resource_pools(
        self, id, cluster_id, **kwargs
    ):  # noqa: E501
        """List resource pools for a compute resource cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_clusters_cluster_id_available_resource_pools(id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_clusters_cluster_id_available_resource_pools_with_http_info(
                id, cluster_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_clusters_cluster_id_available_resource_pools_with_http_info(
                id, cluster_id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_clusters_cluster_id_available_resource_pools_with_http_info(
        self, id, cluster_id, **kwargs
    ):  # noqa: E501
        """List resource pools for a compute resource cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_clusters_cluster_id_available_resource_pools_with_http_info(id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "cluster_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_clusters_cluster_id_available_resource_pools"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_clusters_cluster_id_available_resource_pools`"
            )  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and (
            "cluster_id" not in params or params["cluster_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `cluster_id` when calling `get_compute_resources_id_available_clusters_cluster_id_available_resource_pools`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "cluster_id" in params:
            path_params["cluster_id"] = params["cluster_id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_clusters/{cluster_id}/available_resource_pools",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_clusters_cluster_id_available_storage_domains(
        self, id, cluster_id, storage_domain, **kwargs
    ):  # noqa: E501
        """List storage domains for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_clusters_cluster_id_available_storage_domains(id, cluster_id, storage_domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param str storage_domain: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_clusters_cluster_id_available_storage_domains_with_http_info(
                id, cluster_id, storage_domain, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_clusters_cluster_id_available_storage_domains_with_http_info(
                id, cluster_id, storage_domain, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_clusters_cluster_id_available_storage_domains_with_http_info(
        self, id, cluster_id, storage_domain, **kwargs
    ):  # noqa: E501
        """List storage domains for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_clusters_cluster_id_available_storage_domains_with_http_info(id, cluster_id, storage_domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param str storage_domain: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "cluster_id",
            "storage_domain",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_clusters_cluster_id_available_storage_domains"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_clusters_cluster_id_available_storage_domains`"
            )  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and (
            "cluster_id" not in params or params["cluster_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `cluster_id` when calling `get_compute_resources_id_available_clusters_cluster_id_available_storage_domains`"
            )  # noqa: E501
        # verify the required parameter 'storage_domain' is set
        if self.api_client.client_side_validation and (
            "storage_domain" not in params or params["storage_domain"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `storage_domain` when calling `get_compute_resources_id_available_clusters_cluster_id_available_storage_domains`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "cluster_id" in params:
            path_params["cluster_id"] = params["cluster_id"]  # noqa: E501

        query_params = []
        if "storage_domain" in params:
            query_params.append(
                ("storage_domain", params["storage_domain"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_clusters/{cluster_id}/available_storage_domains",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_clusters_cluster_id_available_storage_pods(
        self, id, cluster_id, storage_pod, **kwargs
    ):  # noqa: E501
        """List storage pods for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_clusters_cluster_id_available_storage_pods(id, cluster_id, storage_pod, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param str storage_pod: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_clusters_cluster_id_available_storage_pods_with_http_info(
                id, cluster_id, storage_pod, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_clusters_cluster_id_available_storage_pods_with_http_info(
                id, cluster_id, storage_pod, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_clusters_cluster_id_available_storage_pods_with_http_info(
        self, id, cluster_id, storage_pod, **kwargs
    ):  # noqa: E501
        """List storage pods for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_clusters_cluster_id_available_storage_pods_with_http_info(id, cluster_id, storage_pod, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param str storage_pod: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "cluster_id",
            "storage_pod",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_clusters_cluster_id_available_storage_pods"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_clusters_cluster_id_available_storage_pods`"
            )  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and (
            "cluster_id" not in params or params["cluster_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `cluster_id` when calling `get_compute_resources_id_available_clusters_cluster_id_available_storage_pods`"
            )  # noqa: E501
        # verify the required parameter 'storage_pod' is set
        if self.api_client.client_side_validation and (
            "storage_pod" not in params or params["storage_pod"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `storage_pod` when calling `get_compute_resources_id_available_clusters_cluster_id_available_storage_pods`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "cluster_id" in params:
            path_params["cluster_id"] = params["cluster_id"]  # noqa: E501

        query_params = []
        if "storage_pod" in params:
            query_params.append(("storage_pod", params["storage_pod"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_clusters/{cluster_id}/available_storage_pods",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_flavors(self, id, **kwargs):  # noqa: E501
        """List available flavors for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_flavors(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_flavors_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_compute_resources_id_available_flavors_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_flavors_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List available flavors for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_flavors_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_flavors" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_flavors`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_flavors",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_folders(self, id, **kwargs):  # noqa: E501
        """List available folders for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_folders(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_folders_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_compute_resources_id_available_folders_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_folders_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List available folders for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_folders_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_folders" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_folders`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_folders",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_images(self, id, **kwargs):  # noqa: E501
        """List available images for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_images(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_images_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_compute_resources_id_available_images_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_images_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List available images for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_images_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_images" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_images`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_images",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_networks(
        self, id, cluster_id, **kwargs
    ):  # noqa: E501
        """List available networks for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_networks(id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_networks_with_http_info(
                id, cluster_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_compute_resources_id_available_networks_with_http_info(
                id, cluster_id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_networks_with_http_info(
        self, id, cluster_id, **kwargs
    ):  # noqa: E501
        """List available networks for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_networks_with_http_info(id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "cluster_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_networks" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_networks`"
            )  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and (
            "cluster_id" not in params or params["cluster_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `cluster_id` when calling `get_compute_resources_id_available_networks`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "cluster_id" in params:
            query_params.append(("cluster_id", params["cluster_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_networks",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_security_groups(
        self, id, **kwargs
    ):  # noqa: E501
        """List available security groups for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_security_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_compute_resources_id_available_security_groups_with_http_info(
                    id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_security_groups_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_security_groups_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List available security groups for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_security_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_security_groups"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_security_groups`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_security_groups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_storage_domains(
        self, id, cluster_id, storage_domain, **kwargs
    ):  # noqa: E501
        """List storage domains for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_storage_domains(id, cluster_id, storage_domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param str storage_domain: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_compute_resources_id_available_storage_domains_with_http_info(
                    id, cluster_id, storage_domain, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_storage_domains_with_http_info(
                id, cluster_id, storage_domain, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_storage_domains_with_http_info(
        self, id, cluster_id, storage_domain, **kwargs
    ):  # noqa: E501
        """List storage domains for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_storage_domains_with_http_info(id, cluster_id, storage_domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param str storage_domain: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "cluster_id",
            "storage_domain",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_storage_domains"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_storage_domains`"
            )  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and (
            "cluster_id" not in params or params["cluster_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `cluster_id` when calling `get_compute_resources_id_available_storage_domains`"
            )  # noqa: E501
        # verify the required parameter 'storage_domain' is set
        if self.api_client.client_side_validation and (
            "storage_domain" not in params or params["storage_domain"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `storage_domain` when calling `get_compute_resources_id_available_storage_domains`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "cluster_id" in params:
            query_params.append(("cluster_id", params["cluster_id"]))  # noqa: E501
        if "storage_domain" in params:
            query_params.append(
                ("storage_domain", params["storage_domain"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_storage_domains",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_storage_domains_storage_domain(
        self, id, storage_domain, cluster_id, **kwargs
    ):  # noqa: E501
        """List attributes for a given storage domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_storage_domains_storage_domain(id, storage_domain, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str storage_domain: (required)
        :param str cluster_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_storage_domains_storage_domain_with_http_info(
                id, storage_domain, cluster_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_storage_domains_storage_domain_with_http_info(
                id, storage_domain, cluster_id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_storage_domains_storage_domain_with_http_info(
        self, id, storage_domain, cluster_id, **kwargs
    ):  # noqa: E501
        """List attributes for a given storage domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_storage_domains_storage_domain_with_http_info(id, storage_domain, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str storage_domain: (required)
        :param str cluster_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "storage_domain",
            "cluster_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_storage_domains_storage_domain"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_storage_domains_storage_domain`"
            )  # noqa: E501
        # verify the required parameter 'storage_domain' is set
        if self.api_client.client_side_validation and (
            "storage_domain" not in params or params["storage_domain"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `storage_domain` when calling `get_compute_resources_id_available_storage_domains_storage_domain`"
            )  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and (
            "cluster_id" not in params or params["cluster_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `cluster_id` when calling `get_compute_resources_id_available_storage_domains_storage_domain`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "storage_domain" in params:
            path_params["storage_domain"] = params["storage_domain"]  # noqa: E501

        query_params = []
        if "cluster_id" in params:
            query_params.append(("cluster_id", params["cluster_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_storage_domains/{storage_domain}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_storage_pods(
        self, id, cluster_id, storage_pod, **kwargs
    ):  # noqa: E501
        """List storage pods for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_storage_pods(id, cluster_id, storage_pod, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param str storage_pod: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_storage_pods_with_http_info(
                id, cluster_id, storage_pod, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_storage_pods_with_http_info(
                id, cluster_id, storage_pod, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_storage_pods_with_http_info(
        self, id, cluster_id, storage_pod, **kwargs
    ):  # noqa: E501
        """List storage pods for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_storage_pods_with_http_info(id, cluster_id, storage_pod, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str cluster_id: (required)
        :param str storage_pod: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "cluster_id",
            "storage_pod",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_storage_pods" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_storage_pods`"
            )  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and (
            "cluster_id" not in params or params["cluster_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `cluster_id` when calling `get_compute_resources_id_available_storage_pods`"
            )  # noqa: E501
        # verify the required parameter 'storage_pod' is set
        if self.api_client.client_side_validation and (
            "storage_pod" not in params or params["storage_pod"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `storage_pod` when calling `get_compute_resources_id_available_storage_pods`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "cluster_id" in params:
            query_params.append(("cluster_id", params["cluster_id"]))  # noqa: E501
        if "storage_pod" in params:
            query_params.append(("storage_pod", params["storage_pod"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_storage_pods",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_storage_pods_storage_pod(
        self, id, storage_pod, cluster_id, **kwargs
    ):  # noqa: E501
        """List attributes for a given storage pod  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_storage_pods_storage_pod(id, storage_pod, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str storage_pod: (required)
        :param str cluster_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_storage_pods_storage_pod_with_http_info(
                id, storage_pod, cluster_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_storage_pods_storage_pod_with_http_info(
                id, storage_pod, cluster_id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_storage_pods_storage_pod_with_http_info(
        self, id, storage_pod, cluster_id, **kwargs
    ):  # noqa: E501
        """List attributes for a given storage pod  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_storage_pods_storage_pod_with_http_info(id, storage_pod, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str storage_pod: (required)
        :param str cluster_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "storage_pod",
            "cluster_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_storage_pods_storage_pod"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_storage_pods_storage_pod`"
            )  # noqa: E501
        # verify the required parameter 'storage_pod' is set
        if self.api_client.client_side_validation and (
            "storage_pod" not in params or params["storage_pod"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `storage_pod` when calling `get_compute_resources_id_available_storage_pods_storage_pod`"
            )  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and (
            "cluster_id" not in params or params["cluster_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `cluster_id` when calling `get_compute_resources_id_available_storage_pods_storage_pod`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "storage_pod" in params:
            path_params["storage_pod"] = params["storage_pod"]  # noqa: E501

        query_params = []
        if "cluster_id" in params:
            query_params.append(("cluster_id", params["cluster_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_storage_pods/{storage_pod}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_virtual_machines(
        self, id, **kwargs
    ):  # noqa: E501
        """List available virtual machines for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_virtual_machines(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_compute_resources_id_available_virtual_machines_with_http_info(
                    id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_virtual_machines_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_virtual_machines_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List available virtual machines for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_virtual_machines_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_virtual_machines"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_virtual_machines`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_virtual_machines",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_virtual_machines_vm_id(
        self, id, vm_id, **kwargs
    ):  # noqa: E501
        """Show a virtual machine  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_virtual_machines_vm_id(id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str vm_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_virtual_machines_vm_id_with_http_info(
                id, vm_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_virtual_machines_vm_id_with_http_info(
                id, vm_id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_virtual_machines_vm_id_with_http_info(
        self, id, vm_id, **kwargs
    ):  # noqa: E501
        """Show a virtual machine  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_virtual_machines_vm_id_with_http_info(id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str vm_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "vm_id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_virtual_machines_vm_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_virtual_machines_vm_id`"
            )  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if self.api_client.client_side_validation and (
            "vm_id" not in params or params["vm_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `vm_id` when calling `get_compute_resources_id_available_virtual_machines_vm_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "vm_id" in params:
            path_params["vm_id"] = params["vm_id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_virtual_machines/{vm_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_vnic_profiles(
        self, id, **kwargs
    ):  # noqa: E501
        """List available vnic profiles for a compute resource, for oVirt only  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_vnic_profiles(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_vnic_profiles_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_available_vnic_profiles_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_vnic_profiles_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List available vnic profiles for a compute resource, for oVirt only  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_vnic_profiles_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_vnic_profiles" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_vnic_profiles`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_vnic_profiles",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_available_zones(self, id, **kwargs):  # noqa: E501
        """List available zone for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_zones(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_available_zones_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_compute_resources_id_available_zones_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_available_zones_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List available zone for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_available_zones_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_available_zones" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_available_zones`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_zones",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_storage_domains_storage_domain_id(
        self, id, storage_domain_id, **kwargs
    ):  # noqa: E501
        """List attributes for a given storage domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_storage_domains_storage_domain_id(id, storage_domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str storage_domain_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_storage_domains_storage_domain_id_with_http_info(
                id, storage_domain_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_storage_domains_storage_domain_id_with_http_info(
                id, storage_domain_id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_storage_domains_storage_domain_id_with_http_info(
        self, id, storage_domain_id, **kwargs
    ):  # noqa: E501
        """List attributes for a given storage domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_storage_domains_storage_domain_id_with_http_info(id, storage_domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str storage_domain_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "storage_domain_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_storage_domains_storage_domain_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_storage_domains_storage_domain_id`"
            )  # noqa: E501
        # verify the required parameter 'storage_domain_id' is set
        if self.api_client.client_side_validation and (
            "storage_domain_id" not in params or params["storage_domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `storage_domain_id` when calling `get_compute_resources_id_storage_domains_storage_domain_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "storage_domain_id" in params:
            path_params["storage_domain_id"] = params["storage_domain_id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/storage_domains/{storage_domain_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_id_storage_pods_storage_pod_id(
        self, id, storage_pod_id, **kwargs
    ):  # noqa: E501
        """List attributes for a given storage pod  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_storage_pods_storage_pod_id(id, storage_pod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str storage_pod_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_id_storage_pods_storage_pod_id_with_http_info(
                id, storage_pod_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_id_storage_pods_storage_pod_id_with_http_info(
                id, storage_pod_id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_id_storage_pods_storage_pod_id_with_http_info(
        self, id, storage_pod_id, **kwargs
    ):  # noqa: E501
        """List attributes for a given storage pod  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_id_storage_pods_storage_pod_id_with_http_info(id, storage_pod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str storage_pod_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "storage_pod_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_id_storage_pods_storage_pod_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_id_storage_pods_storage_pod_id`"
            )  # noqa: E501
        # verify the required parameter 'storage_pod_id' is set
        if self.api_client.client_side_validation and (
            "storage_pod_id" not in params or params["storage_pod_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `storage_pod_id` when calling `get_compute_resources_id_storage_pods_storage_pod_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "storage_pod_id" in params:
            path_params["storage_pod_id"] = params["storage_pod_id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/storage_pods/{storage_pod_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_compute_resources(self, compute_resource_name, **kwargs):  # noqa: E501
        """Create a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_compute_resources(compute_resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_resource_name: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str compute_resource_provider: Providers include
        :param str compute_resource_url: URL for Libvirt, oVirt and OpenStack
        :param str compute_resource_description:
        :param str compute_resource_user: Username for oVirt, EC2, VMware, OpenStack. Access Key for EC2.
        :param str compute_resource_password: Password for oVirt, EC2, VMware, OpenStack. Secret key for EC2
        :param str compute_resource_datacenter: for oVirt, VMware Datacenter
        :param str compute_resource_ovirt_quota: for oVirt only, ID or Name of quota to use
        :param str compute_resource_public_key: for oVirt only
        :param str compute_resource_region: for AzureRm eg. 'eastus' and for EC2 only. Use 'us-gov-west-1' for EC2 GovCloud region
        :param str compute_resource_tenant: for OpenStack and AzureRm only
        :param str compute_resource_domain: for OpenStack (v3) only
        :param str compute_resource_project_domain_name: for OpenStack (v3) only
        :param str compute_resource_project_domain_id: for OpenStack (v3) only
        :param str compute_resource_server: for VMware
        :param bool compute_resource_set_console_password: for Libvirt and VMware only
        :param str compute_resource_display_type: for Libvirt and oVirt only
        :param str compute_resource_keyboard_layout: for oVirt only
        :param bool compute_resource_caching_enabled: enable caching, for VMware only
        :param list[str] compute_resource_location_ids: REPLACE locations with given ids
        :param list[str] compute_resource_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_compute_resources_with_http_info(
                compute_resource_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_compute_resources_with_http_info(
                compute_resource_name, **kwargs
            )  # noqa: E501
            return data

    def post_compute_resources_with_http_info(
        self, compute_resource_name, **kwargs
    ):  # noqa: E501
        """Create a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_compute_resources_with_http_info(compute_resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_resource_name: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str compute_resource_provider: Providers include
        :param str compute_resource_url: URL for Libvirt, oVirt and OpenStack
        :param str compute_resource_description:
        :param str compute_resource_user: Username for oVirt, EC2, VMware, OpenStack. Access Key for EC2.
        :param str compute_resource_password: Password for oVirt, EC2, VMware, OpenStack. Secret key for EC2
        :param str compute_resource_datacenter: for oVirt, VMware Datacenter
        :param str compute_resource_ovirt_quota: for oVirt only, ID or Name of quota to use
        :param str compute_resource_public_key: for oVirt only
        :param str compute_resource_region: for AzureRm eg. 'eastus' and for EC2 only. Use 'us-gov-west-1' for EC2 GovCloud region
        :param str compute_resource_tenant: for OpenStack and AzureRm only
        :param str compute_resource_domain: for OpenStack (v3) only
        :param str compute_resource_project_domain_name: for OpenStack (v3) only
        :param str compute_resource_project_domain_id: for OpenStack (v3) only
        :param str compute_resource_server: for VMware
        :param bool compute_resource_set_console_password: for Libvirt and VMware only
        :param str compute_resource_display_type: for Libvirt and oVirt only
        :param str compute_resource_keyboard_layout: for oVirt only
        :param bool compute_resource_caching_enabled: enable caching, for VMware only
        :param list[str] compute_resource_location_ids: REPLACE locations with given ids
        :param list[str] compute_resource_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "compute_resource_name",
            "location_id",
            "organization_id",
            "compute_resource_provider",
            "compute_resource_url",
            "compute_resource_description",
            "compute_resource_user",
            "compute_resource_password",
            "compute_resource_datacenter",
            "compute_resource_ovirt_quota",
            "compute_resource_public_key",
            "compute_resource_region",
            "compute_resource_tenant",
            "compute_resource_domain",
            "compute_resource_project_domain_name",
            "compute_resource_project_domain_id",
            "compute_resource_server",
            "compute_resource_set_console_password",
            "compute_resource_display_type",
            "compute_resource_keyboard_layout",
            "compute_resource_caching_enabled",
            "compute_resource_location_ids",
            "compute_resource_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_compute_resources" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'compute_resource_name' is set
        if self.api_client.client_side_validation and (
            "compute_resource_name" not in params
            or params["compute_resource_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `compute_resource_name` when calling `post_compute_resources`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "compute_resource_name" in params:
            form_params.append(
                ("compute_resource[name]", params["compute_resource_name"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "compute_resource_provider" in params:
            form_params.append(
                ("compute_resource[provider]", params["compute_resource_provider"])
            )  # noqa: E501
        if "compute_resource_url" in params:
            form_params.append(
                ("compute_resource[url]", params["compute_resource_url"])
            )  # noqa: E501
        if "compute_resource_description" in params:
            form_params.append(
                (
                    "compute_resource[description]",
                    params["compute_resource_description"],
                )
            )  # noqa: E501
        if "compute_resource_user" in params:
            form_params.append(
                ("compute_resource[user]", params["compute_resource_user"])
            )  # noqa: E501
        if "compute_resource_password" in params:
            form_params.append(
                ("compute_resource[password]", params["compute_resource_password"])
            )  # noqa: E501
        if "compute_resource_datacenter" in params:
            form_params.append(
                ("compute_resource[datacenter]", params["compute_resource_datacenter"])
            )  # noqa: E501
        if "compute_resource_ovirt_quota" in params:
            form_params.append(
                (
                    "compute_resource[ovirt_quota]",
                    params["compute_resource_ovirt_quota"],
                )
            )  # noqa: E501
        if "compute_resource_public_key" in params:
            form_params.append(
                ("compute_resource[public_key]", params["compute_resource_public_key"])
            )  # noqa: E501
        if "compute_resource_region" in params:
            form_params.append(
                ("compute_resource[region]", params["compute_resource_region"])
            )  # noqa: E501
        if "compute_resource_tenant" in params:
            form_params.append(
                ("compute_resource[tenant]", params["compute_resource_tenant"])
            )  # noqa: E501
        if "compute_resource_domain" in params:
            form_params.append(
                ("compute_resource[domain]", params["compute_resource_domain"])
            )  # noqa: E501
        if "compute_resource_project_domain_name" in params:
            form_params.append(
                (
                    "compute_resource[project_domain_name]",
                    params["compute_resource_project_domain_name"],
                )
            )  # noqa: E501
        if "compute_resource_project_domain_id" in params:
            form_params.append(
                (
                    "compute_resource[project_domain_id]",
                    params["compute_resource_project_domain_id"],
                )
            )  # noqa: E501
        if "compute_resource_server" in params:
            form_params.append(
                ("compute_resource[server]", params["compute_resource_server"])
            )  # noqa: E501
        if "compute_resource_set_console_password" in params:
            form_params.append(
                (
                    "compute_resource[set_console_password]",
                    params["compute_resource_set_console_password"],
                )
            )  # noqa: E501
        if "compute_resource_display_type" in params:
            form_params.append(
                (
                    "compute_resource[display_type]",
                    params["compute_resource_display_type"],
                )
            )  # noqa: E501
        if "compute_resource_keyboard_layout" in params:
            form_params.append(
                (
                    "compute_resource[keyboard_layout]",
                    params["compute_resource_keyboard_layout"],
                )
            )  # noqa: E501
        if "compute_resource_caching_enabled" in params:
            form_params.append(
                (
                    "compute_resource[caching_enabled]",
                    params["compute_resource_caching_enabled"],
                )
            )  # noqa: E501
        if "compute_resource_location_ids" in params:
            form_params.append(
                (
                    "compute_resource[location_ids]",
                    params["compute_resource_location_ids"],
                )
            )  # noqa: E501
            collection_formats["compute_resource[location_ids]"] = "csv"  # noqa: E501
        if "compute_resource_organization_ids" in params:
            form_params.append(
                (
                    "compute_resource[organization_ids]",
                    params["compute_resource_organization_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "compute_resource[organization_ids]"
            ] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_compute_resources_id(self, id, **kwargs):  # noqa: E501
        """Update a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_compute_resources_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str compute_resource_name:
        :param str compute_resource_provider: Providers include
        :param str compute_resource_url: URL for Libvirt, oVirt and OpenStack
        :param str compute_resource_description:
        :param str compute_resource_user: Username for oVirt, EC2, VMware, OpenStack. Access Key for EC2.
        :param str compute_resource_password: Password for oVirt, EC2, VMware, OpenStack. Secret key for EC2
        :param str compute_resource_datacenter: for oVirt, VMware Datacenter
        :param str compute_resource_ovirt_quota: for oVirt only, ID or Name of quota to use
        :param str compute_resource_public_key: for oVirt only
        :param str compute_resource_region: for AzureRm eg. 'eastus' and for EC2 only. Use 'us-gov-west-1' for EC2 GovCloud region
        :param str compute_resource_tenant: for OpenStack and AzureRm only
        :param str compute_resource_domain: for OpenStack (v3) only
        :param str compute_resource_project_domain_name: for OpenStack (v3) only
        :param str compute_resource_project_domain_id: for OpenStack (v3) only
        :param str compute_resource_server: for VMware
        :param bool compute_resource_set_console_password: for Libvirt and VMware only
        :param str compute_resource_display_type: for Libvirt and oVirt only
        :param str compute_resource_keyboard_layout: for oVirt only
        :param bool compute_resource_caching_enabled: enable caching, for VMware only
        :param list[str] compute_resource_location_ids: REPLACE locations with given ids
        :param list[str] compute_resource_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_compute_resources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_compute_resources_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_compute_resources_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_compute_resources_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str compute_resource_name:
        :param str compute_resource_provider: Providers include
        :param str compute_resource_url: URL for Libvirt, oVirt and OpenStack
        :param str compute_resource_description:
        :param str compute_resource_user: Username for oVirt, EC2, VMware, OpenStack. Access Key for EC2.
        :param str compute_resource_password: Password for oVirt, EC2, VMware, OpenStack. Secret key for EC2
        :param str compute_resource_datacenter: for oVirt, VMware Datacenter
        :param str compute_resource_ovirt_quota: for oVirt only, ID or Name of quota to use
        :param str compute_resource_public_key: for oVirt only
        :param str compute_resource_region: for AzureRm eg. 'eastus' and for EC2 only. Use 'us-gov-west-1' for EC2 GovCloud region
        :param str compute_resource_tenant: for OpenStack and AzureRm only
        :param str compute_resource_domain: for OpenStack (v3) only
        :param str compute_resource_project_domain_name: for OpenStack (v3) only
        :param str compute_resource_project_domain_id: for OpenStack (v3) only
        :param str compute_resource_server: for VMware
        :param bool compute_resource_set_console_password: for Libvirt and VMware only
        :param str compute_resource_display_type: for Libvirt and oVirt only
        :param str compute_resource_keyboard_layout: for oVirt only
        :param bool compute_resource_caching_enabled: enable caching, for VMware only
        :param list[str] compute_resource_location_ids: REPLACE locations with given ids
        :param list[str] compute_resource_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "compute_resource_name",
            "compute_resource_provider",
            "compute_resource_url",
            "compute_resource_description",
            "compute_resource_user",
            "compute_resource_password",
            "compute_resource_datacenter",
            "compute_resource_ovirt_quota",
            "compute_resource_public_key",
            "compute_resource_region",
            "compute_resource_tenant",
            "compute_resource_domain",
            "compute_resource_project_domain_name",
            "compute_resource_project_domain_id",
            "compute_resource_server",
            "compute_resource_set_console_password",
            "compute_resource_display_type",
            "compute_resource_keyboard_layout",
            "compute_resource_caching_enabled",
            "compute_resource_location_ids",
            "compute_resource_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_compute_resources_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_compute_resources_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "compute_resource_name" in params:
            form_params.append(
                ("compute_resource[name]", params["compute_resource_name"])
            )  # noqa: E501
        if "compute_resource_provider" in params:
            form_params.append(
                ("compute_resource[provider]", params["compute_resource_provider"])
            )  # noqa: E501
        if "compute_resource_url" in params:
            form_params.append(
                ("compute_resource[url]", params["compute_resource_url"])
            )  # noqa: E501
        if "compute_resource_description" in params:
            form_params.append(
                (
                    "compute_resource[description]",
                    params["compute_resource_description"],
                )
            )  # noqa: E501
        if "compute_resource_user" in params:
            form_params.append(
                ("compute_resource[user]", params["compute_resource_user"])
            )  # noqa: E501
        if "compute_resource_password" in params:
            form_params.append(
                ("compute_resource[password]", params["compute_resource_password"])
            )  # noqa: E501
        if "compute_resource_datacenter" in params:
            form_params.append(
                ("compute_resource[datacenter]", params["compute_resource_datacenter"])
            )  # noqa: E501
        if "compute_resource_ovirt_quota" in params:
            form_params.append(
                (
                    "compute_resource[ovirt_quota]",
                    params["compute_resource_ovirt_quota"],
                )
            )  # noqa: E501
        if "compute_resource_public_key" in params:
            form_params.append(
                ("compute_resource[public_key]", params["compute_resource_public_key"])
            )  # noqa: E501
        if "compute_resource_region" in params:
            form_params.append(
                ("compute_resource[region]", params["compute_resource_region"])
            )  # noqa: E501
        if "compute_resource_tenant" in params:
            form_params.append(
                ("compute_resource[tenant]", params["compute_resource_tenant"])
            )  # noqa: E501
        if "compute_resource_domain" in params:
            form_params.append(
                ("compute_resource[domain]", params["compute_resource_domain"])
            )  # noqa: E501
        if "compute_resource_project_domain_name" in params:
            form_params.append(
                (
                    "compute_resource[project_domain_name]",
                    params["compute_resource_project_domain_name"],
                )
            )  # noqa: E501
        if "compute_resource_project_domain_id" in params:
            form_params.append(
                (
                    "compute_resource[project_domain_id]",
                    params["compute_resource_project_domain_id"],
                )
            )  # noqa: E501
        if "compute_resource_server" in params:
            form_params.append(
                ("compute_resource[server]", params["compute_resource_server"])
            )  # noqa: E501
        if "compute_resource_set_console_password" in params:
            form_params.append(
                (
                    "compute_resource[set_console_password]",
                    params["compute_resource_set_console_password"],
                )
            )  # noqa: E501
        if "compute_resource_display_type" in params:
            form_params.append(
                (
                    "compute_resource[display_type]",
                    params["compute_resource_display_type"],
                )
            )  # noqa: E501
        if "compute_resource_keyboard_layout" in params:
            form_params.append(
                (
                    "compute_resource[keyboard_layout]",
                    params["compute_resource_keyboard_layout"],
                )
            )  # noqa: E501
        if "compute_resource_caching_enabled" in params:
            form_params.append(
                (
                    "compute_resource[caching_enabled]",
                    params["compute_resource_caching_enabled"],
                )
            )  # noqa: E501
        if "compute_resource_location_ids" in params:
            form_params.append(
                (
                    "compute_resource[location_ids]",
                    params["compute_resource_location_ids"],
                )
            )  # noqa: E501
            collection_formats["compute_resource[location_ids]"] = "csv"  # noqa: E501
        if "compute_resource_organization_ids" in params:
            form_params.append(
                (
                    "compute_resource[organization_ids]",
                    params["compute_resource_organization_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "compute_resource[organization_ids]"
            ] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_compute_resources_id_associate_vm_id(
        self, id, vm_id, **kwargs
    ):  # noqa: E501
        """Associate VMs to Hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_compute_resources_id_associate_vm_id(id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str vm_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_compute_resources_id_associate_vm_id_with_http_info(
                id, vm_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_compute_resources_id_associate_vm_id_with_http_info(
                id, vm_id, **kwargs
            )  # noqa: E501
            return data

    def put_compute_resources_id_associate_vm_id_with_http_info(
        self, id, vm_id, **kwargs
    ):  # noqa: E501
        """Associate VMs to Hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_compute_resources_id_associate_vm_id_with_http_info(id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str vm_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "vm_id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_compute_resources_id_associate_vm_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_compute_resources_id_associate_vm_id`"
            )  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if self.api_client.client_side_validation and (
            "vm_id" not in params or params["vm_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `vm_id` when calling `put_compute_resources_id_associate_vm_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "vm_id" in params:
            path_params["vm_id"] = params["vm_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/associate/{vm_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_compute_resources_id_available_virtual_machines_vm_id_power(
        self, id, vm_id, **kwargs
    ):  # noqa: E501
        """Power a Virtual Machine  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_compute_resources_id_available_virtual_machines_vm_id_power(id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str vm_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_compute_resources_id_available_virtual_machines_vm_id_power_with_http_info(
                id, vm_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_compute_resources_id_available_virtual_machines_vm_id_power_with_http_info(
                id, vm_id, **kwargs
            )  # noqa: E501
            return data

    def put_compute_resources_id_available_virtual_machines_vm_id_power_with_http_info(
        self, id, vm_id, **kwargs
    ):  # noqa: E501
        """Power a Virtual Machine  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_compute_resources_id_available_virtual_machines_vm_id_power_with_http_info(id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str vm_id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "vm_id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_compute_resources_id_available_virtual_machines_vm_id_power"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_compute_resources_id_available_virtual_machines_vm_id_power`"
            )  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if self.api_client.client_side_validation and (
            "vm_id" not in params or params["vm_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `vm_id` when calling `put_compute_resources_id_available_virtual_machines_vm_id_power`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "vm_id" in params:
            path_params["vm_id"] = params["vm_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/available_virtual_machines/{vm_id}/power",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_compute_resources_id_refresh_cache(self, id, **kwargs):  # noqa: E501
        """Refresh Compute Resource Cache  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_compute_resources_id_refresh_cache(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_compute_resources_id_refresh_cache_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_compute_resources_id_refresh_cache_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_compute_resources_id_refresh_cache_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Refresh Compute Resource Cache  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_compute_resources_id_refresh_cache_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_compute_resources_id_refresh_cache" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_compute_resources_id_refresh_cache`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{id}/refresh_cache",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
