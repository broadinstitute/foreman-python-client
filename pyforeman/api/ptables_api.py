# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class PtablesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_ptables_id(self, id, **kwargs):  # noqa: E501
        """Delete a partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ptables_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_ptables_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ptables_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_ptables_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ptables_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ptables_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_ptables_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/ptables/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_location_id_ptables(
        self, location_id, operatingsystem_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all partition tables per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_ptables(location_id, operatingsystem_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_location_id_ptables_with_http_info(
                location_id, operatingsystem_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_locations_location_id_ptables_with_http_info(
                location_id, operatingsystem_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_locations_location_id_ptables_with_http_info(
        self, location_id, operatingsystem_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all partition tables per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_ptables_with_http_info(location_id, operatingsystem_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "operatingsystem_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_location_id_ptables" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_locations_location_id_ptables`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_locations_location_id_ptables`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_locations_location_id_ptables`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/ptables",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_operatingsystems_operatingsystem_id_ptables(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all partition tables for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_ptables(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_operatingsystems_operatingsystem_id_ptables_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_operatingsystems_operatingsystem_id_ptables_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_operatingsystems_operatingsystem_id_ptables_with_http_info(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all partition tables for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_ptables_with_http_info(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_operatingsystems_operatingsystem_id_ptables" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_operatingsystems_operatingsystem_id_ptables`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_operatingsystems_operatingsystem_id_ptables`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_operatingsystems_operatingsystem_id_ptables`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "operatingsystem_id" in params:
            path_params["operatingsystem_id"] = params[
                "operatingsystem_id"
            ]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{operatingsystem_id}/ptables",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_ptables(
        self, organization_id, operatingsystem_id, location_id, **kwargs
    ):  # noqa: E501
        """List all partition tables per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_ptables(organization_id, operatingsystem_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_ptables_with_http_info(
                organization_id, operatingsystem_id, location_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_organization_id_ptables_with_http_info(
                organization_id, operatingsystem_id, location_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_ptables_with_http_info(
        self, organization_id, operatingsystem_id, location_id, **kwargs
    ):  # noqa: E501
        """List all partition tables per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_ptables_with_http_info(organization_id, operatingsystem_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "operatingsystem_id",
            "location_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_ptables" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_ptables`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_organizations_organization_id_ptables`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_organizations_organization_id_ptables`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/ptables",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_ptables(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all partition tables  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ptables(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_ptables_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_ptables_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_ptables_with_http_info(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all partition tables  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ptables_with_http_info(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ptables" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_ptables`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_ptables`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_ptables`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/ptables",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_ptables_id(self, id, **kwargs):  # noqa: E501
        """Show a partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ptables_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_ptables_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ptables_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_ptables_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ptables_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ptables_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_ptables_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/ptables/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_ptables_id_export(self, id, **kwargs):  # noqa: E501
        """Export a partition template to ERB  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ptables_id_export(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_ptables_id_export_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ptables_id_export_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_ptables_id_export_with_http_info(self, id, **kwargs):  # noqa: E501
        """Export a partition template to ERB  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ptables_id_export_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ptables_id_export" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_ptables_id_export`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/ptables/{id}/export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_ptables_revision(self, **kwargs):  # noqa: E501
        """get_ptables_revision  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ptables_revision(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str version: template version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_ptables_revision_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ptables_revision_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ptables_revision_with_http_info(self, **kwargs):  # noqa: E501
        """get_ptables_revision  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ptables_revision_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str version: template version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["location_id", "organization_id", "version"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ptables_revision" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "version" in params:
            query_params.append(("version", params["version"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/ptables/revision",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_ptables(self, ptable_name, ptable_layout, **kwargs):  # noqa: E501
        """Create a partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_ptables(ptable_name, ptable_layout, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ptable_name: (required)
        :param str ptable_layout: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str ptable_description:
        :param bool ptable_snippet:
        :param str ptable_audit_comment:
        :param bool ptable_locked: Whether or not the template is locked for editing
        :param str ptable_os_family:
        :param list[str] ptable_operatingsystem_ids: Array of operating system IDs to associate with the partition table
        :param list[str] ptable_host_ids: Array of host IDs to associate with the partition table
        :param list[str] ptable_hostgroup_ids: Array of host group IDs to associate with the partition table
        :param list[str] ptable_location_ids: REPLACE locations with given ids
        :param list[str] ptable_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_ptables_with_http_info(
                ptable_name, ptable_layout, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_ptables_with_http_info(
                ptable_name, ptable_layout, **kwargs
            )  # noqa: E501
            return data

    def post_ptables_with_http_info(
        self, ptable_name, ptable_layout, **kwargs
    ):  # noqa: E501
        """Create a partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_ptables_with_http_info(ptable_name, ptable_layout, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ptable_name: (required)
        :param str ptable_layout: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str ptable_description:
        :param bool ptable_snippet:
        :param str ptable_audit_comment:
        :param bool ptable_locked: Whether or not the template is locked for editing
        :param str ptable_os_family:
        :param list[str] ptable_operatingsystem_ids: Array of operating system IDs to associate with the partition table
        :param list[str] ptable_host_ids: Array of host IDs to associate with the partition table
        :param list[str] ptable_hostgroup_ids: Array of host group IDs to associate with the partition table
        :param list[str] ptable_location_ids: REPLACE locations with given ids
        :param list[str] ptable_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "ptable_name",
            "ptable_layout",
            "location_id",
            "organization_id",
            "ptable_description",
            "ptable_snippet",
            "ptable_audit_comment",
            "ptable_locked",
            "ptable_os_family",
            "ptable_operatingsystem_ids",
            "ptable_host_ids",
            "ptable_hostgroup_ids",
            "ptable_location_ids",
            "ptable_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_ptables" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'ptable_name' is set
        if self.api_client.client_side_validation and (
            "ptable_name" not in params or params["ptable_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ptable_name` when calling `post_ptables`"
            )  # noqa: E501
        # verify the required parameter 'ptable_layout' is set
        if self.api_client.client_side_validation and (
            "ptable_layout" not in params or params["ptable_layout"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ptable_layout` when calling `post_ptables`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "ptable_name" in params:
            form_params.append(("ptable[name]", params["ptable_name"]))  # noqa: E501
        if "ptable_layout" in params:
            form_params.append(
                ("ptable[layout]", params["ptable_layout"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "ptable_description" in params:
            form_params.append(
                ("ptable[description]", params["ptable_description"])
            )  # noqa: E501
        if "ptable_snippet" in params:
            form_params.append(
                ("ptable[snippet]", params["ptable_snippet"])
            )  # noqa: E501
        if "ptable_audit_comment" in params:
            form_params.append(
                ("ptable[audit_comment]", params["ptable_audit_comment"])
            )  # noqa: E501
        if "ptable_locked" in params:
            form_params.append(
                ("ptable[locked]", params["ptable_locked"])
            )  # noqa: E501
        if "ptable_os_family" in params:
            form_params.append(
                ("ptable[os_family]", params["ptable_os_family"])
            )  # noqa: E501
        if "ptable_operatingsystem_ids" in params:
            form_params.append(
                ("ptable[operatingsystem_ids]", params["ptable_operatingsystem_ids"])
            )  # noqa: E501
            collection_formats["ptable[operatingsystem_ids]"] = "csv"  # noqa: E501
        if "ptable_host_ids" in params:
            form_params.append(
                ("ptable[host_ids]", params["ptable_host_ids"])
            )  # noqa: E501
            collection_formats["ptable[host_ids]"] = "csv"  # noqa: E501
        if "ptable_hostgroup_ids" in params:
            form_params.append(
                ("ptable[hostgroup_ids]", params["ptable_hostgroup_ids"])
            )  # noqa: E501
            collection_formats["ptable[hostgroup_ids]"] = "csv"  # noqa: E501
        if "ptable_location_ids" in params:
            form_params.append(
                ("ptable[location_ids]", params["ptable_location_ids"])
            )  # noqa: E501
            collection_formats["ptable[location_ids]"] = "csv"  # noqa: E501
        if "ptable_organization_ids" in params:
            form_params.append(
                ("ptable[organization_ids]", params["ptable_organization_ids"])
            )  # noqa: E501
            collection_formats["ptable[organization_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/ptables",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_ptables_id_clone(self, id, ptable_name, **kwargs):  # noqa: E501
        """Clone a template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_ptables_id_clone(id, ptable_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str ptable_name: template name (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_ptables_id_clone_with_http_info(
                id, ptable_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_ptables_id_clone_with_http_info(
                id, ptable_name, **kwargs
            )  # noqa: E501
            return data

    def post_ptables_id_clone_with_http_info(
        self, id, ptable_name, **kwargs
    ):  # noqa: E501
        """Clone a template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_ptables_id_clone_with_http_info(id, ptable_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str ptable_name: template name (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "ptable_name",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_ptables_id_clone" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_ptables_id_clone`"
            )  # noqa: E501
        # verify the required parameter 'ptable_name' is set
        if self.api_client.client_side_validation and (
            "ptable_name" not in params or params["ptable_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ptable_name` when calling `post_ptables_id_clone`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "ptable_name" in params:
            form_params.append(("ptable[name]", params["ptable_name"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/ptables/{id}/clone",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_ptables_import(self, **kwargs):  # noqa: E501
        """Import a partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_ptables_import(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str ptable_name: template name
        :param str ptable_template: template contents including metadata
        :param list[str] ptable_location_ids: REPLACE locations with given ids
        :param list[str] ptable_organization_ids: REPLACE organizations with given ids.
        :param bool options_force: use if you want update locked templates
        :param str options_associate: determines when the template should associate objects based on metadata, new means only when new template is being created, always means both for new and existing template which is only being updated, never ignores metadata
        :param bool options_lock: lock imported templates (false by default)
        :param bool options_default: makes the template default meaning it will be automatically associated with newly created organizations and locations (false by default)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_ptables_import_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_ptables_import_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_ptables_import_with_http_info(self, **kwargs):  # noqa: E501
        """Import a partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_ptables_import_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str ptable_name: template name
        :param str ptable_template: template contents including metadata
        :param list[str] ptable_location_ids: REPLACE locations with given ids
        :param list[str] ptable_organization_ids: REPLACE organizations with given ids.
        :param bool options_force: use if you want update locked templates
        :param str options_associate: determines when the template should associate objects based on metadata, new means only when new template is being created, always means both for new and existing template which is only being updated, never ignores metadata
        :param bool options_lock: lock imported templates (false by default)
        :param bool options_default: makes the template default meaning it will be automatically associated with newly created organizations and locations (false by default)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "ptable_name",
            "ptable_template",
            "ptable_location_ids",
            "ptable_organization_ids",
            "options_force",
            "options_associate",
            "options_lock",
            "options_default",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_ptables_import" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "ptable_name" in params:
            form_params.append(("ptable[name]", params["ptable_name"]))  # noqa: E501
        if "ptable_template" in params:
            form_params.append(
                ("ptable[template]", params["ptable_template"])
            )  # noqa: E501
        if "ptable_location_ids" in params:
            form_params.append(
                ("ptable[location_ids]", params["ptable_location_ids"])
            )  # noqa: E501
            collection_formats["ptable[location_ids]"] = "csv"  # noqa: E501
        if "ptable_organization_ids" in params:
            form_params.append(
                ("ptable[organization_ids]", params["ptable_organization_ids"])
            )  # noqa: E501
            collection_formats["ptable[organization_ids]"] = "csv"  # noqa: E501
        if "options_force" in params:
            form_params.append(
                ("options[force]", params["options_force"])
            )  # noqa: E501
        if "options_associate" in params:
            form_params.append(
                ("options[associate]", params["options_associate"])
            )  # noqa: E501
        if "options_lock" in params:
            form_params.append(("options[lock]", params["options_lock"]))  # noqa: E501
        if "options_default" in params:
            form_params.append(
                ("options[default]", params["options_default"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/ptables/import",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_ptables_id(self, id, **kwargs):  # noqa: E501
        """Update a partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_ptables_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str ptable_name:
        :param str ptable_description:
        :param str ptable_layout:
        :param bool ptable_snippet:
        :param str ptable_audit_comment:
        :param bool ptable_locked: Whether or not the template is locked for editing
        :param str ptable_os_family:
        :param list[str] ptable_operatingsystem_ids: Array of operating system IDs to associate with the partition table
        :param list[str] ptable_host_ids: Array of host IDs to associate with the partition table
        :param list[str] ptable_hostgroup_ids: Array of host group IDs to associate with the partition table
        :param list[str] ptable_location_ids: REPLACE locations with given ids
        :param list[str] ptable_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_ptables_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_ptables_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_ptables_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a partition table  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_ptables_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str ptable_name:
        :param str ptable_description:
        :param str ptable_layout:
        :param bool ptable_snippet:
        :param str ptable_audit_comment:
        :param bool ptable_locked: Whether or not the template is locked for editing
        :param str ptable_os_family:
        :param list[str] ptable_operatingsystem_ids: Array of operating system IDs to associate with the partition table
        :param list[str] ptable_host_ids: Array of host IDs to associate with the partition table
        :param list[str] ptable_hostgroup_ids: Array of host group IDs to associate with the partition table
        :param list[str] ptable_location_ids: REPLACE locations with given ids
        :param list[str] ptable_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "ptable_name",
            "ptable_description",
            "ptable_layout",
            "ptable_snippet",
            "ptable_audit_comment",
            "ptable_locked",
            "ptable_os_family",
            "ptable_operatingsystem_ids",
            "ptable_host_ids",
            "ptable_hostgroup_ids",
            "ptable_location_ids",
            "ptable_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_ptables_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_ptables_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "ptable_name" in params:
            form_params.append(("ptable[name]", params["ptable_name"]))  # noqa: E501
        if "ptable_description" in params:
            form_params.append(
                ("ptable[description]", params["ptable_description"])
            )  # noqa: E501
        if "ptable_layout" in params:
            form_params.append(
                ("ptable[layout]", params["ptable_layout"])
            )  # noqa: E501
        if "ptable_snippet" in params:
            form_params.append(
                ("ptable[snippet]", params["ptable_snippet"])
            )  # noqa: E501
        if "ptable_audit_comment" in params:
            form_params.append(
                ("ptable[audit_comment]", params["ptable_audit_comment"])
            )  # noqa: E501
        if "ptable_locked" in params:
            form_params.append(
                ("ptable[locked]", params["ptable_locked"])
            )  # noqa: E501
        if "ptable_os_family" in params:
            form_params.append(
                ("ptable[os_family]", params["ptable_os_family"])
            )  # noqa: E501
        if "ptable_operatingsystem_ids" in params:
            form_params.append(
                ("ptable[operatingsystem_ids]", params["ptable_operatingsystem_ids"])
            )  # noqa: E501
            collection_formats["ptable[operatingsystem_ids]"] = "csv"  # noqa: E501
        if "ptable_host_ids" in params:
            form_params.append(
                ("ptable[host_ids]", params["ptable_host_ids"])
            )  # noqa: E501
            collection_formats["ptable[host_ids]"] = "csv"  # noqa: E501
        if "ptable_hostgroup_ids" in params:
            form_params.append(
                ("ptable[hostgroup_ids]", params["ptable_hostgroup_ids"])
            )  # noqa: E501
            collection_formats["ptable[hostgroup_ids]"] = "csv"  # noqa: E501
        if "ptable_location_ids" in params:
            form_params.append(
                ("ptable[location_ids]", params["ptable_location_ids"])
            )  # noqa: E501
            collection_formats["ptable[location_ids]"] = "csv"  # noqa: E501
        if "ptable_organization_ids" in params:
            form_params.append(
                ("ptable[organization_ids]", params["ptable_organization_ids"])
            )  # noqa: E501
            collection_formats["ptable[organization_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/ptables/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
