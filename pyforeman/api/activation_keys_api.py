# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class ActivationKeysApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_activation_keys_id(self, id, **kwargs):  # noqa: E501
        """Destroy an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_activation_keys_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_activation_keys_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_activation_keys_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_activation_keys_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Destroy an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_activation_keys_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_activation_keys_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_activation_keys_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_activation_keys(
        self, organization_id, environment_id, **kwargs
    ):  # noqa: E501
        """List activation keys  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys(organization_id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param float environment_id: environment identifier (required)
        :param float content_view_id: content view identifier
        :param str name: activation key name to filter by
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_activation_keys_with_http_info(
                organization_id, environment_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_activation_keys_with_http_info(
                organization_id, environment_id, **kwargs
            )  # noqa: E501
            return data

    def get_activation_keys_with_http_info(
        self, organization_id, environment_id, **kwargs
    ):  # noqa: E501
        """List activation keys  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_with_http_info(organization_id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param float environment_id: environment identifier (required)
        :param float content_view_id: content view identifier
        :param str name: activation key name to filter by
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "environment_id",
            "content_view_id",
            "name",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activation_keys" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_activation_keys`"
            )  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and (
            "environment_id" not in params or params["environment_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `environment_id` when calling `get_activation_keys`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "environment_id" in params:
            query_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "content_view_id" in params:
            query_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_activation_keys_id(self, id, **kwargs):  # noqa: E501
        """Show an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param float organization_id: organization identifier
        :param bool show_hosts: Show hosts associated to an activation key
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_activation_keys_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_activation_keys_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_activation_keys_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param float organization_id: organization identifier
        :param bool show_hosts: Show hosts associated to an activation key
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id", "show_hosts"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activation_keys_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_activation_keys_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "show_hosts" in params:
            query_params.append(("show_hosts", params["show_hosts"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_activation_keys_id_host_collections_available(
        self, id, **kwargs
    ):  # noqa: E501
        """List host collections the activation key does not belong to  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_id_host_collections_available(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: host collection name to filter by
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_activation_keys_id_host_collections_available_with_http_info(
                    id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_activation_keys_id_host_collections_available_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_activation_keys_id_host_collections_available_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """List host collections the activation key does not belong to  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_id_host_collections_available_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: host collection name to filter by
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
            "name",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activation_keys_id_host_collections_available" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_activation_keys_id_host_collections_available`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}/host_collections/available",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_activation_keys_id_product_content(self, id, **kwargs):  # noqa: E501
        """Show content available for an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_id_product_content(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the activation key (required)
        :param bool content_access_mode_all: Get all content available, not just that provided by subscriptions
        :param bool content_access_mode_env: Limit content to just that available in the activation key's content view version
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_activation_keys_id_product_content_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_activation_keys_id_product_content_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_activation_keys_id_product_content_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Show content available for an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_id_product_content_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the activation key (required)
        :param bool content_access_mode_all: Get all content available, not just that provided by subscriptions
        :param bool content_access_mode_env: Limit content to just that available in the activation key's content view version
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "content_access_mode_all",
            "content_access_mode_env",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activation_keys_id_product_content" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_activation_keys_id_product_content`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "content_access_mode_all" in params:
            query_params.append(
                ("content_access_mode_all", params["content_access_mode_all"])
            )  # noqa: E501
        if "content_access_mode_env" in params:
            query_params.append(
                ("content_access_mode_env", params["content_access_mode_env"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}/product_content",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_activation_keys_id_releases(self, id, **kwargs):  # noqa: E501
        """Show release versions available for an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_id_releases(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the activation key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_activation_keys_id_releases_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_activation_keys_id_releases_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_activation_keys_id_releases_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Show release versions available for an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_id_releases_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the activation key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activation_keys_id_releases" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_activation_keys_id_releases`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}/releases",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_environments_environment_id_activation_keys(
        self, environment_id, organization_id, **kwargs
    ):  # noqa: E501
        """get_environments_environment_id_activation_keys  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environments_environment_id_activation_keys(environment_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float environment_id: environment identifier (required)
        :param float organization_id: organization identifier (required)
        :param float content_view_id: content view identifier
        :param str name: activation key name to filter by
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_environments_environment_id_activation_keys_with_http_info(
                environment_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_environments_environment_id_activation_keys_with_http_info(
                environment_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_environments_environment_id_activation_keys_with_http_info(
        self, environment_id, organization_id, **kwargs
    ):  # noqa: E501
        """get_environments_environment_id_activation_keys  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environments_environment_id_activation_keys_with_http_info(environment_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float environment_id: environment identifier (required)
        :param float organization_id: organization identifier (required)
        :param float content_view_id: content view identifier
        :param str name: activation key name to filter by
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "environment_id",
            "organization_id",
            "content_view_id",
            "name",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environments_environment_id_activation_keys" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and (
            "environment_id" not in params or params["environment_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `environment_id` when calling `get_environments_environment_id_activation_keys`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_environments_environment_id_activation_keys`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "environment_id" in params:
            path_params["environment_id"] = params["environment_id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "content_view_id" in params:
            query_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/environments/{environment_id}/activation_keys",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_activation_keys(
        self, organization_id, environment_id, **kwargs
    ):  # noqa: E501
        """get_organizations_organization_id_activation_keys  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_activation_keys(organization_id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param float environment_id: environment identifier (required)
        :param float content_view_id: content view identifier
        :param str name: activation key name to filter by
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_organizations_organization_id_activation_keys_with_http_info(
                    organization_id, environment_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_activation_keys_with_http_info(
                organization_id, environment_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_activation_keys_with_http_info(
        self, organization_id, environment_id, **kwargs
    ):  # noqa: E501
        """get_organizations_organization_id_activation_keys  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_activation_keys_with_http_info(organization_id, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param float environment_id: environment identifier (required)
        :param float content_view_id: content view identifier
        :param str name: activation key name to filter by
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "environment_id",
            "content_view_id",
            "name",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_activation_keys" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_activation_keys`"
            )  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and (
            "environment_id" not in params or params["environment_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `environment_id` when calling `get_organizations_organization_id_activation_keys`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "environment_id" in params:
            query_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "content_view_id" in params:
            query_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/activation_keys",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_activation_keys(self, organization_id, name, **kwargs):  # noqa: E501
        """Create an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_activation_keys(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param str name: name (required)
        :param str description: description
        :param float environment_id: environment id
        :param float content_view_id: content view id
        :param float max_hosts: maximum number of registered content hosts
        :param bool unlimited_hosts: can the activation key have unlimited hosts
        :param str release_version: content release version
        :param str service_level: service level
        :param bool auto_attach: auto attach subscriptions upon registration
        :param str purpose_usage: Sets the system purpose usage
        :param str purpose_role: Sets the system purpose usage
        :param list[str] purpose_addons: Sets the system add-ons
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_activation_keys_with_http_info(
                organization_id, name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_activation_keys_with_http_info(
                organization_id, name, **kwargs
            )  # noqa: E501
            return data

    def post_activation_keys_with_http_info(
        self, organization_id, name, **kwargs
    ):  # noqa: E501
        """Create an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_activation_keys_with_http_info(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: organization identifier (required)
        :param str name: name (required)
        :param str description: description
        :param float environment_id: environment id
        :param float content_view_id: content view id
        :param float max_hosts: maximum number of registered content hosts
        :param bool unlimited_hosts: can the activation key have unlimited hosts
        :param str release_version: content release version
        :param str service_level: service level
        :param bool auto_attach: auto attach subscriptions upon registration
        :param str purpose_usage: Sets the system purpose usage
        :param str purpose_role: Sets the system purpose usage
        :param list[str] purpose_addons: Sets the system add-ons
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "name",
            "description",
            "environment_id",
            "content_view_id",
            "max_hosts",
            "unlimited_hosts",
            "release_version",
            "service_level",
            "auto_attach",
            "purpose_usage",
            "purpose_role",
            "purpose_addons",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_activation_keys" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_activation_keys`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_activation_keys`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "environment_id" in params:
            form_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "content_view_id" in params:
            form_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "max_hosts" in params:
            form_params.append(("max_hosts", params["max_hosts"]))  # noqa: E501
        if "unlimited_hosts" in params:
            form_params.append(
                ("unlimited_hosts", params["unlimited_hosts"])
            )  # noqa: E501
        if "release_version" in params:
            form_params.append(
                ("release_version", params["release_version"])
            )  # noqa: E501
        if "service_level" in params:
            form_params.append(("service_level", params["service_level"]))  # noqa: E501
        if "auto_attach" in params:
            form_params.append(("auto_attach", params["auto_attach"]))  # noqa: E501
        if "purpose_usage" in params:
            form_params.append(("purpose_usage", params["purpose_usage"]))  # noqa: E501
        if "purpose_role" in params:
            form_params.append(("purpose_role", params["purpose_role"]))  # noqa: E501
        if "purpose_addons" in params:
            form_params.append(
                ("purpose_addons", params["purpose_addons"])
            )  # noqa: E501
            collection_formats["purpose_addons"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_activation_keys_id_copy(self, id, new_name, **kwargs):  # noqa: E501
        """Copy an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_activation_keys_id_copy(id, new_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param str new_name: Name of new activation key (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_activation_keys_id_copy_with_http_info(
                id, new_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_activation_keys_id_copy_with_http_info(
                id, new_name, **kwargs
            )  # noqa: E501
            return data

    def post_activation_keys_id_copy_with_http_info(
        self, id, new_name, **kwargs
    ):  # noqa: E501
        """Copy an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_activation_keys_id_copy_with_http_info(id, new_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param str new_name: Name of new activation key (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "new_name", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_activation_keys_id_copy" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_activation_keys_id_copy`"
            )  # noqa: E501
        # verify the required parameter 'new_name' is set
        if self.api_client.client_side_validation and (
            "new_name" not in params or params["new_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `new_name` when calling `post_activation_keys_id_copy`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "new_name" in params:
            form_params.append(("new_name", params["new_name"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}/copy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_activation_keys_id_host_collections(
        self, id, host_collection_ids, **kwargs
    ):  # noqa: E501
        """post_activation_keys_id_host_collections  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_activation_keys_id_host_collections(id, host_collection_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param list[str] host_collection_ids: List of host collection IDs to associate with activation key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_activation_keys_id_host_collections_with_http_info(
                id, host_collection_ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_activation_keys_id_host_collections_with_http_info(
                id, host_collection_ids, **kwargs
            )  # noqa: E501
            return data

    def post_activation_keys_id_host_collections_with_http_info(
        self, id, host_collection_ids, **kwargs
    ):  # noqa: E501
        """post_activation_keys_id_host_collections  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_activation_keys_id_host_collections_with_http_info(id, host_collection_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param list[str] host_collection_ids: List of host collection IDs to associate with activation key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "host_collection_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_activation_keys_id_host_collections" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_activation_keys_id_host_collections`"
            )  # noqa: E501
        # verify the required parameter 'host_collection_ids' is set
        if self.api_client.client_side_validation and (
            "host_collection_ids" not in params or params["host_collection_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_collection_ids` when calling `post_activation_keys_id_host_collections`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_collection_ids" in params:
            form_params.append(
                ("host_collection_ids", params["host_collection_ids"])
            )  # noqa: E501
            collection_formats["host_collection_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}/host_collections",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_activation_keys_id(self, id, organization_id, **kwargs):  # noqa: E501
        """Update an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_activation_keys_id(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param float organization_id: organization identifier (required)
        :param str name: name
        :param str description: description
        :param float environment_id: environment id
        :param float content_view_id: content view id
        :param float max_hosts: maximum number of registered content hosts
        :param bool unlimited_hosts: can the activation key have unlimited hosts
        :param str release_version: content release version
        :param str service_level: service level
        :param bool auto_attach: auto attach subscriptions upon registration
        :param str purpose_usage: Sets the system purpose usage
        :param str purpose_role: Sets the system purpose usage
        :param list[str] purpose_addons: Sets the system add-ons
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_activation_keys_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_activation_keys_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_activation_keys_id_with_http_info(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Update an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_activation_keys_id_with_http_info(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param float organization_id: organization identifier (required)
        :param str name: name
        :param str description: description
        :param float environment_id: environment id
        :param float content_view_id: content view id
        :param float max_hosts: maximum number of registered content hosts
        :param bool unlimited_hosts: can the activation key have unlimited hosts
        :param str release_version: content release version
        :param str service_level: service level
        :param bool auto_attach: auto attach subscriptions upon registration
        :param str purpose_usage: Sets the system purpose usage
        :param str purpose_role: Sets the system purpose usage
        :param list[str] purpose_addons: Sets the system add-ons
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "organization_id",
            "name",
            "description",
            "environment_id",
            "content_view_id",
            "max_hosts",
            "unlimited_hosts",
            "release_version",
            "service_level",
            "auto_attach",
            "purpose_usage",
            "purpose_role",
            "purpose_addons",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_activation_keys_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_activation_keys_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_activation_keys_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "environment_id" in params:
            form_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "content_view_id" in params:
            form_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "max_hosts" in params:
            form_params.append(("max_hosts", params["max_hosts"]))  # noqa: E501
        if "unlimited_hosts" in params:
            form_params.append(
                ("unlimited_hosts", params["unlimited_hosts"])
            )  # noqa: E501
        if "release_version" in params:
            form_params.append(
                ("release_version", params["release_version"])
            )  # noqa: E501
        if "service_level" in params:
            form_params.append(("service_level", params["service_level"]))  # noqa: E501
        if "auto_attach" in params:
            form_params.append(("auto_attach", params["auto_attach"]))  # noqa: E501
        if "purpose_usage" in params:
            form_params.append(("purpose_usage", params["purpose_usage"]))  # noqa: E501
        if "purpose_role" in params:
            form_params.append(("purpose_role", params["purpose_role"]))  # noqa: E501
        if "purpose_addons" in params:
            form_params.append(
                ("purpose_addons", params["purpose_addons"])
            )  # noqa: E501
            collection_formats["purpose_addons"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_activation_keys_id_add_subscriptions(self, id, **kwargs):  # noqa: E501
        """Attach a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_activation_keys_id_add_subscriptions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param float subscription_id: Subscription identifier
        :param float quantity: Quantity of this subscription to add
        :param list[str] subscriptions: Array of subscriptions to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_activation_keys_id_add_subscriptions_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_activation_keys_id_add_subscriptions_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_activation_keys_id_add_subscriptions_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Attach a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_activation_keys_id_add_subscriptions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param float subscription_id: Subscription identifier
        :param float quantity: Quantity of this subscription to add
        :param list[str] subscriptions: Array of subscriptions to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "subscription_id",
            "quantity",
            "subscriptions",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_activation_keys_id_add_subscriptions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_activation_keys_id_add_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "subscription_id" in params:
            form_params.append(
                ("subscription_id", params["subscription_id"])
            )  # noqa: E501
        if "quantity" in params:
            form_params.append(("quantity", params["quantity"]))  # noqa: E501
        if "subscriptions" in params:
            form_params.append(("subscriptions", params["subscriptions"]))  # noqa: E501
            collection_formats["subscriptions"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}/add_subscriptions",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_activation_keys_id_content_override(self, id, **kwargs):  # noqa: E501
        """Override content for activation_key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_activation_keys_id_content_override(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param list[str] content_overrides: Array of Content override parameters to be added in bulk
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_activation_keys_id_content_override_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_activation_keys_id_content_override_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_activation_keys_id_content_override_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Override content for activation_key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_activation_keys_id_content_override_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param list[str] content_overrides: Array of Content override parameters to be added in bulk
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "content_overrides"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_activation_keys_id_content_override" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_activation_keys_id_content_override`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "content_overrides" in params:
            form_params.append(
                ("content_overrides", params["content_overrides"])
            )  # noqa: E501
            collection_formats["content_overrides"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}/content_override",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_activation_keys_id_host_collections(
        self, id, host_collection_ids, **kwargs
    ):  # noqa: E501
        """put_activation_keys_id_host_collections  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_activation_keys_id_host_collections(id, host_collection_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param list[str] host_collection_ids: List of host collection IDs to disassociate from the activation key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_activation_keys_id_host_collections_with_http_info(
                id, host_collection_ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_activation_keys_id_host_collections_with_http_info(
                id, host_collection_ids, **kwargs
            )  # noqa: E501
            return data

    def put_activation_keys_id_host_collections_with_http_info(
        self, id, host_collection_ids, **kwargs
    ):  # noqa: E501
        """put_activation_keys_id_host_collections  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_activation_keys_id_host_collections_with_http_info(id, host_collection_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param list[str] host_collection_ids: List of host collection IDs to disassociate from the activation key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "host_collection_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_activation_keys_id_host_collections" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_activation_keys_id_host_collections`"
            )  # noqa: E501
        # verify the required parameter 'host_collection_ids' is set
        if self.api_client.client_side_validation and (
            "host_collection_ids" not in params or params["host_collection_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_collection_ids` when calling `put_activation_keys_id_host_collections`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_collection_ids" in params:
            form_params.append(
                ("host_collection_ids", params["host_collection_ids"])
            )  # noqa: E501
            collection_formats["host_collection_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}/host_collections",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_activation_keys_id_remove_subscriptions(self, id, **kwargs):  # noqa: E501
        """Unattach a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_activation_keys_id_remove_subscriptions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param str subscription_id: Subscription ID
        :param list[str] subscriptions: Array of subscriptions to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_activation_keys_id_remove_subscriptions_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_activation_keys_id_remove_subscriptions_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_activation_keys_id_remove_subscriptions_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Unattach a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_activation_keys_id_remove_subscriptions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the activation key (required)
        :param str subscription_id: Subscription ID
        :param list[str] subscriptions: Array of subscriptions to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "subscription_id", "subscriptions"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_activation_keys_id_remove_subscriptions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_activation_keys_id_remove_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "subscription_id" in params:
            form_params.append(
                ("subscription_id", params["subscription_id"])
            )  # noqa: E501
        if "subscriptions" in params:
            form_params.append(("subscriptions", params["subscriptions"]))  # noqa: E501
            collection_formats["subscriptions"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{id}/remove_subscriptions",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
