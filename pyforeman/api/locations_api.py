# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class LocationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_locations_id(self, id, **kwargs):  # noqa: E501
        """Delete a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_locations_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_locations_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_locations_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_locations_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_locations_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_locations_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_locations_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations(self, **kwargs):  # noqa: E501
        """List all locations  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_locations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_locations_with_http_info(self, **kwargs):  # noqa: E501
        """List all locations  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_id(self, id, **kwargs):  # noqa: E501
        """Show a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool show_hidden_parameters: Display hidden parameter values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_locations_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_locations_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool show_hidden_parameters: Display hidden parameter values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "show_hidden_parameters",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_locations_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "show_hidden_parameters" in params:
            query_params.append(
                ("show_hidden_parameters", params["show_hidden_parameters"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_locations(self, location_name, **kwargs):  # noqa: E501
        """Create a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_locations(location_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_name: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str location_description:
        :param list[str] location_user_ids: User IDs
        :param list[str] location_smart_proxy_ids: Smart proxy IDs
        :param list[str] location_compute_resource_ids: Compute resource IDs
        :param list[str] location_medium_ids: Medium IDs
        :param list[str] location_ptable_ids: Partition template IDs
        :param list[str] location_provisioning_template_ids: Provisioning template IDs
        :param list[str] location_domain_ids: Domain IDs
        :param list[str] location_realm_ids: Realm IDs
        :param list[str] location_hostgroup_ids: Host group IDs
        :param list[str] location_environment_ids: Environment IDs
        :param list[str] location_subnet_ids: Subnet IDs
        :param float location_parent_id: Parent ID
        :param list[str] location_ignore_types: List of resources types that will be automatically associated
        :param list[str] location_organization_ids: Associated organization IDs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_locations_with_http_info(
                location_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_locations_with_http_info(
                location_name, **kwargs
            )  # noqa: E501
            return data

    def post_locations_with_http_info(self, location_name, **kwargs):  # noqa: E501
        """Create a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_locations_with_http_info(location_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_name: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str location_description:
        :param list[str] location_user_ids: User IDs
        :param list[str] location_smart_proxy_ids: Smart proxy IDs
        :param list[str] location_compute_resource_ids: Compute resource IDs
        :param list[str] location_medium_ids: Medium IDs
        :param list[str] location_ptable_ids: Partition template IDs
        :param list[str] location_provisioning_template_ids: Provisioning template IDs
        :param list[str] location_domain_ids: Domain IDs
        :param list[str] location_realm_ids: Realm IDs
        :param list[str] location_hostgroup_ids: Host group IDs
        :param list[str] location_environment_ids: Environment IDs
        :param list[str] location_subnet_ids: Subnet IDs
        :param float location_parent_id: Parent ID
        :param list[str] location_ignore_types: List of resources types that will be automatically associated
        :param list[str] location_organization_ids: Associated organization IDs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_name",
            "location_id",
            "organization_id",
            "location_description",
            "location_user_ids",
            "location_smart_proxy_ids",
            "location_compute_resource_ids",
            "location_medium_ids",
            "location_ptable_ids",
            "location_provisioning_template_ids",
            "location_domain_ids",
            "location_realm_ids",
            "location_hostgroup_ids",
            "location_environment_ids",
            "location_subnet_ids",
            "location_parent_id",
            "location_ignore_types",
            "location_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_locations" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_name' is set
        if self.api_client.client_side_validation and (
            "location_name" not in params or params["location_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_name` when calling `post_locations`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_name" in params:
            form_params.append(
                ("location[name]", params["location_name"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_description" in params:
            form_params.append(
                ("location[description]", params["location_description"])
            )  # noqa: E501
        if "location_user_ids" in params:
            form_params.append(
                ("location[user_ids]", params["location_user_ids"])
            )  # noqa: E501
            collection_formats["location[user_ids]"] = "csv"  # noqa: E501
        if "location_smart_proxy_ids" in params:
            form_params.append(
                ("location[smart_proxy_ids]", params["location_smart_proxy_ids"])
            )  # noqa: E501
            collection_formats["location[smart_proxy_ids]"] = "csv"  # noqa: E501
        if "location_compute_resource_ids" in params:
            form_params.append(
                (
                    "location[compute_resource_ids]",
                    params["location_compute_resource_ids"],
                )
            )  # noqa: E501
            collection_formats["location[compute_resource_ids]"] = "csv"  # noqa: E501
        if "location_medium_ids" in params:
            form_params.append(
                ("location[medium_ids]", params["location_medium_ids"])
            )  # noqa: E501
            collection_formats["location[medium_ids]"] = "csv"  # noqa: E501
        if "location_ptable_ids" in params:
            form_params.append(
                ("location[ptable_ids]", params["location_ptable_ids"])
            )  # noqa: E501
            collection_formats["location[ptable_ids]"] = "csv"  # noqa: E501
        if "location_provisioning_template_ids" in params:
            form_params.append(
                (
                    "location[provisioning_template_ids]",
                    params["location_provisioning_template_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "location[provisioning_template_ids]"
            ] = "csv"  # noqa: E501
        if "location_domain_ids" in params:
            form_params.append(
                ("location[domain_ids]", params["location_domain_ids"])
            )  # noqa: E501
            collection_formats["location[domain_ids]"] = "csv"  # noqa: E501
        if "location_realm_ids" in params:
            form_params.append(
                ("location[realm_ids]", params["location_realm_ids"])
            )  # noqa: E501
            collection_formats["location[realm_ids]"] = "csv"  # noqa: E501
        if "location_hostgroup_ids" in params:
            form_params.append(
                ("location[hostgroup_ids]", params["location_hostgroup_ids"])
            )  # noqa: E501
            collection_formats["location[hostgroup_ids]"] = "csv"  # noqa: E501
        if "location_environment_ids" in params:
            form_params.append(
                ("location[environment_ids]", params["location_environment_ids"])
            )  # noqa: E501
            collection_formats["location[environment_ids]"] = "csv"  # noqa: E501
        if "location_subnet_ids" in params:
            form_params.append(
                ("location[subnet_ids]", params["location_subnet_ids"])
            )  # noqa: E501
            collection_formats["location[subnet_ids]"] = "csv"  # noqa: E501
        if "location_parent_id" in params:
            form_params.append(
                ("location[parent_id]", params["location_parent_id"])
            )  # noqa: E501
        if "location_ignore_types" in params:
            form_params.append(
                ("location[ignore_types]", params["location_ignore_types"])
            )  # noqa: E501
            collection_formats["location[ignore_types]"] = "csv"  # noqa: E501
        if "location_organization_ids" in params:
            form_params.append(
                ("location[organization_ids]", params["location_organization_ids"])
            )  # noqa: E501
            collection_formats["location[organization_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_locations_id(self, id, **kwargs):  # noqa: E501
        """Update a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_locations_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str location_name:
        :param str location_description:
        :param list[str] location_user_ids: User IDs
        :param list[str] location_smart_proxy_ids: Smart proxy IDs
        :param list[str] location_compute_resource_ids: Compute resource IDs
        :param list[str] location_medium_ids: Medium IDs
        :param list[str] location_ptable_ids: Partition template IDs
        :param list[str] location_provisioning_template_ids: Provisioning template IDs
        :param list[str] location_domain_ids: Domain IDs
        :param list[str] location_realm_ids: Realm IDs
        :param list[str] location_hostgroup_ids: Host group IDs
        :param list[str] location_environment_ids: Environment IDs
        :param list[str] location_subnet_ids: Subnet IDs
        :param float location_parent_id: Parent ID
        :param list[str] location_ignore_types: List of resources types that will be automatically associated
        :param list[str] location_organization_ids: Associated organization IDs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_locations_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_locations_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_locations_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_locations_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str location_name:
        :param str location_description:
        :param list[str] location_user_ids: User IDs
        :param list[str] location_smart_proxy_ids: Smart proxy IDs
        :param list[str] location_compute_resource_ids: Compute resource IDs
        :param list[str] location_medium_ids: Medium IDs
        :param list[str] location_ptable_ids: Partition template IDs
        :param list[str] location_provisioning_template_ids: Provisioning template IDs
        :param list[str] location_domain_ids: Domain IDs
        :param list[str] location_realm_ids: Realm IDs
        :param list[str] location_hostgroup_ids: Host group IDs
        :param list[str] location_environment_ids: Environment IDs
        :param list[str] location_subnet_ids: Subnet IDs
        :param float location_parent_id: Parent ID
        :param list[str] location_ignore_types: List of resources types that will be automatically associated
        :param list[str] location_organization_ids: Associated organization IDs
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "location_name",
            "location_description",
            "location_user_ids",
            "location_smart_proxy_ids",
            "location_compute_resource_ids",
            "location_medium_ids",
            "location_ptable_ids",
            "location_provisioning_template_ids",
            "location_domain_ids",
            "location_realm_ids",
            "location_hostgroup_ids",
            "location_environment_ids",
            "location_subnet_ids",
            "location_parent_id",
            "location_ignore_types",
            "location_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_locations_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_locations_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_name" in params:
            form_params.append(
                ("location[name]", params["location_name"])
            )  # noqa: E501
        if "location_description" in params:
            form_params.append(
                ("location[description]", params["location_description"])
            )  # noqa: E501
        if "location_user_ids" in params:
            form_params.append(
                ("location[user_ids]", params["location_user_ids"])
            )  # noqa: E501
            collection_formats["location[user_ids]"] = "csv"  # noqa: E501
        if "location_smart_proxy_ids" in params:
            form_params.append(
                ("location[smart_proxy_ids]", params["location_smart_proxy_ids"])
            )  # noqa: E501
            collection_formats["location[smart_proxy_ids]"] = "csv"  # noqa: E501
        if "location_compute_resource_ids" in params:
            form_params.append(
                (
                    "location[compute_resource_ids]",
                    params["location_compute_resource_ids"],
                )
            )  # noqa: E501
            collection_formats["location[compute_resource_ids]"] = "csv"  # noqa: E501
        if "location_medium_ids" in params:
            form_params.append(
                ("location[medium_ids]", params["location_medium_ids"])
            )  # noqa: E501
            collection_formats["location[medium_ids]"] = "csv"  # noqa: E501
        if "location_ptable_ids" in params:
            form_params.append(
                ("location[ptable_ids]", params["location_ptable_ids"])
            )  # noqa: E501
            collection_formats["location[ptable_ids]"] = "csv"  # noqa: E501
        if "location_provisioning_template_ids" in params:
            form_params.append(
                (
                    "location[provisioning_template_ids]",
                    params["location_provisioning_template_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "location[provisioning_template_ids]"
            ] = "csv"  # noqa: E501
        if "location_domain_ids" in params:
            form_params.append(
                ("location[domain_ids]", params["location_domain_ids"])
            )  # noqa: E501
            collection_formats["location[domain_ids]"] = "csv"  # noqa: E501
        if "location_realm_ids" in params:
            form_params.append(
                ("location[realm_ids]", params["location_realm_ids"])
            )  # noqa: E501
            collection_formats["location[realm_ids]"] = "csv"  # noqa: E501
        if "location_hostgroup_ids" in params:
            form_params.append(
                ("location[hostgroup_ids]", params["location_hostgroup_ids"])
            )  # noqa: E501
            collection_formats["location[hostgroup_ids]"] = "csv"  # noqa: E501
        if "location_environment_ids" in params:
            form_params.append(
                ("location[environment_ids]", params["location_environment_ids"])
            )  # noqa: E501
            collection_formats["location[environment_ids]"] = "csv"  # noqa: E501
        if "location_subnet_ids" in params:
            form_params.append(
                ("location[subnet_ids]", params["location_subnet_ids"])
            )  # noqa: E501
            collection_formats["location[subnet_ids]"] = "csv"  # noqa: E501
        if "location_parent_id" in params:
            form_params.append(
                ("location[parent_id]", params["location_parent_id"])
            )  # noqa: E501
        if "location_ignore_types" in params:
            form_params.append(
                ("location[ignore_types]", params["location_ignore_types"])
            )  # noqa: E501
            collection_formats["location[ignore_types]"] = "csv"  # noqa: E501
        if "location_organization_ids" in params:
            form_params.append(
                ("location[organization_ids]", params["location_organization_ids"])
            )  # noqa: E501
            collection_formats["location[organization_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
