# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class AuthSourceLdapsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_auth_source_ldaps_id(self, id, **kwargs):  # noqa: E501
        """Delete an LDAP authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_auth_source_ldaps_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_auth_source_ldaps_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_auth_source_ldaps_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_auth_source_ldaps_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an LDAP authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_auth_source_ldaps_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_auth_source_ldaps_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_auth_source_ldaps_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth_source_ldaps/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_auth_source_ldaps(
        self, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all LDAP authentication sources  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auth_source_ldaps(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_auth_source_ldaps_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_auth_source_ldaps_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_auth_source_ldaps_with_http_info(
        self, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all LDAP authentication sources  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auth_source_ldaps_with_http_info(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_source_ldaps" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_auth_source_ldaps`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_auth_source_ldaps`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth_source_ldaps",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_auth_source_ldaps_id(self, id, **kwargs):  # noqa: E501
        """Show an LDAP authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auth_source_ldaps_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_auth_source_ldaps_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_auth_source_ldaps_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_auth_source_ldaps_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show an LDAP authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auth_source_ldaps_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_source_ldaps_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_auth_source_ldaps_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth_source_ldaps/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_location_id_auth_source_ldaps(
        self, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List LDAP authentication sources per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_auth_source_ldaps(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_location_id_auth_source_ldaps_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_locations_location_id_auth_source_ldaps_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_locations_location_id_auth_source_ldaps_with_http_info(
        self, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List LDAP authentication sources per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_auth_source_ldaps_with_http_info(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_location_id_auth_source_ldaps" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_locations_location_id_auth_source_ldaps`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_locations_location_id_auth_source_ldaps`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/auth_source_ldaps",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_auth_source_ldaps(
        self, organization_id, location_id, **kwargs
    ):  # noqa: E501
        """List LDAP authentication sources per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_auth_source_ldaps(organization_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_organizations_organization_id_auth_source_ldaps_with_http_info(
                    organization_id, location_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_auth_source_ldaps_with_http_info(
                organization_id, location_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_auth_source_ldaps_with_http_info(
        self, organization_id, location_id, **kwargs
    ):  # noqa: E501
        """List LDAP authentication sources per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_auth_source_ldaps_with_http_info(organization_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_auth_source_ldaps"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_auth_source_ldaps`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_organizations_organization_id_auth_source_ldaps`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/auth_source_ldaps",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_auth_source_ldaps(
        self, auth_source_ldap_name, auth_source_ldap_host, **kwargs
    ):  # noqa: E501
        """Create an LDAP authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_source_ldaps(auth_source_ldap_name, auth_source_ldap_host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_source_ldap_name: (required)
        :param str auth_source_ldap_host: The hostname of the LDAP server (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param float auth_source_ldap_port: defaults to 389
        :param str auth_source_ldap_account:
        :param str auth_source_ldap_base_dn:
        :param str auth_source_ldap_account_password: required if onthefly_register is true
        :param str auth_source_ldap_attr_login: required if onthefly_register is true
        :param str auth_source_ldap_attr_firstname: required if onthefly_register is true
        :param str auth_source_ldap_attr_lastname: required if onthefly_register is true
        :param str auth_source_ldap_attr_mail: required if onthefly_register is true
        :param str auth_source_ldap_attr_photo:
        :param bool auth_source_ldap_onthefly_register:
        :param bool auth_source_ldap_usergroup_sync: sync external user groups on login
        :param bool auth_source_ldap_tls:
        :param str auth_source_ldap_groups_base: groups base DN
        :param bool auth_source_ldap_use_netgroups: use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa
        :param str auth_source_ldap_server_type: type of the LDAP server
        :param str auth_source_ldap_ldap_filter: LDAP filter
        :param list[str] auth_source_ldap_location_ids: REPLACE locations with given ids
        :param list[str] auth_source_ldap_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_auth_source_ldaps_with_http_info(
                auth_source_ldap_name, auth_source_ldap_host, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_auth_source_ldaps_with_http_info(
                auth_source_ldap_name, auth_source_ldap_host, **kwargs
            )  # noqa: E501
            return data

    def post_auth_source_ldaps_with_http_info(
        self, auth_source_ldap_name, auth_source_ldap_host, **kwargs
    ):  # noqa: E501
        """Create an LDAP authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_auth_source_ldaps_with_http_info(auth_source_ldap_name, auth_source_ldap_host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_source_ldap_name: (required)
        :param str auth_source_ldap_host: The hostname of the LDAP server (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param float auth_source_ldap_port: defaults to 389
        :param str auth_source_ldap_account:
        :param str auth_source_ldap_base_dn:
        :param str auth_source_ldap_account_password: required if onthefly_register is true
        :param str auth_source_ldap_attr_login: required if onthefly_register is true
        :param str auth_source_ldap_attr_firstname: required if onthefly_register is true
        :param str auth_source_ldap_attr_lastname: required if onthefly_register is true
        :param str auth_source_ldap_attr_mail: required if onthefly_register is true
        :param str auth_source_ldap_attr_photo:
        :param bool auth_source_ldap_onthefly_register:
        :param bool auth_source_ldap_usergroup_sync: sync external user groups on login
        :param bool auth_source_ldap_tls:
        :param str auth_source_ldap_groups_base: groups base DN
        :param bool auth_source_ldap_use_netgroups: use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa
        :param str auth_source_ldap_server_type: type of the LDAP server
        :param str auth_source_ldap_ldap_filter: LDAP filter
        :param list[str] auth_source_ldap_location_ids: REPLACE locations with given ids
        :param list[str] auth_source_ldap_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "auth_source_ldap_name",
            "auth_source_ldap_host",
            "location_id",
            "organization_id",
            "auth_source_ldap_port",
            "auth_source_ldap_account",
            "auth_source_ldap_base_dn",
            "auth_source_ldap_account_password",
            "auth_source_ldap_attr_login",
            "auth_source_ldap_attr_firstname",
            "auth_source_ldap_attr_lastname",
            "auth_source_ldap_attr_mail",
            "auth_source_ldap_attr_photo",
            "auth_source_ldap_onthefly_register",
            "auth_source_ldap_usergroup_sync",
            "auth_source_ldap_tls",
            "auth_source_ldap_groups_base",
            "auth_source_ldap_use_netgroups",
            "auth_source_ldap_server_type",
            "auth_source_ldap_ldap_filter",
            "auth_source_ldap_location_ids",
            "auth_source_ldap_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_auth_source_ldaps" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'auth_source_ldap_name' is set
        if self.api_client.client_side_validation and (
            "auth_source_ldap_name" not in params
            or params["auth_source_ldap_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `auth_source_ldap_name` when calling `post_auth_source_ldaps`"
            )  # noqa: E501
        # verify the required parameter 'auth_source_ldap_host' is set
        if self.api_client.client_side_validation and (
            "auth_source_ldap_host" not in params
            or params["auth_source_ldap_host"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `auth_source_ldap_host` when calling `post_auth_source_ldaps`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "auth_source_ldap_name" in params:
            form_params.append(
                ("auth_source_ldap[name]", params["auth_source_ldap_name"])
            )  # noqa: E501
        if "auth_source_ldap_host" in params:
            form_params.append(
                ("auth_source_ldap[host]", params["auth_source_ldap_host"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "auth_source_ldap_port" in params:
            form_params.append(
                ("auth_source_ldap[port]", params["auth_source_ldap_port"])
            )  # noqa: E501
        if "auth_source_ldap_account" in params:
            form_params.append(
                ("auth_source_ldap[account]", params["auth_source_ldap_account"])
            )  # noqa: E501
        if "auth_source_ldap_base_dn" in params:
            form_params.append(
                ("auth_source_ldap[base_dn]", params["auth_source_ldap_base_dn"])
            )  # noqa: E501
        if "auth_source_ldap_account_password" in params:
            form_params.append(
                (
                    "auth_source_ldap[account_password]",
                    params["auth_source_ldap_account_password"],
                )
            )  # noqa: E501
        if "auth_source_ldap_attr_login" in params:
            form_params.append(
                ("auth_source_ldap[attr_login]", params["auth_source_ldap_attr_login"])
            )  # noqa: E501
        if "auth_source_ldap_attr_firstname" in params:
            form_params.append(
                (
                    "auth_source_ldap[attr_firstname]",
                    params["auth_source_ldap_attr_firstname"],
                )
            )  # noqa: E501
        if "auth_source_ldap_attr_lastname" in params:
            form_params.append(
                (
                    "auth_source_ldap[attr_lastname]",
                    params["auth_source_ldap_attr_lastname"],
                )
            )  # noqa: E501
        if "auth_source_ldap_attr_mail" in params:
            form_params.append(
                ("auth_source_ldap[attr_mail]", params["auth_source_ldap_attr_mail"])
            )  # noqa: E501
        if "auth_source_ldap_attr_photo" in params:
            form_params.append(
                ("auth_source_ldap[attr_photo]", params["auth_source_ldap_attr_photo"])
            )  # noqa: E501
        if "auth_source_ldap_onthefly_register" in params:
            form_params.append(
                (
                    "auth_source_ldap[onthefly_register]",
                    params["auth_source_ldap_onthefly_register"],
                )
            )  # noqa: E501
        if "auth_source_ldap_usergroup_sync" in params:
            form_params.append(
                (
                    "auth_source_ldap[usergroup_sync]",
                    params["auth_source_ldap_usergroup_sync"],
                )
            )  # noqa: E501
        if "auth_source_ldap_tls" in params:
            form_params.append(
                ("auth_source_ldap[tls]", params["auth_source_ldap_tls"])
            )  # noqa: E501
        if "auth_source_ldap_groups_base" in params:
            form_params.append(
                (
                    "auth_source_ldap[groups_base]",
                    params["auth_source_ldap_groups_base"],
                )
            )  # noqa: E501
        if "auth_source_ldap_use_netgroups" in params:
            form_params.append(
                (
                    "auth_source_ldap[use_netgroups]",
                    params["auth_source_ldap_use_netgroups"],
                )
            )  # noqa: E501
        if "auth_source_ldap_server_type" in params:
            form_params.append(
                (
                    "auth_source_ldap[server_type]",
                    params["auth_source_ldap_server_type"],
                )
            )  # noqa: E501
        if "auth_source_ldap_ldap_filter" in params:
            form_params.append(
                (
                    "auth_source_ldap[ldap_filter]",
                    params["auth_source_ldap_ldap_filter"],
                )
            )  # noqa: E501
        if "auth_source_ldap_location_ids" in params:
            form_params.append(
                (
                    "auth_source_ldap[location_ids]",
                    params["auth_source_ldap_location_ids"],
                )
            )  # noqa: E501
            collection_formats["auth_source_ldap[location_ids]"] = "csv"  # noqa: E501
        if "auth_source_ldap_organization_ids" in params:
            form_params.append(
                (
                    "auth_source_ldap[organization_ids]",
                    params["auth_source_ldap_organization_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "auth_source_ldap[organization_ids]"
            ] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth_source_ldaps",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_auth_source_ldaps_id(self, id, **kwargs):  # noqa: E501
        """Update an LDAP authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_auth_source_ldaps_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str auth_source_ldap_name:
        :param str auth_source_ldap_host: The hostname of the LDAP server
        :param float auth_source_ldap_port: defaults to 389
        :param str auth_source_ldap_account:
        :param str auth_source_ldap_base_dn:
        :param str auth_source_ldap_account_password: required if onthefly_register is true
        :param str auth_source_ldap_attr_login: required if onthefly_register is true
        :param str auth_source_ldap_attr_firstname: required if onthefly_register is true
        :param str auth_source_ldap_attr_lastname: required if onthefly_register is true
        :param str auth_source_ldap_attr_mail: required if onthefly_register is true
        :param str auth_source_ldap_attr_photo:
        :param bool auth_source_ldap_onthefly_register:
        :param bool auth_source_ldap_usergroup_sync: sync external user groups on login
        :param bool auth_source_ldap_tls:
        :param str auth_source_ldap_groups_base: groups base DN
        :param bool auth_source_ldap_use_netgroups: use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa
        :param str auth_source_ldap_server_type: type of the LDAP server
        :param str auth_source_ldap_ldap_filter: LDAP filter
        :param list[str] auth_source_ldap_location_ids: REPLACE locations with given ids
        :param list[str] auth_source_ldap_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_auth_source_ldaps_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_auth_source_ldaps_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_auth_source_ldaps_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update an LDAP authentication source  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_auth_source_ldaps_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str auth_source_ldap_name:
        :param str auth_source_ldap_host: The hostname of the LDAP server
        :param float auth_source_ldap_port: defaults to 389
        :param str auth_source_ldap_account:
        :param str auth_source_ldap_base_dn:
        :param str auth_source_ldap_account_password: required if onthefly_register is true
        :param str auth_source_ldap_attr_login: required if onthefly_register is true
        :param str auth_source_ldap_attr_firstname: required if onthefly_register is true
        :param str auth_source_ldap_attr_lastname: required if onthefly_register is true
        :param str auth_source_ldap_attr_mail: required if onthefly_register is true
        :param str auth_source_ldap_attr_photo:
        :param bool auth_source_ldap_onthefly_register:
        :param bool auth_source_ldap_usergroup_sync: sync external user groups on login
        :param bool auth_source_ldap_tls:
        :param str auth_source_ldap_groups_base: groups base DN
        :param bool auth_source_ldap_use_netgroups: use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa
        :param str auth_source_ldap_server_type: type of the LDAP server
        :param str auth_source_ldap_ldap_filter: LDAP filter
        :param list[str] auth_source_ldap_location_ids: REPLACE locations with given ids
        :param list[str] auth_source_ldap_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "auth_source_ldap_name",
            "auth_source_ldap_host",
            "auth_source_ldap_port",
            "auth_source_ldap_account",
            "auth_source_ldap_base_dn",
            "auth_source_ldap_account_password",
            "auth_source_ldap_attr_login",
            "auth_source_ldap_attr_firstname",
            "auth_source_ldap_attr_lastname",
            "auth_source_ldap_attr_mail",
            "auth_source_ldap_attr_photo",
            "auth_source_ldap_onthefly_register",
            "auth_source_ldap_usergroup_sync",
            "auth_source_ldap_tls",
            "auth_source_ldap_groups_base",
            "auth_source_ldap_use_netgroups",
            "auth_source_ldap_server_type",
            "auth_source_ldap_ldap_filter",
            "auth_source_ldap_location_ids",
            "auth_source_ldap_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_auth_source_ldaps_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_auth_source_ldaps_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "auth_source_ldap_name" in params:
            form_params.append(
                ("auth_source_ldap[name]", params["auth_source_ldap_name"])
            )  # noqa: E501
        if "auth_source_ldap_host" in params:
            form_params.append(
                ("auth_source_ldap[host]", params["auth_source_ldap_host"])
            )  # noqa: E501
        if "auth_source_ldap_port" in params:
            form_params.append(
                ("auth_source_ldap[port]", params["auth_source_ldap_port"])
            )  # noqa: E501
        if "auth_source_ldap_account" in params:
            form_params.append(
                ("auth_source_ldap[account]", params["auth_source_ldap_account"])
            )  # noqa: E501
        if "auth_source_ldap_base_dn" in params:
            form_params.append(
                ("auth_source_ldap[base_dn]", params["auth_source_ldap_base_dn"])
            )  # noqa: E501
        if "auth_source_ldap_account_password" in params:
            form_params.append(
                (
                    "auth_source_ldap[account_password]",
                    params["auth_source_ldap_account_password"],
                )
            )  # noqa: E501
        if "auth_source_ldap_attr_login" in params:
            form_params.append(
                ("auth_source_ldap[attr_login]", params["auth_source_ldap_attr_login"])
            )  # noqa: E501
        if "auth_source_ldap_attr_firstname" in params:
            form_params.append(
                (
                    "auth_source_ldap[attr_firstname]",
                    params["auth_source_ldap_attr_firstname"],
                )
            )  # noqa: E501
        if "auth_source_ldap_attr_lastname" in params:
            form_params.append(
                (
                    "auth_source_ldap[attr_lastname]",
                    params["auth_source_ldap_attr_lastname"],
                )
            )  # noqa: E501
        if "auth_source_ldap_attr_mail" in params:
            form_params.append(
                ("auth_source_ldap[attr_mail]", params["auth_source_ldap_attr_mail"])
            )  # noqa: E501
        if "auth_source_ldap_attr_photo" in params:
            form_params.append(
                ("auth_source_ldap[attr_photo]", params["auth_source_ldap_attr_photo"])
            )  # noqa: E501
        if "auth_source_ldap_onthefly_register" in params:
            form_params.append(
                (
                    "auth_source_ldap[onthefly_register]",
                    params["auth_source_ldap_onthefly_register"],
                )
            )  # noqa: E501
        if "auth_source_ldap_usergroup_sync" in params:
            form_params.append(
                (
                    "auth_source_ldap[usergroup_sync]",
                    params["auth_source_ldap_usergroup_sync"],
                )
            )  # noqa: E501
        if "auth_source_ldap_tls" in params:
            form_params.append(
                ("auth_source_ldap[tls]", params["auth_source_ldap_tls"])
            )  # noqa: E501
        if "auth_source_ldap_groups_base" in params:
            form_params.append(
                (
                    "auth_source_ldap[groups_base]",
                    params["auth_source_ldap_groups_base"],
                )
            )  # noqa: E501
        if "auth_source_ldap_use_netgroups" in params:
            form_params.append(
                (
                    "auth_source_ldap[use_netgroups]",
                    params["auth_source_ldap_use_netgroups"],
                )
            )  # noqa: E501
        if "auth_source_ldap_server_type" in params:
            form_params.append(
                (
                    "auth_source_ldap[server_type]",
                    params["auth_source_ldap_server_type"],
                )
            )  # noqa: E501
        if "auth_source_ldap_ldap_filter" in params:
            form_params.append(
                (
                    "auth_source_ldap[ldap_filter]",
                    params["auth_source_ldap_ldap_filter"],
                )
            )  # noqa: E501
        if "auth_source_ldap_location_ids" in params:
            form_params.append(
                (
                    "auth_source_ldap[location_ids]",
                    params["auth_source_ldap_location_ids"],
                )
            )  # noqa: E501
            collection_formats["auth_source_ldap[location_ids]"] = "csv"  # noqa: E501
        if "auth_source_ldap_organization_ids" in params:
            form_params.append(
                (
                    "auth_source_ldap[organization_ids]",
                    params["auth_source_ldap_organization_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "auth_source_ldap[organization_ids]"
            ] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth_source_ldaps/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_auth_source_ldaps_id_test(self, id, **kwargs):  # noqa: E501
        """Test LDAP connection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_auth_source_ldaps_id_test(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_auth_source_ldaps_id_test_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_auth_source_ldaps_id_test_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_auth_source_ldaps_id_test_with_http_info(self, id, **kwargs):  # noqa: E501
        """Test LDAP connection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_auth_source_ldaps_id_test_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_auth_source_ldaps_id_test" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_auth_source_ldaps_id_test`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth_source_ldaps/{id}/test",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
