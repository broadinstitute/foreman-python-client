# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class ParametersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_domains_domain_id_parameters(
        self,
        domain_id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameters for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_domains_domain_id_parameters(domain_id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_domains_domain_id_parameters_with_http_info(
                domain_id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_domains_domain_id_parameters_with_http_info(
                domain_id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_domains_domain_id_parameters_with_http_info(
        self,
        domain_id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameters for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_domains_domain_id_parameters_with_http_info(domain_id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "domain_id",
            "host_id",
            "hostgroup_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_domains_domain_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_domains_domain_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "domain_id" in params:
            path_params["domain_id"] = params["domain_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/domains/{domain_id}/parameters",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_domains_domain_id_parameters_id(
        self,
        domain_id,
        id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_domains_domain_id_parameters_id(domain_id, id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_domains_domain_id_parameters_id_with_http_info(
                domain_id,
                id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_domains_domain_id_parameters_id_with_http_info(
                domain_id,
                id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_domains_domain_id_parameters_id_with_http_info(
        self,
        domain_id,
        id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_domains_domain_id_parameters_id_with_http_info(domain_id, id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "domain_id",
            "id",
            "host_id",
            "hostgroup_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_domains_domain_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_domains_domain_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "domain_id" in params:
            path_params["domain_id"] = params["domain_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/domains/{domain_id}/parameters/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_hostgroups_hostgroup_id_parameters(
        self,
        hostgroup_id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameters for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hostgroups_hostgroup_id_parameters(hostgroup_id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_hostgroups_hostgroup_id_parameters_with_http_info(
                hostgroup_id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_hostgroups_hostgroup_id_parameters_with_http_info(
                hostgroup_id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_hostgroups_hostgroup_id_parameters_with_http_info(
        self,
        hostgroup_id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameters for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hostgroups_hostgroup_id_parameters_with_http_info(hostgroup_id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "hostgroup_id",
            "host_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hostgroups_hostgroup_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "hostgroup_id" in params:
            path_params["hostgroup_id"] = params["hostgroup_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{hostgroup_id}/parameters",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_hostgroups_hostgroup_id_parameters_id(
        self,
        hostgroup_id,
        id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hostgroups_hostgroup_id_parameters_id(hostgroup_id, id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_hostgroups_hostgroup_id_parameters_id_with_http_info(
                hostgroup_id,
                id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_hostgroups_hostgroup_id_parameters_id_with_http_info(
                hostgroup_id,
                id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_hostgroups_hostgroup_id_parameters_id_with_http_info(
        self,
        hostgroup_id,
        id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hostgroups_hostgroup_id_parameters_id_with_http_info(hostgroup_id, id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "hostgroup_id",
            "id",
            "host_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hostgroups_hostgroup_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "hostgroup_id" in params:
            path_params["hostgroup_id"] = params["hostgroup_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{hostgroup_id}/parameters/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_hosts_host_id_parameters(
        self,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameters for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_host_id_parameters(host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_hosts_host_id_parameters_with_http_info(
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_hosts_host_id_parameters_with_http_info(
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_hosts_host_id_parameters_with_http_info(
        self,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameters for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_host_id_parameters_with_http_info(host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hosts_host_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_hosts_host_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/parameters",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_hosts_host_id_parameters_id(
        self,
        host_id,
        id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_host_id_parameters_id(host_id, id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str id: ID of parameter (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_hosts_host_id_parameters_id_with_http_info(
                host_id,
                id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_hosts_host_id_parameters_id_with_http_info(
                host_id,
                id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_hosts_host_id_parameters_id_with_http_info(
        self,
        host_id,
        id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_host_id_parameters_id_with_http_info(host_id, id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str id: ID of parameter (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hosts_host_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_hosts_host_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/parameters/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_locations_location_id_parameters(
        self,
        location_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameter for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_locations_location_id_parameters(location_id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_locations_location_id_parameters_with_http_info(
                location_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_locations_location_id_parameters_with_http_info(
                location_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_locations_location_id_parameters_with_http_info(
        self,
        location_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameter for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_locations_location_id_parameters_with_http_info(location_id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "organization_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_locations_location_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_locations_location_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/parameters",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_locations_location_id_parameters_id(
        self,
        location_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_locations_location_id_parameters_id(location_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_locations_location_id_parameters_id_with_http_info(
                location_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_locations_location_id_parameters_id_with_http_info(
                location_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_locations_location_id_parameters_id_with_http_info(
        self,
        location_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_locations_location_id_parameters_id_with_http_info(location_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "organization_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_locations_location_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_locations_location_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/parameters/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_operatingsystems_operatingsystem_id_parameters(
        self,
        operatingsystem_id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameters for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_operatingsystems_operatingsystem_id_parameters(operatingsystem_id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_operatingsystems_operatingsystem_id_parameters_with_http_info(
                operatingsystem_id,
                host_id,
                hostgroup_id,
                domain_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_operatingsystems_operatingsystem_id_parameters_with_http_info(
                operatingsystem_id,
                host_id,
                hostgroup_id,
                domain_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_operatingsystems_operatingsystem_id_parameters_with_http_info(
        self,
        operatingsystem_id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameters for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_operatingsystems_operatingsystem_id_parameters_with_http_info(operatingsystem_id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "location_id",
            "organization_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_operatingsystems_operatingsystem_id_parameters"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "operatingsystem_id" in params:
            path_params["operatingsystem_id"] = params[
                "operatingsystem_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{operatingsystem_id}/parameters",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_operatingsystems_operatingsystem_id_parameters_id(
        self,
        operatingsystem_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_operatingsystems_operatingsystem_id_parameters_id(operatingsystem_id, id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
                operatingsystem_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
                operatingsystem_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
        self,
        operatingsystem_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_operatingsystems_operatingsystem_id_parameters_id_with_http_info(operatingsystem_id, id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "location_id",
            "organization_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_operatingsystems_operatingsystem_id_parameters_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "operatingsystem_id" in params:
            path_params["operatingsystem_id"] = params[
                "operatingsystem_id"
            ]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{operatingsystem_id}/parameters/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_organizations_organization_id_parameters(
        self,
        organization_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameter for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_organization_id_parameters(organization_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_organizations_organization_id_parameters_with_http_info(
                organization_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_organizations_organization_id_parameters_with_http_info(
                organization_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_organizations_organization_id_parameters_with_http_info(
        self,
        organization_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameter for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_organization_id_parameters_with_http_info(organization_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_organization_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_organizations_organization_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/parameters",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_organizations_organization_id_parameters_id(
        self,
        organization_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_organization_id_parameters_id(organization_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.delete_organizations_organization_id_parameters_id_with_http_info(
                    organization_id,
                    id,
                    host_id,
                    hostgroup_id,
                    domain_id,
                    operatingsystem_id,
                    location_id,
                    subnet_id,
                    **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_organizations_organization_id_parameters_id_with_http_info(
                organization_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_organizations_organization_id_parameters_id_with_http_info(
        self,
        organization_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_organization_id_parameters_id_with_http_info(organization_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "subnet_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_organization_id_parameters_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_organizations_organization_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/parameters/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_subnets_subnet_id_parameters(
        self,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameters for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subnets_subnet_id_parameters(subnet_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: ID of subnet (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_subnets_subnet_id_parameters_with_http_info(
                subnet_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_subnets_subnet_id_parameters_with_http_info(
                subnet_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_subnets_subnet_id_parameters_with_http_info(
        self,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """Delete all nested parameters for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subnets_subnet_id_parameters_with_http_info(subnet_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: ID of subnet (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "subnet_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subnets_subnet_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_subnets_subnet_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "subnet_id" in params:
            path_params["subnet_id"] = params["subnet_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets/{subnet_id}/parameters",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_subnets_subnet_id_parameters_id(
        self,
        id,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subnets_subnet_id_parameters_id(id, subnet_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of parameter (required)
        :param str subnet_id: ID of subnet (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_subnets_subnet_id_parameters_id_with_http_info(
                id,
                subnet_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_subnets_subnet_id_parameters_id_with_http_info(
                id,
                subnet_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
            return data

    def delete_subnets_subnet_id_parameters_id_with_http_info(
        self,
        id,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """Delete a nested parameter for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subnets_subnet_id_parameters_id_with_http_info(id, subnet_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of parameter (required)
        :param str subnet_id: ID of subnet (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "subnet_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subnets_subnet_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `delete_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `delete_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `delete_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `delete_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `delete_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_subnets_subnet_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "subnet_id" in params:
            path_params["subnet_id"] = params["subnet_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets/{subnet_id}/parameters/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_domains_domain_id_parameters(
        self,
        domain_id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains_domain_id_parameters(domain_id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_domains_domain_id_parameters_with_http_info(
                domain_id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_domains_domain_id_parameters_with_http_info(
                domain_id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_domains_domain_id_parameters_with_http_info(
        self,
        domain_id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains_domain_id_parameters_with_http_info(domain_id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "domain_id",
            "host_id",
            "hostgroup_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "show_hidden",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_domains_domain_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_domains_domain_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "domain_id" in params:
            path_params["domain_id"] = params["domain_id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/domains/{domain_id}/parameters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_domains_domain_id_parameters_id(
        self,
        domain_id,
        id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains_domain_id_parameters_id(domain_id, id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_domains_domain_id_parameters_id_with_http_info(
                domain_id,
                id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_domains_domain_id_parameters_id_with_http_info(
                domain_id,
                id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_domains_domain_id_parameters_id_with_http_info(
        self,
        domain_id,
        id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains_domain_id_parameters_id_with_http_info(domain_id, id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "domain_id",
            "id",
            "host_id",
            "hostgroup_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "show_hidden",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_domains_domain_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_domains_domain_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "domain_id" in params:
            path_params["domain_id"] = params["domain_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/domains/{domain_id}/parameters/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hostgroups_hostgroup_id_parameters(
        self,
        hostgroup_id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups_hostgroup_id_parameters(hostgroup_id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hostgroups_hostgroup_id_parameters_with_http_info(
                hostgroup_id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hostgroups_hostgroup_id_parameters_with_http_info(
                hostgroup_id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_hostgroups_hostgroup_id_parameters_with_http_info(
        self,
        hostgroup_id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups_hostgroup_id_parameters_with_http_info(hostgroup_id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "hostgroup_id",
            "host_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "show_hidden",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hostgroups_hostgroup_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "hostgroup_id" in params:
            path_params["hostgroup_id"] = params["hostgroup_id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{hostgroup_id}/parameters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hostgroups_hostgroup_id_parameters_id(
        self,
        hostgroup_id,
        id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups_hostgroup_id_parameters_id(hostgroup_id, id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hostgroups_hostgroup_id_parameters_id_with_http_info(
                hostgroup_id,
                id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hostgroups_hostgroup_id_parameters_id_with_http_info(
                hostgroup_id,
                id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_hostgroups_hostgroup_id_parameters_id_with_http_info(
        self,
        hostgroup_id,
        id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups_hostgroup_id_parameters_id_with_http_info(hostgroup_id, id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "hostgroup_id",
            "id",
            "host_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "show_hidden",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hostgroups_hostgroup_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "hostgroup_id" in params:
            path_params["hostgroup_id"] = params["hostgroup_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{hostgroup_id}/parameters/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_host_id_parameters(
        self,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_parameters(host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_host_id_parameters_with_http_info(
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hosts_host_id_parameters_with_http_info(
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_hosts_host_id_parameters_with_http_info(
        self,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_parameters_with_http_info(host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "show_hidden",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_host_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_hosts_host_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/parameters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_host_id_parameters_id(
        self,
        host_id,
        id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_parameters_id(host_id, id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str id: ID of parameter (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_host_id_parameters_id_with_http_info(
                host_id,
                id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hosts_host_id_parameters_id_with_http_info(
                host_id,
                id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_hosts_host_id_parameters_id_with_http_info(
        self,
        host_id,
        id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_parameters_id_with_http_info(host_id, id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str id: ID of parameter (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "show_hidden",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_host_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_hosts_host_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/parameters/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_location_id_parameters(
        self,
        location_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_parameters(location_id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_location_id_parameters_with_http_info(
                location_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_locations_location_id_parameters_with_http_info(
                location_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_locations_location_id_parameters_with_http_info(
        self,
        location_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_parameters_with_http_info(location_id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "organization_id",
            "subnet_id",
            "show_hidden",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_location_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_locations_location_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/parameters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_location_id_parameters_id(
        self,
        location_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_parameters_id(location_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_location_id_parameters_id_with_http_info(
                location_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_locations_location_id_parameters_id_with_http_info(
                location_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_locations_location_id_parameters_id_with_http_info(
        self,
        location_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_parameters_id_with_http_info(location_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "organization_id",
            "subnet_id",
            "show_hidden",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_location_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_locations_location_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/parameters/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_operatingsystems_operatingsystem_id_parameters(
        self,
        operatingsystem_id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_parameters(operatingsystem_id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_operatingsystems_operatingsystem_id_parameters_with_http_info(
                    operatingsystem_id,
                    host_id,
                    hostgroup_id,
                    domain_id,
                    location_id,
                    organization_id,
                    subnet_id,
                    **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_operatingsystems_operatingsystem_id_parameters_with_http_info(
                operatingsystem_id,
                host_id,
                hostgroup_id,
                domain_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_operatingsystems_operatingsystem_id_parameters_with_http_info(
        self,
        operatingsystem_id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_parameters_with_http_info(operatingsystem_id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "show_hidden",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_operatingsystems_operatingsystem_id_parameters"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "operatingsystem_id" in params:
            path_params["operatingsystem_id"] = params[
                "operatingsystem_id"
            ]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{operatingsystem_id}/parameters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_operatingsystems_operatingsystem_id_parameters_id(
        self,
        operatingsystem_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_parameters_id(operatingsystem_id, id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
                operatingsystem_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
                operatingsystem_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
        self,
        operatingsystem_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_parameters_id_with_http_info(operatingsystem_id, id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "show_hidden",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_operatingsystems_operatingsystem_id_parameters_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "operatingsystem_id" in params:
            path_params["operatingsystem_id"] = params[
                "operatingsystem_id"
            ]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{operatingsystem_id}/parameters/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_parameters(
        self,
        organization_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_parameters(organization_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_parameters_with_http_info(
                organization_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_organization_id_parameters_with_http_info(
                organization_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_parameters_with_http_info(
        self,
        organization_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_parameters_with_http_info(organization_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "subnet_id",
            "show_hidden",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_organizations_organization_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/parameters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_parameters_id(
        self,
        organization_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_parameters_id(organization_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_parameters_id_with_http_info(
                organization_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_parameters_id_with_http_info(
                organization_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_parameters_id_with_http_info(
        self,
        organization_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_parameters_id_with_http_info(organization_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "subnet_id",
            "show_hidden",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_organizations_organization_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "subnet_id" in params:
            query_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/parameters/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_subnets_subnet_id_parameters(
        self,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets_subnet_id_parameters(subnet_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: ID of subnet (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_subnets_subnet_id_parameters_with_http_info(
                subnet_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_subnets_subnet_id_parameters_with_http_info(
                subnet_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_subnets_subnet_id_parameters_with_http_info(
        self,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """List all parameters for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets_subnet_id_parameters_with_http_info(subnet_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: ID of subnet (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param bool show_hidden: Display hidden values
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "subnet_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "show_hidden",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subnets_subnet_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_subnets_subnet_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "subnet_id" in params:
            path_params["subnet_id"] = params["subnet_id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets/{subnet_id}/parameters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_subnets_subnet_id_parameters_id(
        self,
        subnet_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets_subnet_id_parameters_id(subnet_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: ID of subnet (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_subnets_subnet_id_parameters_id_with_http_info(
                subnet_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_subnets_subnet_id_parameters_id_with_http_info(
                subnet_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_subnets_subnet_id_parameters_id_with_http_info(
        self,
        subnet_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """Show a nested parameter for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets_subnet_id_parameters_id_with_http_info(subnet_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: ID of subnet (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param bool show_hidden: Display hidden values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "subnet_id",
            "id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "show_hidden",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subnets_subnet_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `get_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `get_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_subnets_subnet_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "subnet_id" in params:
            path_params["subnet_id"] = params["subnet_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            query_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "show_hidden" in params:
            query_params.append(("show_hidden", params["show_hidden"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets/{subnet_id}/parameters/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_domains_domain_id_parameters(
        self,
        domain_id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_domains_domain_id_parameters(domain_id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_domains_domain_id_parameters_with_http_info(
                domain_id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_domains_domain_id_parameters_with_http_info(
                domain_id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
            return data

    def post_domains_domain_id_parameters_with_http_info(
        self,
        domain_id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_domains_domain_id_parameters_with_http_info(domain_id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "domain_id",
            "host_id",
            "hostgroup_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_domains_domain_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `post_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `post_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `post_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `post_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `post_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `post_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if self.api_client.client_side_validation and (
            "parameter_name" not in params or params["parameter_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_name` when calling `post_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_value' is set
        if self.api_client.client_side_validation and (
            "parameter_value" not in params or params["parameter_value"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_value` when calling `post_domains_domain_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_parameter_type' is set
        if self.api_client.client_side_validation and (
            "parameter_parameter_type" not in params
            or params["parameter_parameter_type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_parameter_type` when calling `post_domains_domain_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "domain_id" in params:
            path_params["domain_id"] = params["domain_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/domains/{domain_id}/parameters",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hostgroups_hostgroup_id_parameters(
        self,
        hostgroup_id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hostgroups_hostgroup_id_parameters(hostgroup_id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hostgroups_hostgroup_id_parameters_with_http_info(
                hostgroup_id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hostgroups_hostgroup_id_parameters_with_http_info(
                hostgroup_id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
            return data

    def post_hostgroups_hostgroup_id_parameters_with_http_info(
        self,
        hostgroup_id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hostgroups_hostgroup_id_parameters_with_http_info(hostgroup_id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "hostgroup_id",
            "host_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hostgroups_hostgroup_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `post_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `post_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `post_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `post_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `post_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `post_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if self.api_client.client_side_validation and (
            "parameter_name" not in params or params["parameter_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_name` when calling `post_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_value' is set
        if self.api_client.client_side_validation and (
            "parameter_value" not in params or params["parameter_value"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_value` when calling `post_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_parameter_type' is set
        if self.api_client.client_side_validation and (
            "parameter_parameter_type" not in params
            or params["parameter_parameter_type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_parameter_type` when calling `post_hostgroups_hostgroup_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "hostgroup_id" in params:
            path_params["hostgroup_id"] = params["hostgroup_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{hostgroup_id}/parameters",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hosts_host_id_parameters(
        self,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_host_id_parameters(host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hosts_host_id_parameters_with_http_info(
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hosts_host_id_parameters_with_http_info(
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
            return data

    def post_hosts_host_id_parameters_with_http_info(
        self,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_host_id_parameters_with_http_info(host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hosts_host_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `post_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `post_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `post_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `post_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `post_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `post_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if self.api_client.client_side_validation and (
            "parameter_name" not in params or params["parameter_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_name` when calling `post_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_value' is set
        if self.api_client.client_side_validation and (
            "parameter_value" not in params or params["parameter_value"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_value` when calling `post_hosts_host_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_parameter_type' is set
        if self.api_client.client_side_validation and (
            "parameter_parameter_type" not in params
            or params["parameter_parameter_type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_parameter_type` when calling `post_hosts_host_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/parameters",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_locations_location_id_parameters(
        self,
        location_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_locations_location_id_parameters(location_id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_locations_location_id_parameters_with_http_info(
                location_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_locations_location_id_parameters_with_http_info(
                location_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
            return data

    def post_locations_location_id_parameters_with_http_info(
        self,
        location_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_locations_location_id_parameters_with_http_info(location_id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "organization_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_locations_location_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `post_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `post_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `post_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `post_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `post_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `post_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if self.api_client.client_side_validation and (
            "parameter_name" not in params or params["parameter_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_name` when calling `post_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_value' is set
        if self.api_client.client_side_validation and (
            "parameter_value" not in params or params["parameter_value"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_value` when calling `post_locations_location_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_parameter_type' is set
        if self.api_client.client_side_validation and (
            "parameter_parameter_type" not in params
            or params["parameter_parameter_type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_parameter_type` when calling `post_locations_location_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/parameters",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_operatingsystems_operatingsystem_id_parameters(
        self,
        operatingsystem_id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_operatingsystems_operatingsystem_id_parameters(operatingsystem_id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.post_operatingsystems_operatingsystem_id_parameters_with_http_info(
                    operatingsystem_id,
                    host_id,
                    hostgroup_id,
                    domain_id,
                    location_id,
                    organization_id,
                    subnet_id,
                    parameter_name,
                    parameter_value,
                    parameter_parameter_type,
                    **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.post_operatingsystems_operatingsystem_id_parameters_with_http_info(
                operatingsystem_id,
                host_id,
                hostgroup_id,
                domain_id,
                location_id,
                organization_id,
                subnet_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
            return data

    def post_operatingsystems_operatingsystem_id_parameters_with_http_info(
        self,
        operatingsystem_id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_operatingsystems_operatingsystem_id_parameters_with_http_info(operatingsystem_id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_operatingsystems_operatingsystem_id_parameters"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `post_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `post_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `post_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `post_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `post_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `post_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if self.api_client.client_side_validation and (
            "parameter_name" not in params or params["parameter_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_name` when calling `post_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_value' is set
        if self.api_client.client_side_validation and (
            "parameter_value" not in params or params["parameter_value"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_value` when calling `post_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_parameter_type' is set
        if self.api_client.client_side_validation and (
            "parameter_parameter_type" not in params
            or params["parameter_parameter_type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_parameter_type` when calling `post_operatingsystems_operatingsystem_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "operatingsystem_id" in params:
            path_params["operatingsystem_id"] = params[
                "operatingsystem_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{operatingsystem_id}/parameters",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organizations_organization_id_parameters(
        self,
        organization_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_parameters(organization_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organizations_organization_id_parameters_with_http_info(
                organization_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                subnet_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_organizations_organization_id_parameters_with_http_info(
                organization_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                subnet_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
            return data

    def post_organizations_organization_id_parameters_with_http_info(
        self,
        organization_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_parameters_with_http_info(organization_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations_organization_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `post_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `post_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `post_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `post_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `post_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `post_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if self.api_client.client_side_validation and (
            "parameter_name" not in params or params["parameter_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_name` when calling `post_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_value' is set
        if self.api_client.client_side_validation and (
            "parameter_value" not in params or params["parameter_value"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_value` when calling `post_organizations_organization_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_parameter_type' is set
        if self.api_client.client_side_validation and (
            "parameter_parameter_type" not in params
            or params["parameter_parameter_type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_parameter_type` when calling `post_organizations_organization_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/parameters",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_subnets_subnet_id_parameters(
        self,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_subnets_subnet_id_parameters(subnet_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: ID of subnet (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_subnets_subnet_id_parameters_with_http_info(
                subnet_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_subnets_subnet_id_parameters_with_http_info(
                subnet_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                parameter_name,
                parameter_value,
                parameter_parameter_type,
                **kwargs
            )  # noqa: E501
            return data

    def post_subnets_subnet_id_parameters_with_http_info(
        self,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        **kwargs
    ):  # noqa: E501
        """Create a nested parameter for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_subnets_subnet_id_parameters_with_http_info(subnet_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, parameter_name, parameter_value, parameter_parameter_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: ID of subnet (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str parameter_name: (required)
        :param str parameter_value: (required)
        :param str parameter_parameter_type: Type of value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "subnet_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_subnets_subnet_id_parameters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `post_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `post_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `post_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `post_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `post_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `post_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if self.api_client.client_side_validation and (
            "parameter_name" not in params or params["parameter_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_name` when calling `post_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_value' is set
        if self.api_client.client_side_validation and (
            "parameter_value" not in params or params["parameter_value"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_value` when calling `post_subnets_subnet_id_parameters`"
            )  # noqa: E501
        # verify the required parameter 'parameter_parameter_type' is set
        if self.api_client.client_side_validation and (
            "parameter_parameter_type" not in params
            or params["parameter_parameter_type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameter_parameter_type` when calling `post_subnets_subnet_id_parameters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "subnet_id" in params:
            path_params["subnet_id"] = params["subnet_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets/{subnet_id}/parameters",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_domains_domain_id_parameters_id(
        self,
        domain_id,
        id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_domains_domain_id_parameters_id(domain_id, id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_domains_domain_id_parameters_id_with_http_info(
                domain_id,
                id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_domains_domain_id_parameters_id_with_http_info(
                domain_id,
                id,
                host_id,
                hostgroup_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def put_domains_domain_id_parameters_id_with_http_info(
        self,
        domain_id,
        id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_domains_domain_id_parameters_id_with_http_info(domain_id, id, host_id, hostgroup_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "domain_id",
            "id",
            "host_id",
            "hostgroup_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_domains_domain_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `put_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `put_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `put_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `put_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_domains_domain_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `put_domains_domain_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "domain_id" in params:
            path_params["domain_id"] = params["domain_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/domains/{domain_id}/parameters/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hostgroups_hostgroup_id_parameters_id(
        self,
        hostgroup_id,
        id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hostgroups_hostgroup_id_parameters_id(hostgroup_id, id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hostgroups_hostgroup_id_parameters_id_with_http_info(
                hostgroup_id,
                id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hostgroups_hostgroup_id_parameters_id_with_http_info(
                hostgroup_id,
                id,
                host_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def put_hostgroups_hostgroup_id_parameters_id_with_http_info(
        self,
        hostgroup_id,
        id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hostgroups_hostgroup_id_parameters_id_with_http_info(hostgroup_id, id, host_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_id: ID of host group (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "hostgroup_id",
            "id",
            "host_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hostgroups_hostgroup_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `put_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `put_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `put_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `put_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `put_hostgroups_hostgroup_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "hostgroup_id" in params:
            path_params["hostgroup_id"] = params["hostgroup_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{hostgroup_id}/parameters/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_host_id_parameters_id(
        self,
        host_id,
        id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_parameters_id(host_id, id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str id: ID of parameter (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_host_id_parameters_id_with_http_info(
                host_id,
                id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_host_id_parameters_id_with_http_info(
                host_id,
                id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def put_hosts_host_id_parameters_id_with_http_info(
        self,
        host_id,
        id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_parameters_id_with_http_info(host_id, id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: ID of host (required)
        :param str id: ID of parameter (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_host_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `put_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `put_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `put_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `put_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_host_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `put_hosts_host_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/parameters/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_locations_location_id_parameters_id(
        self,
        location_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_locations_location_id_parameters_id(location_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_locations_location_id_parameters_id_with_http_info(
                location_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_locations_location_id_parameters_id_with_http_info(
                location_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def put_locations_location_id_parameters_id_with_http_info(
        self,
        location_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for a location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_locations_location_id_parameters_id_with_http_info(location_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: ID of location (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "organization_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_locations_location_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `put_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `put_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `put_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `put_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_locations_location_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `put_locations_location_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/parameters/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_operatingsystems_operatingsystem_id_parameters_id(
        self,
        operatingsystem_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_operatingsystems_operatingsystem_id_parameters_id(operatingsystem_id, id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
                operatingsystem_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
                operatingsystem_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                location_id,
                organization_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def put_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
        self,
        operatingsystem_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_operatingsystems_operatingsystem_id_parameters_id_with_http_info(operatingsystem_id, id, host_id, hostgroup_id, domain_id, location_id, organization_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "location_id",
            "organization_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_operatingsystems_operatingsystem_id_parameters_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `put_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `put_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `put_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `put_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `put_operatingsystems_operatingsystem_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "operatingsystem_id" in params:
            path_params["operatingsystem_id"] = params[
                "operatingsystem_id"
            ]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{operatingsystem_id}/parameters/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_organization_id_parameters_id(
        self,
        organization_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_parameters_id(organization_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organizations_organization_id_parameters_id_with_http_info(
                organization_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_organizations_organization_id_parameters_id_with_http_info(
                organization_id,
                id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                subnet_id,
                **kwargs
            )  # noqa: E501
            return data

    def put_organizations_organization_id_parameters_id_with_http_info(
        self,
        organization_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_parameters_id_with_http_info(organization_id, id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: ID of organization (required)
        :param str id: ID of parameter (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str subnet_id: ID of subnet (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "subnet_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_organization_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `put_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `put_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `put_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `put_organizations_organization_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `put_organizations_organization_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "subnet_id" in params:
            form_params.append(("subnet_id", params["subnet_id"]))  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/parameters/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_subnets_subnet_id_parameters_id(
        self,
        id,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_subnets_subnet_id_parameters_id(id, subnet_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of parameter (required)
        :param str subnet_id: ID of subnet (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_subnets_subnet_id_parameters_id_with_http_info(
                id,
                subnet_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_subnets_subnet_id_parameters_id_with_http_info(
                id,
                subnet_id,
                host_id,
                hostgroup_id,
                domain_id,
                operatingsystem_id,
                location_id,
                organization_id,
                **kwargs
            )  # noqa: E501
            return data

    def put_subnets_subnet_id_parameters_id_with_http_info(
        self,
        id,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        **kwargs
    ):  # noqa: E501
        """Update a nested parameter for a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_subnets_subnet_id_parameters_id_with_http_info(id, subnet_id, host_id, hostgroup_id, domain_id, operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of parameter (required)
        :param str subnet_id: ID of subnet (required)
        :param str host_id: ID of host (required)
        :param str hostgroup_id: ID of host group (required)
        :param str domain_id: ID of domain (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str location_id: ID of location (required)
        :param str organization_id: ID of organization (required)
        :param str parameter_name:
        :param str parameter_value:
        :param str parameter_parameter_type: Type of value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "subnet_id",
            "host_id",
            "hostgroup_id",
            "domain_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "parameter_name",
            "parameter_value",
            "parameter_parameter_type",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_subnets_subnet_id_parameters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if self.api_client.client_side_validation and (
            "subnet_id" not in params or params["subnet_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_id` when calling `put_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'hostgroup_id' is set
        if self.api_client.client_side_validation and (
            "hostgroup_id" not in params or params["hostgroup_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_id` when calling `put_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `put_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `put_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `put_subnets_subnet_id_parameters_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_subnets_subnet_id_parameters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "subnet_id" in params:
            path_params["subnet_id"] = params["subnet_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_id" in params:
            form_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "hostgroup_id" in params:
            form_params.append(("hostgroup_id", params["hostgroup_id"]))  # noqa: E501
        if "domain_id" in params:
            form_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "operatingsystem_id" in params:
            form_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "parameter_name" in params:
            form_params.append(
                ("parameter[name]", params["parameter_name"])
            )  # noqa: E501
        if "parameter_value" in params:
            form_params.append(
                ("parameter[value]", params["parameter_value"])
            )  # noqa: E501
        if "parameter_parameter_type" in params:
            form_params.append(
                ("parameter[parameter_type]", params["parameter_parameter_type"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets/{subnet_id}/parameters/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
