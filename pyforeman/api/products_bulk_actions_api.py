# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class ProductsBulkActionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def put_products_bulk_destroy(self, ids, **kwargs):  # noqa: E501
        """Destroy one or more products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_bulk_destroy(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: List of product ids (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_products_bulk_destroy_with_http_info(
                ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_products_bulk_destroy_with_http_info(
                ids, **kwargs
            )  # noqa: E501
            return data

    def put_products_bulk_destroy_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Destroy one or more products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_bulk_destroy_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: List of product ids (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_products_bulk_destroy" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'ids' is set
        if self.api_client.client_side_validation and (
            "ids" not in params or params["ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ids` when calling `put_products_bulk_destroy`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "ids" in params:
            form_params.append(("ids", params["ids"]))  # noqa: E501
            collection_formats["ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/bulk/destroy",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_products_bulk_http_proxy(self, ids, **kwargs):  # noqa: E501
        """Update the HTTP proxy configuration on the repositories of one or more products.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_bulk_http_proxy(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: List of product ids (required)
        :param str http_proxy_policy: policy for HTTP proxy for content sync
        :param float http_proxy_id: HTTP Proxy identifier to associated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_products_bulk_http_proxy_with_http_info(
                ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_products_bulk_http_proxy_with_http_info(
                ids, **kwargs
            )  # noqa: E501
            return data

    def put_products_bulk_http_proxy_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Update the HTTP proxy configuration on the repositories of one or more products.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_bulk_http_proxy_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: List of product ids (required)
        :param str http_proxy_policy: policy for HTTP proxy for content sync
        :param float http_proxy_id: HTTP Proxy identifier to associated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["ids", "http_proxy_policy", "http_proxy_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_products_bulk_http_proxy" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'ids' is set
        if self.api_client.client_side_validation and (
            "ids" not in params or params["ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ids` when calling `put_products_bulk_http_proxy`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "ids" in params:
            form_params.append(("ids", params["ids"]))  # noqa: E501
            collection_formats["ids"] = "csv"  # noqa: E501
        if "http_proxy_policy" in params:
            form_params.append(
                ("http_proxy_policy", params["http_proxy_policy"])
            )  # noqa: E501
        if "http_proxy_id" in params:
            form_params.append(("http_proxy_id", params["http_proxy_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/bulk/http_proxy",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_products_bulk_sync(self, ids, **kwargs):  # noqa: E501
        """Sync one or more products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_bulk_sync(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: List of product ids (required)
        :param bool skip_metadata_check: Force sync even if no upstream changes are detected. Non-yum repositories are skipped.
        :param bool validate_contents: Force a sync and validate the checksums of all content. Non-yum repositories (or those with                                                      On Demand download policy) are skipped.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_products_bulk_sync_with_http_info(
                ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_products_bulk_sync_with_http_info(
                ids, **kwargs
            )  # noqa: E501
            return data

    def put_products_bulk_sync_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Sync one or more products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_bulk_sync_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: List of product ids (required)
        :param bool skip_metadata_check: Force sync even if no upstream changes are detected. Non-yum repositories are skipped.
        :param bool validate_contents: Force a sync and validate the checksums of all content. Non-yum repositories (or those with                                                      On Demand download policy) are skipped.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["ids", "skip_metadata_check", "validate_contents"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_products_bulk_sync" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'ids' is set
        if self.api_client.client_side_validation and (
            "ids" not in params or params["ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ids` when calling `put_products_bulk_sync`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "ids" in params:
            form_params.append(("ids", params["ids"]))  # noqa: E501
            collection_formats["ids"] = "csv"  # noqa: E501
        if "skip_metadata_check" in params:
            form_params.append(
                ("skip_metadata_check", params["skip_metadata_check"])
            )  # noqa: E501
        if "validate_contents" in params:
            form_params.append(
                ("validate_contents", params["validate_contents"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/bulk/sync",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_products_bulk_sync_plan(self, ids, plan_id, **kwargs):  # noqa: E501
        """Sync one or more products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_bulk_sync_plan(ids, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: List of product ids (required)
        :param float plan_id: Sync plan identifier to attach (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_products_bulk_sync_plan_with_http_info(
                ids, plan_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_products_bulk_sync_plan_with_http_info(
                ids, plan_id, **kwargs
            )  # noqa: E501
            return data

    def put_products_bulk_sync_plan_with_http_info(
        self, ids, plan_id, **kwargs
    ):  # noqa: E501
        """Sync one or more products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_bulk_sync_plan_with_http_info(ids, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: List of product ids (required)
        :param float plan_id: Sync plan identifier to attach (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["ids", "plan_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_products_bulk_sync_plan" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'ids' is set
        if self.api_client.client_side_validation and (
            "ids" not in params or params["ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ids` when calling `put_products_bulk_sync_plan`"
            )  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if self.api_client.client_side_validation and (
            "plan_id" not in params or params["plan_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `plan_id` when calling `put_products_bulk_sync_plan`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "ids" in params:
            form_params.append(("ids", params["ids"]))  # noqa: E501
            collection_formats["ids"] = "csv"  # noqa: E501
        if "plan_id" in params:
            form_params.append(("plan_id", params["plan_id"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/bulk/sync_plan",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_products_bulk_verify_checksum(self, ids, **kwargs):  # noqa: E501
        """Verify checksum for one or more products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_bulk_verify_checksum(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: List of product ids (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_products_bulk_verify_checksum_with_http_info(
                ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_products_bulk_verify_checksum_with_http_info(
                ids, **kwargs
            )  # noqa: E501
            return data

    def put_products_bulk_verify_checksum_with_http_info(
        self, ids, **kwargs
    ):  # noqa: E501
        """Verify checksum for one or more products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_bulk_verify_checksum_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: List of product ids (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_products_bulk_verify_checksum" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'ids' is set
        if self.api_client.client_side_validation and (
            "ids" not in params or params["ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `ids` when calling `put_products_bulk_verify_checksum`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "ids" in params:
            form_params.append(("ids", params["ids"]))  # noqa: E501
            collection_formats["ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/bulk/verify_checksum",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
