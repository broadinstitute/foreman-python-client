# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class UpstreamSubscriptionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_organizations_organization_id_upstream_subscriptions(
        self, organization_id, pool_ids, **kwargs
    ):  # noqa: E501
        """Remove one or more subscriptions from an upstream manifest  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_organization_id_upstream_subscriptions(organization_id, pool_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param list[str] pool_ids: Array of local pool IDs. Only pools originating upstream are accepted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_organizations_organization_id_upstream_subscriptions_with_http_info(
                organization_id, pool_ids, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_organizations_organization_id_upstream_subscriptions_with_http_info(
                organization_id, pool_ids, **kwargs
            )  # noqa: E501
            return data

    def delete_organizations_organization_id_upstream_subscriptions_with_http_info(
        self, organization_id, pool_ids, **kwargs
    ):  # noqa: E501
        """Remove one or more subscriptions from an upstream manifest  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_organization_id_upstream_subscriptions_with_http_info(organization_id, pool_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param list[str] pool_ids: Array of local pool IDs. Only pools originating upstream are accepted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "pool_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_organization_id_upstream_subscriptions"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_organizations_organization_id_upstream_subscriptions`"
            )  # noqa: E501
        # verify the required parameter 'pool_ids' is set
        if self.api_client.client_side_validation and (
            "pool_ids" not in params or params["pool_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `pool_ids` when calling `delete_organizations_organization_id_upstream_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "pool_ids" in params:
            form_params.append(("pool_ids", params["pool_ids"]))  # noqa: E501
            collection_formats["pool_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/upstream_subscriptions",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_upstream_subscriptions(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """List available subscriptions from Red Hat Subscription Management  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_upstream_subscriptions(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return.
        :param str order: The order to sort the results in. ['asc', 'desc'] Defaults to 'desc'.
        :param str sort_by: The field to sort the data by. Defaults to the created date.
        :param list[str] pool_ids: Return only the upstream pools which map to the given Katello pool IDs
        :param bool quantities_only: Only returns id and quantity fields
        :param bool attachable: Return only subscriptions which can be attached to the upstream allocation
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_upstream_subscriptions_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_upstream_subscriptions_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_upstream_subscriptions_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """List available subscriptions from Red Hat Subscription Management  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_upstream_subscriptions_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return.
        :param str order: The order to sort the results in. ['asc', 'desc'] Defaults to 'desc'.
        :param str sort_by: The field to sort the data by. Defaults to the created date.
        :param list[str] pool_ids: Return only the upstream pools which map to the given Katello pool IDs
        :param bool quantities_only: Only returns id and quantity fields
        :param bool attachable: Return only subscriptions which can be attached to the upstream allocation
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "page",
            "per_page",
            "order",
            "sort_by",
            "pool_ids",
            "quantities_only",
            "attachable",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_upstream_subscriptions"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_upstream_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "pool_ids" in params:
            query_params.append(("pool_ids", params["pool_ids"]))  # noqa: E501
            collection_formats["pool_ids"] = "csv"  # noqa: E501
        if "quantities_only" in params:
            query_params.append(
                ("quantities_only", params["quantities_only"])
            )  # noqa: E501
        if "attachable" in params:
            query_params.append(("attachable", params["attachable"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/upstream_subscriptions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_upstream_subscriptions_ping(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Check if a connection can be made to Red Hat Subscription Management.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_upstream_subscriptions_ping(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_upstream_subscriptions_ping_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_upstream_subscriptions_ping_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_upstream_subscriptions_ping_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Check if a connection can be made to Red Hat Subscription Management.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_upstream_subscriptions_ping_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_upstream_subscriptions_ping"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_upstream_subscriptions_ping`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/upstream_subscriptions/ping",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organizations_organization_id_upstream_subscriptions(
        self, organization_id, pools, **kwargs
    ):  # noqa: E501
        """Add subscriptions consumed by a manifest from Red Hat Subscription Management  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_upstream_subscriptions(organization_id, pools, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param list[str] pools: Array of pools to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organizations_organization_id_upstream_subscriptions_with_http_info(
                organization_id, pools, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.post_organizations_organization_id_upstream_subscriptions_with_http_info(
                organization_id, pools, **kwargs
            )  # noqa: E501
            return data

    def post_organizations_organization_id_upstream_subscriptions_with_http_info(
        self, organization_id, pools, **kwargs
    ):  # noqa: E501
        """Add subscriptions consumed by a manifest from Red Hat Subscription Management  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_upstream_subscriptions_with_http_info(organization_id, pools, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param list[str] pools: Array of pools to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "pools"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations_organization_id_upstream_subscriptions"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organizations_organization_id_upstream_subscriptions`"
            )  # noqa: E501
        # verify the required parameter 'pools' is set
        if self.api_client.client_side_validation and (
            "pools" not in params or params["pools"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `pools` when calling `post_organizations_organization_id_upstream_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "pools" in params:
            form_params.append(("pools", params["pools"]))  # noqa: E501
            collection_formats["pools"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/upstream_subscriptions",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_organization_id_upstream_subscriptions(
        self, organization_id, pools, **kwargs
    ):  # noqa: E501
        """Update the quantity of one or more subscriptions on an upstream allocation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_upstream_subscriptions(organization_id, pools, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param list[str] pools: Array of Pools to be updated. Only pools originating upstream are accepted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organizations_organization_id_upstream_subscriptions_with_http_info(
                organization_id, pools, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_organizations_organization_id_upstream_subscriptions_with_http_info(
                organization_id, pools, **kwargs
            )  # noqa: E501
            return data

    def put_organizations_organization_id_upstream_subscriptions_with_http_info(
        self, organization_id, pools, **kwargs
    ):  # noqa: E501
        """Update the quantity of one or more subscriptions on an upstream allocation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_upstream_subscriptions_with_http_info(organization_id, pools, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param list[str] pools: Array of Pools to be updated. Only pools originating upstream are accepted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "pools"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_organization_id_upstream_subscriptions"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organizations_organization_id_upstream_subscriptions`"
            )  # noqa: E501
        # verify the required parameter 'pools' is set
        if self.api_client.client_side_validation and (
            "pools" not in params or params["pools"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `pools` when calling `put_organizations_organization_id_upstream_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "pools" in params:
            form_params.append(("pools", params["pools"]))  # noqa: E501
            collection_formats["pools"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/upstream_subscriptions",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
