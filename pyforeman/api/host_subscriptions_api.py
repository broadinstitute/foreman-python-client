# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class HostSubscriptionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_hosts_host_id_subscriptions(self, host_id, **kwargs):  # noqa: E501
        """Unregister the host as a subscription consumer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_host_id_subscriptions(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: Id of the host (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_hosts_host_id_subscriptions_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_hosts_host_id_subscriptions_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
            return data

    def delete_hosts_host_id_subscriptions_with_http_info(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Unregister the host as a subscription consumer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_host_id_subscriptions_with_http_info(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: Id of the host (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["host_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hosts_host_id_subscriptions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `delete_hosts_host_id_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/subscriptions",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_host_id_subscriptions(self, host_id, **kwargs):  # noqa: E501
        """List a host's subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_subscriptions(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: Id of the host (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_host_id_subscriptions_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hosts_host_id_subscriptions_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_host_id_subscriptions_with_http_info(
        self, host_id, **kwargs
    ):  # noqa: E501
        """List a host's subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_subscriptions_with_http_info(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: Id of the host (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["host_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_host_id_subscriptions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_hosts_host_id_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/subscriptions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_host_id_subscriptions_available_release_versions(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Show releases available for the content host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_subscriptions_available_release_versions(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: id of host (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_host_id_subscriptions_available_release_versions_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_hosts_host_id_subscriptions_available_release_versions_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_host_id_subscriptions_available_release_versions_with_http_info(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Show releases available for the content host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_subscriptions_available_release_versions_with_http_info(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: id of host (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["host_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_host_id_subscriptions_available_release_versions"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_hosts_host_id_subscriptions_available_release_versions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/subscriptions/available_release_versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_host_id_subscriptions_enabled_repositories(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Show repositories enabled on the host that are known to Katello  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_subscriptions_enabled_repositories(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: id of host (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_host_id_subscriptions_enabled_repositories_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_hosts_host_id_subscriptions_enabled_repositories_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_host_id_subscriptions_enabled_repositories_with_http_info(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Show repositories enabled on the host that are known to Katello  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_subscriptions_enabled_repositories_with_http_info(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: id of host (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["host_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_host_id_subscriptions_enabled_repositories"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_hosts_host_id_subscriptions_enabled_repositories`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/subscriptions/enabled_repositories",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hosts_host_id_subscriptions_product_content(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Get content and overrides for the host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_subscriptions_product_content(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: Id of the host (required)
        :param bool content_access_mode_all: Get all content available, not just that provided by subscriptions
        :param bool content_access_mode_env: Limit content to just that available in the host's content view version
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hosts_host_id_subscriptions_product_content_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_hosts_host_id_subscriptions_product_content_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
            return data

    def get_hosts_host_id_subscriptions_product_content_with_http_info(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Get content and overrides for the host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_host_id_subscriptions_product_content_with_http_info(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: Id of the host (required)
        :param bool content_access_mode_all: Get all content available, not just that provided by subscriptions
        :param bool content_access_mode_env: Limit content to just that available in the host's content view version
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "content_access_mode_all",
            "content_access_mode_env",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_host_id_subscriptions_product_content" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `get_hosts_host_id_subscriptions_product_content`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []
        if "content_access_mode_all" in params:
            query_params.append(
                ("content_access_mode_all", params["content_access_mode_all"])
            )  # noqa: E501
        if "content_access_mode_env" in params:
            query_params.append(
                ("content_access_mode_env", params["content_access_mode_env"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/subscriptions/product_content",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hosts_subscriptions(
        self, name, lifecycle_environment_id, content_view_id, **kwargs
    ):  # noqa: E501
        """Register a host with subscription and information  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_subscriptions(name, lifecycle_environment_id, content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of the host (required)
        :param float lifecycle_environment_id: Lifecycle Environment ID (required)
        :param float content_view_id: Content View ID (required)
        :param str uuid: UUID to use for registered host, random uuid is generated if not provided
        :param list[str] hypervisor_guest_uuids: UUIDs of the virtual guests from the host's hypervisor
        :param list[str] installed_products: List of products installed on the host
        :param str release_version: Release version of the content host
        :param str service_level: A service level for auto-healing process, e.g. SELF-SUPPORT
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hosts_subscriptions_with_http_info(
                name, lifecycle_environment_id, content_view_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hosts_subscriptions_with_http_info(
                name, lifecycle_environment_id, content_view_id, **kwargs
            )  # noqa: E501
            return data

    def post_hosts_subscriptions_with_http_info(
        self, name, lifecycle_environment_id, content_view_id, **kwargs
    ):  # noqa: E501
        """Register a host with subscription and information  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_subscriptions_with_http_info(name, lifecycle_environment_id, content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of the host (required)
        :param float lifecycle_environment_id: Lifecycle Environment ID (required)
        :param float content_view_id: Content View ID (required)
        :param str uuid: UUID to use for registered host, random uuid is generated if not provided
        :param list[str] hypervisor_guest_uuids: UUIDs of the virtual guests from the host's hypervisor
        :param list[str] installed_products: List of products installed on the host
        :param str release_version: Release version of the content host
        :param str service_level: A service level for auto-healing process, e.g. SELF-SUPPORT
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "name",
            "lifecycle_environment_id",
            "content_view_id",
            "uuid",
            "hypervisor_guest_uuids",
            "installed_products",
            "release_version",
            "service_level",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hosts_subscriptions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_hosts_subscriptions`"
            )  # noqa: E501
        # verify the required parameter 'lifecycle_environment_id' is set
        if self.api_client.client_side_validation and (
            "lifecycle_environment_id" not in params
            or params["lifecycle_environment_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `lifecycle_environment_id` when calling `post_hosts_subscriptions`"
            )  # noqa: E501
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `post_hosts_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "lifecycle_environment_id" in params:
            form_params.append(
                ("lifecycle_environment_id", params["lifecycle_environment_id"])
            )  # noqa: E501
        if "content_view_id" in params:
            form_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "uuid" in params:
            form_params.append(("uuid", params["uuid"]))  # noqa: E501
        if "hypervisor_guest_uuids" in params:
            form_params.append(
                ("hypervisor_guest_uuids", params["hypervisor_guest_uuids"])
            )  # noqa: E501
            collection_formats["hypervisor_guest_uuids"] = "csv"  # noqa: E501
        if "installed_products" in params:
            form_params.append(
                ("installed_products", params["installed_products"])
            )  # noqa: E501
            collection_formats["installed_products"] = "csv"  # noqa: E501
        if "release_version" in params:
            form_params.append(
                ("release_version", params["release_version"])
            )  # noqa: E501
        if "service_level" in params:
            form_params.append(("service_level", params["service_level"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/subscriptions",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_host_id_subscriptions_add_subscriptions(
        self, host_id, subscriptions, **kwargs
    ):  # noqa: E501
        """Add a subscription to a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_subscriptions_add_subscriptions(host_id, subscriptions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: Id of the host (required)
        :param list[str] subscriptions: Array of subscriptions to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.put_hosts_host_id_subscriptions_add_subscriptions_with_http_info(
                    host_id, subscriptions, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_hosts_host_id_subscriptions_add_subscriptions_with_http_info(
                host_id, subscriptions, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_host_id_subscriptions_add_subscriptions_with_http_info(
        self, host_id, subscriptions, **kwargs
    ):  # noqa: E501
        """Add a subscription to a host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_subscriptions_add_subscriptions_with_http_info(host_id, subscriptions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: Id of the host (required)
        :param list[str] subscriptions: Array of subscriptions to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["host_id", "subscriptions"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_host_id_subscriptions_add_subscriptions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_hosts_host_id_subscriptions_add_subscriptions`"
            )  # noqa: E501
        # verify the required parameter 'subscriptions' is set
        if self.api_client.client_side_validation and (
            "subscriptions" not in params or params["subscriptions"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subscriptions` when calling `put_hosts_host_id_subscriptions_add_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "subscriptions" in params:
            form_params.append(("subscriptions", params["subscriptions"]))  # noqa: E501
            collection_formats["subscriptions"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/subscriptions/add_subscriptions",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_host_id_subscriptions_auto_attach(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Trigger an auto-attach of subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_subscriptions_auto_attach(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: Id of the host (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_host_id_subscriptions_auto_attach_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_host_id_subscriptions_auto_attach_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_host_id_subscriptions_auto_attach_with_http_info(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Trigger an auto-attach of subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_subscriptions_auto_attach_with_http_info(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: Id of the host (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["host_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_host_id_subscriptions_auto_attach" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_hosts_host_id_subscriptions_auto_attach`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/subscriptions/auto_attach",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_host_id_subscriptions_content_override(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Set content overrides for the host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_subscriptions_content_override(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: Id of the content host (required)
        :param str value: Override to a boolean value or 'default'
        :param list[str] content_overrides: Array of Content override parameters
        :param str content_overrides_search_search: Search string
        :param float content_overrides_search_page: Page number, starting at 1
        :param float content_overrides_search_per_page: Number of results per page to return
        :param str content_overrides_search_order: Sort field and order, eg. 'id DESC'
        :param bool content_overrides_search_full_result: Whether or not to show all results
        :param str content_overrides_search_sort_by: Field to sort the results on
        :param str content_overrides_search_sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param bool content_overrides_search_enabled: Set true to override to enabled; Set false to override to disabled.'
        :param bool content_overrides_search_remove: Set true to remove an override and reset it to 'default'
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_host_id_subscriptions_content_override_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_hosts_host_id_subscriptions_content_override_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_host_id_subscriptions_content_override_with_http_info(
        self, host_id, **kwargs
    ):  # noqa: E501
        """Set content overrides for the host  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_subscriptions_content_override_with_http_info(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_id: Id of the content host (required)
        :param str value: Override to a boolean value or 'default'
        :param list[str] content_overrides: Array of Content override parameters
        :param str content_overrides_search_search: Search string
        :param float content_overrides_search_page: Page number, starting at 1
        :param float content_overrides_search_per_page: Number of results per page to return
        :param str content_overrides_search_order: Sort field and order, eg. 'id DESC'
        :param bool content_overrides_search_full_result: Whether or not to show all results
        :param str content_overrides_search_sort_by: Field to sort the results on
        :param str content_overrides_search_sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param bool content_overrides_search_enabled: Set true to override to enabled; Set false to override to disabled.'
        :param bool content_overrides_search_remove: Set true to remove an override and reset it to 'default'
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_id",
            "value",
            "content_overrides",
            "content_overrides_search_search",
            "content_overrides_search_page",
            "content_overrides_search_per_page",
            "content_overrides_search_order",
            "content_overrides_search_full_result",
            "content_overrides_search_sort_by",
            "content_overrides_search_sort_order",
            "content_overrides_search_enabled",
            "content_overrides_search_remove",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_host_id_subscriptions_content_override" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_hosts_host_id_subscriptions_content_override`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "value" in params:
            form_params.append(("value", params["value"]))  # noqa: E501
        if "content_overrides" in params:
            form_params.append(
                ("content_overrides", params["content_overrides"])
            )  # noqa: E501
            collection_formats["content_overrides"] = "csv"  # noqa: E501
        if "content_overrides_search_search" in params:
            form_params.append(
                (
                    "content_overrides_search[search]",
                    params["content_overrides_search_search"],
                )
            )  # noqa: E501
        if "content_overrides_search_page" in params:
            form_params.append(
                (
                    "content_overrides_search[page]",
                    params["content_overrides_search_page"],
                )
            )  # noqa: E501
        if "content_overrides_search_per_page" in params:
            form_params.append(
                (
                    "content_overrides_search[per_page]",
                    params["content_overrides_search_per_page"],
                )
            )  # noqa: E501
        if "content_overrides_search_order" in params:
            form_params.append(
                (
                    "content_overrides_search[order]",
                    params["content_overrides_search_order"],
                )
            )  # noqa: E501
        if "content_overrides_search_full_result" in params:
            form_params.append(
                (
                    "content_overrides_search[full_result]",
                    params["content_overrides_search_full_result"],
                )
            )  # noqa: E501
        if "content_overrides_search_sort_by" in params:
            form_params.append(
                (
                    "content_overrides_search[sort_by]",
                    params["content_overrides_search_sort_by"],
                )
            )  # noqa: E501
        if "content_overrides_search_sort_order" in params:
            form_params.append(
                (
                    "content_overrides_search[sort_order]",
                    params["content_overrides_search_sort_order"],
                )
            )  # noqa: E501
        if "content_overrides_search_enabled" in params:
            form_params.append(
                (
                    "content_overrides_search[enabled]",
                    params["content_overrides_search_enabled"],
                )
            )  # noqa: E501
        if "content_overrides_search_remove" in params:
            form_params.append(
                (
                    "content_overrides_search[remove]",
                    params["content_overrides_search_remove"],
                )
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/subscriptions/content_override",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_host_id_subscriptions_remove_subscriptions(
        self, host_id, **kwargs
    ):  # noqa: E501
        """put_hosts_host_id_subscriptions_remove_subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_subscriptions_remove_subscriptions(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: Id of the host (required)
        :param list[str] subscriptions: Array of subscriptions to remove
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_host_id_subscriptions_remove_subscriptions_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_hosts_host_id_subscriptions_remove_subscriptions_with_http_info(
                host_id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_host_id_subscriptions_remove_subscriptions_with_http_info(
        self, host_id, **kwargs
    ):  # noqa: E501
        """put_hosts_host_id_subscriptions_remove_subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_host_id_subscriptions_remove_subscriptions_with_http_info(host_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float host_id: Id of the host (required)
        :param list[str] subscriptions: Array of subscriptions to remove
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["host_id", "subscriptions"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_host_id_subscriptions_remove_subscriptions"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_id' is set
        if self.api_client.client_side_validation and (
            "host_id" not in params or params["host_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_id` when calling `put_hosts_host_id_subscriptions_remove_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "host_id" in params:
            path_params["host_id"] = params["host_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "subscriptions" in params:
            form_params.append(("subscriptions", params["subscriptions"]))  # noqa: E501
            collection_formats["subscriptions"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/{host_id}/subscriptions/remove_subscriptions",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
