# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class ProvisioningTemplatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_provisioning_templates_id(self, id, **kwargs):  # noqa: E501
        """Delete a provisioning template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_provisioning_templates_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_provisioning_templates_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_provisioning_templates_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_provisioning_templates_id_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Delete a provisioning template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_provisioning_templates_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_provisioning_templates_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_provisioning_templates_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/provisioning_templates/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_location_id_provisioning_templates(
        self, location_id, operatingsystem_id, organization_id, **kwargs
    ):  # noqa: E501
        """List provisioning templates per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_provisioning_templates(location_id, operatingsystem_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_location_id_provisioning_templates_with_http_info(
                location_id, operatingsystem_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_locations_location_id_provisioning_templates_with_http_info(
                location_id, operatingsystem_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_locations_location_id_provisioning_templates_with_http_info(
        self, location_id, operatingsystem_id, organization_id, **kwargs
    ):  # noqa: E501
        """List provisioning templates per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_provisioning_templates_with_http_info(location_id, operatingsystem_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "operatingsystem_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_location_id_provisioning_templates" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_locations_location_id_provisioning_templates`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_locations_location_id_provisioning_templates`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_locations_location_id_provisioning_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/provisioning_templates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_operatingsystems_operatingsystem_id_provisioning_templates(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List provisioning templates per operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_provisioning_templates(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_operatingsystems_operatingsystem_id_provisioning_templates_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_operatingsystems_operatingsystem_id_provisioning_templates_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_operatingsystems_operatingsystem_id_provisioning_templates_with_http_info(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List provisioning templates per operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_provisioning_templates_with_http_info(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_operatingsystems_operatingsystem_id_provisioning_templates"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_operatingsystems_operatingsystem_id_provisioning_templates`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_operatingsystems_operatingsystem_id_provisioning_templates`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_operatingsystems_operatingsystem_id_provisioning_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "operatingsystem_id" in params:
            path_params["operatingsystem_id"] = params[
                "operatingsystem_id"
            ]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{operatingsystem_id}/provisioning_templates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_provisioning_templates(
        self, organization_id, operatingsystem_id, location_id, **kwargs
    ):  # noqa: E501
        """List provisioning templates per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_provisioning_templates(organization_id, operatingsystem_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_provisioning_templates_with_http_info(
                organization_id, operatingsystem_id, location_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_provisioning_templates_with_http_info(
                organization_id, operatingsystem_id, location_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_provisioning_templates_with_http_info(
        self, organization_id, operatingsystem_id, location_id, **kwargs
    ):  # noqa: E501
        """List provisioning templates per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_provisioning_templates_with_http_info(organization_id, operatingsystem_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "operatingsystem_id",
            "location_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_provisioning_templates"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_provisioning_templates`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_organizations_organization_id_provisioning_templates`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_organizations_organization_id_provisioning_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/provisioning_templates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_provisioning_templates(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List provisioning templates  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_templates(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_provisioning_templates_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_provisioning_templates_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_provisioning_templates_with_http_info(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List provisioning templates  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_templates_with_http_info(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provisioning_templates" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_provisioning_templates`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_provisioning_templates`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_provisioning_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/provisioning_templates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_provisioning_templates_id(self, id, **kwargs):  # noqa: E501
        """Show provisioning template details  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_templates_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_provisioning_templates_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_provisioning_templates_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_provisioning_templates_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show provisioning template details  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_templates_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provisioning_templates_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_provisioning_templates_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/provisioning_templates/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_provisioning_templates_id_export(self, id, **kwargs):  # noqa: E501
        """Export a provisioning template to ERB  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_templates_id_export(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_provisioning_templates_id_export_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_provisioning_templates_id_export_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_provisioning_templates_id_export_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Export a provisioning template to ERB  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_templates_id_export_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provisioning_templates_id_export" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_provisioning_templates_id_export`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/provisioning_templates/{id}/export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_provisioning_templates_revision(self, **kwargs):  # noqa: E501
        """get_provisioning_templates_revision  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_templates_revision(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str version: template version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_provisioning_templates_revision_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_provisioning_templates_revision_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def get_provisioning_templates_revision_with_http_info(
        self, **kwargs
    ):  # noqa: E501
        """get_provisioning_templates_revision  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provisioning_templates_revision_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str version: template version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["location_id", "organization_id", "version"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provisioning_templates_revision" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "version" in params:
            query_params.append(("version", params["version"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/provisioning_templates/revision",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_provisioning_templates(
        self, provisioning_template_name, provisioning_template_template, **kwargs
    ):  # noqa: E501
        """Create a provisioning template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_provisioning_templates(provisioning_template_name, provisioning_template_template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provisioning_template_name: template name (required)
        :param str provisioning_template_template: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str provisioning_template_description:
        :param bool provisioning_template_snippet:
        :param str provisioning_template_audit_comment:
        :param float provisioning_template_template_kind_id: not relevant for snippet
        :param list[str] provisioning_template_template_combinations_attributes: Array of template combinations (hostgroup_id, environment_id)
        :param list[str] provisioning_template_operatingsystem_ids: Array of operating system IDs to associate with the template
        :param bool provisioning_template_locked: Whether or not the template is locked for editing
        :param list[str] provisioning_template_location_ids: REPLACE locations with given ids
        :param list[str] provisioning_template_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_provisioning_templates_with_http_info(
                provisioning_template_name, provisioning_template_template, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_provisioning_templates_with_http_info(
                provisioning_template_name, provisioning_template_template, **kwargs
            )  # noqa: E501
            return data

    def post_provisioning_templates_with_http_info(
        self, provisioning_template_name, provisioning_template_template, **kwargs
    ):  # noqa: E501
        """Create a provisioning template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_provisioning_templates_with_http_info(provisioning_template_name, provisioning_template_template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provisioning_template_name: template name (required)
        :param str provisioning_template_template: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str provisioning_template_description:
        :param bool provisioning_template_snippet:
        :param str provisioning_template_audit_comment:
        :param float provisioning_template_template_kind_id: not relevant for snippet
        :param list[str] provisioning_template_template_combinations_attributes: Array of template combinations (hostgroup_id, environment_id)
        :param list[str] provisioning_template_operatingsystem_ids: Array of operating system IDs to associate with the template
        :param bool provisioning_template_locked: Whether or not the template is locked for editing
        :param list[str] provisioning_template_location_ids: REPLACE locations with given ids
        :param list[str] provisioning_template_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "provisioning_template_name",
            "provisioning_template_template",
            "location_id",
            "organization_id",
            "provisioning_template_description",
            "provisioning_template_snippet",
            "provisioning_template_audit_comment",
            "provisioning_template_template_kind_id",
            "provisioning_template_template_combinations_attributes",
            "provisioning_template_operatingsystem_ids",
            "provisioning_template_locked",
            "provisioning_template_location_ids",
            "provisioning_template_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_provisioning_templates" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'provisioning_template_name' is set
        if self.api_client.client_side_validation and (
            "provisioning_template_name" not in params
            or params["provisioning_template_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `provisioning_template_name` when calling `post_provisioning_templates`"
            )  # noqa: E501
        # verify the required parameter 'provisioning_template_template' is set
        if self.api_client.client_side_validation and (
            "provisioning_template_template" not in params
            or params["provisioning_template_template"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `provisioning_template_template` when calling `post_provisioning_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "provisioning_template_name" in params:
            form_params.append(
                ("provisioning_template[name]", params["provisioning_template_name"])
            )  # noqa: E501
        if "provisioning_template_template" in params:
            form_params.append(
                (
                    "provisioning_template[template]",
                    params["provisioning_template_template"],
                )
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "provisioning_template_description" in params:
            form_params.append(
                (
                    "provisioning_template[description]",
                    params["provisioning_template_description"],
                )
            )  # noqa: E501
        if "provisioning_template_snippet" in params:
            form_params.append(
                (
                    "provisioning_template[snippet]",
                    params["provisioning_template_snippet"],
                )
            )  # noqa: E501
        if "provisioning_template_audit_comment" in params:
            form_params.append(
                (
                    "provisioning_template[audit_comment]",
                    params["provisioning_template_audit_comment"],
                )
            )  # noqa: E501
        if "provisioning_template_template_kind_id" in params:
            form_params.append(
                (
                    "provisioning_template[template_kind_id]",
                    params["provisioning_template_template_kind_id"],
                )
            )  # noqa: E501
        if "provisioning_template_template_combinations_attributes" in params:
            form_params.append(
                (
                    "provisioning_template[template_combinations_attributes]",
                    params["provisioning_template_template_combinations_attributes"],
                )
            )  # noqa: E501
            collection_formats[
                "provisioning_template[template_combinations_attributes]"
            ] = "csv"  # noqa: E501
        if "provisioning_template_operatingsystem_ids" in params:
            form_params.append(
                (
                    "provisioning_template[operatingsystem_ids]",
                    params["provisioning_template_operatingsystem_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "provisioning_template[operatingsystem_ids]"
            ] = "csv"  # noqa: E501
        if "provisioning_template_locked" in params:
            form_params.append(
                (
                    "provisioning_template[locked]",
                    params["provisioning_template_locked"],
                )
            )  # noqa: E501
        if "provisioning_template_location_ids" in params:
            form_params.append(
                (
                    "provisioning_template[location_ids]",
                    params["provisioning_template_location_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "provisioning_template[location_ids]"
            ] = "csv"  # noqa: E501
        if "provisioning_template_organization_ids" in params:
            form_params.append(
                (
                    "provisioning_template[organization_ids]",
                    params["provisioning_template_organization_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "provisioning_template[organization_ids]"
            ] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/provisioning_templates",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_provisioning_templates_build_pxe_default(self, **kwargs):  # noqa: E501
        """Update the default PXE menu on all configured TFTP servers  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_provisioning_templates_build_pxe_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_provisioning_templates_build_pxe_default_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_provisioning_templates_build_pxe_default_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def post_provisioning_templates_build_pxe_default_with_http_info(
        self, **kwargs
    ):  # noqa: E501
        """Update the default PXE menu on all configured TFTP servers  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_provisioning_templates_build_pxe_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_provisioning_templates_build_pxe_default" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/provisioning_templates/build_pxe_default",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_provisioning_templates_id_clone(
        self, id, provisioning_template_name, **kwargs
    ):  # noqa: E501
        """Clone a provision template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_provisioning_templates_id_clone(id, provisioning_template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str provisioning_template_name: template name (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_provisioning_templates_id_clone_with_http_info(
                id, provisioning_template_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_provisioning_templates_id_clone_with_http_info(
                id, provisioning_template_name, **kwargs
            )  # noqa: E501
            return data

    def post_provisioning_templates_id_clone_with_http_info(
        self, id, provisioning_template_name, **kwargs
    ):  # noqa: E501
        """Clone a provision template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_provisioning_templates_id_clone_with_http_info(id, provisioning_template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str provisioning_template_name: template name (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "provisioning_template_name",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_provisioning_templates_id_clone" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_provisioning_templates_id_clone`"
            )  # noqa: E501
        # verify the required parameter 'provisioning_template_name' is set
        if self.api_client.client_side_validation and (
            "provisioning_template_name" not in params
            or params["provisioning_template_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `provisioning_template_name` when calling `post_provisioning_templates_id_clone`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "provisioning_template_name" in params:
            form_params.append(
                ("provisioning_template[name]", params["provisioning_template_name"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/provisioning_templates/{id}/clone",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_provisioning_templates_import(self, **kwargs):  # noqa: E501
        """Import a provisioning template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_provisioning_templates_import(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str provisioning_template_name: template name
        :param str provisioning_template_template: template contents including metadata
        :param list[str] provisioning_template_location_ids: REPLACE locations with given ids
        :param list[str] provisioning_template_organization_ids: REPLACE organizations with given ids.
        :param bool options_force: use if you want update locked templates
        :param str options_associate: determines when the template should associate objects based on metadata, new means only when new template is being created, always means both for new and existing template which is only being updated, never ignores metadata
        :param bool options_lock: lock imported templates (false by default)
        :param bool options_default: makes the template default meaning it will be automatically associated with newly created organizations and locations (false by default)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_provisioning_templates_import_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_provisioning_templates_import_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def post_provisioning_templates_import_with_http_info(self, **kwargs):  # noqa: E501
        """Import a provisioning template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_provisioning_templates_import_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str provisioning_template_name: template name
        :param str provisioning_template_template: template contents including metadata
        :param list[str] provisioning_template_location_ids: REPLACE locations with given ids
        :param list[str] provisioning_template_organization_ids: REPLACE organizations with given ids.
        :param bool options_force: use if you want update locked templates
        :param str options_associate: determines when the template should associate objects based on metadata, new means only when new template is being created, always means both for new and existing template which is only being updated, never ignores metadata
        :param bool options_lock: lock imported templates (false by default)
        :param bool options_default: makes the template default meaning it will be automatically associated with newly created organizations and locations (false by default)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "provisioning_template_name",
            "provisioning_template_template",
            "provisioning_template_location_ids",
            "provisioning_template_organization_ids",
            "options_force",
            "options_associate",
            "options_lock",
            "options_default",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_provisioning_templates_import" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "provisioning_template_name" in params:
            form_params.append(
                ("provisioning_template[name]", params["provisioning_template_name"])
            )  # noqa: E501
        if "provisioning_template_template" in params:
            form_params.append(
                (
                    "provisioning_template[template]",
                    params["provisioning_template_template"],
                )
            )  # noqa: E501
        if "provisioning_template_location_ids" in params:
            form_params.append(
                (
                    "provisioning_template[location_ids]",
                    params["provisioning_template_location_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "provisioning_template[location_ids]"
            ] = "csv"  # noqa: E501
        if "provisioning_template_organization_ids" in params:
            form_params.append(
                (
                    "provisioning_template[organization_ids]",
                    params["provisioning_template_organization_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "provisioning_template[organization_ids]"
            ] = "csv"  # noqa: E501
        if "options_force" in params:
            form_params.append(
                ("options[force]", params["options_force"])
            )  # noqa: E501
        if "options_associate" in params:
            form_params.append(
                ("options[associate]", params["options_associate"])
            )  # noqa: E501
        if "options_lock" in params:
            form_params.append(("options[lock]", params["options_lock"]))  # noqa: E501
        if "options_default" in params:
            form_params.append(
                ("options[default]", params["options_default"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/provisioning_templates/import",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_provisioning_templates_id(self, id, **kwargs):  # noqa: E501
        """Update a provisioning template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_provisioning_templates_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str provisioning_template_name: template name
        :param str provisioning_template_description:
        :param str provisioning_template_template:
        :param bool provisioning_template_snippet:
        :param str provisioning_template_audit_comment:
        :param float provisioning_template_template_kind_id: not relevant for snippet
        :param list[str] provisioning_template_template_combinations_attributes: Array of template combinations (hostgroup_id, environment_id)
        :param list[str] provisioning_template_operatingsystem_ids: Array of operating system IDs to associate with the template
        :param bool provisioning_template_locked: Whether or not the template is locked for editing
        :param list[str] provisioning_template_location_ids: REPLACE locations with given ids
        :param list[str] provisioning_template_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_provisioning_templates_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_provisioning_templates_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_provisioning_templates_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a provisioning template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_provisioning_templates_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str provisioning_template_name: template name
        :param str provisioning_template_description:
        :param str provisioning_template_template:
        :param bool provisioning_template_snippet:
        :param str provisioning_template_audit_comment:
        :param float provisioning_template_template_kind_id: not relevant for snippet
        :param list[str] provisioning_template_template_combinations_attributes: Array of template combinations (hostgroup_id, environment_id)
        :param list[str] provisioning_template_operatingsystem_ids: Array of operating system IDs to associate with the template
        :param bool provisioning_template_locked: Whether or not the template is locked for editing
        :param list[str] provisioning_template_location_ids: REPLACE locations with given ids
        :param list[str] provisioning_template_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "provisioning_template_name",
            "provisioning_template_description",
            "provisioning_template_template",
            "provisioning_template_snippet",
            "provisioning_template_audit_comment",
            "provisioning_template_template_kind_id",
            "provisioning_template_template_combinations_attributes",
            "provisioning_template_operatingsystem_ids",
            "provisioning_template_locked",
            "provisioning_template_location_ids",
            "provisioning_template_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_provisioning_templates_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_provisioning_templates_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "provisioning_template_name" in params:
            form_params.append(
                ("provisioning_template[name]", params["provisioning_template_name"])
            )  # noqa: E501
        if "provisioning_template_description" in params:
            form_params.append(
                (
                    "provisioning_template[description]",
                    params["provisioning_template_description"],
                )
            )  # noqa: E501
        if "provisioning_template_template" in params:
            form_params.append(
                (
                    "provisioning_template[template]",
                    params["provisioning_template_template"],
                )
            )  # noqa: E501
        if "provisioning_template_snippet" in params:
            form_params.append(
                (
                    "provisioning_template[snippet]",
                    params["provisioning_template_snippet"],
                )
            )  # noqa: E501
        if "provisioning_template_audit_comment" in params:
            form_params.append(
                (
                    "provisioning_template[audit_comment]",
                    params["provisioning_template_audit_comment"],
                )
            )  # noqa: E501
        if "provisioning_template_template_kind_id" in params:
            form_params.append(
                (
                    "provisioning_template[template_kind_id]",
                    params["provisioning_template_template_kind_id"],
                )
            )  # noqa: E501
        if "provisioning_template_template_combinations_attributes" in params:
            form_params.append(
                (
                    "provisioning_template[template_combinations_attributes]",
                    params["provisioning_template_template_combinations_attributes"],
                )
            )  # noqa: E501
            collection_formats[
                "provisioning_template[template_combinations_attributes]"
            ] = "csv"  # noqa: E501
        if "provisioning_template_operatingsystem_ids" in params:
            form_params.append(
                (
                    "provisioning_template[operatingsystem_ids]",
                    params["provisioning_template_operatingsystem_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "provisioning_template[operatingsystem_ids]"
            ] = "csv"  # noqa: E501
        if "provisioning_template_locked" in params:
            form_params.append(
                (
                    "provisioning_template[locked]",
                    params["provisioning_template_locked"],
                )
            )  # noqa: E501
        if "provisioning_template_location_ids" in params:
            form_params.append(
                (
                    "provisioning_template[location_ids]",
                    params["provisioning_template_location_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "provisioning_template[location_ids]"
            ] = "csv"  # noqa: E501
        if "provisioning_template_organization_ids" in params:
            form_params.append(
                (
                    "provisioning_template[organization_ids]",
                    params["provisioning_template_organization_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "provisioning_template[organization_ids]"
            ] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/provisioning_templates/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
