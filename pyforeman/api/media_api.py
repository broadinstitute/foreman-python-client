# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class MediaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_media_id(self, id, **kwargs):  # noqa: E501
        """Delete a medium  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_media_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_media_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_media_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_media_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a medium  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_media_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_media_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_media_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/media/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_location_id_media(
        self, location_id, operatingsystem_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all media per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_media(location_id, operatingsystem_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_location_id_media_with_http_info(
                location_id, operatingsystem_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_locations_location_id_media_with_http_info(
                location_id, operatingsystem_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_locations_location_id_media_with_http_info(
        self, location_id, operatingsystem_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all media per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_media_with_http_info(location_id, operatingsystem_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "operatingsystem_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_location_id_media" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_locations_location_id_media`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_locations_location_id_media`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_locations_location_id_media`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/media",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_media(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all installation media  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_media(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_media_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_media_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_media_with_http_info(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all installation media  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_media_with_http_info(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_media" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_media`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_media`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_media`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/media",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_media_id(self, id, **kwargs):  # noqa: E501
        """Show a medium  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_media_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_media_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_media_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_media_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a medium  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_media_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_media_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_media_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/media/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_operatingsystems_operatingsystem_id_media(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all media for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_media(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_operatingsystems_operatingsystem_id_media_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_operatingsystems_operatingsystem_id_media_with_http_info(
                operatingsystem_id, location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_operatingsystems_operatingsystem_id_media_with_http_info(
        self, operatingsystem_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all media for an operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_media_with_http_info(operatingsystem_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_operatingsystems_operatingsystem_id_media" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_operatingsystems_operatingsystem_id_media`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_operatingsystems_operatingsystem_id_media`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_operatingsystems_operatingsystem_id_media`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "operatingsystem_id" in params:
            path_params["operatingsystem_id"] = params[
                "operatingsystem_id"
            ]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{operatingsystem_id}/media",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_media(
        self, organization_id, operatingsystem_id, location_id, **kwargs
    ):  # noqa: E501
        """List all media per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_media(organization_id, operatingsystem_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_media_with_http_info(
                organization_id, operatingsystem_id, location_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_organization_id_media_with_http_info(
                organization_id, operatingsystem_id, location_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_media_with_http_info(
        self, organization_id, operatingsystem_id, location_id, **kwargs
    ):  # noqa: E501
        """List all media per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_media_with_http_info(organization_id, operatingsystem_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "operatingsystem_id",
            "location_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_media" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_media`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_organizations_organization_id_media`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_organizations_organization_id_media`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/media",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_media(self, medium_name, medium_path, **kwargs):  # noqa: E501
        """Create a medium  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_media(medium_name, medium_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str medium_name: Name of media (required)
        :param str medium_path: The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture).  for example http://mirror.centos.org/centos/$version/os/$arch where $arch will be substituted for the host's actual OS architecture and $version, $major and $minor will be substituted for the version of the operating system.  Solaris and Debian media may also use $release.  (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str medium_os_family: Operating system family, available values: AIX, Altlinux, Archlinux, Coreos, Debian, Fcos, Freebsd, Gentoo, Junos, NXOS, Rancheros, Redhat, Rhcos, Solaris, Suse, VRP, Windows, Xenserver
        :param list[str] medium_operatingsystem_ids:
        :param list[str] medium_location_ids: REPLACE locations with given ids
        :param list[str] medium_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_media_with_http_info(
                medium_name, medium_path, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_media_with_http_info(
                medium_name, medium_path, **kwargs
            )  # noqa: E501
            return data

    def post_media_with_http_info(
        self, medium_name, medium_path, **kwargs
    ):  # noqa: E501
        """Create a medium  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_media_with_http_info(medium_name, medium_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str medium_name: Name of media (required)
        :param str medium_path: The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture).  for example http://mirror.centos.org/centos/$version/os/$arch where $arch will be substituted for the host's actual OS architecture and $version, $major and $minor will be substituted for the version of the operating system.  Solaris and Debian media may also use $release.  (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str medium_os_family: Operating system family, available values: AIX, Altlinux, Archlinux, Coreos, Debian, Fcos, Freebsd, Gentoo, Junos, NXOS, Rancheros, Redhat, Rhcos, Solaris, Suse, VRP, Windows, Xenserver
        :param list[str] medium_operatingsystem_ids:
        :param list[str] medium_location_ids: REPLACE locations with given ids
        :param list[str] medium_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "medium_name",
            "medium_path",
            "location_id",
            "organization_id",
            "medium_os_family",
            "medium_operatingsystem_ids",
            "medium_location_ids",
            "medium_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_media" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'medium_name' is set
        if self.api_client.client_side_validation and (
            "medium_name" not in params or params["medium_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `medium_name` when calling `post_media`"
            )  # noqa: E501
        # verify the required parameter 'medium_path' is set
        if self.api_client.client_side_validation and (
            "medium_path" not in params or params["medium_path"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `medium_path` when calling `post_media`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "medium_name" in params:
            form_params.append(("medium[name]", params["medium_name"]))  # noqa: E501
        if "medium_path" in params:
            form_params.append(("medium[path]", params["medium_path"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "medium_os_family" in params:
            form_params.append(
                ("medium[os_family]", params["medium_os_family"])
            )  # noqa: E501
        if "medium_operatingsystem_ids" in params:
            form_params.append(
                ("medium[operatingsystem_ids]", params["medium_operatingsystem_ids"])
            )  # noqa: E501
            collection_formats["medium[operatingsystem_ids]"] = "csv"  # noqa: E501
        if "medium_location_ids" in params:
            form_params.append(
                ("medium[location_ids]", params["medium_location_ids"])
            )  # noqa: E501
            collection_formats["medium[location_ids]"] = "csv"  # noqa: E501
        if "medium_organization_ids" in params:
            form_params.append(
                ("medium[organization_ids]", params["medium_organization_ids"])
            )  # noqa: E501
            collection_formats["medium[organization_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/media",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_media_id(self, id, **kwargs):  # noqa: E501
        """Update a medium  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_media_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str medium_name: Name of media
        :param str medium_path: The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture).  for example http://mirror.centos.org/centos/$version/os/$arch where $arch will be substituted for the host's actual OS architecture and $version, $major and $minor will be substituted for the version of the operating system.  Solaris and Debian media may also use $release.
        :param str medium_os_family: Operating system family, available values: AIX, Altlinux, Archlinux, Coreos, Debian, Fcos, Freebsd, Gentoo, Junos, NXOS, Rancheros, Redhat, Rhcos, Solaris, Suse, VRP, Windows, Xenserver
        :param list[str] medium_operatingsystem_ids:
        :param list[str] medium_location_ids: REPLACE locations with given ids
        :param list[str] medium_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_media_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_media_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_media_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a medium  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_media_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str medium_name: Name of media
        :param str medium_path: The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture).  for example http://mirror.centos.org/centos/$version/os/$arch where $arch will be substituted for the host's actual OS architecture and $version, $major and $minor will be substituted for the version of the operating system.  Solaris and Debian media may also use $release.
        :param str medium_os_family: Operating system family, available values: AIX, Altlinux, Archlinux, Coreos, Debian, Fcos, Freebsd, Gentoo, Junos, NXOS, Rancheros, Redhat, Rhcos, Solaris, Suse, VRP, Windows, Xenserver
        :param list[str] medium_operatingsystem_ids:
        :param list[str] medium_location_ids: REPLACE locations with given ids
        :param list[str] medium_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "medium_name",
            "medium_path",
            "medium_os_family",
            "medium_operatingsystem_ids",
            "medium_location_ids",
            "medium_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_media_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_media_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "medium_name" in params:
            form_params.append(("medium[name]", params["medium_name"]))  # noqa: E501
        if "medium_path" in params:
            form_params.append(("medium[path]", params["medium_path"]))  # noqa: E501
        if "medium_os_family" in params:
            form_params.append(
                ("medium[os_family]", params["medium_os_family"])
            )  # noqa: E501
        if "medium_operatingsystem_ids" in params:
            form_params.append(
                ("medium[operatingsystem_ids]", params["medium_operatingsystem_ids"])
            )  # noqa: E501
            collection_formats["medium[operatingsystem_ids]"] = "csv"  # noqa: E501
        if "medium_location_ids" in params:
            form_params.append(
                ("medium[location_ids]", params["medium_location_ids"])
            )  # noqa: E501
            collection_formats["medium[location_ids]"] = "csv"  # noqa: E501
        if "medium_organization_ids" in params:
            form_params.append(
                ("medium[organization_ids]", params["medium_organization_ids"])
            )  # noqa: E501
            collection_formats["medium[organization_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/media/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
