# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class ContentViewFiltersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_content_view_filters_id(
        self, id, content_view_id, **kwargs
    ):  # noqa: E501
        """delete a filter  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_view_filters_id(id, content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: filter identifier (required)
        :param float content_view_id: content view identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_content_view_filters_id_with_http_info(
                id, content_view_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_content_view_filters_id_with_http_info(
                id, content_view_id, **kwargs
            )  # noqa: E501
            return data

    def delete_content_view_filters_id_with_http_info(
        self, id, content_view_id, **kwargs
    ):  # noqa: E501
        """delete a filter  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_view_filters_id_with_http_info(id, content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: filter identifier (required)
        :param float content_view_id: content view identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "content_view_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_content_view_filters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_content_view_filters_id`"
            )  # noqa: E501
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `delete_content_view_filters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "content_view_id" in params:
            form_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_content_views_content_view_id_filters_id(
        self, content_view_id, id, **kwargs
    ):  # noqa: E501
        """delete a filter  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_views_content_view_id_filters_id(content_view_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param float id: filter identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_content_views_content_view_id_filters_id_with_http_info(
                content_view_id, id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_content_views_content_view_id_filters_id_with_http_info(
                content_view_id, id, **kwargs
            )  # noqa: E501
            return data

    def delete_content_views_content_view_id_filters_id_with_http_info(
        self, content_view_id, id, **kwargs
    ):  # noqa: E501
        """delete a filter  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_views_content_view_id_filters_id_with_http_info(content_view_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param float id: filter identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["content_view_id", "id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_content_views_content_view_id_filters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `delete_content_views_content_view_id_filters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_content_views_content_view_id_filters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_id" in params:
            path_params["content_view_id"] = params["content_view_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{content_view_id}/filters/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_view_filters(self, content_view_id, **kwargs):  # noqa: E501
        """list filters  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_filters(content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: filter content view filters by name
        :param list[str] types: types of filters
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_view_filters_with_http_info(
                content_view_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_content_view_filters_with_http_info(
                content_view_id, **kwargs
            )  # noqa: E501
            return data

    def get_content_view_filters_with_http_info(
        self, content_view_id, **kwargs
    ):  # noqa: E501
        """list filters  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_filters_with_http_info(content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: filter content view filters by name
        :param list[str] types: types of filters
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_id",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
            "name",
            "types",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_view_filters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `get_content_view_filters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "content_view_id" in params:
            query_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "types" in params:
            query_params.append(("types", params["types"]))  # noqa: E501
            collection_formats["types"] = "csv"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_view_filters_id(self, id, content_view_id, **kwargs):  # noqa: E501
        """show filter info  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_filters_id(id, content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: filter identifier (required)
        :param float content_view_id: content view identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_view_filters_id_with_http_info(
                id, content_view_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_content_view_filters_id_with_http_info(
                id, content_view_id, **kwargs
            )  # noqa: E501
            return data

    def get_content_view_filters_id_with_http_info(
        self, id, content_view_id, **kwargs
    ):  # noqa: E501
        """show filter info  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_filters_id_with_http_info(id, content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: filter identifier (required)
        :param float content_view_id: content view identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "content_view_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_view_filters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_content_view_filters_id`"
            )  # noqa: E501
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `get_content_view_filters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "content_view_id" in params:
            query_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_views_content_view_id_filters(
        self, content_view_id, **kwargs
    ):  # noqa: E501
        """list filters  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views_content_view_id_filters(content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: filter content view filters by name
        :param list[str] types: types of filters
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_views_content_view_id_filters_with_http_info(
                content_view_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_content_views_content_view_id_filters_with_http_info(
                content_view_id, **kwargs
            )  # noqa: E501
            return data

    def get_content_views_content_view_id_filters_with_http_info(
        self, content_view_id, **kwargs
    ):  # noqa: E501
        """list filters  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views_content_view_id_filters_with_http_info(content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str name: filter content view filters by name
        :param list[str] types: types of filters
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_id",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
            "name",
            "types",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_views_content_view_id_filters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `get_content_views_content_view_id_filters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_id" in params:
            path_params["content_view_id"] = params["content_view_id"]  # noqa: E501

        query_params = []
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "types" in params:
            query_params.append(("types", params["types"]))  # noqa: E501
            collection_formats["types"] = "csv"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{content_view_id}/filters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_views_content_view_id_filters_id(
        self, content_view_id, id, **kwargs
    ):  # noqa: E501
        """show filter info  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views_content_view_id_filters_id(content_view_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param float id: filter identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_views_content_view_id_filters_id_with_http_info(
                content_view_id, id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_content_views_content_view_id_filters_id_with_http_info(
                content_view_id, id, **kwargs
            )  # noqa: E501
            return data

    def get_content_views_content_view_id_filters_id_with_http_info(
        self, content_view_id, id, **kwargs
    ):  # noqa: E501
        """show filter info  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views_content_view_id_filters_id_with_http_info(content_view_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param float id: filter identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["content_view_id", "id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_views_content_view_id_filters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `get_content_views_content_view_id_filters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_content_views_content_view_id_filters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_id" in params:
            path_params["content_view_id"] = params["content_view_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{content_view_id}/filters/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_content_view_filters(
        self, content_view_id, name, type, **kwargs
    ):  # noqa: E501
        """create a filter for a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_view_filters(content_view_id, name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param str name: name of the filter (required)
        :param str type: type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd) (required)
        :param bool original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :param bool original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :param bool inclusion: specifies if content should be included or excluded, default: inclusion=false
        :param list[str] repository_ids: list of repository ids
        :param str description: description of the filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_content_view_filters_with_http_info(
                content_view_id, name, type, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_content_view_filters_with_http_info(
                content_view_id, name, type, **kwargs
            )  # noqa: E501
            return data

    def post_content_view_filters_with_http_info(
        self, content_view_id, name, type, **kwargs
    ):  # noqa: E501
        """create a filter for a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_view_filters_with_http_info(content_view_id, name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param str name: name of the filter (required)
        :param str type: type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd) (required)
        :param bool original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :param bool original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :param bool inclusion: specifies if content should be included or excluded, default: inclusion=false
        :param list[str] repository_ids: list of repository ids
        :param str description: description of the filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_id",
            "name",
            "type",
            "original_packages",
            "original_module_streams",
            "inclusion",
            "repository_ids",
            "description",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_content_view_filters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `post_content_view_filters`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_content_view_filters`"
            )  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and (
            "type" not in params or params["type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `type` when calling `post_content_view_filters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "content_view_id" in params:
            form_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "type" in params:
            form_params.append(("type", params["type"]))  # noqa: E501
        if "original_packages" in params:
            form_params.append(
                ("original_packages", params["original_packages"])
            )  # noqa: E501
        if "original_module_streams" in params:
            form_params.append(
                ("original_module_streams", params["original_module_streams"])
            )  # noqa: E501
        if "inclusion" in params:
            form_params.append(("inclusion", params["inclusion"]))  # noqa: E501
        if "repository_ids" in params:
            form_params.append(
                ("repository_ids", params["repository_ids"])
            )  # noqa: E501
            collection_formats["repository_ids"] = "csv"  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_content_views_content_view_id_filters(
        self, content_view_id, name, type, **kwargs
    ):  # noqa: E501
        """create a filter for a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_views_content_view_id_filters(content_view_id, name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param str name: name of the filter (required)
        :param str type: type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd) (required)
        :param bool original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :param bool original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :param bool inclusion: specifies if content should be included or excluded, default: inclusion=false
        :param list[str] repository_ids: list of repository ids
        :param str description: description of the filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_content_views_content_view_id_filters_with_http_info(
                content_view_id, name, type, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_content_views_content_view_id_filters_with_http_info(
                content_view_id, name, type, **kwargs
            )  # noqa: E501
            return data

    def post_content_views_content_view_id_filters_with_http_info(
        self, content_view_id, name, type, **kwargs
    ):  # noqa: E501
        """create a filter for a content view  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_views_content_view_id_filters_with_http_info(content_view_id, name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param str name: name of the filter (required)
        :param str type: type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd) (required)
        :param bool original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :param bool original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :param bool inclusion: specifies if content should be included or excluded, default: inclusion=false
        :param list[str] repository_ids: list of repository ids
        :param str description: description of the filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_id",
            "name",
            "type",
            "original_packages",
            "original_module_streams",
            "inclusion",
            "repository_ids",
            "description",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_content_views_content_view_id_filters" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `post_content_views_content_view_id_filters`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_content_views_content_view_id_filters`"
            )  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and (
            "type" not in params or params["type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `type` when calling `post_content_views_content_view_id_filters`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_id" in params:
            path_params["content_view_id"] = params["content_view_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "type" in params:
            form_params.append(("type", params["type"]))  # noqa: E501
        if "original_packages" in params:
            form_params.append(
                ("original_packages", params["original_packages"])
            )  # noqa: E501
        if "original_module_streams" in params:
            form_params.append(
                ("original_module_streams", params["original_module_streams"])
            )  # noqa: E501
        if "inclusion" in params:
            form_params.append(("inclusion", params["inclusion"]))  # noqa: E501
        if "repository_ids" in params:
            form_params.append(
                ("repository_ids", params["repository_ids"])
            )  # noqa: E501
            collection_formats["repository_ids"] = "csv"  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{content_view_id}/filters",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_view_filters_id(self, id, content_view_id, **kwargs):  # noqa: E501
        """update a filter  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_filters_id(id, content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: filter identifier (required)
        :param float content_view_id: content view identifier (required)
        :param str name: new name for the filter
        :param bool original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :param bool original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :param bool inclusion: specifies if content should be included or excluded, default: inclusion=false
        :param list[str] repository_ids: list of repository ids
        :param str description: description of the filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_view_filters_id_with_http_info(
                id, content_view_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_content_view_filters_id_with_http_info(
                id, content_view_id, **kwargs
            )  # noqa: E501
            return data

    def put_content_view_filters_id_with_http_info(
        self, id, content_view_id, **kwargs
    ):  # noqa: E501
        """update a filter  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_filters_id_with_http_info(id, content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: filter identifier (required)
        :param float content_view_id: content view identifier (required)
        :param str name: new name for the filter
        :param bool original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :param bool original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :param bool inclusion: specifies if content should be included or excluded, default: inclusion=false
        :param list[str] repository_ids: list of repository ids
        :param str description: description of the filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "content_view_id",
            "name",
            "original_packages",
            "original_module_streams",
            "inclusion",
            "repository_ids",
            "description",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_view_filters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_view_filters_id`"
            )  # noqa: E501
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `put_content_view_filters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "content_view_id" in params:
            form_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "original_packages" in params:
            form_params.append(
                ("original_packages", params["original_packages"])
            )  # noqa: E501
        if "original_module_streams" in params:
            form_params.append(
                ("original_module_streams", params["original_module_streams"])
            )  # noqa: E501
        if "inclusion" in params:
            form_params.append(("inclusion", params["inclusion"]))  # noqa: E501
        if "repository_ids" in params:
            form_params.append(
                ("repository_ids", params["repository_ids"])
            )  # noqa: E501
            collection_formats["repository_ids"] = "csv"  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_view_filters_id_add_filter_rules(
        self, id, content_view_id, **kwargs
    ):  # noqa: E501
        """bulk add filter rules  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_filters_id_add_filter_rules(id, content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: filter identifier (required)
        :param float content_view_id: content view identifier (required)
        :param list[str] rules_params: Rules to be added
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_view_filters_id_add_filter_rules_with_http_info(
                id, content_view_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_content_view_filters_id_add_filter_rules_with_http_info(
                id, content_view_id, **kwargs
            )  # noqa: E501
            return data

    def put_content_view_filters_id_add_filter_rules_with_http_info(
        self, id, content_view_id, **kwargs
    ):  # noqa: E501
        """bulk add filter rules  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_filters_id_add_filter_rules_with_http_info(id, content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: filter identifier (required)
        :param float content_view_id: content view identifier (required)
        :param list[str] rules_params: Rules to be added
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "content_view_id", "rules_params"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_view_filters_id_add_filter_rules" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_view_filters_id_add_filter_rules`"
            )  # noqa: E501
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `put_content_view_filters_id_add_filter_rules`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "content_view_id" in params:
            form_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "rules_params" in params:
            form_params.append(("rules_params", params["rules_params"]))  # noqa: E501
            collection_formats["rules_params"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters/{id}/add_filter_rules",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_view_filters_id_remove_filter_rules(
        self, id, content_view_id, rule_ids, **kwargs
    ):  # noqa: E501
        """bulk delete filter rules  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_filters_id_remove_filter_rules(id, content_view_id, rule_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: filter identifier (required)
        :param float content_view_id: content view identifier (required)
        :param list[str] rule_ids: filter identifiers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_view_filters_id_remove_filter_rules_with_http_info(
                id, content_view_id, rule_ids, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_content_view_filters_id_remove_filter_rules_with_http_info(
                id, content_view_id, rule_ids, **kwargs
            )  # noqa: E501
            return data

    def put_content_view_filters_id_remove_filter_rules_with_http_info(
        self, id, content_view_id, rule_ids, **kwargs
    ):  # noqa: E501
        """bulk delete filter rules  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_filters_id_remove_filter_rules_with_http_info(id, content_view_id, rule_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: filter identifier (required)
        :param float content_view_id: content view identifier (required)
        :param list[str] rule_ids: filter identifiers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "content_view_id", "rule_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_view_filters_id_remove_filter_rules" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_view_filters_id_remove_filter_rules`"
            )  # noqa: E501
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `put_content_view_filters_id_remove_filter_rules`"
            )  # noqa: E501
        # verify the required parameter 'rule_ids' is set
        if self.api_client.client_side_validation and (
            "rule_ids" not in params or params["rule_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `rule_ids` when calling `put_content_view_filters_id_remove_filter_rules`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "content_view_id" in params:
            form_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "rule_ids" in params:
            form_params.append(("rule_ids", params["rule_ids"]))  # noqa: E501
            collection_formats["rule_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters/{id}/remove_filter_rules",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_views_content_view_id_filters_id(
        self, content_view_id, id, **kwargs
    ):  # noqa: E501
        """update a filter  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_content_view_id_filters_id(content_view_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param float id: filter identifier (required)
        :param str name: new name for the filter
        :param bool original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :param bool original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :param bool inclusion: specifies if content should be included or excluded, default: inclusion=false
        :param list[str] repository_ids: list of repository ids
        :param str description: description of the filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_views_content_view_id_filters_id_with_http_info(
                content_view_id, id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_content_views_content_view_id_filters_id_with_http_info(
                content_view_id, id, **kwargs
            )  # noqa: E501
            return data

    def put_content_views_content_view_id_filters_id_with_http_info(
        self, content_view_id, id, **kwargs
    ):  # noqa: E501
        """update a filter  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_content_view_id_filters_id_with_http_info(content_view_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param float id: filter identifier (required)
        :param str name: new name for the filter
        :param bool original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :param bool original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :param bool inclusion: specifies if content should be included or excluded, default: inclusion=false
        :param list[str] repository_ids: list of repository ids
        :param str description: description of the filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_id",
            "id",
            "name",
            "original_packages",
            "original_module_streams",
            "inclusion",
            "repository_ids",
            "description",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_views_content_view_id_filters_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `put_content_views_content_view_id_filters_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_views_content_view_id_filters_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_id" in params:
            path_params["content_view_id"] = params["content_view_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "original_packages" in params:
            form_params.append(
                ("original_packages", params["original_packages"])
            )  # noqa: E501
        if "original_module_streams" in params:
            form_params.append(
                ("original_module_streams", params["original_module_streams"])
            )  # noqa: E501
        if "inclusion" in params:
            form_params.append(("inclusion", params["inclusion"]))  # noqa: E501
        if "repository_ids" in params:
            form_params.append(
                ("repository_ids", params["repository_ids"])
            )  # noqa: E501
            collection_formats["repository_ids"] = "csv"  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{content_view_id}/filters/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_views_content_view_id_filters_id_add_filter_rules(
        self, content_view_id, id, **kwargs
    ):  # noqa: E501
        """bulk add filter rules  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_content_view_id_filters_id_add_filter_rules(content_view_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param float id: filter identifier (required)
        :param list[str] rules_params: Rules to be added
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_views_content_view_id_filters_id_add_filter_rules_with_http_info(
                content_view_id, id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_content_views_content_view_id_filters_id_add_filter_rules_with_http_info(
                content_view_id, id, **kwargs
            )  # noqa: E501
            return data

    def put_content_views_content_view_id_filters_id_add_filter_rules_with_http_info(
        self, content_view_id, id, **kwargs
    ):  # noqa: E501
        """bulk add filter rules  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_content_view_id_filters_id_add_filter_rules_with_http_info(content_view_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param float id: filter identifier (required)
        :param list[str] rules_params: Rules to be added
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["content_view_id", "id", "rules_params"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_views_content_view_id_filters_id_add_filter_rules"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `put_content_views_content_view_id_filters_id_add_filter_rules`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_views_content_view_id_filters_id_add_filter_rules`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_id" in params:
            path_params["content_view_id"] = params["content_view_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "rules_params" in params:
            form_params.append(("rules_params", params["rules_params"]))  # noqa: E501
            collection_formats["rules_params"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{content_view_id}/filters/{id}/add_filter_rules",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_views_content_view_id_filters_id_remove_filter_rules(
        self, content_view_id, id, rule_ids, **kwargs
    ):  # noqa: E501
        """bulk delete filter rules  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_content_view_id_filters_id_remove_filter_rules(content_view_id, id, rule_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param float id: filter identifier (required)
        :param list[str] rule_ids: filter identifiers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_views_content_view_id_filters_id_remove_filter_rules_with_http_info(
                content_view_id, id, rule_ids, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_content_views_content_view_id_filters_id_remove_filter_rules_with_http_info(
                content_view_id, id, rule_ids, **kwargs
            )  # noqa: E501
            return data

    def put_content_views_content_view_id_filters_id_remove_filter_rules_with_http_info(
        self, content_view_id, id, rule_ids, **kwargs
    ):  # noqa: E501
        """bulk delete filter rules  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_views_content_view_id_filters_id_remove_filter_rules_with_http_info(content_view_id, id, rule_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: content view identifier (required)
        :param float id: filter identifier (required)
        :param list[str] rule_ids: filter identifiers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["content_view_id", "id", "rule_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_views_content_view_id_filters_id_remove_filter_rules"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `put_content_views_content_view_id_filters_id_remove_filter_rules`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_views_content_view_id_filters_id_remove_filter_rules`"
            )  # noqa: E501
        # verify the required parameter 'rule_ids' is set
        if self.api_client.client_side_validation and (
            "rule_ids" not in params or params["rule_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `rule_ids` when calling `put_content_views_content_view_id_filters_id_remove_filter_rules`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_id" in params:
            path_params["content_view_id"] = params["content_view_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "rule_ids" in params:
            form_params.append(("rule_ids", params["rule_ids"]))  # noqa: E501
            collection_formats["rule_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{content_view_id}/filters/{id}/remove_filter_rules",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
