# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class RegistrationCommandsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_registration_commands(self, **kwargs):  # noqa: E501
        """Generate global registration command  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_registration_commands(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param float registration_command_organization_id: ID of the Organization to register the host in
        :param float registration_command_location_id: ID of the Location to register the host in
        :param float registration_command_hostgroup_id: ID of the Host group to register the host in
        :param float registration_command_operatingsystem_id: ID of the Operating System to register the host in. Operating system must have a `host_init_config` template assigned
        :param float registration_command_smart_proxy_id: ID of the Smart Proxy. This Proxy must have enabled both the 'Templates' and 'Registration' features
        :param bool registration_command_setup_insights: Set 'host_registration_insights' parameter for the host. If it is set to true, insights client will be installed and registered on Red Hat family operating systems
        :param bool registration_command_setup_remote_execution: Set 'host_registration_remote_execution' parameter for the host. If it is set to true, SSH keys will be installed on the host
        :param float registration_command_jwt_expiration: Expiration of the authorization token (in hours)
        :param bool registration_command_insecure: Enable insecure argument for the initial curl
        :param str registration_command_packages: Packages to install on the host when registered. Can be set by `host_packages` parameter, example: `pkg1 pkg2`
        :param bool registration_command_update_packages: Update all packages on the host
        :param str registration_command_repo: Repository URL / details, for example for Debian OS family: 'deb http://deb.example.com/ buster 1.0', for Red Hat and SUSE OS family: 'http://yum.theforeman.org/client/latest/el8/x86_64/'
        :param str registration_command_repo_gpg_key_url: URL of the GPG key for the repository
        :param str registration_command_remote_execution_interface: Identifier of the Host interface for Remote execution
        :param bool registration_command_setup_remote_execution_pull: Set 'host_registration_remote_execution_pull' parameter for the host. If it is set to true, pull provider client will be deployed on the host
        :param str registration_command_activation_key: Activation key for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. For multiple keys use `activation_keys` param instead.
        :param list[str] registration_command_activation_keys: Activation keys for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. Required only if host group has no activation keys.
        :param float registration_command_lifecycle_environment_id: Lifecycle environment for the host.
        :param bool registration_command_force: Clear any previous registration and run subscription-manager with --force.
        :param bool registration_command_ignore_subman_errors: Ignore subscription-manager errors for `subscription-manager register` command
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_registration_commands_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_registration_commands_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def post_registration_commands_with_http_info(self, **kwargs):  # noqa: E501
        """Generate global registration command  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_registration_commands_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param float registration_command_organization_id: ID of the Organization to register the host in
        :param float registration_command_location_id: ID of the Location to register the host in
        :param float registration_command_hostgroup_id: ID of the Host group to register the host in
        :param float registration_command_operatingsystem_id: ID of the Operating System to register the host in. Operating system must have a `host_init_config` template assigned
        :param float registration_command_smart_proxy_id: ID of the Smart Proxy. This Proxy must have enabled both the 'Templates' and 'Registration' features
        :param bool registration_command_setup_insights: Set 'host_registration_insights' parameter for the host. If it is set to true, insights client will be installed and registered on Red Hat family operating systems
        :param bool registration_command_setup_remote_execution: Set 'host_registration_remote_execution' parameter for the host. If it is set to true, SSH keys will be installed on the host
        :param float registration_command_jwt_expiration: Expiration of the authorization token (in hours)
        :param bool registration_command_insecure: Enable insecure argument for the initial curl
        :param str registration_command_packages: Packages to install on the host when registered. Can be set by `host_packages` parameter, example: `pkg1 pkg2`
        :param bool registration_command_update_packages: Update all packages on the host
        :param str registration_command_repo: Repository URL / details, for example for Debian OS family: 'deb http://deb.example.com/ buster 1.0', for Red Hat and SUSE OS family: 'http://yum.theforeman.org/client/latest/el8/x86_64/'
        :param str registration_command_repo_gpg_key_url: URL of the GPG key for the repository
        :param str registration_command_remote_execution_interface: Identifier of the Host interface for Remote execution
        :param bool registration_command_setup_remote_execution_pull: Set 'host_registration_remote_execution_pull' parameter for the host. If it is set to true, pull provider client will be deployed on the host
        :param str registration_command_activation_key: Activation key for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. For multiple keys use `activation_keys` param instead.
        :param list[str] registration_command_activation_keys: Activation keys for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. Required only if host group has no activation keys.
        :param float registration_command_lifecycle_environment_id: Lifecycle environment for the host.
        :param bool registration_command_force: Clear any previous registration and run subscription-manager with --force.
        :param bool registration_command_ignore_subman_errors: Ignore subscription-manager errors for `subscription-manager register` command
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "registration_command_organization_id",
            "registration_command_location_id",
            "registration_command_hostgroup_id",
            "registration_command_operatingsystem_id",
            "registration_command_smart_proxy_id",
            "registration_command_setup_insights",
            "registration_command_setup_remote_execution",
            "registration_command_jwt_expiration",
            "registration_command_insecure",
            "registration_command_packages",
            "registration_command_update_packages",
            "registration_command_repo",
            "registration_command_repo_gpg_key_url",
            "registration_command_remote_execution_interface",
            "registration_command_setup_remote_execution_pull",
            "registration_command_activation_key",
            "registration_command_activation_keys",
            "registration_command_lifecycle_environment_id",
            "registration_command_force",
            "registration_command_ignore_subman_errors",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_registration_commands" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "registration_command_organization_id" in params:
            form_params.append(
                (
                    "registration_command[organization_id]",
                    params["registration_command_organization_id"],
                )
            )  # noqa: E501
        if "registration_command_location_id" in params:
            form_params.append(
                (
                    "registration_command[location_id]",
                    params["registration_command_location_id"],
                )
            )  # noqa: E501
        if "registration_command_hostgroup_id" in params:
            form_params.append(
                (
                    "registration_command[hostgroup_id]",
                    params["registration_command_hostgroup_id"],
                )
            )  # noqa: E501
        if "registration_command_operatingsystem_id" in params:
            form_params.append(
                (
                    "registration_command[operatingsystem_id]",
                    params["registration_command_operatingsystem_id"],
                )
            )  # noqa: E501
        if "registration_command_smart_proxy_id" in params:
            form_params.append(
                (
                    "registration_command[smart_proxy_id]",
                    params["registration_command_smart_proxy_id"],
                )
            )  # noqa: E501
        if "registration_command_setup_insights" in params:
            form_params.append(
                (
                    "registration_command[setup_insights]",
                    params["registration_command_setup_insights"],
                )
            )  # noqa: E501
        if "registration_command_setup_remote_execution" in params:
            form_params.append(
                (
                    "registration_command[setup_remote_execution]",
                    params["registration_command_setup_remote_execution"],
                )
            )  # noqa: E501
        if "registration_command_jwt_expiration" in params:
            form_params.append(
                (
                    "registration_command[jwt_expiration]",
                    params["registration_command_jwt_expiration"],
                )
            )  # noqa: E501
        if "registration_command_insecure" in params:
            form_params.append(
                (
                    "registration_command[insecure]",
                    params["registration_command_insecure"],
                )
            )  # noqa: E501
        if "registration_command_packages" in params:
            form_params.append(
                (
                    "registration_command[packages]",
                    params["registration_command_packages"],
                )
            )  # noqa: E501
        if "registration_command_update_packages" in params:
            form_params.append(
                (
                    "registration_command[update_packages]",
                    params["registration_command_update_packages"],
                )
            )  # noqa: E501
        if "registration_command_repo" in params:
            form_params.append(
                ("registration_command[repo]", params["registration_command_repo"])
            )  # noqa: E501
        if "registration_command_repo_gpg_key_url" in params:
            form_params.append(
                (
                    "registration_command[repo_gpg_key_url]",
                    params["registration_command_repo_gpg_key_url"],
                )
            )  # noqa: E501
        if "registration_command_remote_execution_interface" in params:
            form_params.append(
                (
                    "registration_command[remote_execution_interface]",
                    params["registration_command_remote_execution_interface"],
                )
            )  # noqa: E501
        if "registration_command_setup_remote_execution_pull" in params:
            form_params.append(
                (
                    "registration_command[setup_remote_execution_pull]",
                    params["registration_command_setup_remote_execution_pull"],
                )
            )  # noqa: E501
        if "registration_command_activation_key" in params:
            form_params.append(
                (
                    "registration_command[activation_key]",
                    params["registration_command_activation_key"],
                )
            )  # noqa: E501
        if "registration_command_activation_keys" in params:
            form_params.append(
                (
                    "registration_command[activation_keys]",
                    params["registration_command_activation_keys"],
                )
            )  # noqa: E501
            collection_formats[
                "registration_command[activation_keys]"
            ] = "csv"  # noqa: E501
        if "registration_command_lifecycle_environment_id" in params:
            form_params.append(
                (
                    "registration_command[lifecycle_environment_id]",
                    params["registration_command_lifecycle_environment_id"],
                )
            )  # noqa: E501
        if "registration_command_force" in params:
            form_params.append(
                ("registration_command[force]", params["registration_command_force"])
            )  # noqa: E501
        if "registration_command_ignore_subman_errors" in params:
            form_params.append(
                (
                    "registration_command[ignore_subman_errors]",
                    params["registration_command_ignore_subman_errors"],
                )
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/registration_commands",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
