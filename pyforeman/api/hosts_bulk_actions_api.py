# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class HostsBulkActionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_hosts_bulk(self, organization_id, **kwargs):  # noqa: E501
        """Delete multiple hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_bulk(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string describing which hosts to perform the action on
        :param list[str] included_ids: List of host ids to perform the action on
        :param list[str] excluded_ids: List of host ids to exclude and not perform the action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_hosts_bulk_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_hosts_bulk_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def delete_hosts_bulk_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Delete multiple hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hosts_bulk_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string describing which hosts to perform the action on
        :param list[str] included_ids: List of host ids to perform the action on
        :param list[str] excluded_ids: List of host ids to exclude and not perform the action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hosts_bulk" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_hosts_bulk`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hosts_bulk_applicable_errata(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Fetch applicable errata for one or more hosts.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_bulk_applicable_errata(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hosts_bulk_applicable_errata_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hosts_bulk_applicable_errata_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def post_hosts_bulk_applicable_errata_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Fetch applicable errata for one or more hosts.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_bulk_applicable_errata_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hosts_bulk_applicable_errata" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_hosts_bulk_applicable_errata`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/applicable_errata",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hosts_bulk_available_incremental_updates(
        self, organization_id, errata_ids, **kwargs
    ):  # noqa: E501
        """Given a set of hosts and errata, lists the content view versions and environments that need updating.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_bulk_available_incremental_updates(organization_id, errata_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param list[str] errata_ids: List of Errata ids (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hosts_bulk_available_incremental_updates_with_http_info(
                organization_id, errata_ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hosts_bulk_available_incremental_updates_with_http_info(
                organization_id, errata_ids, **kwargs
            )  # noqa: E501
            return data

    def post_hosts_bulk_available_incremental_updates_with_http_info(
        self, organization_id, errata_ids, **kwargs
    ):  # noqa: E501
        """Given a set of hosts and errata, lists the content view versions and environments that need updating.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_bulk_available_incremental_updates_with_http_info(organization_id, errata_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param list[str] errata_ids: List of Errata ids (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "errata_ids",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hosts_bulk_available_incremental_updates" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_hosts_bulk_available_incremental_updates`"
            )  # noqa: E501
        # verify the required parameter 'errata_ids' is set
        if self.api_client.client_side_validation and (
            "errata_ids" not in params or params["errata_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `errata_ids` when calling `post_hosts_bulk_available_incremental_updates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "errata_ids" in params:
            form_params.append(("errata_ids", params["errata_ids"]))  # noqa: E501
            collection_formats["errata_ids"] = "csv"  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/available_incremental_updates",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hosts_bulk_installable_errata(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Fetch installable errata for one or more hosts.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_bulk_installable_errata(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hosts_bulk_installable_errata_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hosts_bulk_installable_errata_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def post_hosts_bulk_installable_errata_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Fetch installable errata for one or more hosts.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_bulk_installable_errata_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hosts_bulk_installable_errata" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_hosts_bulk_installable_errata`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/installable_errata",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hosts_bulk_module_streams(self, organization_id, **kwargs):  # noqa: E501
        """Fetch available module streams for hosts.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_bulk_module_streams(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hosts_bulk_module_streams_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hosts_bulk_module_streams_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def post_hosts_bulk_module_streams_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Fetch available module streams for hosts.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_bulk_module_streams_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hosts_bulk_module_streams" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_hosts_bulk_module_streams`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/module_streams",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hosts_bulk_traces(self, organization_id, **kwargs):  # noqa: E501
        """Fetch traces for one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_bulk_traces(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hosts_bulk_traces_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hosts_bulk_traces_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def post_hosts_bulk_traces_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Fetch traces for one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hosts_bulk_traces_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hosts_bulk_traces" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_hosts_bulk_traces`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/traces",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_add_host_collections(
        self, organization_id, host_collection_ids, **kwargs
    ):  # noqa: E501
        """Add one or more host collections to one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_add_host_collections(organization_id, host_collection_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param list[str] host_collection_ids: List of host collection ids (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_add_host_collections_with_http_info(
                organization_id, host_collection_ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_add_host_collections_with_http_info(
                organization_id, host_collection_ids, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_add_host_collections_with_http_info(
        self, organization_id, host_collection_ids, **kwargs
    ):  # noqa: E501
        """Add one or more host collections to one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_add_host_collections_with_http_info(organization_id, host_collection_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param list[str] host_collection_ids: List of host collection ids (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "host_collection_ids",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_add_host_collections" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_bulk_add_host_collections`"
            )  # noqa: E501
        # verify the required parameter 'host_collection_ids' is set
        if self.api_client.client_side_validation and (
            "host_collection_ids" not in params or params["host_collection_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_collection_ids` when calling `put_hosts_bulk_add_host_collections`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "host_collection_ids" in params:
            form_params.append(
                ("host_collection_ids", params["host_collection_ids"])
            )  # noqa: E501
            collection_formats["host_collection_ids"] = "csv"  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/add_host_collections",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_add_subscriptions(
        self, organization_id, subscriptions, **kwargs
    ):  # noqa: E501
        """Add subscriptions to one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_add_subscriptions(organization_id, subscriptions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param list[str] subscriptions: Array of subscriptions to add (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_add_subscriptions_with_http_info(
                organization_id, subscriptions, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_add_subscriptions_with_http_info(
                organization_id, subscriptions, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_add_subscriptions_with_http_info(
        self, organization_id, subscriptions, **kwargs
    ):  # noqa: E501
        """Add subscriptions to one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_add_subscriptions_with_http_info(organization_id, subscriptions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param list[str] subscriptions: Array of subscriptions to add (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "subscriptions",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_add_subscriptions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_bulk_add_subscriptions`"
            )  # noqa: E501
        # verify the required parameter 'subscriptions' is set
        if self.api_client.client_side_validation and (
            "subscriptions" not in params or params["subscriptions"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subscriptions` when calling `put_hosts_bulk_add_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subscriptions" in params:
            form_params.append(("subscriptions", params["subscriptions"]))  # noqa: E501
            collection_formats["subscriptions"] = "csv"  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/add_subscriptions",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_auto_attach(self, organization_id, **kwargs):  # noqa: E501
        """Trigger an auto-attach of subscriptions on one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_auto_attach(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_auto_attach_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_auto_attach_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_auto_attach_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Trigger an auto-attach of subscriptions on one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_auto_attach_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_auto_attach" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_bulk_auto_attach`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/auto_attach",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_change_content_source(
        self, host_ids, environment_id, content_view_id, content_source_id, **kwargs
    ):  # noqa: E501
        """Update the content source for specified hosts and generate the reconfiguration script  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_change_content_source(host_ids, environment_id, content_view_id, content_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] host_ids: The ids of the hosts to alter. Hosts not managed by Katello are ignored (required)
        :param float environment_id: The id of the lifecycle environment (required)
        :param float content_view_id: The id of the content view (required)
        :param float content_source_id: The id of the content source (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_change_content_source_with_http_info(
                host_ids, environment_id, content_view_id, content_source_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_change_content_source_with_http_info(
                host_ids, environment_id, content_view_id, content_source_id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_change_content_source_with_http_info(
        self, host_ids, environment_id, content_view_id, content_source_id, **kwargs
    ):  # noqa: E501
        """Update the content source for specified hosts and generate the reconfiguration script  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_change_content_source_with_http_info(host_ids, environment_id, content_view_id, content_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] host_ids: The ids of the hosts to alter. Hosts not managed by Katello are ignored (required)
        :param float environment_id: The id of the lifecycle environment (required)
        :param float content_view_id: The id of the content view (required)
        :param float content_source_id: The id of the content source (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "host_ids",
            "environment_id",
            "content_view_id",
            "content_source_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_change_content_source" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host_ids' is set
        if self.api_client.client_side_validation and (
            "host_ids" not in params or params["host_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_ids` when calling `put_hosts_bulk_change_content_source`"
            )  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and (
            "environment_id" not in params or params["environment_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `environment_id` when calling `put_hosts_bulk_change_content_source`"
            )  # noqa: E501
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `put_hosts_bulk_change_content_source`"
            )  # noqa: E501
        # verify the required parameter 'content_source_id' is set
        if self.api_client.client_side_validation and (
            "content_source_id" not in params or params["content_source_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_source_id` when calling `put_hosts_bulk_change_content_source`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "host_ids" in params:
            form_params.append(("host_ids", params["host_ids"]))  # noqa: E501
            collection_formats["host_ids"] = "csv"  # noqa: E501
        if "environment_id" in params:
            form_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "content_view_id" in params:
            form_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "content_source_id" in params:
            form_params.append(
                ("content_source_id", params["content_source_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/change_content_source",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_content_overrides(self, organization_id, **kwargs):  # noqa: E501
        """Set content overrides to one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_content_overrides(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :param list[str] content_overrides: Array of Content override parameters
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_content_overrides_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_content_overrides_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_content_overrides_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Set content overrides to one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_content_overrides_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :param list[str] content_overrides: Array of Content override parameters
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
            "content_overrides",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_content_overrides" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_bulk_content_overrides`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501
        if "content_overrides" in params:
            form_params.append(
                ("content_overrides", params["content_overrides"])
            )  # noqa: E501
            collection_formats["content_overrides"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/content_overrides",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_destroy(self, organization_id, **kwargs):  # noqa: E501
        """Destroy one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_destroy(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_destroy_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_destroy_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_destroy_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Destroy one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_destroy_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_destroy" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_bulk_destroy`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/destroy",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_environment_content_view(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Assign the environment and content view to one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_environment_content_view(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :param float environment_id:
        :param float content_view_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_environment_content_view_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_environment_content_view_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_environment_content_view_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Assign the environment and content view to one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_environment_content_view_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :param float environment_id:
        :param float content_view_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
            "environment_id",
            "content_view_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_environment_content_view" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_bulk_environment_content_view`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501
        if "environment_id" in params:
            form_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "content_view_id" in params:
            form_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/environment_content_view",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_release_version(self, organization_id, **kwargs):  # noqa: E501
        """Assign the release version to one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_release_version(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :param str release_version: content release version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_release_version_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_release_version_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_release_version_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Assign the release version to one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_release_version_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :param str release_version: content release version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
            "release_version",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_release_version" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_bulk_release_version`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501
        if "release_version" in params:
            form_params.append(
                ("release_version", params["release_version"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/release_version",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_remove_host_collections(
        self, organization_id, host_collection_ids, **kwargs
    ):  # noqa: E501
        """Remove one or more host collections from one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_remove_host_collections(organization_id, host_collection_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param list[str] host_collection_ids: List of host collection ids (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_remove_host_collections_with_http_info(
                organization_id, host_collection_ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_remove_host_collections_with_http_info(
                organization_id, host_collection_ids, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_remove_host_collections_with_http_info(
        self, organization_id, host_collection_ids, **kwargs
    ):  # noqa: E501
        """Remove one or more host collections from one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_remove_host_collections_with_http_info(organization_id, host_collection_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param list[str] host_collection_ids: List of host collection ids (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "host_collection_ids",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_remove_host_collections" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_bulk_remove_host_collections`"
            )  # noqa: E501
        # verify the required parameter 'host_collection_ids' is set
        if self.api_client.client_side_validation and (
            "host_collection_ids" not in params or params["host_collection_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `host_collection_ids` when calling `put_hosts_bulk_remove_host_collections`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "host_collection_ids" in params:
            form_params.append(
                ("host_collection_ids", params["host_collection_ids"])
            )  # noqa: E501
            collection_formats["host_collection_ids"] = "csv"  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/remove_host_collections",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_remove_subscriptions(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Remove subscriptions from one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_remove_subscriptions(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :param list[str] subscriptions: Array of subscriptions to remove
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_remove_subscriptions_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_remove_subscriptions_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_remove_subscriptions_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Remove subscriptions from one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_remove_subscriptions_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :param list[str] subscriptions: Array of subscriptions to remove
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
            "subscriptions",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_remove_subscriptions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_bulk_remove_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501
        if "subscriptions" in params:
            form_params.append(("subscriptions", params["subscriptions"]))  # noqa: E501
            collection_formats["subscriptions"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/remove_subscriptions",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_resolve_traces(
        self, organization_id, trace_ids, **kwargs
    ):  # noqa: E501
        """Resolve traces for one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_resolve_traces(organization_id, trace_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param list[str] trace_ids: Array of Trace IDs (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_resolve_traces_with_http_info(
                organization_id, trace_ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_resolve_traces_with_http_info(
                organization_id, trace_ids, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_resolve_traces_with_http_info(
        self, organization_id, trace_ids, **kwargs
    ):  # noqa: E501
        """Resolve traces for one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_resolve_traces_with_http_info(organization_id, trace_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param list[str] trace_ids: Array of Trace IDs (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "trace_ids",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_resolve_traces" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_bulk_resolve_traces`"
            )  # noqa: E501
        # verify the required parameter 'trace_ids' is set
        if self.api_client.client_side_validation and (
            "trace_ids" not in params or params["trace_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `trace_ids` when calling `put_hosts_bulk_resolve_traces`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "trace_ids" in params:
            form_params.append(("trace_ids", params["trace_ids"]))  # noqa: E501
            collection_formats["trace_ids"] = "csv"  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/resolve_traces",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hosts_bulk_system_purpose(self, organization_id, **kwargs):  # noqa: E501
        """Assign system purpose attributes on one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_system_purpose(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :param str service_level: Service level of host
        :param str purpose_role: Role of host
        :param str purpose_usage: Usage of host
        :param list[str] purpose_addons: Sets the system add-ons
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hosts_bulk_system_purpose_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hosts_bulk_system_purpose_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_hosts_bulk_system_purpose_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Assign system purpose attributes on one or more hosts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hosts_bulk_system_purpose_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param float location_id: Set the current location context for the request
        :param str included_search: Search string for hosts to perform an action on
        :param list[str] included_ids: List of host ids to perform an action on
        :param list[str] excluded_ids: List of host ids to exclude and not run an action on
        :param str service_level: Service level of host
        :param str purpose_role: Role of host
        :param str purpose_usage: Usage of host
        :param list[str] purpose_addons: Sets the system add-ons
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "included_search",
            "included_ids",
            "excluded_ids",
            "service_level",
            "purpose_role",
            "purpose_usage",
            "purpose_addons",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hosts_bulk_system_purpose" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_hosts_bulk_system_purpose`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "included_search" in params:
            form_params.append(
                ("included[search]", params["included_search"])
            )  # noqa: E501
        if "included_ids" in params:
            form_params.append(("included[ids]", params["included_ids"]))  # noqa: E501
            collection_formats["included[ids]"] = "csv"  # noqa: E501
        if "excluded_ids" in params:
            form_params.append(("excluded[ids]", params["excluded_ids"]))  # noqa: E501
            collection_formats["excluded[ids]"] = "csv"  # noqa: E501
        if "service_level" in params:
            form_params.append(("service_level", params["service_level"]))  # noqa: E501
        if "purpose_role" in params:
            form_params.append(("purpose_role", params["purpose_role"]))  # noqa: E501
        if "purpose_usage" in params:
            form_params.append(("purpose_usage", params["purpose_usage"]))  # noqa: E501
        if "purpose_addons" in params:
            form_params.append(
                ("purpose_addons", params["purpose_addons"])
            )  # noqa: E501
            collection_formats["purpose_addons"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hosts/bulk/system_purpose",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
