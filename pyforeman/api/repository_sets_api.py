# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class RepositorySetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_products_product_id_repository_sets(
        self, product_id, **kwargs
    ):  # noqa: E501
        """List repository sets for a product.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products_product_id_repository_sets(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float product_id: ID of a product to list repository sets from (required)
        :param str name: Repository set name to search on
        :param bool enabled: If true, only return repository sets that have been enabled. Defaults to false
        :param bool with_active_subscription: If true, only return repository sets that are associated with an active subscriptions
        :param float organization_id: organization identifier
        :param bool with_custom: If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied.
        :param float activation_key_id: activation key identifier
        :param float host_id: Id of the host
        :param bool content_access_mode_all: Get all content available, not just that provided by subscriptions.
        :param bool content_access_mode_env: Limit content to just that available in the host's or activation key's content view version and lifecycle environment.
        :param str status: Limit content to enabled / disabled / overridden
        :param str repository_type: Limit content to Red Hat / custom
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_products_product_id_repository_sets_with_http_info(
                product_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_products_product_id_repository_sets_with_http_info(
                product_id, **kwargs
            )  # noqa: E501
            return data

    def get_products_product_id_repository_sets_with_http_info(
        self, product_id, **kwargs
    ):  # noqa: E501
        """List repository sets for a product.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products_product_id_repository_sets_with_http_info(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float product_id: ID of a product to list repository sets from (required)
        :param str name: Repository set name to search on
        :param bool enabled: If true, only return repository sets that have been enabled. Defaults to false
        :param bool with_active_subscription: If true, only return repository sets that are associated with an active subscriptions
        :param float organization_id: organization identifier
        :param bool with_custom: If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied.
        :param float activation_key_id: activation key identifier
        :param float host_id: Id of the host
        :param bool content_access_mode_all: Get all content available, not just that provided by subscriptions.
        :param bool content_access_mode_env: Limit content to just that available in the host's or activation key's content view version and lifecycle environment.
        :param str status: Limit content to enabled / disabled / overridden
        :param str repository_type: Limit content to Red Hat / custom
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "product_id",
            "name",
            "enabled",
            "with_active_subscription",
            "organization_id",
            "with_custom",
            "activation_key_id",
            "host_id",
            "content_access_mode_all",
            "content_access_mode_env",
            "status",
            "repository_type",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products_product_id_repository_sets" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and (
            "product_id" not in params or params["product_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_id` when calling `get_products_product_id_repository_sets`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "product_id" in params:
            path_params["product_id"] = params["product_id"]  # noqa: E501

        query_params = []
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "enabled" in params:
            query_params.append(("enabled", params["enabled"]))  # noqa: E501
        if "with_active_subscription" in params:
            query_params.append(
                ("with_active_subscription", params["with_active_subscription"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "with_custom" in params:
            query_params.append(("with_custom", params["with_custom"]))  # noqa: E501
        if "activation_key_id" in params:
            query_params.append(
                ("activation_key_id", params["activation_key_id"])
            )  # noqa: E501
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "content_access_mode_all" in params:
            query_params.append(
                ("content_access_mode_all", params["content_access_mode_all"])
            )  # noqa: E501
        if "content_access_mode_env" in params:
            query_params.append(
                ("content_access_mode_env", params["content_access_mode_env"])
            )  # noqa: E501
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
        if "repository_type" in params:
            query_params.append(
                ("repository_type", params["repository_type"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/{product_id}/repository_sets",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_products_product_id_repository_sets_id(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Get info about a repository set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products_product_id_repository_sets_id(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set (required)
        :param float product_id: ID of a product to list repository sets from (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_products_product_id_repository_sets_id_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_products_product_id_repository_sets_id_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
            return data

    def get_products_product_id_repository_sets_id_with_http_info(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Get info about a repository set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products_product_id_repository_sets_id_with_http_info(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set (required)
        :param float product_id: ID of a product to list repository sets from (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "product_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products_product_id_repository_sets_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_products_product_id_repository_sets_id`"
            )  # noqa: E501
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and (
            "product_id" not in params or params["product_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_id` when calling `get_products_product_id_repository_sets_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "product_id" in params:
            path_params["product_id"] = params["product_id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/{product_id}/repository_sets/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_products_product_id_repository_sets_id_available_repositories(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Get list of available repositories for the repository set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products_product_id_repository_sets_id_available_repositories(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set (required)
        :param float product_id: ID of a product to list repository sets from (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_products_product_id_repository_sets_id_available_repositories_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_products_product_id_repository_sets_id_available_repositories_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
            return data

    def get_products_product_id_repository_sets_id_available_repositories_with_http_info(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Get list of available repositories for the repository set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products_product_id_repository_sets_id_available_repositories_with_http_info(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set (required)
        :param float product_id: ID of a product to list repository sets from (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "product_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products_product_id_repository_sets_id_available_repositories"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_products_product_id_repository_sets_id_available_repositories`"
            )  # noqa: E501
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and (
            "product_id" not in params or params["product_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_id` when calling `get_products_product_id_repository_sets_id_available_repositories`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "product_id" in params:
            path_params["product_id"] = params["product_id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/{product_id}/repository_sets/{id}/available_repositories",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository_sets(self, product_id, **kwargs):  # noqa: E501
        """List repository sets.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository_sets(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float product_id: ID of a product to list repository sets from (required)
        :param str name: Repository set name to search on
        :param bool enabled: If true, only return repository sets that have been enabled. Defaults to false
        :param bool with_active_subscription: If true, only return repository sets that are associated with an active subscriptions
        :param float organization_id: organization identifier
        :param bool with_custom: If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied.
        :param float activation_key_id: activation key identifier
        :param float host_id: Id of the host
        :param bool content_access_mode_all: Get all content available, not just that provided by subscriptions.
        :param bool content_access_mode_env: Limit content to just that available in the host's or activation key's content view version and lifecycle environment.
        :param str status: Limit content to enabled / disabled / overridden
        :param str repository_type: Limit content to Red Hat / custom
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository_sets_with_http_info(
                product_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository_sets_with_http_info(
                product_id, **kwargs
            )  # noqa: E501
            return data

    def get_repository_sets_with_http_info(self, product_id, **kwargs):  # noqa: E501
        """List repository sets.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository_sets_with_http_info(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float product_id: ID of a product to list repository sets from (required)
        :param str name: Repository set name to search on
        :param bool enabled: If true, only return repository sets that have been enabled. Defaults to false
        :param bool with_active_subscription: If true, only return repository sets that are associated with an active subscriptions
        :param float organization_id: organization identifier
        :param bool with_custom: If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied.
        :param float activation_key_id: activation key identifier
        :param float host_id: Id of the host
        :param bool content_access_mode_all: Get all content available, not just that provided by subscriptions.
        :param bool content_access_mode_env: Limit content to just that available in the host's or activation key's content view version and lifecycle environment.
        :param str status: Limit content to enabled / disabled / overridden
        :param str repository_type: Limit content to Red Hat / custom
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "product_id",
            "name",
            "enabled",
            "with_active_subscription",
            "organization_id",
            "with_custom",
            "activation_key_id",
            "host_id",
            "content_access_mode_all",
            "content_access_mode_env",
            "status",
            "repository_type",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository_sets" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and (
            "product_id" not in params or params["product_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_id` when calling `get_repository_sets`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "product_id" in params:
            query_params.append(("product_id", params["product_id"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "enabled" in params:
            query_params.append(("enabled", params["enabled"]))  # noqa: E501
        if "with_active_subscription" in params:
            query_params.append(
                ("with_active_subscription", params["with_active_subscription"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "with_custom" in params:
            query_params.append(("with_custom", params["with_custom"]))  # noqa: E501
        if "activation_key_id" in params:
            query_params.append(
                ("activation_key_id", params["activation_key_id"])
            )  # noqa: E501
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "content_access_mode_all" in params:
            query_params.append(
                ("content_access_mode_all", params["content_access_mode_all"])
            )  # noqa: E501
        if "content_access_mode_env" in params:
            query_params.append(
                ("content_access_mode_env", params["content_access_mode_env"])
            )  # noqa: E501
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
        if "repository_type" in params:
            query_params.append(
                ("repository_type", params["repository_type"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/repository_sets",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository_sets_id(self, id, product_id, **kwargs):  # noqa: E501
        """Get info about a repository set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository_sets_id(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set (required)
        :param float product_id: ID of a product to list repository sets from (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository_sets_id_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository_sets_id_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
            return data

    def get_repository_sets_id_with_http_info(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Get info about a repository set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository_sets_id_with_http_info(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set (required)
        :param float product_id: ID of a product to list repository sets from (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "product_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository_sets_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_repository_sets_id`"
            )  # noqa: E501
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and (
            "product_id" not in params or params["product_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_id` when calling `get_repository_sets_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "product_id" in params:
            query_params.append(("product_id", params["product_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/repository_sets/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository_sets_id_available_repositories(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Get list of available repositories for the repository set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository_sets_id_available_repositories(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set (required)
        :param float product_id: ID of a product to list repository sets from (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository_sets_id_available_repositories_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository_sets_id_available_repositories_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
            return data

    def get_repository_sets_id_available_repositories_with_http_info(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Get list of available repositories for the repository set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository_sets_id_available_repositories_with_http_info(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set (required)
        :param float product_id: ID of a product to list repository sets from (required)
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "product_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository_sets_id_available_repositories" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_repository_sets_id_available_repositories`"
            )  # noqa: E501
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and (
            "product_id" not in params or params["product_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_id` when calling `get_repository_sets_id_available_repositories`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "product_id" in params:
            query_params.append(("product_id", params["product_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/repository_sets/{id}/available_repositories",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_products_product_id_repository_sets_id_disable(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Disable a repository from the set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_product_id_repository_sets_id_disable(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set to disable (required)
        :param float product_id: ID of the product containing the repository set (required)
        :param float repository_id: ID of the repository within the set to disable
        :param str basearch: Basearch to disable
        :param str releasever: Releasever to disable
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.put_products_product_id_repository_sets_id_disable_with_http_info(
                    id, product_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_products_product_id_repository_sets_id_disable_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
            return data

    def put_products_product_id_repository_sets_id_disable_with_http_info(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Disable a repository from the set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_product_id_repository_sets_id_disable_with_http_info(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set to disable (required)
        :param float product_id: ID of the product containing the repository set (required)
        :param float repository_id: ID of the repository within the set to disable
        :param str basearch: Basearch to disable
        :param str releasever: Releasever to disable
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "product_id",
            "repository_id",
            "basearch",
            "releasever",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_products_product_id_repository_sets_id_disable"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_products_product_id_repository_sets_id_disable`"
            )  # noqa: E501
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and (
            "product_id" not in params or params["product_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_id` when calling `put_products_product_id_repository_sets_id_disable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "product_id" in params:
            path_params["product_id"] = params["product_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "repository_id" in params:
            form_params.append(("repository_id", params["repository_id"]))  # noqa: E501
        if "basearch" in params:
            form_params.append(("basearch", params["basearch"]))  # noqa: E501
        if "releasever" in params:
            form_params.append(("releasever", params["releasever"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/{product_id}/repository_sets/{id}/disable",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_products_product_id_repository_sets_id_enable(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Enable a repository from the set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_product_id_repository_sets_id_enable(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set to enable (required)
        :param float product_id: ID of the product containing the repository set (required)
        :param str basearch: Basearch to enable
        :param str releasever: Releasever to enable
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.put_products_product_id_repository_sets_id_enable_with_http_info(
                    id, product_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_products_product_id_repository_sets_id_enable_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
            return data

    def put_products_product_id_repository_sets_id_enable_with_http_info(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Enable a repository from the set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_product_id_repository_sets_id_enable_with_http_info(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set to enable (required)
        :param float product_id: ID of the product containing the repository set (required)
        :param str basearch: Basearch to enable
        :param str releasever: Releasever to enable
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "product_id",
            "basearch",
            "releasever",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_products_product_id_repository_sets_id_enable" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_products_product_id_repository_sets_id_enable`"
            )  # noqa: E501
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and (
            "product_id" not in params or params["product_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_id` when calling `put_products_product_id_repository_sets_id_enable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "product_id" in params:
            path_params["product_id"] = params["product_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "basearch" in params:
            form_params.append(("basearch", params["basearch"]))  # noqa: E501
        if "releasever" in params:
            form_params.append(("releasever", params["releasever"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/{product_id}/repository_sets/{id}/enable",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_repository_sets_id_disable(self, id, product_id, **kwargs):  # noqa: E501
        """Disable a repository from the set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_repository_sets_id_disable(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set to disable (required)
        :param float product_id: ID of the product containing the repository set (required)
        :param float repository_id: ID of the repository within the set to disable
        :param str basearch: Basearch to disable
        :param str releasever: Releasever to disable
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_repository_sets_id_disable_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_repository_sets_id_disable_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
            return data

    def put_repository_sets_id_disable_with_http_info(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Disable a repository from the set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_repository_sets_id_disable_with_http_info(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set to disable (required)
        :param float product_id: ID of the product containing the repository set (required)
        :param float repository_id: ID of the repository within the set to disable
        :param str basearch: Basearch to disable
        :param str releasever: Releasever to disable
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "product_id",
            "repository_id",
            "basearch",
            "releasever",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_repository_sets_id_disable" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_repository_sets_id_disable`"
            )  # noqa: E501
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and (
            "product_id" not in params or params["product_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_id` when calling `put_repository_sets_id_disable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "product_id" in params:
            form_params.append(("product_id", params["product_id"]))  # noqa: E501
        if "repository_id" in params:
            form_params.append(("repository_id", params["repository_id"]))  # noqa: E501
        if "basearch" in params:
            form_params.append(("basearch", params["basearch"]))  # noqa: E501
        if "releasever" in params:
            form_params.append(("releasever", params["releasever"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/repository_sets/{id}/disable",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_repository_sets_id_enable(self, id, product_id, **kwargs):  # noqa: E501
        """Enable a repository from the set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_repository_sets_id_enable(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set to enable (required)
        :param float product_id: ID of the product containing the repository set (required)
        :param str basearch: Basearch to enable
        :param str releasever: Releasever to enable
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_repository_sets_id_enable_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_repository_sets_id_enable_with_http_info(
                id, product_id, **kwargs
            )  # noqa: E501
            return data

    def put_repository_sets_id_enable_with_http_info(
        self, id, product_id, **kwargs
    ):  # noqa: E501
        """Enable a repository from the set  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_repository_sets_id_enable_with_http_info(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: ID of the repository set to enable (required)
        :param float product_id: ID of the product containing the repository set (required)
        :param str basearch: Basearch to enable
        :param str releasever: Releasever to enable
        :param float organization_id: organization identifier
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "product_id",
            "basearch",
            "releasever",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_repository_sets_id_enable" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_repository_sets_id_enable`"
            )  # noqa: E501
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and (
            "product_id" not in params or params["product_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_id` when calling `put_repository_sets_id_enable`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "product_id" in params:
            form_params.append(("product_id", params["product_id"]))  # noqa: E501
        if "basearch" in params:
            form_params.append(("basearch", params["basearch"]))  # noqa: E501
        if "releasever" in params:
            form_params.append(("releasever", params["releasever"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/repository_sets/{id}/enable",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
