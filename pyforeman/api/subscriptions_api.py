# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class SubscriptionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_activation_keys_activation_key_id_subscriptions(
        self, activation_key_id, organization_id, **kwargs
    ):  # noqa: E501
        """List an activation key's subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_activation_key_id_subscriptions(activation_key_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activation_key_id: Activation key ID (required)
        :param float organization_id: Organization ID (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str host_id: id of a host
        :param str name: name of the subscription
        :param str available_for: Object to show subscriptions available for, either 'host' or 'activation_key'
        :param bool match_host: Ignore subscriptions that are unavailable to the specified host
        :param bool match_installed: Return subscriptions that match installed products of the specified host
        :param bool no_overlap: Return subscriptions which do not overlap with a currently-attached subscription
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_activation_keys_activation_key_id_subscriptions_with_http_info(
                    activation_key_id, organization_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_activation_keys_activation_key_id_subscriptions_with_http_info(
                activation_key_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_activation_keys_activation_key_id_subscriptions_with_http_info(
        self, activation_key_id, organization_id, **kwargs
    ):  # noqa: E501
        """List an activation key's subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_activation_key_id_subscriptions_with_http_info(activation_key_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activation_key_id: Activation key ID (required)
        :param float organization_id: Organization ID (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str host_id: id of a host
        :param str name: name of the subscription
        :param str available_for: Object to show subscriptions available for, either 'host' or 'activation_key'
        :param bool match_host: Ignore subscriptions that are unavailable to the specified host
        :param bool match_installed: Return subscriptions that match installed products of the specified host
        :param bool no_overlap: Return subscriptions which do not overlap with a currently-attached subscription
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "activation_key_id",
            "organization_id",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
            "host_id",
            "name",
            "available_for",
            "match_host",
            "match_installed",
            "no_overlap",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activation_keys_activation_key_id_subscriptions"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'activation_key_id' is set
        if self.api_client.client_side_validation and (
            "activation_key_id" not in params or params["activation_key_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `activation_key_id` when calling `get_activation_keys_activation_key_id_subscriptions`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_activation_keys_activation_key_id_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "activation_key_id" in params:
            path_params["activation_key_id"] = params["activation_key_id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501
        if "match_host" in params:
            query_params.append(("match_host", params["match_host"]))  # noqa: E501
        if "match_installed" in params:
            query_params.append(
                ("match_installed", params["match_installed"])
            )  # noqa: E501
        if "no_overlap" in params:
            query_params.append(("no_overlap", params["no_overlap"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{activation_key_id}/subscriptions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_subscriptions(
        self, organization_id, activation_key_id, **kwargs
    ):  # noqa: E501
        """List organization subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_subscriptions(organization_id, activation_key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str activation_key_id: Activation key ID (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str host_id: id of a host
        :param str name: name of the subscription
        :param str available_for: Object to show subscriptions available for, either 'host' or 'activation_key'
        :param bool match_host: Ignore subscriptions that are unavailable to the specified host
        :param bool match_installed: Return subscriptions that match installed products of the specified host
        :param bool no_overlap: Return subscriptions which do not overlap with a currently-attached subscription
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_subscriptions_with_http_info(
                organization_id, activation_key_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_subscriptions_with_http_info(
                organization_id, activation_key_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_subscriptions_with_http_info(
        self, organization_id, activation_key_id, **kwargs
    ):  # noqa: E501
        """List organization subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_subscriptions_with_http_info(organization_id, activation_key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str activation_key_id: Activation key ID (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str host_id: id of a host
        :param str name: name of the subscription
        :param str available_for: Object to show subscriptions available for, either 'host' or 'activation_key'
        :param bool match_host: Ignore subscriptions that are unavailable to the specified host
        :param bool match_installed: Return subscriptions that match installed products of the specified host
        :param bool no_overlap: Return subscriptions which do not overlap with a currently-attached subscription
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "activation_key_id",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
            "host_id",
            "name",
            "available_for",
            "match_host",
            "match_installed",
            "no_overlap",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_subscriptions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_subscriptions`"
            )  # noqa: E501
        # verify the required parameter 'activation_key_id' is set
        if self.api_client.client_side_validation and (
            "activation_key_id" not in params or params["activation_key_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `activation_key_id` when calling `get_organizations_organization_id_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "activation_key_id" in params:
            query_params.append(
                ("activation_key_id", params["activation_key_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501
        if "match_host" in params:
            query_params.append(("match_host", params["match_host"]))  # noqa: E501
        if "match_installed" in params:
            query_params.append(
                ("match_installed", params["match_installed"])
            )  # noqa: E501
        if "no_overlap" in params:
            query_params.append(("no_overlap", params["no_overlap"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscriptions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_subscriptions_id(
        self, organization_id, id, **kwargs
    ):  # noqa: E501
        """Show a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_subscriptions_id(organization_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization identifier (required)
        :param float id: Subscription identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_organizations_organization_id_subscriptions_id_with_http_info(
                    organization_id, id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_subscriptions_id_with_http_info(
                organization_id, id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_subscriptions_id_with_http_info(
        self, organization_id, id, **kwargs
    ):  # noqa: E501
        """Show a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_subscriptions_id_with_http_info(organization_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization identifier (required)
        :param float id: Subscription identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_subscriptions_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_subscriptions_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_organizations_organization_id_subscriptions_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscriptions/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_subscriptions_manifest_history(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """obtain manifest history for subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_subscriptions_manifest_history(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_subscriptions_manifest_history_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_subscriptions_manifest_history_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_subscriptions_manifest_history_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """obtain manifest history for subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_subscriptions_manifest_history_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_subscriptions_manifest_history"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_subscriptions_manifest_history`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscriptions/manifest_history",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_subscriptions(
        self, organization_id, activation_key_id, **kwargs
    ):  # noqa: E501
        """List subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscriptions(organization_id, activation_key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str activation_key_id: Activation key ID (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str host_id: id of a host
        :param str name: name of the subscription
        :param str available_for: Object to show subscriptions available for, either 'host' or 'activation_key'
        :param bool match_host: Ignore subscriptions that are unavailable to the specified host
        :param bool match_installed: Return subscriptions that match installed products of the specified host
        :param bool no_overlap: Return subscriptions which do not overlap with a currently-attached subscription
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_subscriptions_with_http_info(
                organization_id, activation_key_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_subscriptions_with_http_info(
                organization_id, activation_key_id, **kwargs
            )  # noqa: E501
            return data

    def get_subscriptions_with_http_info(
        self, organization_id, activation_key_id, **kwargs
    ):  # noqa: E501
        """List subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscriptions_with_http_info(organization_id, activation_key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str activation_key_id: Activation key ID (required)
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :param str host_id: id of a host
        :param str name: name of the subscription
        :param str available_for: Object to show subscriptions available for, either 'host' or 'activation_key'
        :param bool match_host: Ignore subscriptions that are unavailable to the specified host
        :param bool match_installed: Return subscriptions that match installed products of the specified host
        :param bool no_overlap: Return subscriptions which do not overlap with a currently-attached subscription
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "activation_key_id",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
            "host_id",
            "name",
            "available_for",
            "match_host",
            "match_installed",
            "no_overlap",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscriptions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_subscriptions`"
            )  # noqa: E501
        # verify the required parameter 'activation_key_id' is set
        if self.api_client.client_side_validation and (
            "activation_key_id" not in params or params["activation_key_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `activation_key_id` when calling `get_subscriptions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "activation_key_id" in params:
            query_params.append(
                ("activation_key_id", params["activation_key_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501
        if "host_id" in params:
            query_params.append(("host_id", params["host_id"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501
        if "match_host" in params:
            query_params.append(("match_host", params["match_host"]))  # noqa: E501
        if "match_installed" in params:
            query_params.append(
                ("match_installed", params["match_installed"])
            )  # noqa: E501
        if "no_overlap" in params:
            query_params.append(("no_overlap", params["no_overlap"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subscriptions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_subscriptions_id(self, id, organization_id, **kwargs):  # noqa: E501
        """Show a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscriptions_id(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Subscription identifier (required)
        :param float organization_id: Organization identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_subscriptions_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_subscriptions_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_subscriptions_id_with_http_info(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Show a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscriptions_id_with_http_info(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Subscription identifier (required)
        :param float organization_id: Organization identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscriptions_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_subscriptions_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_subscriptions_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subscriptions/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organizations_organization_id_subscriptions_delete_manifest(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Delete manifest from Red Hat provider  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_subscriptions_delete_manifest(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organizations_organization_id_subscriptions_delete_manifest_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.post_organizations_organization_id_subscriptions_delete_manifest_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def post_organizations_organization_id_subscriptions_delete_manifest_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Delete manifest from Red Hat provider  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_subscriptions_delete_manifest_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations_organization_id_subscriptions_delete_manifest"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organizations_organization_id_subscriptions_delete_manifest`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscriptions/delete_manifest",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organizations_organization_id_subscriptions_upload(
        self, organization_id, content, **kwargs
    ):  # noqa: E501
        """Upload a subscription manifest  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_subscriptions_upload(organization_id, content, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization id (required)
        :param file content: Subscription manifest file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organizations_organization_id_subscriptions_upload_with_http_info(
                organization_id, content, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.post_organizations_organization_id_subscriptions_upload_with_http_info(
                organization_id, content, **kwargs
            )  # noqa: E501
            return data

    def post_organizations_organization_id_subscriptions_upload_with_http_info(
        self, organization_id, content, **kwargs
    ):  # noqa: E501
        """Upload a subscription manifest  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_subscriptions_upload_with_http_info(organization_id, content, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization id (required)
        :param file content: Subscription manifest file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "content"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations_organization_id_subscriptions_upload"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organizations_organization_id_subscriptions_upload`"
            )  # noqa: E501
        # verify the required parameter 'content' is set
        if self.api_client.client_side_validation and (
            "content" not in params or params["content"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content` when calling `post_organizations_organization_id_subscriptions_upload`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "content" in params:
            local_var_files["content"] = params["content"]  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscriptions/upload",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_organization_id_subscriptions_refresh_manifest(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Refresh previously imported manifest for Red Hat provider  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_subscriptions_refresh_manifest(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organizations_organization_id_subscriptions_refresh_manifest_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_organizations_organization_id_subscriptions_refresh_manifest_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_organizations_organization_id_subscriptions_refresh_manifest_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """Refresh previously imported manifest for Red Hat provider  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_subscriptions_refresh_manifest_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_organization_id_subscriptions_refresh_manifest"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organizations_organization_id_subscriptions_refresh_manifest`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscriptions/refresh_manifest",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
