# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class ImagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_compute_resources_compute_resource_id_images_id(
        self, compute_resource_id, id, **kwargs
    ):  # noqa: E501
        """Delete an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_compute_resources_compute_resource_id_images_id(compute_resource_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_resource_id: (required)
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_compute_resources_compute_resource_id_images_id_with_http_info(
                compute_resource_id, id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_compute_resources_compute_resource_id_images_id_with_http_info(
                compute_resource_id, id, **kwargs
            )  # noqa: E501
            return data

    def delete_compute_resources_compute_resource_id_images_id_with_http_info(
        self, compute_resource_id, id, **kwargs
    ):  # noqa: E501
        """Delete an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_compute_resources_compute_resource_id_images_id_with_http_info(compute_resource_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_resource_id: (required)
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "compute_resource_id",
            "id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_compute_resources_compute_resource_id_images_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'compute_resource_id' is set
        if self.api_client.client_side_validation and (
            "compute_resource_id" not in params or params["compute_resource_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `compute_resource_id` when calling `delete_compute_resources_compute_resource_id_images_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_compute_resources_compute_resource_id_images_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "compute_resource_id" in params:
            path_params["compute_resource_id"] = params[
                "compute_resource_id"
            ]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{compute_resource_id}/images/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_architectures_architecture_id_images(
        self, architecture_id, compute_resource_id, operatingsystem_id, **kwargs
    ):  # noqa: E501
        """List all images for architecture  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_architectures_architecture_id_images(architecture_id, compute_resource_id, operatingsystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str architecture_id: ID of architecture (required)
        :param str compute_resource_id: ID of compute resource (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_architectures_architecture_id_images_with_http_info(
                architecture_id, compute_resource_id, operatingsystem_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_architectures_architecture_id_images_with_http_info(
                architecture_id, compute_resource_id, operatingsystem_id, **kwargs
            )  # noqa: E501
            return data

    def get_architectures_architecture_id_images_with_http_info(
        self, architecture_id, compute_resource_id, operatingsystem_id, **kwargs
    ):  # noqa: E501
        """List all images for architecture  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_architectures_architecture_id_images_with_http_info(architecture_id, compute_resource_id, operatingsystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str architecture_id: ID of architecture (required)
        :param str compute_resource_id: ID of compute resource (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "architecture_id",
            "compute_resource_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architectures_architecture_id_images" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'architecture_id' is set
        if self.api_client.client_side_validation and (
            "architecture_id" not in params or params["architecture_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `architecture_id` when calling `get_architectures_architecture_id_images`"
            )  # noqa: E501
        # verify the required parameter 'compute_resource_id' is set
        if self.api_client.client_side_validation and (
            "compute_resource_id" not in params or params["compute_resource_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `compute_resource_id` when calling `get_architectures_architecture_id_images`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_architectures_architecture_id_images`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "architecture_id" in params:
            path_params["architecture_id"] = params["architecture_id"]  # noqa: E501

        query_params = []
        if "compute_resource_id" in params:
            query_params.append(
                ("compute_resource_id", params["compute_resource_id"])
            )  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/architectures/{architecture_id}/images",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_architectures_architecture_id_images_id(
        self, id, architecture_id, compute_resource_id, operatingsystem_id, **kwargs
    ):  # noqa: E501
        """Show an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_architectures_architecture_id_images_id(id, architecture_id, compute_resource_id, operatingsystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str architecture_id: ID of architecture (required)
        :param str compute_resource_id: ID of compute resource (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_architectures_architecture_id_images_id_with_http_info(
                id, architecture_id, compute_resource_id, operatingsystem_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_architectures_architecture_id_images_id_with_http_info(
                id, architecture_id, compute_resource_id, operatingsystem_id, **kwargs
            )  # noqa: E501
            return data

    def get_architectures_architecture_id_images_id_with_http_info(
        self, id, architecture_id, compute_resource_id, operatingsystem_id, **kwargs
    ):  # noqa: E501
        """Show an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_architectures_architecture_id_images_id_with_http_info(id, architecture_id, compute_resource_id, operatingsystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str architecture_id: ID of architecture (required)
        :param str compute_resource_id: ID of compute resource (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "architecture_id",
            "compute_resource_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_architectures_architecture_id_images_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_architectures_architecture_id_images_id`"
            )  # noqa: E501
        # verify the required parameter 'architecture_id' is set
        if self.api_client.client_side_validation and (
            "architecture_id" not in params or params["architecture_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `architecture_id` when calling `get_architectures_architecture_id_images_id`"
            )  # noqa: E501
        # verify the required parameter 'compute_resource_id' is set
        if self.api_client.client_side_validation and (
            "compute_resource_id" not in params or params["compute_resource_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `compute_resource_id` when calling `get_architectures_architecture_id_images_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_architectures_architecture_id_images_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "architecture_id" in params:
            path_params["architecture_id"] = params["architecture_id"]  # noqa: E501

        query_params = []
        if "compute_resource_id" in params:
            query_params.append(
                ("compute_resource_id", params["compute_resource_id"])
            )  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/architectures/{architecture_id}/images/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_compute_resource_id_images(
        self, compute_resource_id, architecture_id, operatingsystem_id, **kwargs
    ):  # noqa: E501
        """List all images for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_compute_resource_id_images(compute_resource_id, architecture_id, operatingsystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_resource_id: ID of compute resource (required)
        :param str architecture_id: ID of architecture (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_compute_resources_compute_resource_id_images_with_http_info(
                compute_resource_id, architecture_id, operatingsystem_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_compute_resource_id_images_with_http_info(
                compute_resource_id, architecture_id, operatingsystem_id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_compute_resource_id_images_with_http_info(
        self, compute_resource_id, architecture_id, operatingsystem_id, **kwargs
    ):  # noqa: E501
        """List all images for a compute resource  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_compute_resource_id_images_with_http_info(compute_resource_id, architecture_id, operatingsystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_resource_id: ID of compute resource (required)
        :param str architecture_id: ID of architecture (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "compute_resource_id",
            "architecture_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_compute_resource_id_images" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'compute_resource_id' is set
        if self.api_client.client_side_validation and (
            "compute_resource_id" not in params or params["compute_resource_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `compute_resource_id` when calling `get_compute_resources_compute_resource_id_images`"
            )  # noqa: E501
        # verify the required parameter 'architecture_id' is set
        if self.api_client.client_side_validation and (
            "architecture_id" not in params or params["architecture_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `architecture_id` when calling `get_compute_resources_compute_resource_id_images`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_compute_resources_compute_resource_id_images`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "compute_resource_id" in params:
            path_params["compute_resource_id"] = params[
                "compute_resource_id"
            ]  # noqa: E501

        query_params = []
        if "architecture_id" in params:
            query_params.append(
                ("architecture_id", params["architecture_id"])
            )  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{compute_resource_id}/images",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_compute_resources_compute_resource_id_images_id(
        self, id, compute_resource_id, architecture_id, operatingsystem_id, **kwargs
    ):  # noqa: E501
        """Show an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_compute_resource_id_images_id(id, compute_resource_id, architecture_id, operatingsystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str compute_resource_id: ID of compute resource (required)
        :param str architecture_id: ID of architecture (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_compute_resources_compute_resource_id_images_id_with_http_info(
                    id,
                    compute_resource_id,
                    architecture_id,
                    operatingsystem_id,
                    **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_compute_resources_compute_resource_id_images_id_with_http_info(
                id, compute_resource_id, architecture_id, operatingsystem_id, **kwargs
            )  # noqa: E501
            return data

    def get_compute_resources_compute_resource_id_images_id_with_http_info(
        self, id, compute_resource_id, architecture_id, operatingsystem_id, **kwargs
    ):  # noqa: E501
        """Show an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_resources_compute_resource_id_images_id_with_http_info(id, compute_resource_id, architecture_id, operatingsystem_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str compute_resource_id: ID of compute resource (required)
        :param str architecture_id: ID of architecture (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "compute_resource_id",
            "architecture_id",
            "operatingsystem_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_resources_compute_resource_id_images_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_compute_resources_compute_resource_id_images_id`"
            )  # noqa: E501
        # verify the required parameter 'compute_resource_id' is set
        if self.api_client.client_side_validation and (
            "compute_resource_id" not in params or params["compute_resource_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `compute_resource_id` when calling `get_compute_resources_compute_resource_id_images_id`"
            )  # noqa: E501
        # verify the required parameter 'architecture_id' is set
        if self.api_client.client_side_validation and (
            "architecture_id" not in params or params["architecture_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `architecture_id` when calling `get_compute_resources_compute_resource_id_images_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_compute_resources_compute_resource_id_images_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "compute_resource_id" in params:
            path_params["compute_resource_id"] = params[
                "compute_resource_id"
            ]  # noqa: E501

        query_params = []
        if "architecture_id" in params:
            query_params.append(
                ("architecture_id", params["architecture_id"])
            )  # noqa: E501
        if "operatingsystem_id" in params:
            query_params.append(
                ("operatingsystem_id", params["operatingsystem_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{compute_resource_id}/images/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_operatingsystems_operatingsystem_id_images(
        self, operatingsystem_id, compute_resource_id, architecture_id, **kwargs
    ):  # noqa: E501
        """List all images for operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_images(operatingsystem_id, compute_resource_id, architecture_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str compute_resource_id: ID of compute resource (required)
        :param str architecture_id: ID of architecture (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_operatingsystems_operatingsystem_id_images_with_http_info(
                operatingsystem_id, compute_resource_id, architecture_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_operatingsystems_operatingsystem_id_images_with_http_info(
                operatingsystem_id, compute_resource_id, architecture_id, **kwargs
            )  # noqa: E501
            return data

    def get_operatingsystems_operatingsystem_id_images_with_http_info(
        self, operatingsystem_id, compute_resource_id, architecture_id, **kwargs
    ):  # noqa: E501
        """List all images for operating system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_images_with_http_info(operatingsystem_id, compute_resource_id, architecture_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float operatingsystem_id: ID of operating system (required)
        :param str compute_resource_id: ID of compute resource (required)
        :param str architecture_id: ID of architecture (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "operatingsystem_id",
            "compute_resource_id",
            "architecture_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_operatingsystems_operatingsystem_id_images" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_operatingsystems_operatingsystem_id_images`"
            )  # noqa: E501
        # verify the required parameter 'compute_resource_id' is set
        if self.api_client.client_side_validation and (
            "compute_resource_id" not in params or params["compute_resource_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `compute_resource_id` when calling `get_operatingsystems_operatingsystem_id_images`"
            )  # noqa: E501
        # verify the required parameter 'architecture_id' is set
        if self.api_client.client_side_validation and (
            "architecture_id" not in params or params["architecture_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `architecture_id` when calling `get_operatingsystems_operatingsystem_id_images`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "operatingsystem_id" in params:
            path_params["operatingsystem_id"] = params[
                "operatingsystem_id"
            ]  # noqa: E501

        query_params = []
        if "compute_resource_id" in params:
            query_params.append(
                ("compute_resource_id", params["compute_resource_id"])
            )  # noqa: E501
        if "architecture_id" in params:
            query_params.append(
                ("architecture_id", params["architecture_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{operatingsystem_id}/images",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_operatingsystems_operatingsystem_id_images_id(
        self, id, operatingsystem_id, compute_resource_id, architecture_id, **kwargs
    ):  # noqa: E501
        """Show an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_images_id(id, operatingsystem_id, compute_resource_id, architecture_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str compute_resource_id: ID of compute resource (required)
        :param str architecture_id: ID of architecture (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_operatingsystems_operatingsystem_id_images_id_with_http_info(
                    id,
                    operatingsystem_id,
                    compute_resource_id,
                    architecture_id,
                    **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_operatingsystems_operatingsystem_id_images_id_with_http_info(
                id, operatingsystem_id, compute_resource_id, architecture_id, **kwargs
            )  # noqa: E501
            return data

    def get_operatingsystems_operatingsystem_id_images_id_with_http_info(
        self, id, operatingsystem_id, compute_resource_id, architecture_id, **kwargs
    ):  # noqa: E501
        """Show an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_operatingsystems_operatingsystem_id_images_id_with_http_info(id, operatingsystem_id, compute_resource_id, architecture_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float operatingsystem_id: ID of operating system (required)
        :param str compute_resource_id: ID of compute resource (required)
        :param str architecture_id: ID of architecture (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "operatingsystem_id",
            "compute_resource_id",
            "architecture_id",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_operatingsystems_operatingsystem_id_images_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_operatingsystems_operatingsystem_id_images_id`"
            )  # noqa: E501
        # verify the required parameter 'operatingsystem_id' is set
        if self.api_client.client_side_validation and (
            "operatingsystem_id" not in params or params["operatingsystem_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `operatingsystem_id` when calling `get_operatingsystems_operatingsystem_id_images_id`"
            )  # noqa: E501
        # verify the required parameter 'compute_resource_id' is set
        if self.api_client.client_side_validation and (
            "compute_resource_id" not in params or params["compute_resource_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `compute_resource_id` when calling `get_operatingsystems_operatingsystem_id_images_id`"
            )  # noqa: E501
        # verify the required parameter 'architecture_id' is set
        if self.api_client.client_side_validation and (
            "architecture_id" not in params or params["architecture_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `architecture_id` when calling `get_operatingsystems_operatingsystem_id_images_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "operatingsystem_id" in params:
            path_params["operatingsystem_id"] = params[
                "operatingsystem_id"
            ]  # noqa: E501

        query_params = []
        if "compute_resource_id" in params:
            query_params.append(
                ("compute_resource_id", params["compute_resource_id"])
            )  # noqa: E501
        if "architecture_id" in params:
            query_params.append(
                ("architecture_id", params["architecture_id"])
            )  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/operatingsystems/{operatingsystem_id}/images/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_compute_resources_compute_resource_id_images(
        self, compute_resource_id, image_name, image_username, image_uuid, **kwargs
    ):  # noqa: E501
        """Create an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_compute_resources_compute_resource_id_images(compute_resource_id, image_name, image_username, image_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_resource_id: (required)
        :param str image_name: (required)
        :param str image_username: (required)
        :param str image_uuid: Template ID in the compute resource (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str image_password:
        :param str image_compute_resource_id: ID of compute resource
        :param str image_architecture_id: ID of architecture
        :param float image_operatingsystem_id: ID of operating system
        :param bool image_user_data: Whether or not the image supports user data
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.post_compute_resources_compute_resource_id_images_with_http_info(
                    compute_resource_id,
                    image_name,
                    image_username,
                    image_uuid,
                    **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.post_compute_resources_compute_resource_id_images_with_http_info(
                compute_resource_id, image_name, image_username, image_uuid, **kwargs
            )  # noqa: E501
            return data

    def post_compute_resources_compute_resource_id_images_with_http_info(
        self, compute_resource_id, image_name, image_username, image_uuid, **kwargs
    ):  # noqa: E501
        """Create an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_compute_resources_compute_resource_id_images_with_http_info(compute_resource_id, image_name, image_username, image_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_resource_id: (required)
        :param str image_name: (required)
        :param str image_username: (required)
        :param str image_uuid: Template ID in the compute resource (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str image_password:
        :param str image_compute_resource_id: ID of compute resource
        :param str image_architecture_id: ID of architecture
        :param float image_operatingsystem_id: ID of operating system
        :param bool image_user_data: Whether or not the image supports user data
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "compute_resource_id",
            "image_name",
            "image_username",
            "image_uuid",
            "location_id",
            "organization_id",
            "image_password",
            "image_compute_resource_id",
            "image_architecture_id",
            "image_operatingsystem_id",
            "image_user_data",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_compute_resources_compute_resource_id_images" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'compute_resource_id' is set
        if self.api_client.client_side_validation and (
            "compute_resource_id" not in params or params["compute_resource_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `compute_resource_id` when calling `post_compute_resources_compute_resource_id_images`"
            )  # noqa: E501
        # verify the required parameter 'image_name' is set
        if self.api_client.client_side_validation and (
            "image_name" not in params or params["image_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `image_name` when calling `post_compute_resources_compute_resource_id_images`"
            )  # noqa: E501
        # verify the required parameter 'image_username' is set
        if self.api_client.client_side_validation and (
            "image_username" not in params or params["image_username"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `image_username` when calling `post_compute_resources_compute_resource_id_images`"
            )  # noqa: E501
        # verify the required parameter 'image_uuid' is set
        if self.api_client.client_side_validation and (
            "image_uuid" not in params or params["image_uuid"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `image_uuid` when calling `post_compute_resources_compute_resource_id_images`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "compute_resource_id" in params:
            path_params["compute_resource_id"] = params[
                "compute_resource_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "image_name" in params:
            form_params.append(("image[name]", params["image_name"]))  # noqa: E501
        if "image_username" in params:
            form_params.append(
                ("image[username]", params["image_username"])
            )  # noqa: E501
        if "image_uuid" in params:
            form_params.append(("image[uuid]", params["image_uuid"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "image_password" in params:
            form_params.append(
                ("image[password]", params["image_password"])
            )  # noqa: E501
        if "image_compute_resource_id" in params:
            form_params.append(
                ("image[compute_resource_id]", params["image_compute_resource_id"])
            )  # noqa: E501
        if "image_architecture_id" in params:
            form_params.append(
                ("image[architecture_id]", params["image_architecture_id"])
            )  # noqa: E501
        if "image_operatingsystem_id" in params:
            form_params.append(
                ("image[operatingsystem_id]", params["image_operatingsystem_id"])
            )  # noqa: E501
        if "image_user_data" in params:
            form_params.append(
                ("image[user_data]", params["image_user_data"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{compute_resource_id}/images",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_compute_resources_compute_resource_id_images_id(
        self, compute_resource_id, id, **kwargs
    ):  # noqa: E501
        """Update an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_compute_resources_compute_resource_id_images_id(compute_resource_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_resource_id: (required)
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str image_name:
        :param str image_username:
        :param str image_uuid: Template ID in the compute resource
        :param str image_password:
        :param str image_compute_resource_id: ID of compute resource
        :param str image_architecture_id: ID of architecture
        :param float image_operatingsystem_id: ID of operating system
        :param bool image_user_data: Whether or not the image supports user data
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.put_compute_resources_compute_resource_id_images_id_with_http_info(
                    compute_resource_id, id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_compute_resources_compute_resource_id_images_id_with_http_info(
                compute_resource_id, id, **kwargs
            )  # noqa: E501
            return data

    def put_compute_resources_compute_resource_id_images_id_with_http_info(
        self, compute_resource_id, id, **kwargs
    ):  # noqa: E501
        """Update an image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_compute_resources_compute_resource_id_images_id_with_http_info(compute_resource_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_resource_id: (required)
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str image_name:
        :param str image_username:
        :param str image_uuid: Template ID in the compute resource
        :param str image_password:
        :param str image_compute_resource_id: ID of compute resource
        :param str image_architecture_id: ID of architecture
        :param float image_operatingsystem_id: ID of operating system
        :param bool image_user_data: Whether or not the image supports user data
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "compute_resource_id",
            "id",
            "location_id",
            "organization_id",
            "image_name",
            "image_username",
            "image_uuid",
            "image_password",
            "image_compute_resource_id",
            "image_architecture_id",
            "image_operatingsystem_id",
            "image_user_data",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_compute_resources_compute_resource_id_images_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'compute_resource_id' is set
        if self.api_client.client_side_validation and (
            "compute_resource_id" not in params or params["compute_resource_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `compute_resource_id` when calling `put_compute_resources_compute_resource_id_images_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_compute_resources_compute_resource_id_images_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "compute_resource_id" in params:
            path_params["compute_resource_id"] = params[
                "compute_resource_id"
            ]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "image_name" in params:
            form_params.append(("image[name]", params["image_name"]))  # noqa: E501
        if "image_username" in params:
            form_params.append(
                ("image[username]", params["image_username"])
            )  # noqa: E501
        if "image_uuid" in params:
            form_params.append(("image[uuid]", params["image_uuid"]))  # noqa: E501
        if "image_password" in params:
            form_params.append(
                ("image[password]", params["image_password"])
            )  # noqa: E501
        if "image_compute_resource_id" in params:
            form_params.append(
                ("image[compute_resource_id]", params["image_compute_resource_id"])
            )  # noqa: E501
        if "image_architecture_id" in params:
            form_params.append(
                ("image[architecture_id]", params["image_architecture_id"])
            )  # noqa: E501
        if "image_operatingsystem_id" in params:
            form_params.append(
                ("image[operatingsystem_id]", params["image_operatingsystem_id"])
            )  # noqa: E501
        if "image_user_data" in params:
            form_params.append(
                ("image[user_data]", params["image_user_data"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/compute_resources/{compute_resource_id}/images/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
