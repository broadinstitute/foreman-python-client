# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class SubnetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_subnets_id(self, id, **kwargs):  # noqa: E501
        """Delete a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subnets_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Subnet numeric identifier (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_subnets_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subnets_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_subnets_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subnets_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Subnet numeric identifier (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subnets_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_subnets_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_domains_domain_id_subnets(
        self, domain_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List of subnets for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains_domain_id_subnets(domain_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_domains_domain_id_subnets_with_http_info(
                domain_id, location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_domains_domain_id_subnets_with_http_info(
                domain_id, location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_domains_domain_id_subnets_with_http_info(
        self, domain_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List of subnets for a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains_domain_id_subnets_with_http_info(domain_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "domain_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_domains_domain_id_subnets" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_domains_domain_id_subnets`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_domains_domain_id_subnets`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_domains_domain_id_subnets`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "domain_id" in params:
            path_params["domain_id"] = params["domain_id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/domains/{domain_id}/subnets",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_location_id_subnets(
        self, location_id, domain_id, organization_id, **kwargs
    ):  # noqa: E501
        """List of subnets per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_subnets(location_id, domain_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param str domain_id: ID of domain (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_location_id_subnets_with_http_info(
                location_id, domain_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_locations_location_id_subnets_with_http_info(
                location_id, domain_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_locations_location_id_subnets_with_http_info(
        self, location_id, domain_id, organization_id, **kwargs
    ):  # noqa: E501
        """List of subnets per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_subnets_with_http_info(location_id, domain_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param str domain_id: ID of domain (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "domain_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_location_id_subnets" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_locations_location_id_subnets`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_locations_location_id_subnets`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_locations_location_id_subnets`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/subnets",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_subnets(
        self, organization_id, domain_id, location_id, **kwargs
    ):  # noqa: E501
        """List of subnets per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_subnets(organization_id, domain_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param str domain_id: ID of domain (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_subnets_with_http_info(
                organization_id, domain_id, location_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_organization_id_subnets_with_http_info(
                organization_id, domain_id, location_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_subnets_with_http_info(
        self, organization_id, domain_id, location_id, **kwargs
    ):  # noqa: E501
        """List of subnets per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_subnets_with_http_info(organization_id, domain_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param str domain_id: ID of domain (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "domain_id",
            "location_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_subnets" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_subnets`"
            )  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_organizations_organization_id_subnets`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_organizations_organization_id_subnets`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subnets",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_subnets(
        self, domain_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List of subnets  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets(domain_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_subnets_with_http_info(
                domain_id, location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_subnets_with_http_info(
                domain_id, location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_subnets_with_http_info(
        self, domain_id, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List of subnets  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets_with_http_info(domain_id, location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain_id: ID of domain (required)
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "domain_id",
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subnets" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'domain_id' is set
        if self.api_client.client_side_validation and (
            "domain_id" not in params or params["domain_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `domain_id` when calling `get_subnets`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_subnets`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_subnets`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "domain_id" in params:
            query_params.append(("domain_id", params["domain_id"]))  # noqa: E501
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_subnets_id(self, id, **kwargs):  # noqa: E501
        """Show a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool show_hidden_parameters: Display hidden parameter values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_subnets_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subnets_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_subnets_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool show_hidden_parameters: Display hidden parameter values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "show_hidden_parameters",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subnets_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_subnets_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "show_hidden_parameters" in params:
            query_params.append(
                ("show_hidden_parameters", params["show_hidden_parameters"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_subnets_id_freeip(self, id, **kwargs):  # noqa: E501
        """Provides an unused IP address in this subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets_id_freeip(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str mac: MAC address to reuse the IP for this host
        :param list[str] excluded_ips: IP addresses that should be excluded from suggestion
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_subnets_id_freeip_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subnets_id_freeip_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_subnets_id_freeip_with_http_info(self, id, **kwargs):  # noqa: E501
        """Provides an unused IP address in this subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subnets_id_freeip_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str mac: MAC address to reuse the IP for this host
        :param list[str] excluded_ips: IP addresses that should be excluded from suggestion
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "mac",
            "excluded_ips",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subnets_id_freeip" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_subnets_id_freeip`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "mac" in params:
            query_params.append(("mac", params["mac"]))  # noqa: E501
        if "excluded_ips" in params:
            query_params.append(("excluded_ips", params["excluded_ips"]))  # noqa: E501
            collection_formats["excluded_ips"] = "csv"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets/{id}/freeip",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_subnets(self, subnet_name, subnet_network, **kwargs):  # noqa: E501
        """Create a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_subnets(subnet_name, subnet_network, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_name: Subnet name (required)
        :param str subnet_network: Subnet network (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str subnet_description: Subnet description
        :param str subnet_network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4
        :param str subnet_cidr: Network prefix in CIDR notation
        :param str subnet_mask: Netmask for this subnet
        :param str subnet_gateway: Subnet gateway
        :param str subnet_dns_primary: Primary DNS for this subnet
        :param str subnet_dns_secondary: Secondary DNS for this subnet
        :param str subnet_ipam: IP Address auto suggestion mode for this subnet.
        :param str subnet_externalipam_group: External IPAM group - only relevant when IPAM is set to external
        :param str subnet_from: Starting IP Address for IP auto suggestion
        :param str subnet_to: Ending IP Address for IP auto suggestion
        :param str subnet_vlanid: VLAN ID for this subnet
        :param float subnet_mtu: MTU for this subnet
        :param list[str] subnet_domain_ids: Domains in which this subnet is part
        :param float subnet_dhcp_id: DHCP Proxy ID to use within this subnet
        :param float subnet_tftp_id: TFTP Proxy ID to use within this subnet
        :param float subnet_httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :param float subnet_externalipam_id: External IPAM Proxy ID to use within this subnet
        :param float subnet_dns_id: DNS Proxy ID to use within this subnet
        :param float subnet_template_id: Template HTTP(S) Proxy ID to use within this subnet
        :param float subnet_bmc_id: BMC Proxy ID to use within this subnet
        :param str subnet_boot_mode: Default boot mode for interfaces assigned to this subnet.
        :param list[str] subnet_subnet_parameters_attributes: Array of parameters (name, value)
        :param list[str] subnet_location_ids: REPLACE locations with given ids
        :param list[str] subnet_organization_ids: REPLACE organizations with given ids.
        :param list[str] subnet_remote_execution_proxy_ids: List of proxy IDs to be used for remote execution
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_subnets_with_http_info(
                subnet_name, subnet_network, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_subnets_with_http_info(
                subnet_name, subnet_network, **kwargs
            )  # noqa: E501
            return data

    def post_subnets_with_http_info(
        self, subnet_name, subnet_network, **kwargs
    ):  # noqa: E501
        """Create a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_subnets_with_http_info(subnet_name, subnet_network, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_name: Subnet name (required)
        :param str subnet_network: Subnet network (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str subnet_description: Subnet description
        :param str subnet_network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4
        :param str subnet_cidr: Network prefix in CIDR notation
        :param str subnet_mask: Netmask for this subnet
        :param str subnet_gateway: Subnet gateway
        :param str subnet_dns_primary: Primary DNS for this subnet
        :param str subnet_dns_secondary: Secondary DNS for this subnet
        :param str subnet_ipam: IP Address auto suggestion mode for this subnet.
        :param str subnet_externalipam_group: External IPAM group - only relevant when IPAM is set to external
        :param str subnet_from: Starting IP Address for IP auto suggestion
        :param str subnet_to: Ending IP Address for IP auto suggestion
        :param str subnet_vlanid: VLAN ID for this subnet
        :param float subnet_mtu: MTU for this subnet
        :param list[str] subnet_domain_ids: Domains in which this subnet is part
        :param float subnet_dhcp_id: DHCP Proxy ID to use within this subnet
        :param float subnet_tftp_id: TFTP Proxy ID to use within this subnet
        :param float subnet_httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :param float subnet_externalipam_id: External IPAM Proxy ID to use within this subnet
        :param float subnet_dns_id: DNS Proxy ID to use within this subnet
        :param float subnet_template_id: Template HTTP(S) Proxy ID to use within this subnet
        :param float subnet_bmc_id: BMC Proxy ID to use within this subnet
        :param str subnet_boot_mode: Default boot mode for interfaces assigned to this subnet.
        :param list[str] subnet_subnet_parameters_attributes: Array of parameters (name, value)
        :param list[str] subnet_location_ids: REPLACE locations with given ids
        :param list[str] subnet_organization_ids: REPLACE organizations with given ids.
        :param list[str] subnet_remote_execution_proxy_ids: List of proxy IDs to be used for remote execution
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "subnet_name",
            "subnet_network",
            "location_id",
            "organization_id",
            "subnet_description",
            "subnet_network_type",
            "subnet_cidr",
            "subnet_mask",
            "subnet_gateway",
            "subnet_dns_primary",
            "subnet_dns_secondary",
            "subnet_ipam",
            "subnet_externalipam_group",
            "subnet_from",
            "subnet_to",
            "subnet_vlanid",
            "subnet_mtu",
            "subnet_domain_ids",
            "subnet_dhcp_id",
            "subnet_tftp_id",
            "subnet_httpboot_id",
            "subnet_externalipam_id",
            "subnet_dns_id",
            "subnet_template_id",
            "subnet_bmc_id",
            "subnet_boot_mode",
            "subnet_subnet_parameters_attributes",
            "subnet_location_ids",
            "subnet_organization_ids",
            "subnet_remote_execution_proxy_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_subnets" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'subnet_name' is set
        if self.api_client.client_side_validation and (
            "subnet_name" not in params or params["subnet_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_name` when calling `post_subnets`"
            )  # noqa: E501
        # verify the required parameter 'subnet_network' is set
        if self.api_client.client_side_validation and (
            "subnet_network" not in params or params["subnet_network"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subnet_network` when calling `post_subnets`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "subnet_name" in params:
            form_params.append(("subnet[name]", params["subnet_name"]))  # noqa: E501
        if "subnet_network" in params:
            form_params.append(
                ("subnet[network]", params["subnet_network"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_description" in params:
            form_params.append(
                ("subnet[description]", params["subnet_description"])
            )  # noqa: E501
        if "subnet_network_type" in params:
            form_params.append(
                ("subnet[network_type]", params["subnet_network_type"])
            )  # noqa: E501
        if "subnet_cidr" in params:
            form_params.append(("subnet[cidr]", params["subnet_cidr"]))  # noqa: E501
        if "subnet_mask" in params:
            form_params.append(("subnet[mask]", params["subnet_mask"]))  # noqa: E501
        if "subnet_gateway" in params:
            form_params.append(
                ("subnet[gateway]", params["subnet_gateway"])
            )  # noqa: E501
        if "subnet_dns_primary" in params:
            form_params.append(
                ("subnet[dns_primary]", params["subnet_dns_primary"])
            )  # noqa: E501
        if "subnet_dns_secondary" in params:
            form_params.append(
                ("subnet[dns_secondary]", params["subnet_dns_secondary"])
            )  # noqa: E501
        if "subnet_ipam" in params:
            form_params.append(("subnet[ipam]", params["subnet_ipam"]))  # noqa: E501
        if "subnet_externalipam_group" in params:
            form_params.append(
                ("subnet[externalipam_group]", params["subnet_externalipam_group"])
            )  # noqa: E501
        if "subnet_from" in params:
            form_params.append(("subnet[from]", params["subnet_from"]))  # noqa: E501
        if "subnet_to" in params:
            form_params.append(("subnet[to]", params["subnet_to"]))  # noqa: E501
        if "subnet_vlanid" in params:
            form_params.append(
                ("subnet[vlanid]", params["subnet_vlanid"])
            )  # noqa: E501
        if "subnet_mtu" in params:
            form_params.append(("subnet[mtu]", params["subnet_mtu"]))  # noqa: E501
        if "subnet_domain_ids" in params:
            form_params.append(
                ("subnet[domain_ids]", params["subnet_domain_ids"])
            )  # noqa: E501
            collection_formats["subnet[domain_ids]"] = "csv"  # noqa: E501
        if "subnet_dhcp_id" in params:
            form_params.append(
                ("subnet[dhcp_id]", params["subnet_dhcp_id"])
            )  # noqa: E501
        if "subnet_tftp_id" in params:
            form_params.append(
                ("subnet[tftp_id]", params["subnet_tftp_id"])
            )  # noqa: E501
        if "subnet_httpboot_id" in params:
            form_params.append(
                ("subnet[httpboot_id]", params["subnet_httpboot_id"])
            )  # noqa: E501
        if "subnet_externalipam_id" in params:
            form_params.append(
                ("subnet[externalipam_id]", params["subnet_externalipam_id"])
            )  # noqa: E501
        if "subnet_dns_id" in params:
            form_params.append(
                ("subnet[dns_id]", params["subnet_dns_id"])
            )  # noqa: E501
        if "subnet_template_id" in params:
            form_params.append(
                ("subnet[template_id]", params["subnet_template_id"])
            )  # noqa: E501
        if "subnet_bmc_id" in params:
            form_params.append(
                ("subnet[bmc_id]", params["subnet_bmc_id"])
            )  # noqa: E501
        if "subnet_boot_mode" in params:
            form_params.append(
                ("subnet[boot_mode]", params["subnet_boot_mode"])
            )  # noqa: E501
        if "subnet_subnet_parameters_attributes" in params:
            form_params.append(
                (
                    "subnet[subnet_parameters_attributes]",
                    params["subnet_subnet_parameters_attributes"],
                )
            )  # noqa: E501
            collection_formats[
                "subnet[subnet_parameters_attributes]"
            ] = "csv"  # noqa: E501
        if "subnet_location_ids" in params:
            form_params.append(
                ("subnet[location_ids]", params["subnet_location_ids"])
            )  # noqa: E501
            collection_formats["subnet[location_ids]"] = "csv"  # noqa: E501
        if "subnet_organization_ids" in params:
            form_params.append(
                ("subnet[organization_ids]", params["subnet_organization_ids"])
            )  # noqa: E501
            collection_formats["subnet[organization_ids]"] = "csv"  # noqa: E501
        if "subnet_remote_execution_proxy_ids" in params:
            form_params.append(
                (
                    "subnet[remote_execution_proxy_ids]",
                    params["subnet_remote_execution_proxy_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "subnet[remote_execution_proxy_ids]"
            ] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_subnets_id(self, id, **kwargs):  # noqa: E501
        """Update a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_subnets_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Subnet numeric identifier (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str subnet_name: Subnet name
        :param str subnet_description: Subnet description
        :param str subnet_network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4
        :param str subnet_network: Subnet network
        :param str subnet_cidr: Network prefix in CIDR notation
        :param str subnet_mask: Netmask for this subnet
        :param str subnet_gateway: Subnet gateway
        :param str subnet_dns_primary: Primary DNS for this subnet
        :param str subnet_dns_secondary: Secondary DNS for this subnet
        :param str subnet_ipam: IP Address auto suggestion mode for this subnet.
        :param str subnet_externalipam_group: External IPAM group - only relevant when IPAM is set to external
        :param str subnet_from: Starting IP Address for IP auto suggestion
        :param str subnet_to: Ending IP Address for IP auto suggestion
        :param str subnet_vlanid: VLAN ID for this subnet
        :param float subnet_mtu: MTU for this subnet
        :param list[str] subnet_domain_ids: Domains in which this subnet is part
        :param float subnet_dhcp_id: DHCP Proxy ID to use within this subnet
        :param float subnet_tftp_id: TFTP Proxy ID to use within this subnet
        :param float subnet_httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :param float subnet_externalipam_id: External IPAM Proxy ID to use within this subnet
        :param float subnet_dns_id: DNS Proxy ID to use within this subnet
        :param float subnet_template_id: Template HTTP(S) Proxy ID to use within this subnet
        :param float subnet_bmc_id: BMC Proxy ID to use within this subnet
        :param str subnet_boot_mode: Default boot mode for interfaces assigned to this subnet.
        :param list[str] subnet_subnet_parameters_attributes: Array of parameters (name, value)
        :param list[str] subnet_location_ids: REPLACE locations with given ids
        :param list[str] subnet_organization_ids: REPLACE organizations with given ids.
        :param list[str] subnet_remote_execution_proxy_ids: List of proxy IDs to be used for remote execution
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_subnets_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_subnets_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_subnets_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a subnet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_subnets_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Subnet numeric identifier (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str subnet_name: Subnet name
        :param str subnet_description: Subnet description
        :param str subnet_network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4
        :param str subnet_network: Subnet network
        :param str subnet_cidr: Network prefix in CIDR notation
        :param str subnet_mask: Netmask for this subnet
        :param str subnet_gateway: Subnet gateway
        :param str subnet_dns_primary: Primary DNS for this subnet
        :param str subnet_dns_secondary: Secondary DNS for this subnet
        :param str subnet_ipam: IP Address auto suggestion mode for this subnet.
        :param str subnet_externalipam_group: External IPAM group - only relevant when IPAM is set to external
        :param str subnet_from: Starting IP Address for IP auto suggestion
        :param str subnet_to: Ending IP Address for IP auto suggestion
        :param str subnet_vlanid: VLAN ID for this subnet
        :param float subnet_mtu: MTU for this subnet
        :param list[str] subnet_domain_ids: Domains in which this subnet is part
        :param float subnet_dhcp_id: DHCP Proxy ID to use within this subnet
        :param float subnet_tftp_id: TFTP Proxy ID to use within this subnet
        :param float subnet_httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :param float subnet_externalipam_id: External IPAM Proxy ID to use within this subnet
        :param float subnet_dns_id: DNS Proxy ID to use within this subnet
        :param float subnet_template_id: Template HTTP(S) Proxy ID to use within this subnet
        :param float subnet_bmc_id: BMC Proxy ID to use within this subnet
        :param str subnet_boot_mode: Default boot mode for interfaces assigned to this subnet.
        :param list[str] subnet_subnet_parameters_attributes: Array of parameters (name, value)
        :param list[str] subnet_location_ids: REPLACE locations with given ids
        :param list[str] subnet_organization_ids: REPLACE organizations with given ids.
        :param list[str] subnet_remote_execution_proxy_ids: List of proxy IDs to be used for remote execution
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "subnet_name",
            "subnet_description",
            "subnet_network_type",
            "subnet_network",
            "subnet_cidr",
            "subnet_mask",
            "subnet_gateway",
            "subnet_dns_primary",
            "subnet_dns_secondary",
            "subnet_ipam",
            "subnet_externalipam_group",
            "subnet_from",
            "subnet_to",
            "subnet_vlanid",
            "subnet_mtu",
            "subnet_domain_ids",
            "subnet_dhcp_id",
            "subnet_tftp_id",
            "subnet_httpboot_id",
            "subnet_externalipam_id",
            "subnet_dns_id",
            "subnet_template_id",
            "subnet_bmc_id",
            "subnet_boot_mode",
            "subnet_subnet_parameters_attributes",
            "subnet_location_ids",
            "subnet_organization_ids",
            "subnet_remote_execution_proxy_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_subnets_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_subnets_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subnet_name" in params:
            form_params.append(("subnet[name]", params["subnet_name"]))  # noqa: E501
        if "subnet_description" in params:
            form_params.append(
                ("subnet[description]", params["subnet_description"])
            )  # noqa: E501
        if "subnet_network_type" in params:
            form_params.append(
                ("subnet[network_type]", params["subnet_network_type"])
            )  # noqa: E501
        if "subnet_network" in params:
            form_params.append(
                ("subnet[network]", params["subnet_network"])
            )  # noqa: E501
        if "subnet_cidr" in params:
            form_params.append(("subnet[cidr]", params["subnet_cidr"]))  # noqa: E501
        if "subnet_mask" in params:
            form_params.append(("subnet[mask]", params["subnet_mask"]))  # noqa: E501
        if "subnet_gateway" in params:
            form_params.append(
                ("subnet[gateway]", params["subnet_gateway"])
            )  # noqa: E501
        if "subnet_dns_primary" in params:
            form_params.append(
                ("subnet[dns_primary]", params["subnet_dns_primary"])
            )  # noqa: E501
        if "subnet_dns_secondary" in params:
            form_params.append(
                ("subnet[dns_secondary]", params["subnet_dns_secondary"])
            )  # noqa: E501
        if "subnet_ipam" in params:
            form_params.append(("subnet[ipam]", params["subnet_ipam"]))  # noqa: E501
        if "subnet_externalipam_group" in params:
            form_params.append(
                ("subnet[externalipam_group]", params["subnet_externalipam_group"])
            )  # noqa: E501
        if "subnet_from" in params:
            form_params.append(("subnet[from]", params["subnet_from"]))  # noqa: E501
        if "subnet_to" in params:
            form_params.append(("subnet[to]", params["subnet_to"]))  # noqa: E501
        if "subnet_vlanid" in params:
            form_params.append(
                ("subnet[vlanid]", params["subnet_vlanid"])
            )  # noqa: E501
        if "subnet_mtu" in params:
            form_params.append(("subnet[mtu]", params["subnet_mtu"]))  # noqa: E501
        if "subnet_domain_ids" in params:
            form_params.append(
                ("subnet[domain_ids]", params["subnet_domain_ids"])
            )  # noqa: E501
            collection_formats["subnet[domain_ids]"] = "csv"  # noqa: E501
        if "subnet_dhcp_id" in params:
            form_params.append(
                ("subnet[dhcp_id]", params["subnet_dhcp_id"])
            )  # noqa: E501
        if "subnet_tftp_id" in params:
            form_params.append(
                ("subnet[tftp_id]", params["subnet_tftp_id"])
            )  # noqa: E501
        if "subnet_httpboot_id" in params:
            form_params.append(
                ("subnet[httpboot_id]", params["subnet_httpboot_id"])
            )  # noqa: E501
        if "subnet_externalipam_id" in params:
            form_params.append(
                ("subnet[externalipam_id]", params["subnet_externalipam_id"])
            )  # noqa: E501
        if "subnet_dns_id" in params:
            form_params.append(
                ("subnet[dns_id]", params["subnet_dns_id"])
            )  # noqa: E501
        if "subnet_template_id" in params:
            form_params.append(
                ("subnet[template_id]", params["subnet_template_id"])
            )  # noqa: E501
        if "subnet_bmc_id" in params:
            form_params.append(
                ("subnet[bmc_id]", params["subnet_bmc_id"])
            )  # noqa: E501
        if "subnet_boot_mode" in params:
            form_params.append(
                ("subnet[boot_mode]", params["subnet_boot_mode"])
            )  # noqa: E501
        if "subnet_subnet_parameters_attributes" in params:
            form_params.append(
                (
                    "subnet[subnet_parameters_attributes]",
                    params["subnet_subnet_parameters_attributes"],
                )
            )  # noqa: E501
            collection_formats[
                "subnet[subnet_parameters_attributes]"
            ] = "csv"  # noqa: E501
        if "subnet_location_ids" in params:
            form_params.append(
                ("subnet[location_ids]", params["subnet_location_ids"])
            )  # noqa: E501
            collection_formats["subnet[location_ids]"] = "csv"  # noqa: E501
        if "subnet_organization_ids" in params:
            form_params.append(
                ("subnet[organization_ids]", params["subnet_organization_ids"])
            )  # noqa: E501
            collection_formats["subnet[organization_ids]"] = "csv"  # noqa: E501
        if "subnet_remote_execution_proxy_ids" in params:
            form_params.append(
                (
                    "subnet[remote_execution_proxy_ids]",
                    params["subnet_remote_execution_proxy_ids"],
                )
            )  # noqa: E501
            collection_formats[
                "subnet[remote_execution_proxy_ids]"
            ] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subnets/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
