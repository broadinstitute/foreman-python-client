# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class ContentViewFilterRulesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_content_view_filters_content_view_filter_id_rules_id(
        self, content_view_filter_id, id, **kwargs
    ):  # noqa: E501
        """Delete a filter rule  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_view_filters_content_view_filter_id_rules_id(content_view_filter_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: filter identifier (required)
        :param float id: rule identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_content_view_filters_content_view_filter_id_rules_id_with_http_info(
                content_view_filter_id, id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_content_view_filters_content_view_filter_id_rules_id_with_http_info(
                content_view_filter_id, id, **kwargs
            )  # noqa: E501
            return data

    def delete_content_view_filters_content_view_filter_id_rules_id_with_http_info(
        self, content_view_filter_id, id, **kwargs
    ):  # noqa: E501
        """Delete a filter rule  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_view_filters_content_view_filter_id_rules_id_with_http_info(content_view_filter_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: filter identifier (required)
        :param float id: rule identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["content_view_filter_id", "id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_content_view_filters_content_view_filter_id_rules_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_filter_id' is set
        if self.api_client.client_side_validation and (
            "content_view_filter_id" not in params
            or params["content_view_filter_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_filter_id` when calling `delete_content_view_filters_content_view_filter_id_rules_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_content_view_filters_content_view_filter_id_rules_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_filter_id" in params:
            path_params["content_view_filter_id"] = params[
                "content_view_filter_id"
            ]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters/{content_view_filter_id}/rules/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_view_filters_content_view_filter_id_rules(
        self, content_view_filter_id, **kwargs
    ):  # noqa: E501
        """List filter rules  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_filters_content_view_filter_id_rules(content_view_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: filter identifier (required)
        :param str name: name of the content view filter rule
        :param str errata_id: errata_id of the content view filter rule
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_view_filters_content_view_filter_id_rules_with_http_info(
                content_view_filter_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_content_view_filters_content_view_filter_id_rules_with_http_info(
                content_view_filter_id, **kwargs
            )  # noqa: E501
            return data

    def get_content_view_filters_content_view_filter_id_rules_with_http_info(
        self, content_view_filter_id, **kwargs
    ):  # noqa: E501
        """List filter rules  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_filters_content_view_filter_id_rules_with_http_info(content_view_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: filter identifier (required)
        :param str name: name of the content view filter rule
        :param str errata_id: errata_id of the content view filter rule
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_filter_id",
            "name",
            "errata_id",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_view_filters_content_view_filter_id_rules"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_filter_id' is set
        if self.api_client.client_side_validation and (
            "content_view_filter_id" not in params
            or params["content_view_filter_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_filter_id` when calling `get_content_view_filters_content_view_filter_id_rules`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_filter_id" in params:
            path_params["content_view_filter_id"] = params[
                "content_view_filter_id"
            ]  # noqa: E501

        query_params = []
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "errata_id" in params:
            query_params.append(("errata_id", params["errata_id"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters/{content_view_filter_id}/rules",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_view_filters_content_view_filter_id_rules_id(
        self, content_view_filter_id, id, **kwargs
    ):  # noqa: E501
        """Show filter rule info  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_filters_content_view_filter_id_rules_id(content_view_filter_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: filter identifier (required)
        :param float id: rule identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_view_filters_content_view_filter_id_rules_id_with_http_info(
                content_view_filter_id, id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_content_view_filters_content_view_filter_id_rules_id_with_http_info(
                content_view_filter_id, id, **kwargs
            )  # noqa: E501
            return data

    def get_content_view_filters_content_view_filter_id_rules_id_with_http_info(
        self, content_view_filter_id, id, **kwargs
    ):  # noqa: E501
        """Show filter rule info  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_filters_content_view_filter_id_rules_id_with_http_info(content_view_filter_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: filter identifier (required)
        :param float id: rule identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["content_view_filter_id", "id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_view_filters_content_view_filter_id_rules_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_filter_id' is set
        if self.api_client.client_side_validation and (
            "content_view_filter_id" not in params
            or params["content_view_filter_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_filter_id` when calling `get_content_view_filters_content_view_filter_id_rules_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_content_view_filters_content_view_filter_id_rules_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_filter_id" in params:
            path_params["content_view_filter_id"] = params[
                "content_view_filter_id"
            ]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters/{content_view_filter_id}/rules/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_content_view_filters_content_view_filter_id_rules(
        self, content_view_filter_id, **kwargs
    ):  # noqa: E501
        """Create a filter rule. The parameters included should be based upon the filter type.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_view_filters_content_view_filter_id_rules(content_view_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: filter identifier (required)
        :param list[str] name: deb, package, package group, or docker tag names
        :param str uuid: package group: uuid
        :param str version: package: version
        :param str architecture: package: architecture
        :param str min_version: package: minimum version
        :param str max_version: package: maximum version
        :param str errata_id: erratum: id
        :param list[str] errata_ids: erratum: IDs or a select all object
        :param str start_date: erratum: start date (YYYY-MM-DD)
        :param str end_date: erratum: end date (YYYY-MM-DD)
        :param list[str] types: erratum: types (enhancement, bugfix, security)
        :param str date_type: erratum: search using the 'Issued On' or 'Updated On' column of the errata. Values are 'issued'/'updated'
        :param list[str] module_stream_ids: module stream ids
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_content_view_filters_content_view_filter_id_rules_with_http_info(
                content_view_filter_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.post_content_view_filters_content_view_filter_id_rules_with_http_info(
                content_view_filter_id, **kwargs
            )  # noqa: E501
            return data

    def post_content_view_filters_content_view_filter_id_rules_with_http_info(
        self, content_view_filter_id, **kwargs
    ):  # noqa: E501
        """Create a filter rule. The parameters included should be based upon the filter type.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_view_filters_content_view_filter_id_rules_with_http_info(content_view_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: filter identifier (required)
        :param list[str] name: deb, package, package group, or docker tag names
        :param str uuid: package group: uuid
        :param str version: package: version
        :param str architecture: package: architecture
        :param str min_version: package: minimum version
        :param str max_version: package: maximum version
        :param str errata_id: erratum: id
        :param list[str] errata_ids: erratum: IDs or a select all object
        :param str start_date: erratum: start date (YYYY-MM-DD)
        :param str end_date: erratum: end date (YYYY-MM-DD)
        :param list[str] types: erratum: types (enhancement, bugfix, security)
        :param str date_type: erratum: search using the 'Issued On' or 'Updated On' column of the errata. Values are 'issued'/'updated'
        :param list[str] module_stream_ids: module stream ids
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_filter_id",
            "name",
            "uuid",
            "version",
            "architecture",
            "min_version",
            "max_version",
            "errata_id",
            "errata_ids",
            "start_date",
            "end_date",
            "types",
            "date_type",
            "module_stream_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_content_view_filters_content_view_filter_id_rules"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_filter_id' is set
        if self.api_client.client_side_validation and (
            "content_view_filter_id" not in params
            or params["content_view_filter_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_filter_id` when calling `post_content_view_filters_content_view_filter_id_rules`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_filter_id" in params:
            path_params["content_view_filter_id"] = params[
                "content_view_filter_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
            collection_formats["name"] = "csv"  # noqa: E501
        if "uuid" in params:
            form_params.append(("uuid", params["uuid"]))  # noqa: E501
        if "version" in params:
            form_params.append(("version", params["version"]))  # noqa: E501
        if "architecture" in params:
            form_params.append(("architecture", params["architecture"]))  # noqa: E501
        if "min_version" in params:
            form_params.append(("min_version", params["min_version"]))  # noqa: E501
        if "max_version" in params:
            form_params.append(("max_version", params["max_version"]))  # noqa: E501
        if "errata_id" in params:
            form_params.append(("errata_id", params["errata_id"]))  # noqa: E501
        if "errata_ids" in params:
            form_params.append(("errata_ids", params["errata_ids"]))  # noqa: E501
            collection_formats["errata_ids"] = "csv"  # noqa: E501
        if "start_date" in params:
            form_params.append(("start_date", params["start_date"]))  # noqa: E501
        if "end_date" in params:
            form_params.append(("end_date", params["end_date"]))  # noqa: E501
        if "types" in params:
            form_params.append(("types", params["types"]))  # noqa: E501
            collection_formats["types"] = "csv"  # noqa: E501
        if "date_type" in params:
            form_params.append(("date_type", params["date_type"]))  # noqa: E501
        if "module_stream_ids" in params:
            form_params.append(
                ("module_stream_ids", params["module_stream_ids"])
            )  # noqa: E501
            collection_formats["module_stream_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters/{content_view_filter_id}/rules",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_view_filters_content_view_filter_id_rules_id(
        self, content_view_filter_id, id, **kwargs
    ):  # noqa: E501
        """Update a filter rule. The parameters included should be based upon the filter type.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_filters_content_view_filter_id_rules_id(content_view_filter_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: filter identifier (required)
        :param float id: rule identifier (required)
        :param str name: package, package group, or docker tag: name
        :param str version: package: version
        :param str architecture: package: architecture
        :param str min_version: package: minimum version
        :param str max_version: package: maximum version
        :param str errata_id: erratum: id
        :param str start_date: erratum: start date (YYYY-MM-DD)
        :param str end_date: erratum: end date (YYYY-MM-DD)
        :param list[str] types: erratum: types (enhancement, bugfix, security)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_view_filters_content_view_filter_id_rules_id_with_http_info(
                content_view_filter_id, id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_content_view_filters_content_view_filter_id_rules_id_with_http_info(
                content_view_filter_id, id, **kwargs
            )  # noqa: E501
            return data

    def put_content_view_filters_content_view_filter_id_rules_id_with_http_info(
        self, content_view_filter_id, id, **kwargs
    ):  # noqa: E501
        """Update a filter rule. The parameters included should be based upon the filter type.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_filters_content_view_filter_id_rules_id_with_http_info(content_view_filter_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_filter_id: filter identifier (required)
        :param float id: rule identifier (required)
        :param str name: package, package group, or docker tag: name
        :param str version: package: version
        :param str architecture: package: architecture
        :param str min_version: package: minimum version
        :param str max_version: package: maximum version
        :param str errata_id: erratum: id
        :param str start_date: erratum: start date (YYYY-MM-DD)
        :param str end_date: erratum: end date (YYYY-MM-DD)
        :param list[str] types: erratum: types (enhancement, bugfix, security)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_filter_id",
            "id",
            "name",
            "version",
            "architecture",
            "min_version",
            "max_version",
            "errata_id",
            "start_date",
            "end_date",
            "types",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_view_filters_content_view_filter_id_rules_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_filter_id' is set
        if self.api_client.client_side_validation and (
            "content_view_filter_id" not in params
            or params["content_view_filter_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_filter_id` when calling `put_content_view_filters_content_view_filter_id_rules_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_view_filters_content_view_filter_id_rules_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_filter_id" in params:
            path_params["content_view_filter_id"] = params[
                "content_view_filter_id"
            ]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "version" in params:
            form_params.append(("version", params["version"]))  # noqa: E501
        if "architecture" in params:
            form_params.append(("architecture", params["architecture"]))  # noqa: E501
        if "min_version" in params:
            form_params.append(("min_version", params["min_version"]))  # noqa: E501
        if "max_version" in params:
            form_params.append(("max_version", params["max_version"]))  # noqa: E501
        if "errata_id" in params:
            form_params.append(("errata_id", params["errata_id"]))  # noqa: E501
        if "start_date" in params:
            form_params.append(("start_date", params["start_date"]))  # noqa: E501
        if "end_date" in params:
            form_params.append(("end_date", params["end_date"]))  # noqa: E501
        if "types" in params:
            form_params.append(("types", params["types"]))  # noqa: E501
            collection_formats["types"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_filters/{content_view_filter_id}/rules/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
