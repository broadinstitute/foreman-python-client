# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class ContentViewVersionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_content_view_versions_id(self, id, **kwargs):  # noqa: E501
        """Remove content view version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_view_versions_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view version identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_content_view_versions_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_content_view_versions_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_content_view_versions_id_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Remove content view version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_view_versions_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view version identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_content_view_versions_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_content_view_versions_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_versions/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_view_versions(self, content_view_id, **kwargs):  # noqa: E501
        """List content view versions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_versions(content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: Content view identifier (required)
        :param float environment_id: Filter versions by environment
        :param str version: Filter versions by version number
        :param float composite_version_id: Filter versions that are components in the specified composite version
        :param float organization_id: Organization identifier
        :param bool include_applied_filters: Whether or not to return filters applied to the content view version
        :param float triggered_by_id: Filter composite versions whose publish was triggered by the specified component version
        :param float file_id: Filter content view versions that contain the file
        :param bool nondefault: Filter out default content views
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_view_versions_with_http_info(
                content_view_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_content_view_versions_with_http_info(
                content_view_id, **kwargs
            )  # noqa: E501
            return data

    def get_content_view_versions_with_http_info(
        self, content_view_id, **kwargs
    ):  # noqa: E501
        """List content view versions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_versions_with_http_info(content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: Content view identifier (required)
        :param float environment_id: Filter versions by environment
        :param str version: Filter versions by version number
        :param float composite_version_id: Filter versions that are components in the specified composite version
        :param float organization_id: Organization identifier
        :param bool include_applied_filters: Whether or not to return filters applied to the content view version
        :param float triggered_by_id: Filter composite versions whose publish was triggered by the specified component version
        :param float file_id: Filter content view versions that contain the file
        :param bool nondefault: Filter out default content views
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_id",
            "environment_id",
            "version",
            "composite_version_id",
            "organization_id",
            "include_applied_filters",
            "triggered_by_id",
            "file_id",
            "nondefault",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_view_versions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `get_content_view_versions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "content_view_id" in params:
            query_params.append(
                ("content_view_id", params["content_view_id"])
            )  # noqa: E501
        if "environment_id" in params:
            query_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "version" in params:
            query_params.append(("version", params["version"]))  # noqa: E501
        if "composite_version_id" in params:
            query_params.append(
                ("composite_version_id", params["composite_version_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "include_applied_filters" in params:
            query_params.append(
                ("include_applied_filters", params["include_applied_filters"])
            )  # noqa: E501
        if "triggered_by_id" in params:
            query_params.append(
                ("triggered_by_id", params["triggered_by_id"])
            )  # noqa: E501
        if "file_id" in params:
            query_params.append(("file_id", params["file_id"]))  # noqa: E501
        if "nondefault" in params:
            query_params.append(("nondefault", params["nondefault"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_view_versions_id(self, id, **kwargs):  # noqa: E501
        """Show content view version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_versions_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view version identifier (required)
        :param bool include_applied_filters: Whether or not to return filters applied to the content view version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_view_versions_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_content_view_versions_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_content_view_versions_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show content view version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_view_versions_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view version identifier (required)
        :param bool include_applied_filters: Whether or not to return filters applied to the content view version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "include_applied_filters"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_view_versions_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_content_view_versions_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "include_applied_filters" in params:
            query_params.append(
                ("include_applied_filters", params["include_applied_filters"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_versions/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_content_views_content_view_id_content_view_versions(
        self, content_view_id, **kwargs
    ):  # noqa: E501
        """List content view versions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views_content_view_id_content_view_versions(content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: Content view identifier (required)
        :param float environment_id: Filter versions by environment
        :param str version: Filter versions by version number
        :param float composite_version_id: Filter versions that are components in the specified composite version
        :param float organization_id: Organization identifier
        :param bool include_applied_filters: Whether or not to return filters applied to the content view version
        :param float triggered_by_id: Filter composite versions whose publish was triggered by the specified component version
        :param float file_id: Filter content view versions that contain the file
        :param bool nondefault: Filter out default content views
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_content_views_content_view_id_content_view_versions_with_http_info(
                content_view_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_content_views_content_view_id_content_view_versions_with_http_info(
                content_view_id, **kwargs
            )  # noqa: E501
            return data

    def get_content_views_content_view_id_content_view_versions_with_http_info(
        self, content_view_id, **kwargs
    ):  # noqa: E501
        """List content view versions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_views_content_view_id_content_view_versions_with_http_info(content_view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float content_view_id: Content view identifier (required)
        :param float environment_id: Filter versions by environment
        :param str version: Filter versions by version number
        :param float composite_version_id: Filter versions that are components in the specified composite version
        :param float organization_id: Organization identifier
        :param bool include_applied_filters: Whether or not to return filters applied to the content view version
        :param float triggered_by_id: Filter composite versions whose publish was triggered by the specified component version
        :param float file_id: Filter content view versions that contain the file
        :param bool nondefault: Filter out default content views
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_id",
            "environment_id",
            "version",
            "composite_version_id",
            "organization_id",
            "include_applied_filters",
            "triggered_by_id",
            "file_id",
            "nondefault",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_views_content_view_id_content_view_versions"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'content_view_id' is set
        if self.api_client.client_side_validation and (
            "content_view_id" not in params or params["content_view_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `content_view_id` when calling `get_content_views_content_view_id_content_view_versions`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "content_view_id" in params:
            path_params["content_view_id"] = params["content_view_id"]  # noqa: E501

        query_params = []
        if "environment_id" in params:
            query_params.append(
                ("environment_id", params["environment_id"])
            )  # noqa: E501
        if "version" in params:
            query_params.append(("version", params["version"]))  # noqa: E501
        if "composite_version_id" in params:
            query_params.append(
                ("composite_version_id", params["composite_version_id"])
            )  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "include_applied_filters" in params:
            query_params.append(
                ("include_applied_filters", params["include_applied_filters"])
            )  # noqa: E501
        if "triggered_by_id" in params:
            query_params.append(
                ("triggered_by_id", params["triggered_by_id"])
            )  # noqa: E501
        if "file_id" in params:
            query_params.append(("file_id", params["file_id"]))  # noqa: E501
        if "nondefault" in params:
            query_params.append(("nondefault", params["nondefault"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_views/{content_view_id}/content_view_versions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_content_view_versions_id_promote(self, id, **kwargs):  # noqa: E501
        """Promote a content view version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_view_versions_id_promote(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view version identifier (required)
        :param bool force: force content view promotion and bypass lifecycle environment restriction
        :param list[str] environment_ids: Identifiers for Lifecycle Environment
        :param str description: The description for the content view version promotion
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_content_view_versions_id_promote_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_content_view_versions_id_promote_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def post_content_view_versions_id_promote_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Promote a content view version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_view_versions_id_promote_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view version identifier (required)
        :param bool force: force content view promotion and bypass lifecycle environment restriction
        :param list[str] environment_ids: Identifiers for Lifecycle Environment
        :param str description: The description for the content view version promotion
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "force", "environment_ids", "description"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_content_view_versions_id_promote" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_content_view_versions_id_promote`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "force" in params:
            form_params.append(("force", params["force"]))  # noqa: E501
        if "environment_ids" in params:
            form_params.append(
                ("environment_ids", params["environment_ids"])
            )  # noqa: E501
            collection_formats["environment_ids"] = "csv"  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_versions/{id}/promote",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_content_view_versions_incremental_update(self, **kwargs):  # noqa: E501
        """Perform an Incremental Update on one or more Content View Versions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_view_versions_incremental_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] content_view_version_environments:
        :param str description: The description for the new generated Content View Versions
        :param bool resolve_dependencies: If true, when adding the specified errata or packages, any needed dependencies will be copied as well. Defaults to true
        :param bool propagate_all_composites: If true, will publish a new composite version using any specified content_view_version_id that has been promoted to a lifecycle environment
        :param list[str] add_content_errata_ids: Errata ids to copy into the new versions
        :param list[str] add_content_package_ids: Package ids to copy into the new versions
        :param list[str] add_content_deb_ids: Deb Package ids to copy into the new versions
        :param str update_hosts_included_search: Search string for host to perform an action on
        :param list[str] update_hosts_included_ids: List of host ids to perform an action on
        :param list[str] update_hosts_excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_content_view_versions_incremental_update_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_content_view_versions_incremental_update_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def post_content_view_versions_incremental_update_with_http_info(
        self, **kwargs
    ):  # noqa: E501
        """Perform an Incremental Update on one or more Content View Versions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_content_view_versions_incremental_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] content_view_version_environments:
        :param str description: The description for the new generated Content View Versions
        :param bool resolve_dependencies: If true, when adding the specified errata or packages, any needed dependencies will be copied as well. Defaults to true
        :param bool propagate_all_composites: If true, will publish a new composite version using any specified content_view_version_id that has been promoted to a lifecycle environment
        :param list[str] add_content_errata_ids: Errata ids to copy into the new versions
        :param list[str] add_content_package_ids: Package ids to copy into the new versions
        :param list[str] add_content_deb_ids: Deb Package ids to copy into the new versions
        :param str update_hosts_included_search: Search string for host to perform an action on
        :param list[str] update_hosts_included_ids: List of host ids to perform an action on
        :param list[str] update_hosts_excluded_ids: List of host ids to exclude and not run an action on
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "content_view_version_environments",
            "description",
            "resolve_dependencies",
            "propagate_all_composites",
            "add_content_errata_ids",
            "add_content_package_ids",
            "add_content_deb_ids",
            "update_hosts_included_search",
            "update_hosts_included_ids",
            "update_hosts_excluded_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_content_view_versions_incremental_update" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "content_view_version_environments" in params:
            form_params.append(
                (
                    "content_view_version_environments",
                    params["content_view_version_environments"],
                )
            )  # noqa: E501
            collection_formats[
                "content_view_version_environments"
            ] = "csv"  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "resolve_dependencies" in params:
            form_params.append(
                ("resolve_dependencies", params["resolve_dependencies"])
            )  # noqa: E501
        if "propagate_all_composites" in params:
            form_params.append(
                ("propagate_all_composites", params["propagate_all_composites"])
            )  # noqa: E501
        if "add_content_errata_ids" in params:
            form_params.append(
                ("add_content[errata_ids]", params["add_content_errata_ids"])
            )  # noqa: E501
            collection_formats["add_content[errata_ids]"] = "csv"  # noqa: E501
        if "add_content_package_ids" in params:
            form_params.append(
                ("add_content[package_ids]", params["add_content_package_ids"])
            )  # noqa: E501
            collection_formats["add_content[package_ids]"] = "csv"  # noqa: E501
        if "add_content_deb_ids" in params:
            form_params.append(
                ("add_content[deb_ids]", params["add_content_deb_ids"])
            )  # noqa: E501
            collection_formats["add_content[deb_ids]"] = "csv"  # noqa: E501
        if "update_hosts_included_search" in params:
            form_params.append(
                (
                    "update_hosts[included][search]",
                    params["update_hosts_included_search"],
                )
            )  # noqa: E501
        if "update_hosts_included_ids" in params:
            form_params.append(
                ("update_hosts[included][ids]", params["update_hosts_included_ids"])
            )  # noqa: E501
            collection_formats["update_hosts[included][ids]"] = "csv"  # noqa: E501
        if "update_hosts_excluded_ids" in params:
            form_params.append(
                ("update_hosts[excluded][ids]", params["update_hosts_excluded_ids"])
            )  # noqa: E501
            collection_formats["update_hosts[excluded][ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_versions/incremental_update",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_view_versions_id(self, id, description, **kwargs):  # noqa: E501
        """Update a content view version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_versions_id(id, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view version identifier (required)
        :param str description: The description for the content view version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_content_view_versions_id_with_http_info(
                id, description, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_content_view_versions_id_with_http_info(
                id, description, **kwargs
            )  # noqa: E501
            return data

    def put_content_view_versions_id_with_http_info(
        self, id, description, **kwargs
    ):  # noqa: E501
        """Update a content view version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_versions_id_with_http_info(id, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view version identifier (required)
        :param str description: The description for the content view version (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "description"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_view_versions_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_view_versions_id`"
            )  # noqa: E501
        # verify the required parameter 'description' is set
        if self.api_client.client_side_validation and (
            "description" not in params or params["description"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `description` when calling `put_content_view_versions_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_versions/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_content_view_versions_id_republish_repositories(
        self, id, **kwargs
    ):  # noqa: E501
        """Forces a republish of the version's repositories' metadata  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_versions_id_republish_repositories(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view version identifier (required)
        :param bool force: Force metadata regeneration to proceed. Dangerous operation when version has repositories with the 'Complete Mirroring' mirroring policy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.put_content_view_versions_id_republish_repositories_with_http_info(
                    id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_content_view_versions_id_republish_repositories_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_content_view_versions_id_republish_repositories_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Forces a republish of the version's repositories' metadata  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_content_view_versions_id_republish_repositories_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Content view version identifier (required)
        :param bool force: Force metadata regeneration to proceed. Dangerous operation when version has repositories with the 'Complete Mirroring' mirroring policy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "force"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_content_view_versions_id_republish_repositories"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_content_view_versions_id_republish_repositories`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "force" in params:
            form_params.append(("force", params["force"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/content_view_versions/{id}/republish_repositories",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
