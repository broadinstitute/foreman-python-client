# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class ProductsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_products_id(self, id, **kwargs):  # noqa: E501
        """Destroy a product  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_products_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: product numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_products_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_products_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_products_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Destroy a product  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_products_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: product numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_products_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_products_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_activation_keys_activation_key_id_products(
        self,
        activation_key_id,
        organization_id,
        subscription_id,
        sync_plan_id,
        **kwargs
    ):  # noqa: E501
        """List of subscription products in an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_activation_key_id_products(activation_key_id, organization_id, subscription_id, sync_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float activation_key_id: (required)
        :param float organization_id: Filter products by organization (required)
        :param float subscription_id: Filter products by subscription (required)
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_activation_keys_activation_key_id_products_with_http_info(
                activation_key_id,
                organization_id,
                subscription_id,
                sync_plan_id,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_activation_keys_activation_key_id_products_with_http_info(
                activation_key_id,
                organization_id,
                subscription_id,
                sync_plan_id,
                **kwargs
            )  # noqa: E501
            return data

    def get_activation_keys_activation_key_id_products_with_http_info(
        self,
        activation_key_id,
        organization_id,
        subscription_id,
        sync_plan_id,
        **kwargs
    ):  # noqa: E501
        """List of subscription products in an activation key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_keys_activation_key_id_products_with_http_info(activation_key_id, organization_id, subscription_id, sync_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float activation_key_id: (required)
        :param float organization_id: Filter products by organization (required)
        :param float subscription_id: Filter products by subscription (required)
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "activation_key_id",
            "organization_id",
            "subscription_id",
            "sync_plan_id",
            "name",
            "enabled",
            "custom",
            "redhat_only",
            "include_available_content",
            "available_for",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activation_keys_activation_key_id_products" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'activation_key_id' is set
        if self.api_client.client_side_validation and (
            "activation_key_id" not in params or params["activation_key_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `activation_key_id` when calling `get_activation_keys_activation_key_id_products`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_activation_keys_activation_key_id_products`"
            )  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if self.api_client.client_side_validation and (
            "subscription_id" not in params or params["subscription_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subscription_id` when calling `get_activation_keys_activation_key_id_products`"
            )  # noqa: E501
        # verify the required parameter 'sync_plan_id' is set
        if self.api_client.client_side_validation and (
            "sync_plan_id" not in params or params["sync_plan_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `sync_plan_id` when calling `get_activation_keys_activation_key_id_products`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "activation_key_id" in params:
            path_params["activation_key_id"] = params["activation_key_id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subscription_id" in params:
            query_params.append(
                ("subscription_id", params["subscription_id"])
            )  # noqa: E501
        if "sync_plan_id" in params:
            query_params.append(("sync_plan_id", params["sync_plan_id"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "enabled" in params:
            query_params.append(("enabled", params["enabled"]))  # noqa: E501
        if "custom" in params:
            query_params.append(("custom", params["custom"]))  # noqa: E501
        if "redhat_only" in params:
            query_params.append(("redhat_only", params["redhat_only"]))  # noqa: E501
        if "include_available_content" in params:
            query_params.append(
                ("include_available_content", params["include_available_content"])
            )  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/activation_keys/{activation_key_id}/products",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_products(
        self, organization_id, subscription_id, sync_plan_id, **kwargs
    ):  # noqa: E501
        """List of products in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_products(organization_id, subscription_id, sync_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Filter products by organization (required)
        :param float subscription_id: Filter products by subscription (required)
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_products_with_http_info(
                organization_id, subscription_id, sync_plan_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_organization_id_products_with_http_info(
                organization_id, subscription_id, sync_plan_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_products_with_http_info(
        self, organization_id, subscription_id, sync_plan_id, **kwargs
    ):  # noqa: E501
        """List of products in an organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_products_with_http_info(organization_id, subscription_id, sync_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Filter products by organization (required)
        :param float subscription_id: Filter products by subscription (required)
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "subscription_id",
            "sync_plan_id",
            "name",
            "enabled",
            "custom",
            "redhat_only",
            "include_available_content",
            "available_for",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_products" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_products`"
            )  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if self.api_client.client_side_validation and (
            "subscription_id" not in params or params["subscription_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subscription_id` when calling `get_organizations_organization_id_products`"
            )  # noqa: E501
        # verify the required parameter 'sync_plan_id' is set
        if self.api_client.client_side_validation and (
            "sync_plan_id" not in params or params["sync_plan_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `sync_plan_id` when calling `get_organizations_organization_id_products`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "subscription_id" in params:
            query_params.append(
                ("subscription_id", params["subscription_id"])
            )  # noqa: E501
        if "sync_plan_id" in params:
            query_params.append(("sync_plan_id", params["sync_plan_id"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "enabled" in params:
            query_params.append(("enabled", params["enabled"]))  # noqa: E501
        if "custom" in params:
            query_params.append(("custom", params["custom"]))  # noqa: E501
        if "redhat_only" in params:
            query_params.append(("redhat_only", params["redhat_only"]))  # noqa: E501
        if "include_available_content" in params:
            query_params.append(
                ("include_available_content", params["include_available_content"])
            )  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/products",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_sync_plans_sync_plan_id_products(
        self, organization_id, sync_plan_id, subscription_id, **kwargs
    ):  # noqa: E501
        """List of Products for sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_sync_plans_sync_plan_id_products(organization_id, sync_plan_id, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Filter products by organization (required)
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param float subscription_id: Filter products by subscription (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_sync_plans_sync_plan_id_products_with_http_info(
                organization_id, sync_plan_id, subscription_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_sync_plans_sync_plan_id_products_with_http_info(
                organization_id, sync_plan_id, subscription_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_sync_plans_sync_plan_id_products_with_http_info(
        self, organization_id, sync_plan_id, subscription_id, **kwargs
    ):  # noqa: E501
        """List of Products for sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_sync_plans_sync_plan_id_products_with_http_info(organization_id, sync_plan_id, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Filter products by organization (required)
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param float subscription_id: Filter products by subscription (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "sync_plan_id",
            "subscription_id",
            "name",
            "enabled",
            "custom",
            "redhat_only",
            "include_available_content",
            "available_for",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_sync_plans_sync_plan_id_products"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_sync_plans_sync_plan_id_products`"
            )  # noqa: E501
        # verify the required parameter 'sync_plan_id' is set
        if self.api_client.client_side_validation and (
            "sync_plan_id" not in params or params["sync_plan_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `sync_plan_id` when calling `get_organizations_organization_id_sync_plans_sync_plan_id_products`"
            )  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if self.api_client.client_side_validation and (
            "subscription_id" not in params or params["subscription_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subscription_id` when calling `get_organizations_organization_id_sync_plans_sync_plan_id_products`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "sync_plan_id" in params:
            path_params["sync_plan_id"] = params["sync_plan_id"]  # noqa: E501

        query_params = []
        if "subscription_id" in params:
            query_params.append(
                ("subscription_id", params["subscription_id"])
            )  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "enabled" in params:
            query_params.append(("enabled", params["enabled"]))  # noqa: E501
        if "custom" in params:
            query_params.append(("custom", params["custom"]))  # noqa: E501
        if "redhat_only" in params:
            query_params.append(("redhat_only", params["redhat_only"]))  # noqa: E501
        if "include_available_content" in params:
            query_params.append(
                ("include_available_content", params["include_available_content"])
            )  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/sync_plans/{sync_plan_id}/products",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_products(
        self, organization_id, subscription_id, sync_plan_id, **kwargs
    ):  # noqa: E501
        """List products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products(organization_id, subscription_id, sync_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Filter products by organization (required)
        :param float subscription_id: Filter products by subscription (required)
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_products_with_http_info(
                organization_id, subscription_id, sync_plan_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_products_with_http_info(
                organization_id, subscription_id, sync_plan_id, **kwargs
            )  # noqa: E501
            return data

    def get_products_with_http_info(
        self, organization_id, subscription_id, sync_plan_id, **kwargs
    ):  # noqa: E501
        """List products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products_with_http_info(organization_id, subscription_id, sync_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Filter products by organization (required)
        :param float subscription_id: Filter products by subscription (required)
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "subscription_id",
            "sync_plan_id",
            "name",
            "enabled",
            "custom",
            "redhat_only",
            "include_available_content",
            "available_for",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_products`"
            )  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if self.api_client.client_side_validation and (
            "subscription_id" not in params or params["subscription_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subscription_id` when calling `get_products`"
            )  # noqa: E501
        # verify the required parameter 'sync_plan_id' is set
        if self.api_client.client_side_validation and (
            "sync_plan_id" not in params or params["sync_plan_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `sync_plan_id` when calling `get_products`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subscription_id" in params:
            query_params.append(
                ("subscription_id", params["subscription_id"])
            )  # noqa: E501
        if "sync_plan_id" in params:
            query_params.append(("sync_plan_id", params["sync_plan_id"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "enabled" in params:
            query_params.append(("enabled", params["enabled"]))  # noqa: E501
        if "custom" in params:
            query_params.append(("custom", params["custom"]))  # noqa: E501
        if "redhat_only" in params:
            query_params.append(("redhat_only", params["redhat_only"]))  # noqa: E501
        if "include_available_content" in params:
            query_params.append(
                ("include_available_content", params["include_available_content"])
            )  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_products_id(self, id, **kwargs):  # noqa: E501
        """Show a product  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: product numeric identifier (required)
        :param float organization_id: Organization ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_products_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_products_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_products_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a product  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_products_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: product numeric identifier (required)
        :param float organization_id: Organization ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_products_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_subscriptions_subscription_id_products(
        self, subscription_id, organization_id, sync_plan_id, **kwargs
    ):  # noqa: E501
        """List of subscription products in a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscriptions_subscription_id_products(subscription_id, organization_id, sync_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float subscription_id: Filter products by subscription (required)
        :param float organization_id: Filter products by organization (required)
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_subscriptions_subscription_id_products_with_http_info(
                subscription_id, organization_id, sync_plan_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_subscriptions_subscription_id_products_with_http_info(
                subscription_id, organization_id, sync_plan_id, **kwargs
            )  # noqa: E501
            return data

    def get_subscriptions_subscription_id_products_with_http_info(
        self, subscription_id, organization_id, sync_plan_id, **kwargs
    ):  # noqa: E501
        """List of subscription products in a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscriptions_subscription_id_products_with_http_info(subscription_id, organization_id, sync_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float subscription_id: Filter products by subscription (required)
        :param float organization_id: Filter products by organization (required)
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "subscription_id",
            "organization_id",
            "sync_plan_id",
            "name",
            "enabled",
            "custom",
            "redhat_only",
            "include_available_content",
            "available_for",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscriptions_subscription_id_products" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'subscription_id' is set
        if self.api_client.client_side_validation and (
            "subscription_id" not in params or params["subscription_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subscription_id` when calling `get_subscriptions_subscription_id_products`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_subscriptions_subscription_id_products`"
            )  # noqa: E501
        # verify the required parameter 'sync_plan_id' is set
        if self.api_client.client_side_validation and (
            "sync_plan_id" not in params or params["sync_plan_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `sync_plan_id` when calling `get_subscriptions_subscription_id_products`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "subscription_id" in params:
            path_params["subscription_id"] = params["subscription_id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "sync_plan_id" in params:
            query_params.append(("sync_plan_id", params["sync_plan_id"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "enabled" in params:
            query_params.append(("enabled", params["enabled"]))  # noqa: E501
        if "custom" in params:
            query_params.append(("custom", params["custom"]))  # noqa: E501
        if "redhat_only" in params:
            query_params.append(("redhat_only", params["redhat_only"]))  # noqa: E501
        if "include_available_content" in params:
            query_params.append(
                ("include_available_content", params["include_available_content"])
            )  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/subscriptions/{subscription_id}/products",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_sync_plans_sync_plan_id_products(
        self, sync_plan_id, organization_id, subscription_id, **kwargs
    ):  # noqa: E501
        """List of Products for sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sync_plans_sync_plan_id_products(sync_plan_id, organization_id, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param float organization_id: Filter products by organization (required)
        :param float subscription_id: Filter products by subscription (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_sync_plans_sync_plan_id_products_with_http_info(
                sync_plan_id, organization_id, subscription_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_sync_plans_sync_plan_id_products_with_http_info(
                sync_plan_id, organization_id, subscription_id, **kwargs
            )  # noqa: E501
            return data

    def get_sync_plans_sync_plan_id_products_with_http_info(
        self, sync_plan_id, organization_id, subscription_id, **kwargs
    ):  # noqa: E501
        """List of Products for sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sync_plans_sync_plan_id_products_with_http_info(sync_plan_id, organization_id, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float sync_plan_id: Filter products by sync plan id (required)
        :param float organization_id: Filter products by organization (required)
        :param float subscription_id: Filter products by subscription (required)
        :param str name: Filter products by name
        :param bool enabled: Return enabled products only
        :param bool custom: Return custom products only
        :param bool redhat_only: Return Red Hat (non-custom) products only
        :param bool include_available_content: Whether to include available content attribute in results
        :param str available_for: Interpret specified object to return only Products that can be associated with specified object.  Only 'sync_plan' is supported.
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "sync_plan_id",
            "organization_id",
            "subscription_id",
            "name",
            "enabled",
            "custom",
            "redhat_only",
            "include_available_content",
            "available_for",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_plans_sync_plan_id_products" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'sync_plan_id' is set
        if self.api_client.client_side_validation and (
            "sync_plan_id" not in params or params["sync_plan_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `sync_plan_id` when calling `get_sync_plans_sync_plan_id_products`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_sync_plans_sync_plan_id_products`"
            )  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if self.api_client.client_side_validation and (
            "subscription_id" not in params or params["subscription_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subscription_id` when calling `get_sync_plans_sync_plan_id_products`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "sync_plan_id" in params:
            path_params["sync_plan_id"] = params["sync_plan_id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "subscription_id" in params:
            query_params.append(
                ("subscription_id", params["subscription_id"])
            )  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "enabled" in params:
            query_params.append(("enabled", params["enabled"]))  # noqa: E501
        if "custom" in params:
            query_params.append(("custom", params["custom"]))  # noqa: E501
        if "redhat_only" in params:
            query_params.append(("redhat_only", params["redhat_only"]))  # noqa: E501
        if "include_available_content" in params:
            query_params.append(
                ("include_available_content", params["include_available_content"])
            )  # noqa: E501
        if "available_for" in params:
            query_params.append(
                ("available_for", params["available_for"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/sync_plans/{sync_plan_id}/products",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_products(self, organization_id, name, **kwargs):  # noqa: E501
        """Create a product  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_products(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param str name: Product name (required)
        :param str description: Product description
        :param float gpg_key_id: Identifier of the GPG key
        :param float ssl_ca_cert_id: Idenifier of the SSL CA Cert
        :param float ssl_client_cert_id: Identifier of the SSL Client Cert
        :param float ssl_client_key_id: Identifier of the SSL Client Key
        :param float sync_plan_id: Plan numeric identifier
        :param str label:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_products_with_http_info(
                organization_id, name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_products_with_http_info(
                organization_id, name, **kwargs
            )  # noqa: E501
            return data

    def post_products_with_http_info(
        self, organization_id, name, **kwargs
    ):  # noqa: E501
        """Create a product  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_products_with_http_info(organization_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: ID of the organization (required)
        :param str name: Product name (required)
        :param str description: Product description
        :param float gpg_key_id: Identifier of the GPG key
        :param float ssl_ca_cert_id: Idenifier of the SSL CA Cert
        :param float ssl_client_cert_id: Identifier of the SSL Client Cert
        :param float ssl_client_key_id: Identifier of the SSL Client Key
        :param float sync_plan_id: Plan numeric identifier
        :param str label:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "name",
            "description",
            "gpg_key_id",
            "ssl_ca_cert_id",
            "ssl_client_cert_id",
            "ssl_client_key_id",
            "sync_plan_id",
            "label",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_products" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_products`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_products`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "gpg_key_id" in params:
            form_params.append(("gpg_key_id", params["gpg_key_id"]))  # noqa: E501
        if "ssl_ca_cert_id" in params:
            form_params.append(
                ("ssl_ca_cert_id", params["ssl_ca_cert_id"])
            )  # noqa: E501
        if "ssl_client_cert_id" in params:
            form_params.append(
                ("ssl_client_cert_id", params["ssl_client_cert_id"])
            )  # noqa: E501
        if "ssl_client_key_id" in params:
            form_params.append(
                ("ssl_client_key_id", params["ssl_client_key_id"])
            )  # noqa: E501
        if "sync_plan_id" in params:
            form_params.append(("sync_plan_id", params["sync_plan_id"]))  # noqa: E501
        if "label" in params:
            form_params.append(("label", params["label"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_products_id_sync(self, id, **kwargs):  # noqa: E501
        """Sync all repositories for a product  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_products_id_sync(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: product ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_products_id_sync_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_products_id_sync_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def post_products_id_sync_with_http_info(self, id, **kwargs):  # noqa: E501
        """Sync all repositories for a product  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_products_id_sync_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: product ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_products_id_sync" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_products_id_sync`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/{id}/sync",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_products_id(self, id, **kwargs):  # noqa: E501
        """Updates a product  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: product numeric identifier (required)
        :param str description: Product description
        :param float gpg_key_id: Identifier of the GPG key
        :param float ssl_ca_cert_id: Idenifier of the SSL CA Cert
        :param float ssl_client_cert_id: Identifier of the SSL Client Cert
        :param float ssl_client_key_id: Identifier of the SSL Client Key
        :param float sync_plan_id: Plan numeric identifier
        :param str name: Product name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_products_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_products_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_products_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates a product  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_products_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: product numeric identifier (required)
        :param str description: Product description
        :param float gpg_key_id: Identifier of the GPG key
        :param float ssl_ca_cert_id: Idenifier of the SSL CA Cert
        :param float ssl_client_cert_id: Identifier of the SSL Client Cert
        :param float ssl_client_key_id: Identifier of the SSL Client Key
        :param float sync_plan_id: Plan numeric identifier
        :param str name: Product name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "description",
            "gpg_key_id",
            "ssl_ca_cert_id",
            "ssl_client_cert_id",
            "ssl_client_key_id",
            "sync_plan_id",
            "name",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_products_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_products_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "gpg_key_id" in params:
            form_params.append(("gpg_key_id", params["gpg_key_id"]))  # noqa: E501
        if "ssl_ca_cert_id" in params:
            form_params.append(
                ("ssl_ca_cert_id", params["ssl_ca_cert_id"])
            )  # noqa: E501
        if "ssl_client_cert_id" in params:
            form_params.append(
                ("ssl_client_cert_id", params["ssl_client_cert_id"])
            )  # noqa: E501
        if "ssl_client_key_id" in params:
            form_params.append(
                ("ssl_client_key_id", params["ssl_client_key_id"])
            )  # noqa: E501
        if "sync_plan_id" in params:
            form_params.append(("sync_plan_id", params["sync_plan_id"]))  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/products/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
