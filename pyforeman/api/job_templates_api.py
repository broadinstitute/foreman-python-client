# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class JobTemplatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_job_templates_id(self, id, **kwargs):  # noqa: E501
        """Delete a job template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_job_templates_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_job_templates_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_job_templates_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_job_templates_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a job template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_job_templates_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_job_templates_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_job_templates_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/job_templates/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_job_templates(self, location_id, organization_id, **kwargs):  # noqa: E501
        """List job templates  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_templates(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_job_templates_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_job_templates_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_job_templates_with_http_info(
        self, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List job templates  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_templates_with_http_info(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_templates" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_job_templates`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_job_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/job_templates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_job_templates_id(self, id, **kwargs):  # noqa: E501
        """Show job template details  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_templates_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_job_templates_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_templates_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_job_templates_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show job template details  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_templates_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_templates_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_job_templates_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/job_templates/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_job_templates_id_export(self, id, **kwargs):  # noqa: E501
        """Export a job template to ERB  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_templates_id_export(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_job_templates_id_export_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_job_templates_id_export_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_job_templates_id_export_with_http_info(self, id, **kwargs):  # noqa: E501
        """Export a job template to ERB  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_templates_id_export_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_templates_id_export" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_job_templates_id_export`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/job_templates/{id}/export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_job_templates_revision(self, **kwargs):  # noqa: E501
        """get_job_templates_revision  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_templates_revision(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str version: Template version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_job_templates_revision_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_job_templates_revision_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def get_job_templates_revision_with_http_info(self, **kwargs):  # noqa: E501
        """get_job_templates_revision  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_templates_revision_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str version: Template version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["location_id", "organization_id", "version"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_templates_revision" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "version" in params:
            query_params.append(("version", params["version"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/job_templates/revision",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_location_id_job_templates(
        self, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List job templates per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_job_templates(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_location_id_job_templates_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_locations_location_id_job_templates_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_locations_location_id_job_templates_with_http_info(
        self, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List job templates per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_job_templates_with_http_info(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_location_id_job_templates" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_locations_location_id_job_templates`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_locations_location_id_job_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/job_templates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_job_templates(
        self, organization_id, location_id, **kwargs
    ):  # noqa: E501
        """List job templates per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_job_templates(organization_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_job_templates_with_http_info(
                organization_id, location_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_job_templates_with_http_info(
                organization_id, location_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_job_templates_with_http_info(
        self, organization_id, location_id, **kwargs
    ):  # noqa: E501
        """List job templates per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_job_templates_with_http_info(organization_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "search",
            "order",
            "page",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_job_templates" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_job_templates`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_organizations_organization_id_job_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/job_templates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_job_templates(
        self,
        job_template_name,
        job_template_job_category,
        job_template_template,
        job_template_provider_type,
        **kwargs
    ):  # noqa: E501
        """Create a job template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_job_templates(job_template_name, job_template_job_category, job_template_template, job_template_provider_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_template_name: Template name (required)
        :param str job_template_job_category: Job category (required)
        :param str job_template_template: (required)
        :param str job_template_provider_type: Provider type (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str job_template_description:
        :param str job_template_description_format: This template is used to generate the description. Input values can be used using the syntax %{package}. You may also include the job category and template name using %{job_category} and %{template_name}.
        :param bool job_template_snippet:
        :param str job_template_audit_comment:
        :param bool job_template_locked: Whether or not the template is locked for editing
        :param str job_template_effective_user_attributes_value: What user should be used to run the script (using sudo-like mechanisms)
        :param bool job_template_effective_user_attributes_overridable: Whether it should be allowed to override the effective user from the invocation form.
        :param bool job_template_effective_user_attributes_current_user: Whether the current user login should be used as the effective user
        :param list[str] job_template_location_ids: REPLACE locations with given ids
        :param list[str] job_template_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_job_templates_with_http_info(
                job_template_name,
                job_template_job_category,
                job_template_template,
                job_template_provider_type,
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_job_templates_with_http_info(
                job_template_name,
                job_template_job_category,
                job_template_template,
                job_template_provider_type,
                **kwargs
            )  # noqa: E501
            return data

    def post_job_templates_with_http_info(
        self,
        job_template_name,
        job_template_job_category,
        job_template_template,
        job_template_provider_type,
        **kwargs
    ):  # noqa: E501
        """Create a job template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_job_templates_with_http_info(job_template_name, job_template_job_category, job_template_template, job_template_provider_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_template_name: Template name (required)
        :param str job_template_job_category: Job category (required)
        :param str job_template_template: (required)
        :param str job_template_provider_type: Provider type (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str job_template_description:
        :param str job_template_description_format: This template is used to generate the description. Input values can be used using the syntax %{package}. You may also include the job category and template name using %{job_category} and %{template_name}.
        :param bool job_template_snippet:
        :param str job_template_audit_comment:
        :param bool job_template_locked: Whether or not the template is locked for editing
        :param str job_template_effective_user_attributes_value: What user should be used to run the script (using sudo-like mechanisms)
        :param bool job_template_effective_user_attributes_overridable: Whether it should be allowed to override the effective user from the invocation form.
        :param bool job_template_effective_user_attributes_current_user: Whether the current user login should be used as the effective user
        :param list[str] job_template_location_ids: REPLACE locations with given ids
        :param list[str] job_template_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "job_template_name",
            "job_template_job_category",
            "job_template_template",
            "job_template_provider_type",
            "location_id",
            "organization_id",
            "job_template_description",
            "job_template_description_format",
            "job_template_snippet",
            "job_template_audit_comment",
            "job_template_locked",
            "job_template_effective_user_attributes_value",
            "job_template_effective_user_attributes_overridable",
            "job_template_effective_user_attributes_current_user",
            "job_template_location_ids",
            "job_template_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_job_templates" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'job_template_name' is set
        if self.api_client.client_side_validation and (
            "job_template_name" not in params or params["job_template_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `job_template_name` when calling `post_job_templates`"
            )  # noqa: E501
        # verify the required parameter 'job_template_job_category' is set
        if self.api_client.client_side_validation and (
            "job_template_job_category" not in params
            or params["job_template_job_category"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `job_template_job_category` when calling `post_job_templates`"
            )  # noqa: E501
        # verify the required parameter 'job_template_template' is set
        if self.api_client.client_side_validation and (
            "job_template_template" not in params
            or params["job_template_template"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `job_template_template` when calling `post_job_templates`"
            )  # noqa: E501
        # verify the required parameter 'job_template_provider_type' is set
        if self.api_client.client_side_validation and (
            "job_template_provider_type" not in params
            or params["job_template_provider_type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `job_template_provider_type` when calling `post_job_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "job_template_name" in params:
            form_params.append(
                ("job_template[name]", params["job_template_name"])
            )  # noqa: E501
        if "job_template_job_category" in params:
            form_params.append(
                ("job_template[job_category]", params["job_template_job_category"])
            )  # noqa: E501
        if "job_template_template" in params:
            form_params.append(
                ("job_template[template]", params["job_template_template"])
            )  # noqa: E501
        if "job_template_provider_type" in params:
            form_params.append(
                ("job_template[provider_type]", params["job_template_provider_type"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "job_template_description" in params:
            form_params.append(
                ("job_template[description]", params["job_template_description"])
            )  # noqa: E501
        if "job_template_description_format" in params:
            form_params.append(
                (
                    "job_template[description_format]",
                    params["job_template_description_format"],
                )
            )  # noqa: E501
        if "job_template_snippet" in params:
            form_params.append(
                ("job_template[snippet]", params["job_template_snippet"])
            )  # noqa: E501
        if "job_template_audit_comment" in params:
            form_params.append(
                ("job_template[audit_comment]", params["job_template_audit_comment"])
            )  # noqa: E501
        if "job_template_locked" in params:
            form_params.append(
                ("job_template[locked]", params["job_template_locked"])
            )  # noqa: E501
        if "job_template_effective_user_attributes_value" in params:
            form_params.append(
                (
                    "job_template[effective_user_attributes][value]",
                    params["job_template_effective_user_attributes_value"],
                )
            )  # noqa: E501
        if "job_template_effective_user_attributes_overridable" in params:
            form_params.append(
                (
                    "job_template[effective_user_attributes][overridable]",
                    params["job_template_effective_user_attributes_overridable"],
                )
            )  # noqa: E501
        if "job_template_effective_user_attributes_current_user" in params:
            form_params.append(
                (
                    "job_template[effective_user_attributes][current_user]",
                    params["job_template_effective_user_attributes_current_user"],
                )
            )  # noqa: E501
        if "job_template_location_ids" in params:
            form_params.append(
                ("job_template[location_ids]", params["job_template_location_ids"])
            )  # noqa: E501
            collection_formats["job_template[location_ids]"] = "csv"  # noqa: E501
        if "job_template_organization_ids" in params:
            form_params.append(
                (
                    "job_template[organization_ids]",
                    params["job_template_organization_ids"],
                )
            )  # noqa: E501
            collection_formats["job_template[organization_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/job_templates",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_job_templates_id_clone(
        self, id, job_template_name, **kwargs
    ):  # noqa: E501
        """Clone a provision template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_job_templates_id_clone(id, job_template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str job_template_name: Template name (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_job_templates_id_clone_with_http_info(
                id, job_template_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_job_templates_id_clone_with_http_info(
                id, job_template_name, **kwargs
            )  # noqa: E501
            return data

    def post_job_templates_id_clone_with_http_info(
        self, id, job_template_name, **kwargs
    ):  # noqa: E501
        """Clone a provision template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_job_templates_id_clone_with_http_info(id, job_template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str job_template_name: Template name (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "job_template_name",
            "location_id",
            "organization_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_job_templates_id_clone" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_job_templates_id_clone`"
            )  # noqa: E501
        # verify the required parameter 'job_template_name' is set
        if self.api_client.client_side_validation and (
            "job_template_name" not in params or params["job_template_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `job_template_name` when calling `post_job_templates_id_clone`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "job_template_name" in params:
            form_params.append(
                ("job_template[name]", params["job_template_name"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/job_templates/{id}/clone",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_job_templates_import(self, template, **kwargs):  # noqa: E501
        """Import a job template from ERB  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_job_templates_import(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template: Template ERB (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool overwrite: Overwrite template if it already exists
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_job_templates_import_with_http_info(
                template, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_job_templates_import_with_http_info(
                template, **kwargs
            )  # noqa: E501
            return data

    def post_job_templates_import_with_http_info(
        self, template, **kwargs
    ):  # noqa: E501
        """Import a job template from ERB  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_job_templates_import_with_http_info(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template: Template ERB (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool overwrite: Overwrite template if it already exists
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "template",
            "location_id",
            "organization_id",
            "overwrite",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_job_templates_import" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and (
            "template" not in params or params["template"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `template` when calling `post_job_templates_import`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "template" in params:
            form_params.append(("template", params["template"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "overwrite" in params:
            form_params.append(("overwrite", params["overwrite"]))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/job_templates/import",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_job_templates_id(self, id, **kwargs):  # noqa: E501
        """Update a job template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_job_templates_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str job_template_name: Template name
        :param str job_template_description:
        :param str job_template_job_category: Job category
        :param str job_template_description_format: This template is used to generate the description. Input values can be used using the syntax %{package}. You may also include the job category and template name using %{job_category} and %{template_name}.
        :param str job_template_template:
        :param str job_template_provider_type: Provider type
        :param bool job_template_snippet:
        :param str job_template_audit_comment:
        :param bool job_template_locked: Whether or not the template is locked for editing
        :param str job_template_effective_user_attributes_value: What user should be used to run the script (using sudo-like mechanisms)
        :param bool job_template_effective_user_attributes_overridable: Whether it should be allowed to override the effective user from the invocation form.
        :param bool job_template_effective_user_attributes_current_user: Whether the current user login should be used as the effective user
        :param list[str] job_template_location_ids: REPLACE locations with given ids
        :param list[str] job_template_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_job_templates_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_job_templates_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_job_templates_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a job template  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_job_templates_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str job_template_name: Template name
        :param str job_template_description:
        :param str job_template_job_category: Job category
        :param str job_template_description_format: This template is used to generate the description. Input values can be used using the syntax %{package}. You may also include the job category and template name using %{job_category} and %{template_name}.
        :param str job_template_template:
        :param str job_template_provider_type: Provider type
        :param bool job_template_snippet:
        :param str job_template_audit_comment:
        :param bool job_template_locked: Whether or not the template is locked for editing
        :param str job_template_effective_user_attributes_value: What user should be used to run the script (using sudo-like mechanisms)
        :param bool job_template_effective_user_attributes_overridable: Whether it should be allowed to override the effective user from the invocation form.
        :param bool job_template_effective_user_attributes_current_user: Whether the current user login should be used as the effective user
        :param list[str] job_template_location_ids: REPLACE locations with given ids
        :param list[str] job_template_organization_ids: REPLACE organizations with given ids.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "job_template_name",
            "job_template_description",
            "job_template_job_category",
            "job_template_description_format",
            "job_template_template",
            "job_template_provider_type",
            "job_template_snippet",
            "job_template_audit_comment",
            "job_template_locked",
            "job_template_effective_user_attributes_value",
            "job_template_effective_user_attributes_overridable",
            "job_template_effective_user_attributes_current_user",
            "job_template_location_ids",
            "job_template_organization_ids",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_job_templates_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_job_templates_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "job_template_name" in params:
            form_params.append(
                ("job_template[name]", params["job_template_name"])
            )  # noqa: E501
        if "job_template_description" in params:
            form_params.append(
                ("job_template[description]", params["job_template_description"])
            )  # noqa: E501
        if "job_template_job_category" in params:
            form_params.append(
                ("job_template[job_category]", params["job_template_job_category"])
            )  # noqa: E501
        if "job_template_description_format" in params:
            form_params.append(
                (
                    "job_template[description_format]",
                    params["job_template_description_format"],
                )
            )  # noqa: E501
        if "job_template_template" in params:
            form_params.append(
                ("job_template[template]", params["job_template_template"])
            )  # noqa: E501
        if "job_template_provider_type" in params:
            form_params.append(
                ("job_template[provider_type]", params["job_template_provider_type"])
            )  # noqa: E501
        if "job_template_snippet" in params:
            form_params.append(
                ("job_template[snippet]", params["job_template_snippet"])
            )  # noqa: E501
        if "job_template_audit_comment" in params:
            form_params.append(
                ("job_template[audit_comment]", params["job_template_audit_comment"])
            )  # noqa: E501
        if "job_template_locked" in params:
            form_params.append(
                ("job_template[locked]", params["job_template_locked"])
            )  # noqa: E501
        if "job_template_effective_user_attributes_value" in params:
            form_params.append(
                (
                    "job_template[effective_user_attributes][value]",
                    params["job_template_effective_user_attributes_value"],
                )
            )  # noqa: E501
        if "job_template_effective_user_attributes_overridable" in params:
            form_params.append(
                (
                    "job_template[effective_user_attributes][overridable]",
                    params["job_template_effective_user_attributes_overridable"],
                )
            )  # noqa: E501
        if "job_template_effective_user_attributes_current_user" in params:
            form_params.append(
                (
                    "job_template[effective_user_attributes][current_user]",
                    params["job_template_effective_user_attributes_current_user"],
                )
            )  # noqa: E501
        if "job_template_location_ids" in params:
            form_params.append(
                ("job_template[location_ids]", params["job_template_location_ids"])
            )  # noqa: E501
            collection_formats["job_template[location_ids]"] = "csv"  # noqa: E501
        if "job_template_organization_ids" in params:
            form_params.append(
                (
                    "job_template[organization_ids]",
                    params["job_template_organization_ids"],
                )
            )  # noqa: E501
            collection_formats["job_template[organization_ids]"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/job_templates/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
