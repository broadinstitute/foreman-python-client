# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class HostgroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_hostgroups_id(self, id, **kwargs):  # noqa: E501
        """Delete a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hostgroups_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_hostgroups_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_hostgroups_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_hostgroups_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_hostgroups_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hostgroups_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_hostgroups_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hostgroups(self, location_id, organization_id, **kwargs):  # noqa: E501
        """List all host groups  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :param list[str] include: Array of extra information types to include
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hostgroups_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_hostgroups_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_hostgroups_with_http_info(
        self, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all host groups  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups_with_http_info(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :param list[str] include: Array of extra information types to include
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
            "include",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hostgroups" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_hostgroups`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_hostgroups`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "include" in params:
            query_params.append(("include", params["include"]))  # noqa: E501
            collection_formats["include"] = "csv"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_hostgroups_id(self, id, **kwargs):  # noqa: E501
        """Show a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool show_hidden_parameters: Display hidden parameter values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_hostgroups_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hostgroups_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_hostgroups_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param bool show_hidden_parameters: Display hidden parameter values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "show_hidden_parameters",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hostgroups_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_hostgroups_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "show_hidden_parameters" in params:
            query_params.append(
                ("show_hidden_parameters", params["show_hidden_parameters"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_locations_location_id_hostgroups(
        self, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all host groups per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_hostgroups(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :param list[str] include: Array of extra information types to include
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_locations_location_id_hostgroups_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_locations_location_id_hostgroups_with_http_info(
                location_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_locations_location_id_hostgroups_with_http_info(
        self, location_id, organization_id, **kwargs
    ):  # noqa: E501
        """List all host groups per location  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_location_id_hostgroups_with_http_info(location_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float location_id: Scope by locations (required)
        :param float organization_id: Scope by organizations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :param list[str] include: Array of extra information types to include
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "location_id",
            "organization_id",
            "search",
            "order",
            "page",
            "per_page",
            "include",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_location_id_hostgroups" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_locations_location_id_hostgroups`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_locations_location_id_hostgroups`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "location_id" in params:
            path_params["location_id"] = params["location_id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "include" in params:
            query_params.append(("include", params["include"]))  # noqa: E501
            collection_formats["include"] = "csv"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/locations/{location_id}/hostgroups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_hostgroups(
        self, organization_id, location_id, **kwargs
    ):  # noqa: E501
        """List all host groups per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_hostgroups(organization_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :param list[str] include: Array of extra information types to include
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_hostgroups_with_http_info(
                organization_id, location_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_organization_id_hostgroups_with_http_info(
                organization_id, location_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_hostgroups_with_http_info(
        self, organization_id, location_id, **kwargs
    ):  # noqa: E501
        """List all host groups per organization  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_hostgroups_with_http_info(organization_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Scope by organizations (required)
        :param float location_id: Scope by locations (required)
        :param str search: filter results
        :param str order: Sort and order by a searchable field, e.g. '<field> DESC'
        :param float page: Page number, starting at 1
        :param str per_page: Number of results per page to return, 'all' to return all results
        :param list[str] include: Array of extra information types to include
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "location_id",
            "search",
            "order",
            "page",
            "per_page",
            "include",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_hostgroups" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_hostgroups`"
            )  # noqa: E501
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and (
            "location_id" not in params or params["location_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `location_id` when calling `get_organizations_organization_id_hostgroups`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "location_id" in params:
            query_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "include" in params:
            query_params.append(("include", params["include"]))  # noqa: E501
            collection_formats["include"] = "csv"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/hostgroups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hostgroups(self, hostgroup_name, **kwargs):  # noqa: E501
        """Create a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hostgroups(hostgroup_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_name: Name of the host group (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str hostgroup_description: Host group description
        :param float hostgroup_parent_id: Parent ID of the host group
        :param float hostgroup_compute_profile_id: Compute profile ID
        :param float hostgroup_compute_resource_id: Compute resource ID
        :param float hostgroup_operatingsystem_id: Operating system ID
        :param float hostgroup_architecture_id: Architecture ID
        :param str hostgroup_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :param float hostgroup_medium_id: Media ID
        :param float hostgroup_ptable_id: Partition table ID
        :param float hostgroup_subnet_id: Subnet ID
        :param float hostgroup_subnet6_id: Subnet IPv6 ID
        :param float hostgroup_domain_id: Domain ID
        :param float hostgroup_realm_id: Realm ID
        :param list[str] hostgroup_group_parameters_attributes: Array of parameters
        :param float hostgroup_puppet_proxy_id: Puppet proxy ID
        :param float hostgroup_puppet_ca_proxy_id: Puppet CA proxy ID
        :param str hostgroup_root_pass: Root password on provisioned hosts
        :param list[str] hostgroup_location_ids: REPLACE locations with given ids
        :param list[str] hostgroup_organization_ids: REPLACE organizations with given ids.
        :param float hostgroup_content_source_id: Content source ID
        :param float hostgroup_content_view_id: Content view ID
        :param float hostgroup_lifecycle_environment_id: Lifecycle environment ID
        :param float hostgroup_kickstart_repository_id: Kickstart repository ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hostgroups_with_http_info(
                hostgroup_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hostgroups_with_http_info(
                hostgroup_name, **kwargs
            )  # noqa: E501
            return data

    def post_hostgroups_with_http_info(self, hostgroup_name, **kwargs):  # noqa: E501
        """Create a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hostgroups_with_http_info(hostgroup_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hostgroup_name: Name of the host group (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str hostgroup_description: Host group description
        :param float hostgroup_parent_id: Parent ID of the host group
        :param float hostgroup_compute_profile_id: Compute profile ID
        :param float hostgroup_compute_resource_id: Compute resource ID
        :param float hostgroup_operatingsystem_id: Operating system ID
        :param float hostgroup_architecture_id: Architecture ID
        :param str hostgroup_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :param float hostgroup_medium_id: Media ID
        :param float hostgroup_ptable_id: Partition table ID
        :param float hostgroup_subnet_id: Subnet ID
        :param float hostgroup_subnet6_id: Subnet IPv6 ID
        :param float hostgroup_domain_id: Domain ID
        :param float hostgroup_realm_id: Realm ID
        :param list[str] hostgroup_group_parameters_attributes: Array of parameters
        :param float hostgroup_puppet_proxy_id: Puppet proxy ID
        :param float hostgroup_puppet_ca_proxy_id: Puppet CA proxy ID
        :param str hostgroup_root_pass: Root password on provisioned hosts
        :param list[str] hostgroup_location_ids: REPLACE locations with given ids
        :param list[str] hostgroup_organization_ids: REPLACE organizations with given ids.
        :param float hostgroup_content_source_id: Content source ID
        :param float hostgroup_content_view_id: Content view ID
        :param float hostgroup_lifecycle_environment_id: Lifecycle environment ID
        :param float hostgroup_kickstart_repository_id: Kickstart repository ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "hostgroup_name",
            "location_id",
            "organization_id",
            "hostgroup_description",
            "hostgroup_parent_id",
            "hostgroup_compute_profile_id",
            "hostgroup_compute_resource_id",
            "hostgroup_operatingsystem_id",
            "hostgroup_architecture_id",
            "hostgroup_pxe_loader",
            "hostgroup_medium_id",
            "hostgroup_ptable_id",
            "hostgroup_subnet_id",
            "hostgroup_subnet6_id",
            "hostgroup_domain_id",
            "hostgroup_realm_id",
            "hostgroup_group_parameters_attributes",
            "hostgroup_puppet_proxy_id",
            "hostgroup_puppet_ca_proxy_id",
            "hostgroup_root_pass",
            "hostgroup_location_ids",
            "hostgroup_organization_ids",
            "hostgroup_content_source_id",
            "hostgroup_content_view_id",
            "hostgroup_lifecycle_environment_id",
            "hostgroup_kickstart_repository_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hostgroups" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'hostgroup_name' is set
        if self.api_client.client_side_validation and (
            "hostgroup_name" not in params or params["hostgroup_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `hostgroup_name` when calling `post_hostgroups`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "hostgroup_name" in params:
            form_params.append(
                ("hostgroup[name]", params["hostgroup_name"])
            )  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "hostgroup_description" in params:
            form_params.append(
                ("hostgroup[description]", params["hostgroup_description"])
            )  # noqa: E501
        if "hostgroup_parent_id" in params:
            form_params.append(
                ("hostgroup[parent_id]", params["hostgroup_parent_id"])
            )  # noqa: E501
        if "hostgroup_compute_profile_id" in params:
            form_params.append(
                (
                    "hostgroup[compute_profile_id]",
                    params["hostgroup_compute_profile_id"],
                )
            )  # noqa: E501
        if "hostgroup_compute_resource_id" in params:
            form_params.append(
                (
                    "hostgroup[compute_resource_id]",
                    params["hostgroup_compute_resource_id"],
                )
            )  # noqa: E501
        if "hostgroup_operatingsystem_id" in params:
            form_params.append(
                (
                    "hostgroup[operatingsystem_id]",
                    params["hostgroup_operatingsystem_id"],
                )
            )  # noqa: E501
        if "hostgroup_architecture_id" in params:
            form_params.append(
                ("hostgroup[architecture_id]", params["hostgroup_architecture_id"])
            )  # noqa: E501
        if "hostgroup_pxe_loader" in params:
            form_params.append(
                ("hostgroup[pxe_loader]", params["hostgroup_pxe_loader"])
            )  # noqa: E501
        if "hostgroup_medium_id" in params:
            form_params.append(
                ("hostgroup[medium_id]", params["hostgroup_medium_id"])
            )  # noqa: E501
        if "hostgroup_ptable_id" in params:
            form_params.append(
                ("hostgroup[ptable_id]", params["hostgroup_ptable_id"])
            )  # noqa: E501
        if "hostgroup_subnet_id" in params:
            form_params.append(
                ("hostgroup[subnet_id]", params["hostgroup_subnet_id"])
            )  # noqa: E501
        if "hostgroup_subnet6_id" in params:
            form_params.append(
                ("hostgroup[subnet6_id]", params["hostgroup_subnet6_id"])
            )  # noqa: E501
        if "hostgroup_domain_id" in params:
            form_params.append(
                ("hostgroup[domain_id]", params["hostgroup_domain_id"])
            )  # noqa: E501
        if "hostgroup_realm_id" in params:
            form_params.append(
                ("hostgroup[realm_id]", params["hostgroup_realm_id"])
            )  # noqa: E501
        if "hostgroup_group_parameters_attributes" in params:
            form_params.append(
                (
                    "hostgroup[group_parameters_attributes]",
                    params["hostgroup_group_parameters_attributes"],
                )
            )  # noqa: E501
            collection_formats[
                "hostgroup[group_parameters_attributes]"
            ] = "csv"  # noqa: E501
        if "hostgroup_puppet_proxy_id" in params:
            form_params.append(
                ("hostgroup[puppet_proxy_id]", params["hostgroup_puppet_proxy_id"])
            )  # noqa: E501
        if "hostgroup_puppet_ca_proxy_id" in params:
            form_params.append(
                (
                    "hostgroup[puppet_ca_proxy_id]",
                    params["hostgroup_puppet_ca_proxy_id"],
                )
            )  # noqa: E501
        if "hostgroup_root_pass" in params:
            form_params.append(
                ("hostgroup[root_pass]", params["hostgroup_root_pass"])
            )  # noqa: E501
        if "hostgroup_location_ids" in params:
            form_params.append(
                ("hostgroup[location_ids]", params["hostgroup_location_ids"])
            )  # noqa: E501
            collection_formats["hostgroup[location_ids]"] = "csv"  # noqa: E501
        if "hostgroup_organization_ids" in params:
            form_params.append(
                ("hostgroup[organization_ids]", params["hostgroup_organization_ids"])
            )  # noqa: E501
            collection_formats["hostgroup[organization_ids]"] = "csv"  # noqa: E501
        if "hostgroup_content_source_id" in params:
            form_params.append(
                ("hostgroup[content_source_id]", params["hostgroup_content_source_id"])
            )  # noqa: E501
        if "hostgroup_content_view_id" in params:
            form_params.append(
                ("hostgroup[content_view_id]", params["hostgroup_content_view_id"])
            )  # noqa: E501
        if "hostgroup_lifecycle_environment_id" in params:
            form_params.append(
                (
                    "hostgroup[lifecycle_environment_id]",
                    params["hostgroup_lifecycle_environment_id"],
                )
            )  # noqa: E501
        if "hostgroup_kickstart_repository_id" in params:
            form_params.append(
                (
                    "hostgroup[kickstart_repository_id]",
                    params["hostgroup_kickstart_repository_id"],
                )
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_hostgroups_id_clone(self, id, name, **kwargs):  # noqa: E501
        """Clone a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hostgroups_id_clone(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: (required)
        :param str name: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_hostgroups_id_clone_with_http_info(
                id, name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_hostgroups_id_clone_with_http_info(
                id, name, **kwargs
            )  # noqa: E501
            return data

    def post_hostgroups_id_clone_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """Clone a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_hostgroups_id_clone_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: (required)
        :param str name: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "name", "location_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_hostgroups_id_clone" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `post_hostgroups_id_clone`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_hostgroups_id_clone`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{id}/clone",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hostgroups_id(self, id, **kwargs):  # noqa: E501
        """Update a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hostgroups_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str hostgroup_name: Name of the host group
        :param str hostgroup_description: Host group description
        :param float hostgroup_parent_id: Parent ID of the host group
        :param float hostgroup_compute_profile_id: Compute profile ID
        :param float hostgroup_compute_resource_id: Compute resource ID
        :param float hostgroup_operatingsystem_id: Operating system ID
        :param float hostgroup_architecture_id: Architecture ID
        :param str hostgroup_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :param float hostgroup_medium_id: Media ID
        :param float hostgroup_ptable_id: Partition table ID
        :param float hostgroup_subnet_id: Subnet ID
        :param float hostgroup_subnet6_id: Subnet IPv6 ID
        :param float hostgroup_domain_id: Domain ID
        :param float hostgroup_realm_id: Realm ID
        :param list[str] hostgroup_group_parameters_attributes: Array of parameters
        :param float hostgroup_puppet_proxy_id: Puppet proxy ID
        :param float hostgroup_puppet_ca_proxy_id: Puppet CA proxy ID
        :param str hostgroup_root_pass: Root password on provisioned hosts
        :param list[str] hostgroup_location_ids: REPLACE locations with given ids
        :param list[str] hostgroup_organization_ids: REPLACE organizations with given ids.
        :param float hostgroup_content_source_id: Content source ID
        :param float hostgroup_content_view_id: Content view ID
        :param float hostgroup_lifecycle_environment_id: Lifecycle environment ID
        :param float hostgroup_kickstart_repository_id: Kickstart repository ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hostgroups_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_hostgroups_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_hostgroups_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a host group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hostgroups_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param str hostgroup_name: Name of the host group
        :param str hostgroup_description: Host group description
        :param float hostgroup_parent_id: Parent ID of the host group
        :param float hostgroup_compute_profile_id: Compute profile ID
        :param float hostgroup_compute_resource_id: Compute resource ID
        :param float hostgroup_operatingsystem_id: Operating system ID
        :param float hostgroup_architecture_id: Architecture ID
        :param str hostgroup_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :param float hostgroup_medium_id: Media ID
        :param float hostgroup_ptable_id: Partition table ID
        :param float hostgroup_subnet_id: Subnet ID
        :param float hostgroup_subnet6_id: Subnet IPv6 ID
        :param float hostgroup_domain_id: Domain ID
        :param float hostgroup_realm_id: Realm ID
        :param list[str] hostgroup_group_parameters_attributes: Array of parameters
        :param float hostgroup_puppet_proxy_id: Puppet proxy ID
        :param float hostgroup_puppet_ca_proxy_id: Puppet CA proxy ID
        :param str hostgroup_root_pass: Root password on provisioned hosts
        :param list[str] hostgroup_location_ids: REPLACE locations with given ids
        :param list[str] hostgroup_organization_ids: REPLACE organizations with given ids.
        :param float hostgroup_content_source_id: Content source ID
        :param float hostgroup_content_view_id: Content view ID
        :param float hostgroup_lifecycle_environment_id: Lifecycle environment ID
        :param float hostgroup_kickstart_repository_id: Kickstart repository ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "hostgroup_name",
            "hostgroup_description",
            "hostgroup_parent_id",
            "hostgroup_compute_profile_id",
            "hostgroup_compute_resource_id",
            "hostgroup_operatingsystem_id",
            "hostgroup_architecture_id",
            "hostgroup_pxe_loader",
            "hostgroup_medium_id",
            "hostgroup_ptable_id",
            "hostgroup_subnet_id",
            "hostgroup_subnet6_id",
            "hostgroup_domain_id",
            "hostgroup_realm_id",
            "hostgroup_group_parameters_attributes",
            "hostgroup_puppet_proxy_id",
            "hostgroup_puppet_ca_proxy_id",
            "hostgroup_root_pass",
            "hostgroup_location_ids",
            "hostgroup_organization_ids",
            "hostgroup_content_source_id",
            "hostgroup_content_view_id",
            "hostgroup_lifecycle_environment_id",
            "hostgroup_kickstart_repository_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hostgroups_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_hostgroups_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "hostgroup_name" in params:
            form_params.append(
                ("hostgroup[name]", params["hostgroup_name"])
            )  # noqa: E501
        if "hostgroup_description" in params:
            form_params.append(
                ("hostgroup[description]", params["hostgroup_description"])
            )  # noqa: E501
        if "hostgroup_parent_id" in params:
            form_params.append(
                ("hostgroup[parent_id]", params["hostgroup_parent_id"])
            )  # noqa: E501
        if "hostgroup_compute_profile_id" in params:
            form_params.append(
                (
                    "hostgroup[compute_profile_id]",
                    params["hostgroup_compute_profile_id"],
                )
            )  # noqa: E501
        if "hostgroup_compute_resource_id" in params:
            form_params.append(
                (
                    "hostgroup[compute_resource_id]",
                    params["hostgroup_compute_resource_id"],
                )
            )  # noqa: E501
        if "hostgroup_operatingsystem_id" in params:
            form_params.append(
                (
                    "hostgroup[operatingsystem_id]",
                    params["hostgroup_operatingsystem_id"],
                )
            )  # noqa: E501
        if "hostgroup_architecture_id" in params:
            form_params.append(
                ("hostgroup[architecture_id]", params["hostgroup_architecture_id"])
            )  # noqa: E501
        if "hostgroup_pxe_loader" in params:
            form_params.append(
                ("hostgroup[pxe_loader]", params["hostgroup_pxe_loader"])
            )  # noqa: E501
        if "hostgroup_medium_id" in params:
            form_params.append(
                ("hostgroup[medium_id]", params["hostgroup_medium_id"])
            )  # noqa: E501
        if "hostgroup_ptable_id" in params:
            form_params.append(
                ("hostgroup[ptable_id]", params["hostgroup_ptable_id"])
            )  # noqa: E501
        if "hostgroup_subnet_id" in params:
            form_params.append(
                ("hostgroup[subnet_id]", params["hostgroup_subnet_id"])
            )  # noqa: E501
        if "hostgroup_subnet6_id" in params:
            form_params.append(
                ("hostgroup[subnet6_id]", params["hostgroup_subnet6_id"])
            )  # noqa: E501
        if "hostgroup_domain_id" in params:
            form_params.append(
                ("hostgroup[domain_id]", params["hostgroup_domain_id"])
            )  # noqa: E501
        if "hostgroup_realm_id" in params:
            form_params.append(
                ("hostgroup[realm_id]", params["hostgroup_realm_id"])
            )  # noqa: E501
        if "hostgroup_group_parameters_attributes" in params:
            form_params.append(
                (
                    "hostgroup[group_parameters_attributes]",
                    params["hostgroup_group_parameters_attributes"],
                )
            )  # noqa: E501
            collection_formats[
                "hostgroup[group_parameters_attributes]"
            ] = "csv"  # noqa: E501
        if "hostgroup_puppet_proxy_id" in params:
            form_params.append(
                ("hostgroup[puppet_proxy_id]", params["hostgroup_puppet_proxy_id"])
            )  # noqa: E501
        if "hostgroup_puppet_ca_proxy_id" in params:
            form_params.append(
                (
                    "hostgroup[puppet_ca_proxy_id]",
                    params["hostgroup_puppet_ca_proxy_id"],
                )
            )  # noqa: E501
        if "hostgroup_root_pass" in params:
            form_params.append(
                ("hostgroup[root_pass]", params["hostgroup_root_pass"])
            )  # noqa: E501
        if "hostgroup_location_ids" in params:
            form_params.append(
                ("hostgroup[location_ids]", params["hostgroup_location_ids"])
            )  # noqa: E501
            collection_formats["hostgroup[location_ids]"] = "csv"  # noqa: E501
        if "hostgroup_organization_ids" in params:
            form_params.append(
                ("hostgroup[organization_ids]", params["hostgroup_organization_ids"])
            )  # noqa: E501
            collection_formats["hostgroup[organization_ids]"] = "csv"  # noqa: E501
        if "hostgroup_content_source_id" in params:
            form_params.append(
                ("hostgroup[content_source_id]", params["hostgroup_content_source_id"])
            )  # noqa: E501
        if "hostgroup_content_view_id" in params:
            form_params.append(
                ("hostgroup[content_view_id]", params["hostgroup_content_view_id"])
            )  # noqa: E501
        if "hostgroup_lifecycle_environment_id" in params:
            form_params.append(
                (
                    "hostgroup[lifecycle_environment_id]",
                    params["hostgroup_lifecycle_environment_id"],
                )
            )  # noqa: E501
        if "hostgroup_kickstart_repository_id" in params:
            form_params.append(
                (
                    "hostgroup[kickstart_repository_id]",
                    params["hostgroup_kickstart_repository_id"],
                )
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_hostgroups_id_rebuild_config(self, id, **kwargs):  # noqa: E501
        """Rebuild orchestration config  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hostgroups_id_rebuild_config(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] only: Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status
        :param bool children_hosts: Operate on child hostgroup hosts
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_hostgroups_id_rebuild_config_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_hostgroups_id_rebuild_config_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_hostgroups_id_rebuild_config_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """Rebuild orchestration config  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_hostgroups_id_rebuild_config_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float location_id: Set the current location context for the request
        :param float organization_id: Set the current organization context for the request
        :param list[str] only: Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status
        :param bool children_hosts: Operate on child hostgroup hosts
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "location_id",
            "organization_id",
            "only",
            "children_hosts",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_hostgroups_id_rebuild_config" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_hostgroups_id_rebuild_config`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "location_id" in params:
            form_params.append(("location_id", params["location_id"]))  # noqa: E501
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "only" in params:
            form_params.append(("only", params["only"]))  # noqa: E501
            collection_formats["only"] = "csv"  # noqa: E501
        if "children_hosts" in params:
            form_params.append(
                ("children_hosts", params["children_hosts"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/hostgroups/{id}/rebuild_config",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
