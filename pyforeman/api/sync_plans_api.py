# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyforeman.api_client import ApiClient


class SyncPlansApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_organizations_organization_id_sync_plans_id(
        self, organization_id, id, **kwargs
    ):  # noqa: E501
        """Destroy a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_organization_id_sync_plans_id(organization_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param float id: sync plan numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.delete_organizations_organization_id_sync_plans_id_with_http_info(
                    organization_id, id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.delete_organizations_organization_id_sync_plans_id_with_http_info(
                organization_id, id, **kwargs
            )  # noqa: E501
            return data

    def delete_organizations_organization_id_sync_plans_id_with_http_info(
        self, organization_id, id, **kwargs
    ):  # noqa: E501
        """Destroy a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_organization_id_sync_plans_id_with_http_info(organization_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param float id: sync plan numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_organization_id_sync_plans_id"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_organizations_organization_id_sync_plans_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_organizations_organization_id_sync_plans_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/sync_plans/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_sync_plans_id(self, id, organization_id, **kwargs):  # noqa: E501
        """Destroy a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sync_plans_id(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: sync plan numeric identifier (required)
        :param float organization_id: Organization ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_sync_plans_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_sync_plans_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def delete_sync_plans_id_with_http_info(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Destroy a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sync_plans_id_with_http_info(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: sync plan numeric identifier (required)
        :param float organization_id: Organization ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sync_plans_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_sync_plans_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_sync_plans_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/sync_plans/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_sync_plans(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """get_organizations_organization_id_sync_plans  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_sync_plans(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str name: filter by name
        :param str sync_date: filter by sync date
        :param str interval: filter by interval
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_sync_plans_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organizations_organization_id_sync_plans_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_sync_plans_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """get_organizations_organization_id_sync_plans  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_sync_plans_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str name: filter by name
        :param str sync_date: filter by sync date
        :param str interval: filter by interval
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "name",
            "sync_date",
            "interval",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_sync_plans" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_sync_plans`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "sync_date" in params:
            query_params.append(("sync_date", params["sync_date"]))  # noqa: E501
        if "interval" in params:
            query_params.append(("interval", params["interval"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/sync_plans",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_organization_id_sync_plans_id(
        self, organization_id, id, **kwargs
    ):  # noqa: E501
        """Show a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_sync_plans_id(organization_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param float id: sync plan numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_organization_id_sync_plans_id_with_http_info(
                organization_id, id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_organizations_organization_id_sync_plans_id_with_http_info(
                organization_id, id, **kwargs
            )  # noqa: E501
            return data

    def get_organizations_organization_id_sync_plans_id_with_http_info(
        self, organization_id, id, **kwargs
    ):  # noqa: E501
        """Show a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_organization_id_sync_plans_id_with_http_info(organization_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param float id: sync plan numeric identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_organization_id_sync_plans_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_organization_id_sync_plans_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_organizations_organization_id_sync_plans_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/sync_plans/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_sync_plans(self, organization_id, **kwargs):  # noqa: E501
        """List sync plans  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sync_plans(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str name: filter by name
        :param str sync_date: filter by sync date
        :param str interval: filter by interval
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_sync_plans_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_sync_plans_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_sync_plans_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """List sync plans  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sync_plans_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str name: filter by name
        :param str sync_date: filter by sync date
        :param str interval: filter by interval
        :param str search: Search string
        :param float page: Page number, starting at 1
        :param float per_page: Number of results per page to return
        :param str order: Sort field and order, eg. 'id DESC'
        :param bool full_result: Whether or not to show all results
        :param str sort_by: Field to sort the results on
        :param str sort_order: How to order the sorted results (e.g. ASC for ascending)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "name",
            "sync_date",
            "interval",
            "search",
            "page",
            "per_page",
            "order",
            "full_result",
            "sort_by",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_plans" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_sync_plans`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "sync_date" in params:
            query_params.append(("sync_date", params["sync_date"]))  # noqa: E501
        if "interval" in params:
            query_params.append(("interval", params["interval"]))  # noqa: E501
        if "search" in params:
            query_params.append(("search", params["search"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "full_result" in params:
            query_params.append(("full_result", params["full_result"]))  # noqa: E501
        if "sort_by" in params:
            query_params.append(("sort_by", params["sort_by"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/sync_plans",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_sync_plans_id(self, id, organization_id, **kwargs):  # noqa: E501
        """Show a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sync_plans_id(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: sync plan numeric identifier (required)
        :param float organization_id: Organization ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_sync_plans_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_sync_plans_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_sync_plans_id_with_http_info(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Show a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sync_plans_id_with_http_info(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: sync plan numeric identifier (required)
        :param float organization_id: Organization ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_plans_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `get_sync_plans_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_sync_plans_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []
        if "organization_id" in params:
            query_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/sync_plans/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organizations_organization_id_sync_plans(
        self, organization_id, name, interval, sync_date, enabled, **kwargs
    ):  # noqa: E501
        """Create a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_sync_plans(organization_id, name, interval, sync_date, enabled, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str name: sync plan name (required)
        :param str interval: how often synchronization should run (required)
        :param str sync_date: start datetime of synchronization (required)
        :param bool enabled: enables or disables synchronization (required)
        :param str description: sync plan description
        :param str cron_expression: Add custom cron logic for sync plan
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organizations_organization_id_sync_plans_with_http_info(
                organization_id, name, interval, sync_date, enabled, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_organizations_organization_id_sync_plans_with_http_info(
                organization_id, name, interval, sync_date, enabled, **kwargs
            )  # noqa: E501
            return data

    def post_organizations_organization_id_sync_plans_with_http_info(
        self, organization_id, name, interval, sync_date, enabled, **kwargs
    ):  # noqa: E501
        """Create a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_organization_id_sync_plans_with_http_info(organization_id, name, interval, sync_date, enabled, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str name: sync plan name (required)
        :param str interval: how often synchronization should run (required)
        :param str sync_date: start datetime of synchronization (required)
        :param bool enabled: enables or disables synchronization (required)
        :param str description: sync plan description
        :param str cron_expression: Add custom cron logic for sync plan
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "name",
            "interval",
            "sync_date",
            "enabled",
            "description",
            "cron_expression",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations_organization_id_sync_plans" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organizations_organization_id_sync_plans`"
            )  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and (
            "name" not in params or params["name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `post_organizations_organization_id_sync_plans`"
            )  # noqa: E501
        # verify the required parameter 'interval' is set
        if self.api_client.client_side_validation and (
            "interval" not in params or params["interval"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `interval` when calling `post_organizations_organization_id_sync_plans`"
            )  # noqa: E501
        # verify the required parameter 'sync_date' is set
        if self.api_client.client_side_validation and (
            "sync_date" not in params or params["sync_date"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `sync_date` when calling `post_organizations_organization_id_sync_plans`"
            )  # noqa: E501
        # verify the required parameter 'enabled' is set
        if self.api_client.client_side_validation and (
            "enabled" not in params or params["enabled"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `enabled` when calling `post_organizations_organization_id_sync_plans`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "interval" in params:
            form_params.append(("interval", params["interval"]))  # noqa: E501
        if "sync_date" in params:
            form_params.append(("sync_date", params["sync_date"]))  # noqa: E501
        if "enabled" in params:
            form_params.append(("enabled", params["enabled"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "cron_expression" in params:
            form_params.append(
                ("cron_expression", params["cron_expression"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/sync_plans",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_organization_id_sync_plans_id(
        self, organization_id, id, **kwargs
    ):  # noqa: E501
        """Update a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_sync_plans_id(organization_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param float id: sync plan numeric identifier (required)
        :param str name: sync plan name
        :param str interval: how often synchronization should run
        :param str sync_date: start datetime of synchronization
        :param str description: sync plan description
        :param bool enabled: enables or disables synchronization
        :param str cron_expression: Add custom cron logic for sync plan
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organizations_organization_id_sync_plans_id_with_http_info(
                organization_id, id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_organizations_organization_id_sync_plans_id_with_http_info(
                organization_id, id, **kwargs
            )  # noqa: E501
            return data

    def put_organizations_organization_id_sync_plans_id_with_http_info(
        self, organization_id, id, **kwargs
    ):  # noqa: E501
        """Update a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_sync_plans_id_with_http_info(organization_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param float id: sync plan numeric identifier (required)
        :param str name: sync plan name
        :param str interval: how often synchronization should run
        :param str sync_date: start datetime of synchronization
        :param str description: sync plan description
        :param bool enabled: enables or disables synchronization
        :param str cron_expression: Add custom cron logic for sync plan
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "id",
            "name",
            "interval",
            "sync_date",
            "description",
            "enabled",
            "cron_expression",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_organization_id_sync_plans_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organizations_organization_id_sync_plans_id`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_organizations_organization_id_sync_plans_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "interval" in params:
            form_params.append(("interval", params["interval"]))  # noqa: E501
        if "sync_date" in params:
            form_params.append(("sync_date", params["sync_date"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "enabled" in params:
            form_params.append(("enabled", params["enabled"]))  # noqa: E501
        if "cron_expression" in params:
            form_params.append(
                ("cron_expression", params["cron_expression"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/sync_plans/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_organization_id_sync_plans_id_add_products(
        self, organization_id, id, product_ids, **kwargs
    ):  # noqa: E501
        """Add products to sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_sync_plans_id_add_products(organization_id, id, product_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str id: ID of the sync plan (required)
        :param list[str] product_ids: List of product ids to add to the sync plan (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organizations_organization_id_sync_plans_id_add_products_with_http_info(
                organization_id, id, product_ids, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_organizations_organization_id_sync_plans_id_add_products_with_http_info(
                organization_id, id, product_ids, **kwargs
            )  # noqa: E501
            return data

    def put_organizations_organization_id_sync_plans_id_add_products_with_http_info(
        self, organization_id, id, product_ids, **kwargs
    ):  # noqa: E501
        """Add products to sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_sync_plans_id_add_products_with_http_info(organization_id, id, product_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str id: ID of the sync plan (required)
        :param list[str] product_ids: List of product ids to add to the sync plan (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "id", "product_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_organization_id_sync_plans_id_add_products"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organizations_organization_id_sync_plans_id_add_products`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_organizations_organization_id_sync_plans_id_add_products`"
            )  # noqa: E501
        # verify the required parameter 'product_ids' is set
        if self.api_client.client_side_validation and (
            "product_ids" not in params or params["product_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_ids` when calling `put_organizations_organization_id_sync_plans_id_add_products`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "product_ids" in params:
            form_params.append(("product_ids", params["product_ids"]))  # noqa: E501
            collection_formats["product_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/sync_plans/{id}/add_products",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_organization_id_sync_plans_id_remove_products(
        self, organization_id, id, product_ids, **kwargs
    ):  # noqa: E501
        """Remove products from sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_sync_plans_id_remove_products(organization_id, id, product_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str id: ID of the sync plan (required)
        :param list[str] product_ids: List of product ids to remove from the sync plan (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organizations_organization_id_sync_plans_id_remove_products_with_http_info(
                organization_id, id, product_ids, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_organizations_organization_id_sync_plans_id_remove_products_with_http_info(
                organization_id, id, product_ids, **kwargs
            )  # noqa: E501
            return data

    def put_organizations_organization_id_sync_plans_id_remove_products_with_http_info(
        self, organization_id, id, product_ids, **kwargs
    ):  # noqa: E501
        """Remove products from sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_sync_plans_id_remove_products_with_http_info(organization_id, id, product_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float organization_id: Organization ID (required)
        :param str id: ID of the sync plan (required)
        :param list[str] product_ids: List of product ids to remove from the sync plan (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "id", "product_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_organization_id_sync_plans_id_remove_products"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organizations_organization_id_sync_plans_id_remove_products`"
            )  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_organizations_organization_id_sync_plans_id_remove_products`"
            )  # noqa: E501
        # verify the required parameter 'product_ids' is set
        if self.api_client.client_side_validation and (
            "product_ids" not in params or params["product_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `product_ids` when calling `put_organizations_organization_id_sync_plans_id_remove_products`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "product_ids" in params:
            form_params.append(("product_ids", params["product_ids"]))  # noqa: E501
            collection_formats["product_ids"] = "csv"  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/sync_plans/{id}/remove_products",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organizations_organization_id_sync_plans_id_sync(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Initiate a sync of the products attached to the sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_sync_plans_id_sync(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the sync plan (required)
        :param float organization_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organizations_organization_id_sync_plans_id_sync_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.put_organizations_organization_id_sync_plans_id_sync_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_organizations_organization_id_sync_plans_id_sync_with_http_info(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Initiate a sync of the products attached to the sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_organization_id_sync_plans_id_sync_with_http_info(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the sync plan (required)
        :param float organization_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_organization_id_sync_plans_id_sync"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_organizations_organization_id_sync_plans_id_sync`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organizations_organization_id_sync_plans_id_sync`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/sync_plans/{id}/sync",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_sync_plans_id(self, id, organization_id, **kwargs):  # noqa: E501
        """Update a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sync_plans_id(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: sync plan numeric identifier (required)
        :param float organization_id: Organization ID (required)
        :param str name: sync plan name
        :param str interval: how often synchronization should run
        :param str sync_date: start datetime of synchronization
        :param str description: sync plan description
        :param bool enabled: enables or disables synchronization
        :param str cron_expression: Add custom cron logic for sync plan
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_sync_plans_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_sync_plans_id_with_http_info(
                id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def put_sync_plans_id_with_http_info(
        self, id, organization_id, **kwargs
    ):  # noqa: E501
        """Update a sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sync_plans_id_with_http_info(id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: sync plan numeric identifier (required)
        :param float organization_id: Organization ID (required)
        :param str name: sync plan name
        :param str interval: how often synchronization should run
        :param str sync_date: start datetime of synchronization
        :param str description: sync plan description
        :param bool enabled: enables or disables synchronization
        :param str cron_expression: Add custom cron logic for sync plan
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "id",
            "organization_id",
            "name",
            "interval",
            "sync_date",
            "description",
            "enabled",
            "cron_expression",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sync_plans_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_sync_plans_id`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_sync_plans_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "organization_id" in params:
            form_params.append(
                ("organization_id", params["organization_id"])
            )  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "interval" in params:
            form_params.append(("interval", params["interval"]))  # noqa: E501
        if "sync_date" in params:
            form_params.append(("sync_date", params["sync_date"]))  # noqa: E501
        if "description" in params:
            form_params.append(("description", params["description"]))  # noqa: E501
        if "enabled" in params:
            form_params.append(("enabled", params["enabled"]))  # noqa: E501
        if "cron_expression" in params:
            form_params.append(
                ("cron_expression", params["cron_expression"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/sync_plans/{id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_sync_plans_id_sync(self, id, **kwargs):  # noqa: E501
        """Initiate a sync of the products attached to the sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sync_plans_id_sync(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the sync plan (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_sync_plans_id_sync_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_sync_plans_id_sync_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def put_sync_plans_id_sync_with_http_info(self, id, **kwargs):  # noqa: E501
        """Initiate a sync of the products attached to the sync plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sync_plans_id_sync_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the sync plan (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sync_plans_id_sync" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and (
            "id" not in params or params["id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `put_sync_plans_id_sync`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/x-www-form-urlencoded", "multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/sync_plans/{id}/sync",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
