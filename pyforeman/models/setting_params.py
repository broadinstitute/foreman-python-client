# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p>   # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyforeman.configuration import Configuration


class SettingParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "name": "str",
        "full_name": "str",
        "category": "str",
        "category_name": "str",
        "settings_type": "str",
        "description": "str",
        "default": "str",
        "value": "str",
        "readonly": "bool",
        "encrypted": "bool",
        "config_file": "str",
        "select_values": "list[str]",
        "updated_at": "str",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "full_name": "full_name",
        "category": "category",
        "category_name": "category_name",
        "settings_type": "settings_type",
        "description": "description",
        "default": "default",
        "value": "value",
        "readonly": "readonly",
        "encrypted": "encrypted",
        "config_file": "config_file",
        "select_values": "select_values",
        "updated_at": "updated_at",
    }

    def __init__(
        self,
        id=None,
        name=None,
        full_name=None,
        category=None,
        category_name=None,
        settings_type=None,
        description=None,
        default=None,
        value=None,
        readonly=None,
        encrypted=None,
        config_file=None,
        select_values=None,
        updated_at=None,
        _configuration=None,
    ):  # noqa: E501
        """SettingParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._full_name = None
        self._category = None
        self._category_name = None
        self._settings_type = None
        self._description = None
        self._default = None
        self._value = None
        self._readonly = None
        self._encrypted = None
        self._config_file = None
        self._select_values = None
        self._updated_at = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.full_name = full_name
        self.category = category
        self.category_name = category_name
        self.settings_type = settings_type
        self.description = description
        self.default = default
        self.value = value
        self.readonly = readonly
        self.encrypted = encrypted
        self.config_file = config_file
        self.select_values = select_values
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this SettingParams.  # noqa: E501

        Alias for setting name  # noqa: E501

        :return: The id of this SettingParams.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SettingParams.

        Alias for setting name  # noqa: E501

        :param id: The id of this SettingParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this SettingParams.  # noqa: E501

        Setting unique name  # noqa: E501

        :return: The name of this SettingParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SettingParams.

        Setting unique name  # noqa: E501

        :param name: The name of this SettingParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def full_name(self):
        """Gets the full_name of this SettingParams.  # noqa: E501

        Setting full user readable name  # noqa: E501

        :return: The full_name of this SettingParams.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this SettingParams.

        Setting full user readable name  # noqa: E501

        :param full_name: The full_name of this SettingParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and full_name is None:
            raise ValueError(
                "Invalid value for `full_name`, must not be `None`"
            )  # noqa: E501

        self._full_name = full_name

    @property
    def category(self):
        """Gets the category of this SettingParams.  # noqa: E501

        The category of setting  # noqa: E501

        :return: The category of this SettingParams.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SettingParams.

        The category of setting  # noqa: E501

        :param category: The category of this SettingParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and category is None:
            raise ValueError(
                "Invalid value for `category`, must not be `None`"
            )  # noqa: E501

        self._category = category

    @property
    def category_name(self):
        """Gets the category_name of this SettingParams.  # noqa: E501

        The human readable name of settings category  # noqa: E501

        :return: The category_name of this SettingParams.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this SettingParams.

        The human readable name of settings category  # noqa: E501

        :param category_name: The category_name of this SettingParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and category_name is None:
            raise ValueError(
                "Invalid value for `category_name`, must not be `None`"
            )  # noqa: E501

        self._category_name = category_name

    @property
    def settings_type(self):
        """Gets the settings_type of this SettingParams.  # noqa: E501

        Value type, that the setting accepts  # noqa: E501

        :return: The settings_type of this SettingParams.  # noqa: E501
        :rtype: str
        """
        return self._settings_type

    @settings_type.setter
    def settings_type(self, settings_type):
        """Sets the settings_type of this SettingParams.

        Value type, that the setting accepts  # noqa: E501

        :param settings_type: The settings_type of this SettingParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and settings_type is None:
            raise ValueError(
                "Invalid value for `settings_type`, must not be `None`"
            )  # noqa: E501

        self._settings_type = settings_type

    @property
    def description(self):
        """Gets the description of this SettingParams.  # noqa: E501

        Describes the purpose of the setting  # noqa: E501

        :return: The description of this SettingParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SettingParams.

        Describes the purpose of the setting  # noqa: E501

        :param description: The description of this SettingParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError(
                "Invalid value for `description`, must not be `None`"
            )  # noqa: E501

        self._description = description

    @property
    def default(self):
        """Gets the default of this SettingParams.  # noqa: E501

        Default value for the setting  # noqa: E501

        :return: The default of this SettingParams.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this SettingParams.

        Default value for the setting  # noqa: E501

        :param default: The default of this SettingParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and default is None:
            raise ValueError(
                "Invalid value for `default`, must not be `None`"
            )  # noqa: E501

        self._default = default

    @property
    def value(self):
        """Gets the value of this SettingParams.  # noqa: E501

        Setting current value. If this setting is encypted, the value will not be returned  # noqa: E501

        :return: The value of this SettingParams.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SettingParams.

        Setting current value. If this setting is encypted, the value will not be returned  # noqa: E501

        :param value: The value of this SettingParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError(
                "Invalid value for `value`, must not be `None`"
            )  # noqa: E501

        self._value = value

    @property
    def readonly(self):
        """Gets the readonly of this SettingParams.  # noqa: E501

        Is this setting readonly?  # noqa: E501

        :return: The readonly of this SettingParams.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this SettingParams.

        Is this setting readonly?  # noqa: E501

        :param readonly: The readonly of this SettingParams.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and readonly is None:
            raise ValueError(
                "Invalid value for `readonly`, must not be `None`"
            )  # noqa: E501

        self._readonly = readonly

    @property
    def encrypted(self):
        """Gets the encrypted of this SettingParams.  # noqa: E501

        Is this setting encrypted?  # noqa: E501

        :return: The encrypted of this SettingParams.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this SettingParams.

        Is this setting encrypted?  # noqa: E501

        :param encrypted: The encrypted of this SettingParams.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and encrypted is None:
            raise ValueError(
                "Invalid value for `encrypted`, must not be `None`"
            )  # noqa: E501

        self._encrypted = encrypted

    @property
    def config_file(self):
        """Gets the config_file of this SettingParams.  # noqa: E501

        If this setting needs to be changed in file, it will have the file path.  # noqa: E501

        :return: The config_file of this SettingParams.  # noqa: E501
        :rtype: str
        """
        return self._config_file

    @config_file.setter
    def config_file(self, config_file):
        """Sets the config_file of this SettingParams.

        If this setting needs to be changed in file, it will have the file path.  # noqa: E501

        :param config_file: The config_file of this SettingParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and config_file is None:
            raise ValueError(
                "Invalid value for `config_file`, must not be `None`"
            )  # noqa: E501

        self._config_file = config_file

    @property
    def select_values(self):
        """Gets the select_values of this SettingParams.  # noqa: E501

        If this setting has list of possible values, this includes the list of the values.  # noqa: E501

        :return: The select_values of this SettingParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._select_values

    @select_values.setter
    def select_values(self, select_values):
        """Sets the select_values of this SettingParams.

        If this setting has list of possible values, this includes the list of the values.  # noqa: E501

        :param select_values: The select_values of this SettingParams.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and select_values is None:
            raise ValueError(
                "Invalid value for `select_values`, must not be `None`"
            )  # noqa: E501

        self._select_values = select_values

    @property
    def updated_at(self):
        """Gets the updated_at of this SettingParams.  # noqa: E501

        Last updated. NOTE: this will be reset to application install time, when setting is reset to default value.  # noqa: E501

        :return: The updated_at of this SettingParams.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SettingParams.

        Last updated. NOTE: this will be reset to application install time, when setting is reset to default value.  # noqa: E501

        :param updated_at: The updated_at of this SettingParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and updated_at is None:
            raise ValueError(
                "Invalid value for `updated_at`, must not be `None`"
            )  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SettingParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SettingParams):
            return True

        return self.to_dict() != other.to_dict()
