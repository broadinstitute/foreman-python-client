# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class ContentViewVersionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_content_view_versions_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Remove content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_view_versions_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_content_view_versions_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Remove content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_view_versions_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_content_view_versions_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_view_versions_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_content_view_versions_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/content_view_versions/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_view_versions(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter versions by environment"),
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="Filter versions by version number")
        ] = None,
        composite_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter versions that are components in the specified composite version"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Organization identifier"),
        ] = None,
        include_applied_filters: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether or not to return filters applied to the content view version"
            ),
        ] = None,
        triggered_by_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter composite versions whose publish was triggered by the specified component version"
            ),
        ] = None,
        file_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter content view versions that contain the file"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List content view versions


        :param content_view_id: Content view identifier (required)
        :type content_view_id: float
        :param environment_id: Filter versions by environment
        :type environment_id: float
        :param version: Filter versions by version number
        :type version: str
        :param composite_version_id: Filter versions that are components in the specified composite version
        :type composite_version_id: float
        :param organization_id: Organization identifier
        :type organization_id: float
        :param include_applied_filters: Whether or not to return filters applied to the content view version
        :type include_applied_filters: bool
        :param triggered_by_id: Filter composite versions whose publish was triggered by the specified component version
        :type triggered_by_id: float
        :param file_id: Filter content view versions that contain the file
        :type file_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_versions_serialize(
            content_view_id=content_view_id,
            environment_id=environment_id,
            version=version,
            composite_version_id=composite_version_id,
            organization_id=organization_id,
            include_applied_filters=include_applied_filters,
            triggered_by_id=triggered_by_id,
            file_id=file_id,
            nondefault=nondefault,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_view_versions_with_http_info(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter versions by environment"),
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="Filter versions by version number")
        ] = None,
        composite_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter versions that are components in the specified composite version"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Organization identifier"),
        ] = None,
        include_applied_filters: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether or not to return filters applied to the content view version"
            ),
        ] = None,
        triggered_by_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter composite versions whose publish was triggered by the specified component version"
            ),
        ] = None,
        file_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter content view versions that contain the file"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List content view versions


        :param content_view_id: Content view identifier (required)
        :type content_view_id: float
        :param environment_id: Filter versions by environment
        :type environment_id: float
        :param version: Filter versions by version number
        :type version: str
        :param composite_version_id: Filter versions that are components in the specified composite version
        :type composite_version_id: float
        :param organization_id: Organization identifier
        :type organization_id: float
        :param include_applied_filters: Whether or not to return filters applied to the content view version
        :type include_applied_filters: bool
        :param triggered_by_id: Filter composite versions whose publish was triggered by the specified component version
        :type triggered_by_id: float
        :param file_id: Filter content view versions that contain the file
        :type file_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_versions_serialize(
            content_view_id=content_view_id,
            environment_id=environment_id,
            version=version,
            composite_version_id=composite_version_id,
            organization_id=organization_id,
            include_applied_filters=include_applied_filters,
            triggered_by_id=triggered_by_id,
            file_id=file_id,
            nondefault=nondefault,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_view_versions_without_preload_content(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter versions by environment"),
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="Filter versions by version number")
        ] = None,
        composite_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter versions that are components in the specified composite version"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Organization identifier"),
        ] = None,
        include_applied_filters: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether or not to return filters applied to the content view version"
            ),
        ] = None,
        triggered_by_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter composite versions whose publish was triggered by the specified component version"
            ),
        ] = None,
        file_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter content view versions that contain the file"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List content view versions


        :param content_view_id: Content view identifier (required)
        :type content_view_id: float
        :param environment_id: Filter versions by environment
        :type environment_id: float
        :param version: Filter versions by version number
        :type version: str
        :param composite_version_id: Filter versions that are components in the specified composite version
        :type composite_version_id: float
        :param organization_id: Organization identifier
        :type organization_id: float
        :param include_applied_filters: Whether or not to return filters applied to the content view version
        :type include_applied_filters: bool
        :param triggered_by_id: Filter composite versions whose publish was triggered by the specified component version
        :type triggered_by_id: float
        :param file_id: Filter content view versions that contain the file
        :type file_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_versions_serialize(
            content_view_id=content_view_id,
            environment_id=environment_id,
            version=version,
            composite_version_id=composite_version_id,
            organization_id=organization_id,
            include_applied_filters=include_applied_filters,
            triggered_by_id=triggered_by_id,
            file_id=file_id,
            nondefault=nondefault,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_view_versions_serialize(
        self,
        content_view_id,
        environment_id,
        version,
        composite_version_id,
        organization_id,
        include_applied_filters,
        triggered_by_id,
        file_id,
        nondefault,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if content_view_id is not None:
            _query_params.append(("content_view_id", content_view_id))

        if environment_id is not None:
            _query_params.append(("environment_id", environment_id))

        if version is not None:
            _query_params.append(("version", version))

        if composite_version_id is not None:
            _query_params.append(("composite_version_id", composite_version_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if include_applied_filters is not None:
            _query_params.append(("include_applied_filters", include_applied_filters))

        if triggered_by_id is not None:
            _query_params.append(("triggered_by_id", triggered_by_id))

        if file_id is not None:
            _query_params.append(("file_id", file_id))

        if nondefault is not None:
            _query_params.append(("nondefault", nondefault))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_view_versions",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_view_versions_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        include_applied_filters: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether or not to return filters applied to the content view version"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param include_applied_filters: Whether or not to return filters applied to the content view version
        :type include_applied_filters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_versions_id_serialize(
            id=id,
            include_applied_filters=include_applied_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_view_versions_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        include_applied_filters: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether or not to return filters applied to the content view version"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param include_applied_filters: Whether or not to return filters applied to the content view version
        :type include_applied_filters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_versions_id_serialize(
            id=id,
            include_applied_filters=include_applied_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_view_versions_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        include_applied_filters: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether or not to return filters applied to the content view version"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param include_applied_filters: Whether or not to return filters applied to the content view version
        :type include_applied_filters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_versions_id_serialize(
            id=id,
            include_applied_filters=include_applied_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_view_versions_id_serialize(
        self,
        id,
        include_applied_filters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if include_applied_filters is not None:
            _query_params.append(("include_applied_filters", include_applied_filters))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_view_versions/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_views_content_view_id_content_view_versions(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter versions by environment"),
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="Filter versions by version number")
        ] = None,
        composite_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter versions that are components in the specified composite version"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Organization identifier"),
        ] = None,
        include_applied_filters: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether or not to return filters applied to the content view version"
            ),
        ] = None,
        triggered_by_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter composite versions whose publish was triggered by the specified component version"
            ),
        ] = None,
        file_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter content view versions that contain the file"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List content view versions


        :param content_view_id: Content view identifier (required)
        :type content_view_id: float
        :param environment_id: Filter versions by environment
        :type environment_id: float
        :param version: Filter versions by version number
        :type version: str
        :param composite_version_id: Filter versions that are components in the specified composite version
        :type composite_version_id: float
        :param organization_id: Organization identifier
        :type organization_id: float
        :param include_applied_filters: Whether or not to return filters applied to the content view version
        :type include_applied_filters: bool
        :param triggered_by_id: Filter composite versions whose publish was triggered by the specified component version
        :type triggered_by_id: float
        :param file_id: Filter content view versions that contain the file
        :type file_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._get_content_views_content_view_id_content_view_versions_serialize(
                content_view_id=content_view_id,
                environment_id=environment_id,
                version=version,
                composite_version_id=composite_version_id,
                organization_id=organization_id,
                include_applied_filters=include_applied_filters,
                triggered_by_id=triggered_by_id,
                file_id=file_id,
                nondefault=nondefault,
                search=search,
                page=page,
                per_page=per_page,
                order=order,
                full_result=full_result,
                sort_by=sort_by,
                sort_order=sort_order,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_views_content_view_id_content_view_versions_with_http_info(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter versions by environment"),
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="Filter versions by version number")
        ] = None,
        composite_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter versions that are components in the specified composite version"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Organization identifier"),
        ] = None,
        include_applied_filters: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether or not to return filters applied to the content view version"
            ),
        ] = None,
        triggered_by_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter composite versions whose publish was triggered by the specified component version"
            ),
        ] = None,
        file_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter content view versions that contain the file"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List content view versions


        :param content_view_id: Content view identifier (required)
        :type content_view_id: float
        :param environment_id: Filter versions by environment
        :type environment_id: float
        :param version: Filter versions by version number
        :type version: str
        :param composite_version_id: Filter versions that are components in the specified composite version
        :type composite_version_id: float
        :param organization_id: Organization identifier
        :type organization_id: float
        :param include_applied_filters: Whether or not to return filters applied to the content view version
        :type include_applied_filters: bool
        :param triggered_by_id: Filter composite versions whose publish was triggered by the specified component version
        :type triggered_by_id: float
        :param file_id: Filter content view versions that contain the file
        :type file_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._get_content_views_content_view_id_content_view_versions_serialize(
                content_view_id=content_view_id,
                environment_id=environment_id,
                version=version,
                composite_version_id=composite_version_id,
                organization_id=organization_id,
                include_applied_filters=include_applied_filters,
                triggered_by_id=triggered_by_id,
                file_id=file_id,
                nondefault=nondefault,
                search=search,
                page=page,
                per_page=per_page,
                order=order,
                full_result=full_result,
                sort_by=sort_by,
                sort_order=sort_order,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_views_content_view_id_content_view_versions_without_preload_content(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter versions by environment"),
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="Filter versions by version number")
        ] = None,
        composite_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter versions that are components in the specified composite version"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Organization identifier"),
        ] = None,
        include_applied_filters: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether or not to return filters applied to the content view version"
            ),
        ] = None,
        triggered_by_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filter composite versions whose publish was triggered by the specified component version"
            ),
        ] = None,
        file_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Filter content view versions that contain the file"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List content view versions


        :param content_view_id: Content view identifier (required)
        :type content_view_id: float
        :param environment_id: Filter versions by environment
        :type environment_id: float
        :param version: Filter versions by version number
        :type version: str
        :param composite_version_id: Filter versions that are components in the specified composite version
        :type composite_version_id: float
        :param organization_id: Organization identifier
        :type organization_id: float
        :param include_applied_filters: Whether or not to return filters applied to the content view version
        :type include_applied_filters: bool
        :param triggered_by_id: Filter composite versions whose publish was triggered by the specified component version
        :type triggered_by_id: float
        :param file_id: Filter content view versions that contain the file
        :type file_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._get_content_views_content_view_id_content_view_versions_serialize(
                content_view_id=content_view_id,
                environment_id=environment_id,
                version=version,
                composite_version_id=composite_version_id,
                organization_id=organization_id,
                include_applied_filters=include_applied_filters,
                triggered_by_id=triggered_by_id,
                file_id=file_id,
                nondefault=nondefault,
                search=search,
                page=page,
                per_page=per_page,
                order=order,
                full_result=full_result,
                sort_by=sort_by,
                sort_order=sort_order,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_views_content_view_id_content_view_versions_serialize(
        self,
        content_view_id,
        environment_id,
        version,
        composite_version_id,
        organization_id,
        include_applied_filters,
        triggered_by_id,
        file_id,
        nondefault,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_id is not None:
            _path_params["content_view_id"] = content_view_id
        # process the query parameters
        if environment_id is not None:
            _query_params.append(("environment_id", environment_id))

        if version is not None:
            _query_params.append(("version", version))

        if composite_version_id is not None:
            _query_params.append(("composite_version_id", composite_version_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if include_applied_filters is not None:
            _query_params.append(("include_applied_filters", include_applied_filters))

        if triggered_by_id is not None:
            _query_params.append(("triggered_by_id", triggered_by_id))

        if file_id is not None:
            _query_params.append(("file_id", file_id))

        if nondefault is not None:
            _query_params.append(("nondefault", nondefault))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_views/{content_view_id}/content_view_versions",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_content_view_versions_id_promote(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="force content view promotion and bypass lifecycle environment restriction"
            ),
        ] = None,
        environment_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Identifiers for Lifecycle Environment"),
        ] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(description="The description for the content view version promotion"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Promote a content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param force: force content view promotion and bypass lifecycle environment restriction
        :type force: bool
        :param environment_ids: Identifiers for Lifecycle Environment
        :type environment_ids: List[str]
        :param description: The description for the content view version promotion
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_versions_id_promote_serialize(
            id=id,
            force=force,
            environment_ids=environment_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_content_view_versions_id_promote_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="force content view promotion and bypass lifecycle environment restriction"
            ),
        ] = None,
        environment_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Identifiers for Lifecycle Environment"),
        ] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(description="The description for the content view version promotion"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Promote a content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param force: force content view promotion and bypass lifecycle environment restriction
        :type force: bool
        :param environment_ids: Identifiers for Lifecycle Environment
        :type environment_ids: List[str]
        :param description: The description for the content view version promotion
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_versions_id_promote_serialize(
            id=id,
            force=force,
            environment_ids=environment_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_content_view_versions_id_promote_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="force content view promotion and bypass lifecycle environment restriction"
            ),
        ] = None,
        environment_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Identifiers for Lifecycle Environment"),
        ] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(description="The description for the content view version promotion"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Promote a content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param force: force content view promotion and bypass lifecycle environment restriction
        :type force: bool
        :param environment_ids: Identifiers for Lifecycle Environment
        :type environment_ids: List[str]
        :param description: The description for the content view version promotion
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_versions_id_promote_serialize(
            id=id,
            force=force,
            environment_ids=environment_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_content_view_versions_id_promote_serialize(
        self,
        id,
        force,
        environment_ids,
        description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "environment_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if force is not None:
            _form_params.append(("force", force))
        if environment_ids is not None:
            _form_params.append(("environment_ids", environment_ids))
        if description is not None:
            _form_params.append(("description", description))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/content_view_versions/{id}/promote",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_content_view_versions_incremental_update(
        self,
        content_view_version_environments: Optional[List[StrictStr]] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(
                description="The description for the new generated Content View Versions"
            ),
        ] = None,
        resolve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, when adding the specified errata or packages, any needed dependencies will be copied as well. Defaults to true"
            ),
        ] = None,
        propagate_all_composites: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, will publish a new composite version using any specified content_view_version_id that has been promoted to a lifecycle environment"
            ),
        ] = None,
        add_content_errata_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Errata ids to copy into the new versions"),
        ] = None,
        add_content_package_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Package ids to copy into the new versions"),
        ] = None,
        add_content_deb_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Deb Package ids to copy into the new versions"),
        ] = None,
        update_hosts_included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for host to perform an action on"),
        ] = None,
        update_hosts_included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        update_hosts_excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Perform an Incremental Update on one or more Content View Versions


        :param content_view_version_environments:
        :type content_view_version_environments: List[str]
        :param description: The description for the new generated Content View Versions
        :type description: str
        :param resolve_dependencies: If true, when adding the specified errata or packages, any needed dependencies will be copied as well. Defaults to true
        :type resolve_dependencies: bool
        :param propagate_all_composites: If true, will publish a new composite version using any specified content_view_version_id that has been promoted to a lifecycle environment
        :type propagate_all_composites: bool
        :param add_content_errata_ids: Errata ids to copy into the new versions
        :type add_content_errata_ids: List[str]
        :param add_content_package_ids: Package ids to copy into the new versions
        :type add_content_package_ids: List[str]
        :param add_content_deb_ids: Deb Package ids to copy into the new versions
        :type add_content_deb_ids: List[str]
        :param update_hosts_included_search: Search string for host to perform an action on
        :type update_hosts_included_search: str
        :param update_hosts_included_ids: List of host ids to perform an action on
        :type update_hosts_included_ids: List[str]
        :param update_hosts_excluded_ids: List of host ids to exclude and not run an action on
        :type update_hosts_excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_versions_incremental_update_serialize(
            content_view_version_environments=content_view_version_environments,
            description=description,
            resolve_dependencies=resolve_dependencies,
            propagate_all_composites=propagate_all_composites,
            add_content_errata_ids=add_content_errata_ids,
            add_content_package_ids=add_content_package_ids,
            add_content_deb_ids=add_content_deb_ids,
            update_hosts_included_search=update_hosts_included_search,
            update_hosts_included_ids=update_hosts_included_ids,
            update_hosts_excluded_ids=update_hosts_excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_content_view_versions_incremental_update_with_http_info(
        self,
        content_view_version_environments: Optional[List[StrictStr]] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(
                description="The description for the new generated Content View Versions"
            ),
        ] = None,
        resolve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, when adding the specified errata or packages, any needed dependencies will be copied as well. Defaults to true"
            ),
        ] = None,
        propagate_all_composites: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, will publish a new composite version using any specified content_view_version_id that has been promoted to a lifecycle environment"
            ),
        ] = None,
        add_content_errata_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Errata ids to copy into the new versions"),
        ] = None,
        add_content_package_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Package ids to copy into the new versions"),
        ] = None,
        add_content_deb_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Deb Package ids to copy into the new versions"),
        ] = None,
        update_hosts_included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for host to perform an action on"),
        ] = None,
        update_hosts_included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        update_hosts_excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Perform an Incremental Update on one or more Content View Versions


        :param content_view_version_environments:
        :type content_view_version_environments: List[str]
        :param description: The description for the new generated Content View Versions
        :type description: str
        :param resolve_dependencies: If true, when adding the specified errata or packages, any needed dependencies will be copied as well. Defaults to true
        :type resolve_dependencies: bool
        :param propagate_all_composites: If true, will publish a new composite version using any specified content_view_version_id that has been promoted to a lifecycle environment
        :type propagate_all_composites: bool
        :param add_content_errata_ids: Errata ids to copy into the new versions
        :type add_content_errata_ids: List[str]
        :param add_content_package_ids: Package ids to copy into the new versions
        :type add_content_package_ids: List[str]
        :param add_content_deb_ids: Deb Package ids to copy into the new versions
        :type add_content_deb_ids: List[str]
        :param update_hosts_included_search: Search string for host to perform an action on
        :type update_hosts_included_search: str
        :param update_hosts_included_ids: List of host ids to perform an action on
        :type update_hosts_included_ids: List[str]
        :param update_hosts_excluded_ids: List of host ids to exclude and not run an action on
        :type update_hosts_excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_versions_incremental_update_serialize(
            content_view_version_environments=content_view_version_environments,
            description=description,
            resolve_dependencies=resolve_dependencies,
            propagate_all_composites=propagate_all_composites,
            add_content_errata_ids=add_content_errata_ids,
            add_content_package_ids=add_content_package_ids,
            add_content_deb_ids=add_content_deb_ids,
            update_hosts_included_search=update_hosts_included_search,
            update_hosts_included_ids=update_hosts_included_ids,
            update_hosts_excluded_ids=update_hosts_excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_content_view_versions_incremental_update_without_preload_content(
        self,
        content_view_version_environments: Optional[List[StrictStr]] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(
                description="The description for the new generated Content View Versions"
            ),
        ] = None,
        resolve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, when adding the specified errata or packages, any needed dependencies will be copied as well. Defaults to true"
            ),
        ] = None,
        propagate_all_composites: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, will publish a new composite version using any specified content_view_version_id that has been promoted to a lifecycle environment"
            ),
        ] = None,
        add_content_errata_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Errata ids to copy into the new versions"),
        ] = None,
        add_content_package_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Package ids to copy into the new versions"),
        ] = None,
        add_content_deb_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Deb Package ids to copy into the new versions"),
        ] = None,
        update_hosts_included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for host to perform an action on"),
        ] = None,
        update_hosts_included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        update_hosts_excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Perform an Incremental Update on one or more Content View Versions


        :param content_view_version_environments:
        :type content_view_version_environments: List[str]
        :param description: The description for the new generated Content View Versions
        :type description: str
        :param resolve_dependencies: If true, when adding the specified errata or packages, any needed dependencies will be copied as well. Defaults to true
        :type resolve_dependencies: bool
        :param propagate_all_composites: If true, will publish a new composite version using any specified content_view_version_id that has been promoted to a lifecycle environment
        :type propagate_all_composites: bool
        :param add_content_errata_ids: Errata ids to copy into the new versions
        :type add_content_errata_ids: List[str]
        :param add_content_package_ids: Package ids to copy into the new versions
        :type add_content_package_ids: List[str]
        :param add_content_deb_ids: Deb Package ids to copy into the new versions
        :type add_content_deb_ids: List[str]
        :param update_hosts_included_search: Search string for host to perform an action on
        :type update_hosts_included_search: str
        :param update_hosts_included_ids: List of host ids to perform an action on
        :type update_hosts_included_ids: List[str]
        :param update_hosts_excluded_ids: List of host ids to exclude and not run an action on
        :type update_hosts_excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_versions_incremental_update_serialize(
            content_view_version_environments=content_view_version_environments,
            description=description,
            resolve_dependencies=resolve_dependencies,
            propagate_all_composites=propagate_all_composites,
            add_content_errata_ids=add_content_errata_ids,
            add_content_package_ids=add_content_package_ids,
            add_content_deb_ids=add_content_deb_ids,
            update_hosts_included_search=update_hosts_included_search,
            update_hosts_included_ids=update_hosts_included_ids,
            update_hosts_excluded_ids=update_hosts_excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_content_view_versions_incremental_update_serialize(
        self,
        content_view_version_environments,
        description,
        resolve_dependencies,
        propagate_all_composites,
        add_content_errata_ids,
        add_content_package_ids,
        add_content_deb_ids,
        update_hosts_included_search,
        update_hosts_included_ids,
        update_hosts_excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "content_view_version_environments": "csv",
            "add_content[errata_ids]": "csv",
            "add_content[package_ids]": "csv",
            "add_content[deb_ids]": "csv",
            "update_hosts[included][ids]": "csv",
            "update_hosts[excluded][ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if content_view_version_environments is not None:
            _form_params.append(
                ("content_view_version_environments", content_view_version_environments)
            )
        if description is not None:
            _form_params.append(("description", description))
        if resolve_dependencies is not None:
            _form_params.append(("resolve_dependencies", resolve_dependencies))
        if propagate_all_composites is not None:
            _form_params.append(("propagate_all_composites", propagate_all_composites))
        if add_content_errata_ids is not None:
            _form_params.append(("add_content[errata_ids]", add_content_errata_ids))
        if add_content_package_ids is not None:
            _form_params.append(("add_content[package_ids]", add_content_package_ids))
        if add_content_deb_ids is not None:
            _form_params.append(("add_content[deb_ids]", add_content_deb_ids))
        if update_hosts_included_search is not None:
            _form_params.append(
                ("update_hosts[included][search]", update_hosts_included_search)
            )
        if update_hosts_included_ids is not None:
            _form_params.append(
                ("update_hosts[included][ids]", update_hosts_included_ids)
            )
        if update_hosts_excluded_ids is not None:
            _form_params.append(
                ("update_hosts[excluded][ids]", update_hosts_excluded_ids)
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/content_view_versions/incremental_update",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_view_versions_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        description: Annotated[
            StrictStr, Field(description="The description for the content view version")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param description: The description for the content view version (required)
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_versions_id_serialize(
            id=id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_view_versions_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        description: Annotated[
            StrictStr, Field(description="The description for the content view version")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param description: The description for the content view version (required)
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_versions_id_serialize(
            id=id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_view_versions_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        description: Annotated[
            StrictStr, Field(description="The description for the content view version")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a content view version


        :param id: Content view version identifier (required)
        :type id: float
        :param description: The description for the content view version (required)
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_versions_id_serialize(
            id=id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_view_versions_id_serialize(
        self,
        id,
        description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if description is not None:
            _form_params.append(("description", description))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_view_versions/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_view_versions_id_republish_repositories(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="Force metadata regeneration to proceed. Dangerous operation when version has repositories with the 'Complete Mirroring' mirroring policy"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Forces a republish of the version's repositories' metadata


        :param id: Content view version identifier (required)
        :type id: float
        :param force: Force metadata regeneration to proceed. Dangerous operation when version has repositories with the 'Complete Mirroring' mirroring policy
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_versions_id_republish_repositories_serialize(
            id=id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_view_versions_id_republish_repositories_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="Force metadata regeneration to proceed. Dangerous operation when version has repositories with the 'Complete Mirroring' mirroring policy"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Forces a republish of the version's repositories' metadata


        :param id: Content view version identifier (required)
        :type id: float
        :param force: Force metadata regeneration to proceed. Dangerous operation when version has repositories with the 'Complete Mirroring' mirroring policy
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_versions_id_republish_repositories_serialize(
            id=id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_view_versions_id_republish_repositories_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view version identifier"),
        ],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="Force metadata regeneration to proceed. Dangerous operation when version has repositories with the 'Complete Mirroring' mirroring policy"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Forces a republish of the version's repositories' metadata


        :param id: Content view version identifier (required)
        :type id: float
        :param force: Force metadata regeneration to proceed. Dangerous operation when version has repositories with the 'Complete Mirroring' mirroring policy
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_versions_id_republish_repositories_serialize(
            id=id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_view_versions_id_republish_repositories_serialize(
        self,
        id,
        force,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if force is not None:
            _form_params.append(("force", force))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_view_versions/{id}/republish_repositories",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
