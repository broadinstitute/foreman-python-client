# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class RegistrationCommandsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def post_registration_commands(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        registration_command_organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the Organization to register the host in"),
        ] = None,
        registration_command_location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the Location to register the host in"),
        ] = None,
        registration_command_hostgroup_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the Host group to register the host in"),
        ] = None,
        registration_command_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="ID of the Operating System to register the host in. Operating system must have a `host_init_config` template assigned"
            ),
        ] = None,
        registration_command_smart_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="ID of the Smart Proxy. This Proxy must have enabled both the 'Templates' and 'Registration' features"
            ),
        ] = None,
        registration_command_setup_insights: Annotated[
            Optional[StrictBool],
            Field(
                description="Set 'host_registration_insights' parameter for the host. If it is set to true, insights client will be installed and registered on Red Hat family operating systems"
            ),
        ] = None,
        registration_command_setup_remote_execution: Annotated[
            Optional[StrictBool],
            Field(
                description="Set 'host_registration_remote_execution' parameter for the host. If it is set to true, SSH keys will be installed on the host"
            ),
        ] = None,
        registration_command_jwt_expiration: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Expiration of the authorization token (in hours)"),
        ] = None,
        registration_command_insecure: Annotated[
            Optional[StrictBool],
            Field(description="Enable insecure argument for the initial curl"),
        ] = None,
        registration_command_packages: Annotated[
            Optional[StrictStr],
            Field(
                description="Packages to install on the host when registered. Can be set by `host_packages` parameter, example: `pkg1 pkg2`"
            ),
        ] = None,
        registration_command_update_packages: Annotated[
            Optional[StrictBool], Field(description="Update all packages on the host")
        ] = None,
        registration_command_repo: Annotated[
            Optional[StrictStr],
            Field(
                description="Repository URL / details, for example for Debian OS family: 'deb http://deb.example.com/ buster 1.0', for Red Hat and SUSE OS family: 'http://yum.theforeman.org/client/latest/el8/x86_64/'"
            ),
        ] = None,
        registration_command_repo_gpg_key_url: Annotated[
            Optional[StrictStr],
            Field(description="URL of the GPG key for the repository"),
        ] = None,
        registration_command_remote_execution_interface: Annotated[
            Optional[StrictStr],
            Field(description="Identifier of the Host interface for Remote execution"),
        ] = None,
        registration_command_setup_remote_execution_pull: Annotated[
            Optional[StrictBool],
            Field(
                description="Set 'host_registration_remote_execution_pull' parameter for the host. If it is set to true, pull provider client will be deployed on the host"
            ),
        ] = None,
        registration_command_activation_key: Annotated[
            Optional[StrictStr],
            Field(
                description="Activation key for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. For multiple keys use `activation_keys` param instead."
            ),
        ] = None,
        registration_command_activation_keys: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="Activation keys for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. Required only if host group has no activation keys."
            ),
        ] = None,
        registration_command_lifecycle_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Lifecycle environment for the host."),
        ] = None,
        registration_command_force: Annotated[
            Optional[StrictBool],
            Field(
                description="Clear any previous registration and run subscription-manager with --force."
            ),
        ] = None,
        registration_command_ignore_subman_errors: Annotated[
            Optional[StrictBool],
            Field(
                description="Ignore subscription-manager errors for `subscription-manager register` command"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Generate global registration command


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param registration_command_organization_id: ID of the Organization to register the host in
        :type registration_command_organization_id: float
        :param registration_command_location_id: ID of the Location to register the host in
        :type registration_command_location_id: float
        :param registration_command_hostgroup_id: ID of the Host group to register the host in
        :type registration_command_hostgroup_id: float
        :param registration_command_operatingsystem_id: ID of the Operating System to register the host in. Operating system must have a `host_init_config` template assigned
        :type registration_command_operatingsystem_id: float
        :param registration_command_smart_proxy_id: ID of the Smart Proxy. This Proxy must have enabled both the 'Templates' and 'Registration' features
        :type registration_command_smart_proxy_id: float
        :param registration_command_setup_insights: Set 'host_registration_insights' parameter for the host. If it is set to true, insights client will be installed and registered on Red Hat family operating systems
        :type registration_command_setup_insights: bool
        :param registration_command_setup_remote_execution: Set 'host_registration_remote_execution' parameter for the host. If it is set to true, SSH keys will be installed on the host
        :type registration_command_setup_remote_execution: bool
        :param registration_command_jwt_expiration: Expiration of the authorization token (in hours)
        :type registration_command_jwt_expiration: float
        :param registration_command_insecure: Enable insecure argument for the initial curl
        :type registration_command_insecure: bool
        :param registration_command_packages: Packages to install on the host when registered. Can be set by `host_packages` parameter, example: `pkg1 pkg2`
        :type registration_command_packages: str
        :param registration_command_update_packages: Update all packages on the host
        :type registration_command_update_packages: bool
        :param registration_command_repo: Repository URL / details, for example for Debian OS family: 'deb http://deb.example.com/ buster 1.0', for Red Hat and SUSE OS family: 'http://yum.theforeman.org/client/latest/el8/x86_64/'
        :type registration_command_repo: str
        :param registration_command_repo_gpg_key_url: URL of the GPG key for the repository
        :type registration_command_repo_gpg_key_url: str
        :param registration_command_remote_execution_interface: Identifier of the Host interface for Remote execution
        :type registration_command_remote_execution_interface: str
        :param registration_command_setup_remote_execution_pull: Set 'host_registration_remote_execution_pull' parameter for the host. If it is set to true, pull provider client will be deployed on the host
        :type registration_command_setup_remote_execution_pull: bool
        :param registration_command_activation_key: Activation key for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. For multiple keys use `activation_keys` param instead.
        :type registration_command_activation_key: str
        :param registration_command_activation_keys: Activation keys for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. Required only if host group has no activation keys.
        :type registration_command_activation_keys: List[str]
        :param registration_command_lifecycle_environment_id: Lifecycle environment for the host.
        :type registration_command_lifecycle_environment_id: float
        :param registration_command_force: Clear any previous registration and run subscription-manager with --force.
        :type registration_command_force: bool
        :param registration_command_ignore_subman_errors: Ignore subscription-manager errors for `subscription-manager register` command
        :type registration_command_ignore_subman_errors: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_registration_commands_serialize(
            location_id=location_id,
            organization_id=organization_id,
            registration_command_organization_id=registration_command_organization_id,
            registration_command_location_id=registration_command_location_id,
            registration_command_hostgroup_id=registration_command_hostgroup_id,
            registration_command_operatingsystem_id=registration_command_operatingsystem_id,
            registration_command_smart_proxy_id=registration_command_smart_proxy_id,
            registration_command_setup_insights=registration_command_setup_insights,
            registration_command_setup_remote_execution=registration_command_setup_remote_execution,
            registration_command_jwt_expiration=registration_command_jwt_expiration,
            registration_command_insecure=registration_command_insecure,
            registration_command_packages=registration_command_packages,
            registration_command_update_packages=registration_command_update_packages,
            registration_command_repo=registration_command_repo,
            registration_command_repo_gpg_key_url=registration_command_repo_gpg_key_url,
            registration_command_remote_execution_interface=registration_command_remote_execution_interface,
            registration_command_setup_remote_execution_pull=registration_command_setup_remote_execution_pull,
            registration_command_activation_key=registration_command_activation_key,
            registration_command_activation_keys=registration_command_activation_keys,
            registration_command_lifecycle_environment_id=registration_command_lifecycle_environment_id,
            registration_command_force=registration_command_force,
            registration_command_ignore_subman_errors=registration_command_ignore_subman_errors,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_registration_commands_with_http_info(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        registration_command_organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the Organization to register the host in"),
        ] = None,
        registration_command_location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the Location to register the host in"),
        ] = None,
        registration_command_hostgroup_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the Host group to register the host in"),
        ] = None,
        registration_command_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="ID of the Operating System to register the host in. Operating system must have a `host_init_config` template assigned"
            ),
        ] = None,
        registration_command_smart_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="ID of the Smart Proxy. This Proxy must have enabled both the 'Templates' and 'Registration' features"
            ),
        ] = None,
        registration_command_setup_insights: Annotated[
            Optional[StrictBool],
            Field(
                description="Set 'host_registration_insights' parameter for the host. If it is set to true, insights client will be installed and registered on Red Hat family operating systems"
            ),
        ] = None,
        registration_command_setup_remote_execution: Annotated[
            Optional[StrictBool],
            Field(
                description="Set 'host_registration_remote_execution' parameter for the host. If it is set to true, SSH keys will be installed on the host"
            ),
        ] = None,
        registration_command_jwt_expiration: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Expiration of the authorization token (in hours)"),
        ] = None,
        registration_command_insecure: Annotated[
            Optional[StrictBool],
            Field(description="Enable insecure argument for the initial curl"),
        ] = None,
        registration_command_packages: Annotated[
            Optional[StrictStr],
            Field(
                description="Packages to install on the host when registered. Can be set by `host_packages` parameter, example: `pkg1 pkg2`"
            ),
        ] = None,
        registration_command_update_packages: Annotated[
            Optional[StrictBool], Field(description="Update all packages on the host")
        ] = None,
        registration_command_repo: Annotated[
            Optional[StrictStr],
            Field(
                description="Repository URL / details, for example for Debian OS family: 'deb http://deb.example.com/ buster 1.0', for Red Hat and SUSE OS family: 'http://yum.theforeman.org/client/latest/el8/x86_64/'"
            ),
        ] = None,
        registration_command_repo_gpg_key_url: Annotated[
            Optional[StrictStr],
            Field(description="URL of the GPG key for the repository"),
        ] = None,
        registration_command_remote_execution_interface: Annotated[
            Optional[StrictStr],
            Field(description="Identifier of the Host interface for Remote execution"),
        ] = None,
        registration_command_setup_remote_execution_pull: Annotated[
            Optional[StrictBool],
            Field(
                description="Set 'host_registration_remote_execution_pull' parameter for the host. If it is set to true, pull provider client will be deployed on the host"
            ),
        ] = None,
        registration_command_activation_key: Annotated[
            Optional[StrictStr],
            Field(
                description="Activation key for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. For multiple keys use `activation_keys` param instead."
            ),
        ] = None,
        registration_command_activation_keys: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="Activation keys for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. Required only if host group has no activation keys."
            ),
        ] = None,
        registration_command_lifecycle_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Lifecycle environment for the host."),
        ] = None,
        registration_command_force: Annotated[
            Optional[StrictBool],
            Field(
                description="Clear any previous registration and run subscription-manager with --force."
            ),
        ] = None,
        registration_command_ignore_subman_errors: Annotated[
            Optional[StrictBool],
            Field(
                description="Ignore subscription-manager errors for `subscription-manager register` command"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Generate global registration command


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param registration_command_organization_id: ID of the Organization to register the host in
        :type registration_command_organization_id: float
        :param registration_command_location_id: ID of the Location to register the host in
        :type registration_command_location_id: float
        :param registration_command_hostgroup_id: ID of the Host group to register the host in
        :type registration_command_hostgroup_id: float
        :param registration_command_operatingsystem_id: ID of the Operating System to register the host in. Operating system must have a `host_init_config` template assigned
        :type registration_command_operatingsystem_id: float
        :param registration_command_smart_proxy_id: ID of the Smart Proxy. This Proxy must have enabled both the 'Templates' and 'Registration' features
        :type registration_command_smart_proxy_id: float
        :param registration_command_setup_insights: Set 'host_registration_insights' parameter for the host. If it is set to true, insights client will be installed and registered on Red Hat family operating systems
        :type registration_command_setup_insights: bool
        :param registration_command_setup_remote_execution: Set 'host_registration_remote_execution' parameter for the host. If it is set to true, SSH keys will be installed on the host
        :type registration_command_setup_remote_execution: bool
        :param registration_command_jwt_expiration: Expiration of the authorization token (in hours)
        :type registration_command_jwt_expiration: float
        :param registration_command_insecure: Enable insecure argument for the initial curl
        :type registration_command_insecure: bool
        :param registration_command_packages: Packages to install on the host when registered. Can be set by `host_packages` parameter, example: `pkg1 pkg2`
        :type registration_command_packages: str
        :param registration_command_update_packages: Update all packages on the host
        :type registration_command_update_packages: bool
        :param registration_command_repo: Repository URL / details, for example for Debian OS family: 'deb http://deb.example.com/ buster 1.0', for Red Hat and SUSE OS family: 'http://yum.theforeman.org/client/latest/el8/x86_64/'
        :type registration_command_repo: str
        :param registration_command_repo_gpg_key_url: URL of the GPG key for the repository
        :type registration_command_repo_gpg_key_url: str
        :param registration_command_remote_execution_interface: Identifier of the Host interface for Remote execution
        :type registration_command_remote_execution_interface: str
        :param registration_command_setup_remote_execution_pull: Set 'host_registration_remote_execution_pull' parameter for the host. If it is set to true, pull provider client will be deployed on the host
        :type registration_command_setup_remote_execution_pull: bool
        :param registration_command_activation_key: Activation key for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. For multiple keys use `activation_keys` param instead.
        :type registration_command_activation_key: str
        :param registration_command_activation_keys: Activation keys for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. Required only if host group has no activation keys.
        :type registration_command_activation_keys: List[str]
        :param registration_command_lifecycle_environment_id: Lifecycle environment for the host.
        :type registration_command_lifecycle_environment_id: float
        :param registration_command_force: Clear any previous registration and run subscription-manager with --force.
        :type registration_command_force: bool
        :param registration_command_ignore_subman_errors: Ignore subscription-manager errors for `subscription-manager register` command
        :type registration_command_ignore_subman_errors: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_registration_commands_serialize(
            location_id=location_id,
            organization_id=organization_id,
            registration_command_organization_id=registration_command_organization_id,
            registration_command_location_id=registration_command_location_id,
            registration_command_hostgroup_id=registration_command_hostgroup_id,
            registration_command_operatingsystem_id=registration_command_operatingsystem_id,
            registration_command_smart_proxy_id=registration_command_smart_proxy_id,
            registration_command_setup_insights=registration_command_setup_insights,
            registration_command_setup_remote_execution=registration_command_setup_remote_execution,
            registration_command_jwt_expiration=registration_command_jwt_expiration,
            registration_command_insecure=registration_command_insecure,
            registration_command_packages=registration_command_packages,
            registration_command_update_packages=registration_command_update_packages,
            registration_command_repo=registration_command_repo,
            registration_command_repo_gpg_key_url=registration_command_repo_gpg_key_url,
            registration_command_remote_execution_interface=registration_command_remote_execution_interface,
            registration_command_setup_remote_execution_pull=registration_command_setup_remote_execution_pull,
            registration_command_activation_key=registration_command_activation_key,
            registration_command_activation_keys=registration_command_activation_keys,
            registration_command_lifecycle_environment_id=registration_command_lifecycle_environment_id,
            registration_command_force=registration_command_force,
            registration_command_ignore_subman_errors=registration_command_ignore_subman_errors,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_registration_commands_without_preload_content(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        registration_command_organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the Organization to register the host in"),
        ] = None,
        registration_command_location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the Location to register the host in"),
        ] = None,
        registration_command_hostgroup_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the Host group to register the host in"),
        ] = None,
        registration_command_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="ID of the Operating System to register the host in. Operating system must have a `host_init_config` template assigned"
            ),
        ] = None,
        registration_command_smart_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="ID of the Smart Proxy. This Proxy must have enabled both the 'Templates' and 'Registration' features"
            ),
        ] = None,
        registration_command_setup_insights: Annotated[
            Optional[StrictBool],
            Field(
                description="Set 'host_registration_insights' parameter for the host. If it is set to true, insights client will be installed and registered on Red Hat family operating systems"
            ),
        ] = None,
        registration_command_setup_remote_execution: Annotated[
            Optional[StrictBool],
            Field(
                description="Set 'host_registration_remote_execution' parameter for the host. If it is set to true, SSH keys will be installed on the host"
            ),
        ] = None,
        registration_command_jwt_expiration: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Expiration of the authorization token (in hours)"),
        ] = None,
        registration_command_insecure: Annotated[
            Optional[StrictBool],
            Field(description="Enable insecure argument for the initial curl"),
        ] = None,
        registration_command_packages: Annotated[
            Optional[StrictStr],
            Field(
                description="Packages to install on the host when registered. Can be set by `host_packages` parameter, example: `pkg1 pkg2`"
            ),
        ] = None,
        registration_command_update_packages: Annotated[
            Optional[StrictBool], Field(description="Update all packages on the host")
        ] = None,
        registration_command_repo: Annotated[
            Optional[StrictStr],
            Field(
                description="Repository URL / details, for example for Debian OS family: 'deb http://deb.example.com/ buster 1.0', for Red Hat and SUSE OS family: 'http://yum.theforeman.org/client/latest/el8/x86_64/'"
            ),
        ] = None,
        registration_command_repo_gpg_key_url: Annotated[
            Optional[StrictStr],
            Field(description="URL of the GPG key for the repository"),
        ] = None,
        registration_command_remote_execution_interface: Annotated[
            Optional[StrictStr],
            Field(description="Identifier of the Host interface for Remote execution"),
        ] = None,
        registration_command_setup_remote_execution_pull: Annotated[
            Optional[StrictBool],
            Field(
                description="Set 'host_registration_remote_execution_pull' parameter for the host. If it is set to true, pull provider client will be deployed on the host"
            ),
        ] = None,
        registration_command_activation_key: Annotated[
            Optional[StrictStr],
            Field(
                description="Activation key for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. For multiple keys use `activation_keys` param instead."
            ),
        ] = None,
        registration_command_activation_keys: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="Activation keys for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. Required only if host group has no activation keys."
            ),
        ] = None,
        registration_command_lifecycle_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Lifecycle environment for the host."),
        ] = None,
        registration_command_force: Annotated[
            Optional[StrictBool],
            Field(
                description="Clear any previous registration and run subscription-manager with --force."
            ),
        ] = None,
        registration_command_ignore_subman_errors: Annotated[
            Optional[StrictBool],
            Field(
                description="Ignore subscription-manager errors for `subscription-manager register` command"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate global registration command


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param registration_command_organization_id: ID of the Organization to register the host in
        :type registration_command_organization_id: float
        :param registration_command_location_id: ID of the Location to register the host in
        :type registration_command_location_id: float
        :param registration_command_hostgroup_id: ID of the Host group to register the host in
        :type registration_command_hostgroup_id: float
        :param registration_command_operatingsystem_id: ID of the Operating System to register the host in. Operating system must have a `host_init_config` template assigned
        :type registration_command_operatingsystem_id: float
        :param registration_command_smart_proxy_id: ID of the Smart Proxy. This Proxy must have enabled both the 'Templates' and 'Registration' features
        :type registration_command_smart_proxy_id: float
        :param registration_command_setup_insights: Set 'host_registration_insights' parameter for the host. If it is set to true, insights client will be installed and registered on Red Hat family operating systems
        :type registration_command_setup_insights: bool
        :param registration_command_setup_remote_execution: Set 'host_registration_remote_execution' parameter for the host. If it is set to true, SSH keys will be installed on the host
        :type registration_command_setup_remote_execution: bool
        :param registration_command_jwt_expiration: Expiration of the authorization token (in hours)
        :type registration_command_jwt_expiration: float
        :param registration_command_insecure: Enable insecure argument for the initial curl
        :type registration_command_insecure: bool
        :param registration_command_packages: Packages to install on the host when registered. Can be set by `host_packages` parameter, example: `pkg1 pkg2`
        :type registration_command_packages: str
        :param registration_command_update_packages: Update all packages on the host
        :type registration_command_update_packages: bool
        :param registration_command_repo: Repository URL / details, for example for Debian OS family: 'deb http://deb.example.com/ buster 1.0', for Red Hat and SUSE OS family: 'http://yum.theforeman.org/client/latest/el8/x86_64/'
        :type registration_command_repo: str
        :param registration_command_repo_gpg_key_url: URL of the GPG key for the repository
        :type registration_command_repo_gpg_key_url: str
        :param registration_command_remote_execution_interface: Identifier of the Host interface for Remote execution
        :type registration_command_remote_execution_interface: str
        :param registration_command_setup_remote_execution_pull: Set 'host_registration_remote_execution_pull' parameter for the host. If it is set to true, pull provider client will be deployed on the host
        :type registration_command_setup_remote_execution_pull: bool
        :param registration_command_activation_key: Activation key for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. For multiple keys use `activation_keys` param instead.
        :type registration_command_activation_key: str
        :param registration_command_activation_keys: Activation keys for subscription-manager client, required for CentOS and Red Hat Enterprise Linux. Required only if host group has no activation keys.
        :type registration_command_activation_keys: List[str]
        :param registration_command_lifecycle_environment_id: Lifecycle environment for the host.
        :type registration_command_lifecycle_environment_id: float
        :param registration_command_force: Clear any previous registration and run subscription-manager with --force.
        :type registration_command_force: bool
        :param registration_command_ignore_subman_errors: Ignore subscription-manager errors for `subscription-manager register` command
        :type registration_command_ignore_subman_errors: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_registration_commands_serialize(
            location_id=location_id,
            organization_id=organization_id,
            registration_command_organization_id=registration_command_organization_id,
            registration_command_location_id=registration_command_location_id,
            registration_command_hostgroup_id=registration_command_hostgroup_id,
            registration_command_operatingsystem_id=registration_command_operatingsystem_id,
            registration_command_smart_proxy_id=registration_command_smart_proxy_id,
            registration_command_setup_insights=registration_command_setup_insights,
            registration_command_setup_remote_execution=registration_command_setup_remote_execution,
            registration_command_jwt_expiration=registration_command_jwt_expiration,
            registration_command_insecure=registration_command_insecure,
            registration_command_packages=registration_command_packages,
            registration_command_update_packages=registration_command_update_packages,
            registration_command_repo=registration_command_repo,
            registration_command_repo_gpg_key_url=registration_command_repo_gpg_key_url,
            registration_command_remote_execution_interface=registration_command_remote_execution_interface,
            registration_command_setup_remote_execution_pull=registration_command_setup_remote_execution_pull,
            registration_command_activation_key=registration_command_activation_key,
            registration_command_activation_keys=registration_command_activation_keys,
            registration_command_lifecycle_environment_id=registration_command_lifecycle_environment_id,
            registration_command_force=registration_command_force,
            registration_command_ignore_subman_errors=registration_command_ignore_subman_errors,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_registration_commands_serialize(
        self,
        location_id,
        organization_id,
        registration_command_organization_id,
        registration_command_location_id,
        registration_command_hostgroup_id,
        registration_command_operatingsystem_id,
        registration_command_smart_proxy_id,
        registration_command_setup_insights,
        registration_command_setup_remote_execution,
        registration_command_jwt_expiration,
        registration_command_insecure,
        registration_command_packages,
        registration_command_update_packages,
        registration_command_repo,
        registration_command_repo_gpg_key_url,
        registration_command_remote_execution_interface,
        registration_command_setup_remote_execution_pull,
        registration_command_activation_key,
        registration_command_activation_keys,
        registration_command_lifecycle_environment_id,
        registration_command_force,
        registration_command_ignore_subman_errors,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "registration_command[activation_keys]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if registration_command_organization_id is not None:
            _form_params.append(
                (
                    "registration_command[organization_id]",
                    registration_command_organization_id,
                )
            )
        if registration_command_location_id is not None:
            _form_params.append(
                ("registration_command[location_id]", registration_command_location_id)
            )
        if registration_command_hostgroup_id is not None:
            _form_params.append(
                (
                    "registration_command[hostgroup_id]",
                    registration_command_hostgroup_id,
                )
            )
        if registration_command_operatingsystem_id is not None:
            _form_params.append(
                (
                    "registration_command[operatingsystem_id]",
                    registration_command_operatingsystem_id,
                )
            )
        if registration_command_smart_proxy_id is not None:
            _form_params.append(
                (
                    "registration_command[smart_proxy_id]",
                    registration_command_smart_proxy_id,
                )
            )
        if registration_command_setup_insights is not None:
            _form_params.append(
                (
                    "registration_command[setup_insights]",
                    registration_command_setup_insights,
                )
            )
        if registration_command_setup_remote_execution is not None:
            _form_params.append(
                (
                    "registration_command[setup_remote_execution]",
                    registration_command_setup_remote_execution,
                )
            )
        if registration_command_jwt_expiration is not None:
            _form_params.append(
                (
                    "registration_command[jwt_expiration]",
                    registration_command_jwt_expiration,
                )
            )
        if registration_command_insecure is not None:
            _form_params.append(
                ("registration_command[insecure]", registration_command_insecure)
            )
        if registration_command_packages is not None:
            _form_params.append(
                ("registration_command[packages]", registration_command_packages)
            )
        if registration_command_update_packages is not None:
            _form_params.append(
                (
                    "registration_command[update_packages]",
                    registration_command_update_packages,
                )
            )
        if registration_command_repo is not None:
            _form_params.append(
                ("registration_command[repo]", registration_command_repo)
            )
        if registration_command_repo_gpg_key_url is not None:
            _form_params.append(
                (
                    "registration_command[repo_gpg_key_url]",
                    registration_command_repo_gpg_key_url,
                )
            )
        if registration_command_remote_execution_interface is not None:
            _form_params.append(
                (
                    "registration_command[remote_execution_interface]",
                    registration_command_remote_execution_interface,
                )
            )
        if registration_command_setup_remote_execution_pull is not None:
            _form_params.append(
                (
                    "registration_command[setup_remote_execution_pull]",
                    registration_command_setup_remote_execution_pull,
                )
            )
        if registration_command_activation_key is not None:
            _form_params.append(
                (
                    "registration_command[activation_key]",
                    registration_command_activation_key,
                )
            )
        if registration_command_activation_keys is not None:
            _form_params.append(
                (
                    "registration_command[activation_keys]",
                    registration_command_activation_keys,
                )
            )
        if registration_command_lifecycle_environment_id is not None:
            _form_params.append(
                (
                    "registration_command[lifecycle_environment_id]",
                    registration_command_lifecycle_environment_id,
                )
            )
        if registration_command_force is not None:
            _form_params.append(
                ("registration_command[force]", registration_command_force)
            )
        if registration_command_ignore_subman_errors is not None:
            _form_params.append(
                (
                    "registration_command[ignore_subman_errors]",
                    registration_command_ignore_subman_errors,
                )
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/registration_commands",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
