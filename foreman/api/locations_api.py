# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class LocationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_locations_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a location


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_locations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_locations_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a location


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_locations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_locations_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a location


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_locations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_locations_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/locations/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_locations(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all locations


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_locations_with_http_info(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all locations


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_locations_without_preload_content(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all locations


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_locations_serialize(
        self,
        location_id,
        organization_id,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/locations",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_locations_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a location


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_locations_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a location


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_locations_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a location


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_locations_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        show_hidden_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if show_hidden_parameters is not None:
            _query_params.append(("show_hidden_parameters", show_hidden_parameters))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/locations/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_locations(
        self,
        location_name: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        location_description: Optional[StrictStr] = None,
        location_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        location_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        location_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        location_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        location_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        location_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        location_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        location_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        location_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        location_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        location_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        location_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Parent ID")
        ] = None,
        location_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        location_organization_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated organization IDs")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a location


        :param location_name: (required)
        :type location_name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param location_description:
        :type location_description: str
        :param location_user_ids: User IDs
        :type location_user_ids: List[str]
        :param location_smart_proxy_ids: Smart proxy IDs
        :type location_smart_proxy_ids: List[str]
        :param location_compute_resource_ids: Compute resource IDs
        :type location_compute_resource_ids: List[str]
        :param location_medium_ids: Medium IDs
        :type location_medium_ids: List[str]
        :param location_ptable_ids: Partition template IDs
        :type location_ptable_ids: List[str]
        :param location_provisioning_template_ids: Provisioning template IDs
        :type location_provisioning_template_ids: List[str]
        :param location_domain_ids: Domain IDs
        :type location_domain_ids: List[str]
        :param location_realm_ids: Realm IDs
        :type location_realm_ids: List[str]
        :param location_hostgroup_ids: Host group IDs
        :type location_hostgroup_ids: List[str]
        :param location_environment_ids: Environment IDs
        :type location_environment_ids: List[str]
        :param location_subnet_ids: Subnet IDs
        :type location_subnet_ids: List[str]
        :param location_parent_id: Parent ID
        :type location_parent_id: float
        :param location_ignore_types: List of resources types that will be automatically associated
        :type location_ignore_types: List[str]
        :param location_organization_ids: Associated organization IDs
        :type location_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_locations_serialize(
            location_name=location_name,
            location_id=location_id,
            organization_id=organization_id,
            location_description=location_description,
            location_user_ids=location_user_ids,
            location_smart_proxy_ids=location_smart_proxy_ids,
            location_compute_resource_ids=location_compute_resource_ids,
            location_medium_ids=location_medium_ids,
            location_ptable_ids=location_ptable_ids,
            location_provisioning_template_ids=location_provisioning_template_ids,
            location_domain_ids=location_domain_ids,
            location_realm_ids=location_realm_ids,
            location_hostgroup_ids=location_hostgroup_ids,
            location_environment_ids=location_environment_ids,
            location_subnet_ids=location_subnet_ids,
            location_parent_id=location_parent_id,
            location_ignore_types=location_ignore_types,
            location_organization_ids=location_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_locations_with_http_info(
        self,
        location_name: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        location_description: Optional[StrictStr] = None,
        location_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        location_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        location_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        location_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        location_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        location_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        location_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        location_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        location_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        location_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        location_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        location_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Parent ID")
        ] = None,
        location_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        location_organization_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated organization IDs")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a location


        :param location_name: (required)
        :type location_name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param location_description:
        :type location_description: str
        :param location_user_ids: User IDs
        :type location_user_ids: List[str]
        :param location_smart_proxy_ids: Smart proxy IDs
        :type location_smart_proxy_ids: List[str]
        :param location_compute_resource_ids: Compute resource IDs
        :type location_compute_resource_ids: List[str]
        :param location_medium_ids: Medium IDs
        :type location_medium_ids: List[str]
        :param location_ptable_ids: Partition template IDs
        :type location_ptable_ids: List[str]
        :param location_provisioning_template_ids: Provisioning template IDs
        :type location_provisioning_template_ids: List[str]
        :param location_domain_ids: Domain IDs
        :type location_domain_ids: List[str]
        :param location_realm_ids: Realm IDs
        :type location_realm_ids: List[str]
        :param location_hostgroup_ids: Host group IDs
        :type location_hostgroup_ids: List[str]
        :param location_environment_ids: Environment IDs
        :type location_environment_ids: List[str]
        :param location_subnet_ids: Subnet IDs
        :type location_subnet_ids: List[str]
        :param location_parent_id: Parent ID
        :type location_parent_id: float
        :param location_ignore_types: List of resources types that will be automatically associated
        :type location_ignore_types: List[str]
        :param location_organization_ids: Associated organization IDs
        :type location_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_locations_serialize(
            location_name=location_name,
            location_id=location_id,
            organization_id=organization_id,
            location_description=location_description,
            location_user_ids=location_user_ids,
            location_smart_proxy_ids=location_smart_proxy_ids,
            location_compute_resource_ids=location_compute_resource_ids,
            location_medium_ids=location_medium_ids,
            location_ptable_ids=location_ptable_ids,
            location_provisioning_template_ids=location_provisioning_template_ids,
            location_domain_ids=location_domain_ids,
            location_realm_ids=location_realm_ids,
            location_hostgroup_ids=location_hostgroup_ids,
            location_environment_ids=location_environment_ids,
            location_subnet_ids=location_subnet_ids,
            location_parent_id=location_parent_id,
            location_ignore_types=location_ignore_types,
            location_organization_ids=location_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_locations_without_preload_content(
        self,
        location_name: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        location_description: Optional[StrictStr] = None,
        location_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        location_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        location_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        location_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        location_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        location_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        location_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        location_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        location_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        location_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        location_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        location_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Parent ID")
        ] = None,
        location_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        location_organization_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated organization IDs")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a location


        :param location_name: (required)
        :type location_name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param location_description:
        :type location_description: str
        :param location_user_ids: User IDs
        :type location_user_ids: List[str]
        :param location_smart_proxy_ids: Smart proxy IDs
        :type location_smart_proxy_ids: List[str]
        :param location_compute_resource_ids: Compute resource IDs
        :type location_compute_resource_ids: List[str]
        :param location_medium_ids: Medium IDs
        :type location_medium_ids: List[str]
        :param location_ptable_ids: Partition template IDs
        :type location_ptable_ids: List[str]
        :param location_provisioning_template_ids: Provisioning template IDs
        :type location_provisioning_template_ids: List[str]
        :param location_domain_ids: Domain IDs
        :type location_domain_ids: List[str]
        :param location_realm_ids: Realm IDs
        :type location_realm_ids: List[str]
        :param location_hostgroup_ids: Host group IDs
        :type location_hostgroup_ids: List[str]
        :param location_environment_ids: Environment IDs
        :type location_environment_ids: List[str]
        :param location_subnet_ids: Subnet IDs
        :type location_subnet_ids: List[str]
        :param location_parent_id: Parent ID
        :type location_parent_id: float
        :param location_ignore_types: List of resources types that will be automatically associated
        :type location_ignore_types: List[str]
        :param location_organization_ids: Associated organization IDs
        :type location_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_locations_serialize(
            location_name=location_name,
            location_id=location_id,
            organization_id=organization_id,
            location_description=location_description,
            location_user_ids=location_user_ids,
            location_smart_proxy_ids=location_smart_proxy_ids,
            location_compute_resource_ids=location_compute_resource_ids,
            location_medium_ids=location_medium_ids,
            location_ptable_ids=location_ptable_ids,
            location_provisioning_template_ids=location_provisioning_template_ids,
            location_domain_ids=location_domain_ids,
            location_realm_ids=location_realm_ids,
            location_hostgroup_ids=location_hostgroup_ids,
            location_environment_ids=location_environment_ids,
            location_subnet_ids=location_subnet_ids,
            location_parent_id=location_parent_id,
            location_ignore_types=location_ignore_types,
            location_organization_ids=location_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_locations_serialize(
        self,
        location_name,
        location_id,
        organization_id,
        location_description,
        location_user_ids,
        location_smart_proxy_ids,
        location_compute_resource_ids,
        location_medium_ids,
        location_ptable_ids,
        location_provisioning_template_ids,
        location_domain_ids,
        location_realm_ids,
        location_hostgroup_ids,
        location_environment_ids,
        location_subnet_ids,
        location_parent_id,
        location_ignore_types,
        location_organization_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "location[user_ids]": "csv",
            "location[smart_proxy_ids]": "csv",
            "location[compute_resource_ids]": "csv",
            "location[medium_ids]": "csv",
            "location[ptable_ids]": "csv",
            "location[provisioning_template_ids]": "csv",
            "location[domain_ids]": "csv",
            "location[realm_ids]": "csv",
            "location[hostgroup_ids]": "csv",
            "location[environment_ids]": "csv",
            "location[subnet_ids]": "csv",
            "location[ignore_types]": "csv",
            "location[organization_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_name is not None:
            _form_params.append(("location[name]", location_name))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_description is not None:
            _form_params.append(("location[description]", location_description))
        if location_user_ids is not None:
            _form_params.append(("location[user_ids]", location_user_ids))
        if location_smart_proxy_ids is not None:
            _form_params.append(("location[smart_proxy_ids]", location_smart_proxy_ids))
        if location_compute_resource_ids is not None:
            _form_params.append(
                ("location[compute_resource_ids]", location_compute_resource_ids)
            )
        if location_medium_ids is not None:
            _form_params.append(("location[medium_ids]", location_medium_ids))
        if location_ptable_ids is not None:
            _form_params.append(("location[ptable_ids]", location_ptable_ids))
        if location_provisioning_template_ids is not None:
            _form_params.append(
                (
                    "location[provisioning_template_ids]",
                    location_provisioning_template_ids,
                )
            )
        if location_domain_ids is not None:
            _form_params.append(("location[domain_ids]", location_domain_ids))
        if location_realm_ids is not None:
            _form_params.append(("location[realm_ids]", location_realm_ids))
        if location_hostgroup_ids is not None:
            _form_params.append(("location[hostgroup_ids]", location_hostgroup_ids))
        if location_environment_ids is not None:
            _form_params.append(("location[environment_ids]", location_environment_ids))
        if location_subnet_ids is not None:
            _form_params.append(("location[subnet_ids]", location_subnet_ids))
        if location_parent_id is not None:
            _form_params.append(("location[parent_id]", location_parent_id))
        if location_ignore_types is not None:
            _form_params.append(("location[ignore_types]", location_ignore_types))
        if location_organization_ids is not None:
            _form_params.append(
                ("location[organization_ids]", location_organization_ids)
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/locations",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_locations_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        location_name: Optional[StrictStr] = None,
        location_description: Optional[StrictStr] = None,
        location_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        location_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        location_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        location_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        location_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        location_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        location_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        location_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        location_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        location_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        location_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        location_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Parent ID")
        ] = None,
        location_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        location_organization_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated organization IDs")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a location


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param location_name:
        :type location_name: str
        :param location_description:
        :type location_description: str
        :param location_user_ids: User IDs
        :type location_user_ids: List[str]
        :param location_smart_proxy_ids: Smart proxy IDs
        :type location_smart_proxy_ids: List[str]
        :param location_compute_resource_ids: Compute resource IDs
        :type location_compute_resource_ids: List[str]
        :param location_medium_ids: Medium IDs
        :type location_medium_ids: List[str]
        :param location_ptable_ids: Partition template IDs
        :type location_ptable_ids: List[str]
        :param location_provisioning_template_ids: Provisioning template IDs
        :type location_provisioning_template_ids: List[str]
        :param location_domain_ids: Domain IDs
        :type location_domain_ids: List[str]
        :param location_realm_ids: Realm IDs
        :type location_realm_ids: List[str]
        :param location_hostgroup_ids: Host group IDs
        :type location_hostgroup_ids: List[str]
        :param location_environment_ids: Environment IDs
        :type location_environment_ids: List[str]
        :param location_subnet_ids: Subnet IDs
        :type location_subnet_ids: List[str]
        :param location_parent_id: Parent ID
        :type location_parent_id: float
        :param location_ignore_types: List of resources types that will be automatically associated
        :type location_ignore_types: List[str]
        :param location_organization_ids: Associated organization IDs
        :type location_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_locations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            location_name=location_name,
            location_description=location_description,
            location_user_ids=location_user_ids,
            location_smart_proxy_ids=location_smart_proxy_ids,
            location_compute_resource_ids=location_compute_resource_ids,
            location_medium_ids=location_medium_ids,
            location_ptable_ids=location_ptable_ids,
            location_provisioning_template_ids=location_provisioning_template_ids,
            location_domain_ids=location_domain_ids,
            location_realm_ids=location_realm_ids,
            location_hostgroup_ids=location_hostgroup_ids,
            location_environment_ids=location_environment_ids,
            location_subnet_ids=location_subnet_ids,
            location_parent_id=location_parent_id,
            location_ignore_types=location_ignore_types,
            location_organization_ids=location_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_locations_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        location_name: Optional[StrictStr] = None,
        location_description: Optional[StrictStr] = None,
        location_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        location_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        location_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        location_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        location_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        location_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        location_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        location_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        location_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        location_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        location_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        location_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Parent ID")
        ] = None,
        location_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        location_organization_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated organization IDs")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a location


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param location_name:
        :type location_name: str
        :param location_description:
        :type location_description: str
        :param location_user_ids: User IDs
        :type location_user_ids: List[str]
        :param location_smart_proxy_ids: Smart proxy IDs
        :type location_smart_proxy_ids: List[str]
        :param location_compute_resource_ids: Compute resource IDs
        :type location_compute_resource_ids: List[str]
        :param location_medium_ids: Medium IDs
        :type location_medium_ids: List[str]
        :param location_ptable_ids: Partition template IDs
        :type location_ptable_ids: List[str]
        :param location_provisioning_template_ids: Provisioning template IDs
        :type location_provisioning_template_ids: List[str]
        :param location_domain_ids: Domain IDs
        :type location_domain_ids: List[str]
        :param location_realm_ids: Realm IDs
        :type location_realm_ids: List[str]
        :param location_hostgroup_ids: Host group IDs
        :type location_hostgroup_ids: List[str]
        :param location_environment_ids: Environment IDs
        :type location_environment_ids: List[str]
        :param location_subnet_ids: Subnet IDs
        :type location_subnet_ids: List[str]
        :param location_parent_id: Parent ID
        :type location_parent_id: float
        :param location_ignore_types: List of resources types that will be automatically associated
        :type location_ignore_types: List[str]
        :param location_organization_ids: Associated organization IDs
        :type location_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_locations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            location_name=location_name,
            location_description=location_description,
            location_user_ids=location_user_ids,
            location_smart_proxy_ids=location_smart_proxy_ids,
            location_compute_resource_ids=location_compute_resource_ids,
            location_medium_ids=location_medium_ids,
            location_ptable_ids=location_ptable_ids,
            location_provisioning_template_ids=location_provisioning_template_ids,
            location_domain_ids=location_domain_ids,
            location_realm_ids=location_realm_ids,
            location_hostgroup_ids=location_hostgroup_ids,
            location_environment_ids=location_environment_ids,
            location_subnet_ids=location_subnet_ids,
            location_parent_id=location_parent_id,
            location_ignore_types=location_ignore_types,
            location_organization_ids=location_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_locations_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        location_name: Optional[StrictStr] = None,
        location_description: Optional[StrictStr] = None,
        location_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        location_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        location_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        location_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        location_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        location_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        location_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        location_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        location_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        location_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        location_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        location_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Parent ID")
        ] = None,
        location_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        location_organization_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated organization IDs")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a location


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param location_name:
        :type location_name: str
        :param location_description:
        :type location_description: str
        :param location_user_ids: User IDs
        :type location_user_ids: List[str]
        :param location_smart_proxy_ids: Smart proxy IDs
        :type location_smart_proxy_ids: List[str]
        :param location_compute_resource_ids: Compute resource IDs
        :type location_compute_resource_ids: List[str]
        :param location_medium_ids: Medium IDs
        :type location_medium_ids: List[str]
        :param location_ptable_ids: Partition template IDs
        :type location_ptable_ids: List[str]
        :param location_provisioning_template_ids: Provisioning template IDs
        :type location_provisioning_template_ids: List[str]
        :param location_domain_ids: Domain IDs
        :type location_domain_ids: List[str]
        :param location_realm_ids: Realm IDs
        :type location_realm_ids: List[str]
        :param location_hostgroup_ids: Host group IDs
        :type location_hostgroup_ids: List[str]
        :param location_environment_ids: Environment IDs
        :type location_environment_ids: List[str]
        :param location_subnet_ids: Subnet IDs
        :type location_subnet_ids: List[str]
        :param location_parent_id: Parent ID
        :type location_parent_id: float
        :param location_ignore_types: List of resources types that will be automatically associated
        :type location_ignore_types: List[str]
        :param location_organization_ids: Associated organization IDs
        :type location_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_locations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            location_name=location_name,
            location_description=location_description,
            location_user_ids=location_user_ids,
            location_smart_proxy_ids=location_smart_proxy_ids,
            location_compute_resource_ids=location_compute_resource_ids,
            location_medium_ids=location_medium_ids,
            location_ptable_ids=location_ptable_ids,
            location_provisioning_template_ids=location_provisioning_template_ids,
            location_domain_ids=location_domain_ids,
            location_realm_ids=location_realm_ids,
            location_hostgroup_ids=location_hostgroup_ids,
            location_environment_ids=location_environment_ids,
            location_subnet_ids=location_subnet_ids,
            location_parent_id=location_parent_id,
            location_ignore_types=location_ignore_types,
            location_organization_ids=location_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_locations_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        location_name,
        location_description,
        location_user_ids,
        location_smart_proxy_ids,
        location_compute_resource_ids,
        location_medium_ids,
        location_ptable_ids,
        location_provisioning_template_ids,
        location_domain_ids,
        location_realm_ids,
        location_hostgroup_ids,
        location_environment_ids,
        location_subnet_ids,
        location_parent_id,
        location_ignore_types,
        location_organization_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "location[user_ids]": "csv",
            "location[smart_proxy_ids]": "csv",
            "location[compute_resource_ids]": "csv",
            "location[medium_ids]": "csv",
            "location[ptable_ids]": "csv",
            "location[provisioning_template_ids]": "csv",
            "location[domain_ids]": "csv",
            "location[realm_ids]": "csv",
            "location[hostgroup_ids]": "csv",
            "location[environment_ids]": "csv",
            "location[subnet_ids]": "csv",
            "location[ignore_types]": "csv",
            "location[organization_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_name is not None:
            _form_params.append(("location[name]", location_name))
        if location_description is not None:
            _form_params.append(("location[description]", location_description))
        if location_user_ids is not None:
            _form_params.append(("location[user_ids]", location_user_ids))
        if location_smart_proxy_ids is not None:
            _form_params.append(("location[smart_proxy_ids]", location_smart_proxy_ids))
        if location_compute_resource_ids is not None:
            _form_params.append(
                ("location[compute_resource_ids]", location_compute_resource_ids)
            )
        if location_medium_ids is not None:
            _form_params.append(("location[medium_ids]", location_medium_ids))
        if location_ptable_ids is not None:
            _form_params.append(("location[ptable_ids]", location_ptable_ids))
        if location_provisioning_template_ids is not None:
            _form_params.append(
                (
                    "location[provisioning_template_ids]",
                    location_provisioning_template_ids,
                )
            )
        if location_domain_ids is not None:
            _form_params.append(("location[domain_ids]", location_domain_ids))
        if location_realm_ids is not None:
            _form_params.append(("location[realm_ids]", location_realm_ids))
        if location_hostgroup_ids is not None:
            _form_params.append(("location[hostgroup_ids]", location_hostgroup_ids))
        if location_environment_ids is not None:
            _form_params.append(("location[environment_ids]", location_environment_ids))
        if location_subnet_ids is not None:
            _form_params.append(("location[subnet_ids]", location_subnet_ids))
        if location_parent_id is not None:
            _form_params.append(("location[parent_id]", location_parent_id))
        if location_ignore_types is not None:
            _form_params.append(("location[ignore_types]", location_ignore_types))
        if location_organization_ids is not None:
            _form_params.append(
                ("location[organization_ids]", location_organization_ids)
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/locations/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
