# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr, field_validator

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class AlternateContentSourcesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_alternate_content_sources_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Destroy an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_alternate_content_sources_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_alternate_content_sources_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Destroy an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_alternate_content_sources_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_alternate_content_sources_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Destroy an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_alternate_content_sources_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_alternate_content_sources_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/alternate_content_sources/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_alternate_content_sources(
        self,
        name: Annotated[
            Optional[StrictStr],
            Field(description="Name of the alternate content source"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List alternate content sources.


        :param name: Name of the alternate content source
        :type name: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_alternate_content_sources_serialize(
            name=name,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_alternate_content_sources_with_http_info(
        self,
        name: Annotated[
            Optional[StrictStr],
            Field(description="Name of the alternate content source"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List alternate content sources.


        :param name: Name of the alternate content source
        :type name: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_alternate_content_sources_serialize(
            name=name,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_alternate_content_sources_without_preload_content(
        self,
        name: Annotated[
            Optional[StrictStr],
            Field(description="Name of the alternate content source"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List alternate content sources.


        :param name: Name of the alternate content source
        :type name: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_alternate_content_sources_serialize(
            name=name,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_alternate_content_sources_serialize(
        self,
        name,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if name is not None:
            _query_params.append(("name", name))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/alternate_content_sources",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_alternate_content_sources_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_alternate_content_sources_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_alternate_content_sources_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_alternate_content_sources_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_alternate_content_sources_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_alternate_content_sources_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_alternate_content_sources_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/alternate_content_sources/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_alternate_content_sources(
        self,
        content_type: Annotated[
            Optional[StrictStr],
            Field(description="The content type for the Alternate Content Source"),
        ] = None,
        alternate_content_source_type: Annotated[
            Optional[StrictStr], Field(description="The Alternate Content Source type")
        ] = None,
        name: Annotated[
            Optional[StrictStr],
            Field(description="Name of the alternate content source"),
        ] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(description="Description for the alternate content source"),
        ] = None,
        base_url: Annotated[
            Optional[StrictStr],
            Field(description="Base URL for finding alternate content"),
        ] = None,
        subpaths: Annotated[
            Optional[List[StrictStr]],
            Field(description="Path suffixes for finding alternate content"),
        ] = None,
        smart_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Ids of smart proxies to associate"),
        ] = None,
        smart_proxy_names: Annotated[
            Optional[List[StrictStr]],
            Field(description="Names of smart proxies to associate"),
        ] = None,
        upstream_username: Annotated[
            Optional[StrictStr], Field(description="Basic authentication username")
        ] = None,
        upstream_password: Annotated[
            Optional[StrictStr], Field(description="Basic authentication password")
        ] = None,
        ssl_ca_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL CA Cert"
            ),
        ] = None,
        ssl_client_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Cert"
            ),
        ] = None,
        ssl_client_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Key"
            ),
        ] = None,
        verify_ssl: Annotated[
            Optional[StrictBool],
            Field(description="If SSL should be verified for the upstream URL"),
        ] = None,
        use_http_proxies: Annotated[
            Optional[StrictBool],
            Field(
                description="If the smart proxies' assigned HTTP proxies should be used"
            ),
        ] = None,
        product_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create an alternate content source to download content from during repository syncing.  Note: alternate content sources are global and affect ALL sync actions on their smart proxies regardless of organization.


        :param content_type: The content type for the Alternate Content Source
        :type content_type: str
        :param alternate_content_source_type: The Alternate Content Source type
        :type alternate_content_source_type: str
        :param name: Name of the alternate content source
        :type name: str
        :param description: Description for the alternate content source
        :type description: str
        :param base_url: Base URL for finding alternate content
        :type base_url: str
        :param subpaths: Path suffixes for finding alternate content
        :type subpaths: List[str]
        :param smart_proxy_ids: Ids of smart proxies to associate
        :type smart_proxy_ids: List[str]
        :param smart_proxy_names: Names of smart proxies to associate
        :type smart_proxy_names: List[str]
        :param upstream_username: Basic authentication username
        :type upstream_username: str
        :param upstream_password: Basic authentication password
        :type upstream_password: str
        :param ssl_ca_cert_id: Identifier of the content credential containing the SSL CA Cert
        :type ssl_ca_cert_id: float
        :param ssl_client_cert_id: Identifier of the content credential containing the SSL Client Cert
        :type ssl_client_cert_id: float
        :param ssl_client_key_id: Identifier of the content credential containing the SSL Client Key
        :type ssl_client_key_id: float
        :param verify_ssl: If SSL should be verified for the upstream URL
        :type verify_ssl: bool
        :param use_http_proxies: If the smart proxies' assigned HTTP proxies should be used
        :type use_http_proxies: bool
        :param product_ids: IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type.
        :type product_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_alternate_content_sources_serialize(
            content_type=content_type,
            alternate_content_source_type=alternate_content_source_type,
            name=name,
            description=description,
            base_url=base_url,
            subpaths=subpaths,
            smart_proxy_ids=smart_proxy_ids,
            smart_proxy_names=smart_proxy_names,
            upstream_username=upstream_username,
            upstream_password=upstream_password,
            ssl_ca_cert_id=ssl_ca_cert_id,
            ssl_client_cert_id=ssl_client_cert_id,
            ssl_client_key_id=ssl_client_key_id,
            verify_ssl=verify_ssl,
            use_http_proxies=use_http_proxies,
            product_ids=product_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_alternate_content_sources_with_http_info(
        self,
        content_type: Annotated[
            Optional[StrictStr],
            Field(description="The content type for the Alternate Content Source"),
        ] = None,
        alternate_content_source_type: Annotated[
            Optional[StrictStr], Field(description="The Alternate Content Source type")
        ] = None,
        name: Annotated[
            Optional[StrictStr],
            Field(description="Name of the alternate content source"),
        ] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(description="Description for the alternate content source"),
        ] = None,
        base_url: Annotated[
            Optional[StrictStr],
            Field(description="Base URL for finding alternate content"),
        ] = None,
        subpaths: Annotated[
            Optional[List[StrictStr]],
            Field(description="Path suffixes for finding alternate content"),
        ] = None,
        smart_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Ids of smart proxies to associate"),
        ] = None,
        smart_proxy_names: Annotated[
            Optional[List[StrictStr]],
            Field(description="Names of smart proxies to associate"),
        ] = None,
        upstream_username: Annotated[
            Optional[StrictStr], Field(description="Basic authentication username")
        ] = None,
        upstream_password: Annotated[
            Optional[StrictStr], Field(description="Basic authentication password")
        ] = None,
        ssl_ca_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL CA Cert"
            ),
        ] = None,
        ssl_client_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Cert"
            ),
        ] = None,
        ssl_client_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Key"
            ),
        ] = None,
        verify_ssl: Annotated[
            Optional[StrictBool],
            Field(description="If SSL should be verified for the upstream URL"),
        ] = None,
        use_http_proxies: Annotated[
            Optional[StrictBool],
            Field(
                description="If the smart proxies' assigned HTTP proxies should be used"
            ),
        ] = None,
        product_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create an alternate content source to download content from during repository syncing.  Note: alternate content sources are global and affect ALL sync actions on their smart proxies regardless of organization.


        :param content_type: The content type for the Alternate Content Source
        :type content_type: str
        :param alternate_content_source_type: The Alternate Content Source type
        :type alternate_content_source_type: str
        :param name: Name of the alternate content source
        :type name: str
        :param description: Description for the alternate content source
        :type description: str
        :param base_url: Base URL for finding alternate content
        :type base_url: str
        :param subpaths: Path suffixes for finding alternate content
        :type subpaths: List[str]
        :param smart_proxy_ids: Ids of smart proxies to associate
        :type smart_proxy_ids: List[str]
        :param smart_proxy_names: Names of smart proxies to associate
        :type smart_proxy_names: List[str]
        :param upstream_username: Basic authentication username
        :type upstream_username: str
        :param upstream_password: Basic authentication password
        :type upstream_password: str
        :param ssl_ca_cert_id: Identifier of the content credential containing the SSL CA Cert
        :type ssl_ca_cert_id: float
        :param ssl_client_cert_id: Identifier of the content credential containing the SSL Client Cert
        :type ssl_client_cert_id: float
        :param ssl_client_key_id: Identifier of the content credential containing the SSL Client Key
        :type ssl_client_key_id: float
        :param verify_ssl: If SSL should be verified for the upstream URL
        :type verify_ssl: bool
        :param use_http_proxies: If the smart proxies' assigned HTTP proxies should be used
        :type use_http_proxies: bool
        :param product_ids: IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type.
        :type product_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_alternate_content_sources_serialize(
            content_type=content_type,
            alternate_content_source_type=alternate_content_source_type,
            name=name,
            description=description,
            base_url=base_url,
            subpaths=subpaths,
            smart_proxy_ids=smart_proxy_ids,
            smart_proxy_names=smart_proxy_names,
            upstream_username=upstream_username,
            upstream_password=upstream_password,
            ssl_ca_cert_id=ssl_ca_cert_id,
            ssl_client_cert_id=ssl_client_cert_id,
            ssl_client_key_id=ssl_client_key_id,
            verify_ssl=verify_ssl,
            use_http_proxies=use_http_proxies,
            product_ids=product_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_alternate_content_sources_without_preload_content(
        self,
        content_type: Annotated[
            Optional[StrictStr],
            Field(description="The content type for the Alternate Content Source"),
        ] = None,
        alternate_content_source_type: Annotated[
            Optional[StrictStr], Field(description="The Alternate Content Source type")
        ] = None,
        name: Annotated[
            Optional[StrictStr],
            Field(description="Name of the alternate content source"),
        ] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(description="Description for the alternate content source"),
        ] = None,
        base_url: Annotated[
            Optional[StrictStr],
            Field(description="Base URL for finding alternate content"),
        ] = None,
        subpaths: Annotated[
            Optional[List[StrictStr]],
            Field(description="Path suffixes for finding alternate content"),
        ] = None,
        smart_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Ids of smart proxies to associate"),
        ] = None,
        smart_proxy_names: Annotated[
            Optional[List[StrictStr]],
            Field(description="Names of smart proxies to associate"),
        ] = None,
        upstream_username: Annotated[
            Optional[StrictStr], Field(description="Basic authentication username")
        ] = None,
        upstream_password: Annotated[
            Optional[StrictStr], Field(description="Basic authentication password")
        ] = None,
        ssl_ca_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL CA Cert"
            ),
        ] = None,
        ssl_client_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Cert"
            ),
        ] = None,
        ssl_client_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Key"
            ),
        ] = None,
        verify_ssl: Annotated[
            Optional[StrictBool],
            Field(description="If SSL should be verified for the upstream URL"),
        ] = None,
        use_http_proxies: Annotated[
            Optional[StrictBool],
            Field(
                description="If the smart proxies' assigned HTTP proxies should be used"
            ),
        ] = None,
        product_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an alternate content source to download content from during repository syncing.  Note: alternate content sources are global and affect ALL sync actions on their smart proxies regardless of organization.


        :param content_type: The content type for the Alternate Content Source
        :type content_type: str
        :param alternate_content_source_type: The Alternate Content Source type
        :type alternate_content_source_type: str
        :param name: Name of the alternate content source
        :type name: str
        :param description: Description for the alternate content source
        :type description: str
        :param base_url: Base URL for finding alternate content
        :type base_url: str
        :param subpaths: Path suffixes for finding alternate content
        :type subpaths: List[str]
        :param smart_proxy_ids: Ids of smart proxies to associate
        :type smart_proxy_ids: List[str]
        :param smart_proxy_names: Names of smart proxies to associate
        :type smart_proxy_names: List[str]
        :param upstream_username: Basic authentication username
        :type upstream_username: str
        :param upstream_password: Basic authentication password
        :type upstream_password: str
        :param ssl_ca_cert_id: Identifier of the content credential containing the SSL CA Cert
        :type ssl_ca_cert_id: float
        :param ssl_client_cert_id: Identifier of the content credential containing the SSL Client Cert
        :type ssl_client_cert_id: float
        :param ssl_client_key_id: Identifier of the content credential containing the SSL Client Key
        :type ssl_client_key_id: float
        :param verify_ssl: If SSL should be verified for the upstream URL
        :type verify_ssl: bool
        :param use_http_proxies: If the smart proxies' assigned HTTP proxies should be used
        :type use_http_proxies: bool
        :param product_ids: IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type.
        :type product_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_alternate_content_sources_serialize(
            content_type=content_type,
            alternate_content_source_type=alternate_content_source_type,
            name=name,
            description=description,
            base_url=base_url,
            subpaths=subpaths,
            smart_proxy_ids=smart_proxy_ids,
            smart_proxy_names=smart_proxy_names,
            upstream_username=upstream_username,
            upstream_password=upstream_password,
            ssl_ca_cert_id=ssl_ca_cert_id,
            ssl_client_cert_id=ssl_client_cert_id,
            ssl_client_key_id=ssl_client_key_id,
            verify_ssl=verify_ssl,
            use_http_proxies=use_http_proxies,
            product_ids=product_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_alternate_content_sources_serialize(
        self,
        content_type,
        alternate_content_source_type,
        name,
        description,
        base_url,
        subpaths,
        smart_proxy_ids,
        smart_proxy_names,
        upstream_username,
        upstream_password,
        ssl_ca_cert_id,
        ssl_client_cert_id,
        ssl_client_key_id,
        verify_ssl,
        use_http_proxies,
        product_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "subpaths": "csv",
            "smart_proxy_ids": "csv",
            "smart_proxy_names": "csv",
            "product_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if content_type is not None:
            _form_params.append(("content_type", content_type))
        if alternate_content_source_type is not None:
            _form_params.append(
                ("alternate_content_source_type", alternate_content_source_type)
            )
        if name is not None:
            _form_params.append(("name", name))
        if description is not None:
            _form_params.append(("description", description))
        if base_url is not None:
            _form_params.append(("base_url", base_url))
        if subpaths is not None:
            _form_params.append(("subpaths", subpaths))
        if smart_proxy_ids is not None:
            _form_params.append(("smart_proxy_ids", smart_proxy_ids))
        if smart_proxy_names is not None:
            _form_params.append(("smart_proxy_names", smart_proxy_names))
        if upstream_username is not None:
            _form_params.append(("upstream_username", upstream_username))
        if upstream_password is not None:
            _form_params.append(("upstream_password", upstream_password))
        if ssl_ca_cert_id is not None:
            _form_params.append(("ssl_ca_cert_id", ssl_ca_cert_id))
        if ssl_client_cert_id is not None:
            _form_params.append(("ssl_client_cert_id", ssl_client_cert_id))
        if ssl_client_key_id is not None:
            _form_params.append(("ssl_client_key_id", ssl_client_key_id))
        if verify_ssl is not None:
            _form_params.append(("verify_ssl", verify_ssl))
        if use_http_proxies is not None:
            _form_params.append(("use_http_proxies", use_http_proxies))
        if product_ids is not None:
            _form_params.append(("product_ids", product_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/alternate_content_sources",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_alternate_content_sources_id_refresh(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Refresh an alternate content source. Refreshing, like repository syncing, is required before using an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_alternate_content_sources_id_refresh_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_alternate_content_sources_id_refresh_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Refresh an alternate content source. Refreshing, like repository syncing, is required before using an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_alternate_content_sources_id_refresh_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_alternate_content_sources_id_refresh_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Refresh an alternate content source. Refreshing, like repository syncing, is required before using an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_alternate_content_sources_id_refresh_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_alternate_content_sources_id_refresh_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/alternate_content_sources/{id}/refresh",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_alternate_content_sources_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        name: Annotated[
            Optional[StrictStr],
            Field(description="Name of the alternate content source"),
        ] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(description="Description for the alternate content source"),
        ] = None,
        base_url: Annotated[
            Optional[StrictStr],
            Field(description="Base URL for finding alternate content"),
        ] = None,
        subpaths: Annotated[
            Optional[List[StrictStr]],
            Field(description="Path suffixes for finding alternate content"),
        ] = None,
        smart_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Ids of smart proxies to associate"),
        ] = None,
        smart_proxy_names: Annotated[
            Optional[List[StrictStr]],
            Field(description="Names of smart proxies to associate"),
        ] = None,
        upstream_username: Annotated[
            Optional[StrictStr], Field(description="Basic authentication username")
        ] = None,
        upstream_password: Annotated[
            Optional[StrictStr], Field(description="Basic authentication password")
        ] = None,
        ssl_ca_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL CA Cert"
            ),
        ] = None,
        ssl_client_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Cert"
            ),
        ] = None,
        ssl_client_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Key"
            ),
        ] = None,
        verify_ssl: Annotated[
            Optional[StrictBool],
            Field(description="If SSL should be verified for the upstream URL"),
        ] = None,
        use_http_proxies: Annotated[
            Optional[StrictBool],
            Field(
                description="If the smart proxies' assigned HTTP proxies should be used"
            ),
        ] = None,
        product_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param name: Name of the alternate content source
        :type name: str
        :param description: Description for the alternate content source
        :type description: str
        :param base_url: Base URL for finding alternate content
        :type base_url: str
        :param subpaths: Path suffixes for finding alternate content
        :type subpaths: List[str]
        :param smart_proxy_ids: Ids of smart proxies to associate
        :type smart_proxy_ids: List[str]
        :param smart_proxy_names: Names of smart proxies to associate
        :type smart_proxy_names: List[str]
        :param upstream_username: Basic authentication username
        :type upstream_username: str
        :param upstream_password: Basic authentication password
        :type upstream_password: str
        :param ssl_ca_cert_id: Identifier of the content credential containing the SSL CA Cert
        :type ssl_ca_cert_id: float
        :param ssl_client_cert_id: Identifier of the content credential containing the SSL Client Cert
        :type ssl_client_cert_id: float
        :param ssl_client_key_id: Identifier of the content credential containing the SSL Client Key
        :type ssl_client_key_id: float
        :param verify_ssl: If SSL should be verified for the upstream URL
        :type verify_ssl: bool
        :param use_http_proxies: If the smart proxies' assigned HTTP proxies should be used
        :type use_http_proxies: bool
        :param product_ids: IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type.
        :type product_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_alternate_content_sources_id_serialize(
            id=id,
            name=name,
            description=description,
            base_url=base_url,
            subpaths=subpaths,
            smart_proxy_ids=smart_proxy_ids,
            smart_proxy_names=smart_proxy_names,
            upstream_username=upstream_username,
            upstream_password=upstream_password,
            ssl_ca_cert_id=ssl_ca_cert_id,
            ssl_client_cert_id=ssl_client_cert_id,
            ssl_client_key_id=ssl_client_key_id,
            verify_ssl=verify_ssl,
            use_http_proxies=use_http_proxies,
            product_ids=product_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_alternate_content_sources_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        name: Annotated[
            Optional[StrictStr],
            Field(description="Name of the alternate content source"),
        ] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(description="Description for the alternate content source"),
        ] = None,
        base_url: Annotated[
            Optional[StrictStr],
            Field(description="Base URL for finding alternate content"),
        ] = None,
        subpaths: Annotated[
            Optional[List[StrictStr]],
            Field(description="Path suffixes for finding alternate content"),
        ] = None,
        smart_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Ids of smart proxies to associate"),
        ] = None,
        smart_proxy_names: Annotated[
            Optional[List[StrictStr]],
            Field(description="Names of smart proxies to associate"),
        ] = None,
        upstream_username: Annotated[
            Optional[StrictStr], Field(description="Basic authentication username")
        ] = None,
        upstream_password: Annotated[
            Optional[StrictStr], Field(description="Basic authentication password")
        ] = None,
        ssl_ca_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL CA Cert"
            ),
        ] = None,
        ssl_client_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Cert"
            ),
        ] = None,
        ssl_client_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Key"
            ),
        ] = None,
        verify_ssl: Annotated[
            Optional[StrictBool],
            Field(description="If SSL should be verified for the upstream URL"),
        ] = None,
        use_http_proxies: Annotated[
            Optional[StrictBool],
            Field(
                description="If the smart proxies' assigned HTTP proxies should be used"
            ),
        ] = None,
        product_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param name: Name of the alternate content source
        :type name: str
        :param description: Description for the alternate content source
        :type description: str
        :param base_url: Base URL for finding alternate content
        :type base_url: str
        :param subpaths: Path suffixes for finding alternate content
        :type subpaths: List[str]
        :param smart_proxy_ids: Ids of smart proxies to associate
        :type smart_proxy_ids: List[str]
        :param smart_proxy_names: Names of smart proxies to associate
        :type smart_proxy_names: List[str]
        :param upstream_username: Basic authentication username
        :type upstream_username: str
        :param upstream_password: Basic authentication password
        :type upstream_password: str
        :param ssl_ca_cert_id: Identifier of the content credential containing the SSL CA Cert
        :type ssl_ca_cert_id: float
        :param ssl_client_cert_id: Identifier of the content credential containing the SSL Client Cert
        :type ssl_client_cert_id: float
        :param ssl_client_key_id: Identifier of the content credential containing the SSL Client Key
        :type ssl_client_key_id: float
        :param verify_ssl: If SSL should be verified for the upstream URL
        :type verify_ssl: bool
        :param use_http_proxies: If the smart proxies' assigned HTTP proxies should be used
        :type use_http_proxies: bool
        :param product_ids: IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type.
        :type product_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_alternate_content_sources_id_serialize(
            id=id,
            name=name,
            description=description,
            base_url=base_url,
            subpaths=subpaths,
            smart_proxy_ids=smart_proxy_ids,
            smart_proxy_names=smart_proxy_names,
            upstream_username=upstream_username,
            upstream_password=upstream_password,
            ssl_ca_cert_id=ssl_ca_cert_id,
            ssl_client_cert_id=ssl_client_cert_id,
            ssl_client_key_id=ssl_client_key_id,
            verify_ssl=verify_ssl,
            use_http_proxies=use_http_proxies,
            product_ids=product_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_alternate_content_sources_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Alternate content source ID"),
        ],
        name: Annotated[
            Optional[StrictStr],
            Field(description="Name of the alternate content source"),
        ] = None,
        description: Annotated[
            Optional[StrictStr],
            Field(description="Description for the alternate content source"),
        ] = None,
        base_url: Annotated[
            Optional[StrictStr],
            Field(description="Base URL for finding alternate content"),
        ] = None,
        subpaths: Annotated[
            Optional[List[StrictStr]],
            Field(description="Path suffixes for finding alternate content"),
        ] = None,
        smart_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Ids of smart proxies to associate"),
        ] = None,
        smart_proxy_names: Annotated[
            Optional[List[StrictStr]],
            Field(description="Names of smart proxies to associate"),
        ] = None,
        upstream_username: Annotated[
            Optional[StrictStr], Field(description="Basic authentication username")
        ] = None,
        upstream_password: Annotated[
            Optional[StrictStr], Field(description="Basic authentication password")
        ] = None,
        ssl_ca_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL CA Cert"
            ),
        ] = None,
        ssl_client_cert_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Cert"
            ),
        ] = None,
        ssl_client_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Identifier of the content credential containing the SSL Client Key"
            ),
        ] = None,
        verify_ssl: Annotated[
            Optional[StrictBool],
            Field(description="If SSL should be verified for the upstream URL"),
        ] = None,
        use_http_proxies: Annotated[
            Optional[StrictBool],
            Field(
                description="If the smart proxies' assigned HTTP proxies should be used"
            ),
        ] = None,
        product_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update an alternate content source.


        :param id: Alternate content source ID (required)
        :type id: float
        :param name: Name of the alternate content source
        :type name: str
        :param description: Description for the alternate content source
        :type description: str
        :param base_url: Base URL for finding alternate content
        :type base_url: str
        :param subpaths: Path suffixes for finding alternate content
        :type subpaths: List[str]
        :param smart_proxy_ids: Ids of smart proxies to associate
        :type smart_proxy_ids: List[str]
        :param smart_proxy_names: Names of smart proxies to associate
        :type smart_proxy_names: List[str]
        :param upstream_username: Basic authentication username
        :type upstream_username: str
        :param upstream_password: Basic authentication password
        :type upstream_password: str
        :param ssl_ca_cert_id: Identifier of the content credential containing the SSL CA Cert
        :type ssl_ca_cert_id: float
        :param ssl_client_cert_id: Identifier of the content credential containing the SSL Client Cert
        :type ssl_client_cert_id: float
        :param ssl_client_key_id: Identifier of the content credential containing the SSL Client Key
        :type ssl_client_key_id: float
        :param verify_ssl: If SSL should be verified for the upstream URL
        :type verify_ssl: bool
        :param use_http_proxies: If the smart proxies' assigned HTTP proxies should be used
        :type use_http_proxies: bool
        :param product_ids: IDs of products to copy repository information from into a Simplified Alternate Content Source. Products must include at least one repository of the chosen content type.
        :type product_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_alternate_content_sources_id_serialize(
            id=id,
            name=name,
            description=description,
            base_url=base_url,
            subpaths=subpaths,
            smart_proxy_ids=smart_proxy_ids,
            smart_proxy_names=smart_proxy_names,
            upstream_username=upstream_username,
            upstream_password=upstream_password,
            ssl_ca_cert_id=ssl_ca_cert_id,
            ssl_client_cert_id=ssl_client_cert_id,
            ssl_client_key_id=ssl_client_key_id,
            verify_ssl=verify_ssl,
            use_http_proxies=use_http_proxies,
            product_ids=product_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_alternate_content_sources_id_serialize(
        self,
        id,
        name,
        description,
        base_url,
        subpaths,
        smart_proxy_ids,
        smart_proxy_names,
        upstream_username,
        upstream_password,
        ssl_ca_cert_id,
        ssl_client_cert_id,
        ssl_client_key_id,
        verify_ssl,
        use_http_proxies,
        product_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "subpaths": "csv",
            "smart_proxy_ids": "csv",
            "smart_proxy_names": "csv",
            "product_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(("name", name))
        if description is not None:
            _form_params.append(("description", description))
        if base_url is not None:
            _form_params.append(("base_url", base_url))
        if subpaths is not None:
            _form_params.append(("subpaths", subpaths))
        if smart_proxy_ids is not None:
            _form_params.append(("smart_proxy_ids", smart_proxy_ids))
        if smart_proxy_names is not None:
            _form_params.append(("smart_proxy_names", smart_proxy_names))
        if upstream_username is not None:
            _form_params.append(("upstream_username", upstream_username))
        if upstream_password is not None:
            _form_params.append(("upstream_password", upstream_password))
        if ssl_ca_cert_id is not None:
            _form_params.append(("ssl_ca_cert_id", ssl_ca_cert_id))
        if ssl_client_cert_id is not None:
            _form_params.append(("ssl_client_cert_id", ssl_client_cert_id))
        if ssl_client_key_id is not None:
            _form_params.append(("ssl_client_key_id", ssl_client_key_id))
        if verify_ssl is not None:
            _form_params.append(("verify_ssl", verify_ssl))
        if use_http_proxies is not None:
            _form_params.append(("use_http_proxies", use_http_proxies))
        if product_ids is not None:
            _form_params.append(("product_ids", product_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/alternate_content_sources/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
