# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class HostsBulkActionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_hosts_bulk(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(
                description="Search string describing which hosts to perform the action on"
            ),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform the action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of host ids to exclude and not perform the action on"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete multiple hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string describing which hosts to perform the action on
        :type included_search: str
        :param included_ids: List of host ids to perform the action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not perform the action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_bulk_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_hosts_bulk_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(
                description="Search string describing which hosts to perform the action on"
            ),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform the action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of host ids to exclude and not perform the action on"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete multiple hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string describing which hosts to perform the action on
        :type included_search: str
        :param included_ids: List of host ids to perform the action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not perform the action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_bulk_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_hosts_bulk_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(
                description="Search string describing which hosts to perform the action on"
            ),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform the action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of host ids to exclude and not perform the action on"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete multiple hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string describing which hosts to perform the action on
        :type included_search: str
        :param included_ids: List of host ids to perform the action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not perform the action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_bulk_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_hosts_bulk_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/hosts/bulk",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_hosts_bulk_applicable_errata(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Fetch applicable errata for one or more hosts.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_applicable_errata_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_hosts_bulk_applicable_errata_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Fetch applicable errata for one or more hosts.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_applicable_errata_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_hosts_bulk_applicable_errata_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch applicable errata for one or more hosts.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_applicable_errata_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_hosts_bulk_applicable_errata_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/hosts/bulk/applicable_errata",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_hosts_bulk_available_incremental_updates(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        errata_ids: Annotated[List[StrictStr], Field(description="List of Errata ids")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Given a set of hosts and errata, lists the content view versions and environments that need updating.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param errata_ids: List of Errata ids (required)
        :type errata_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_available_incremental_updates_serialize(
            organization_id=organization_id,
            errata_ids=errata_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_hosts_bulk_available_incremental_updates_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        errata_ids: Annotated[List[StrictStr], Field(description="List of Errata ids")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Given a set of hosts and errata, lists the content view versions and environments that need updating.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param errata_ids: List of Errata ids (required)
        :type errata_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_available_incremental_updates_serialize(
            organization_id=organization_id,
            errata_ids=errata_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_hosts_bulk_available_incremental_updates_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        errata_ids: Annotated[List[StrictStr], Field(description="List of Errata ids")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Given a set of hosts and errata, lists the content view versions and environments that need updating.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param errata_ids: List of Errata ids (required)
        :type errata_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_available_incremental_updates_serialize(
            organization_id=organization_id,
            errata_ids=errata_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_hosts_bulk_available_incremental_updates_serialize(
        self,
        organization_id,
        errata_ids,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "errata_ids": "csv",
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if errata_ids is not None:
            _form_params.append(("errata_ids", errata_ids))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/hosts/bulk/available_incremental_updates",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_hosts_bulk_installable_errata(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Fetch installable errata for one or more hosts.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_installable_errata_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_hosts_bulk_installable_errata_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Fetch installable errata for one or more hosts.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_installable_errata_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_hosts_bulk_installable_errata_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch installable errata for one or more hosts.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_installable_errata_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_hosts_bulk_installable_errata_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/hosts/bulk/installable_errata",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_hosts_bulk_module_streams(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Fetch available module streams for hosts.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_module_streams_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_hosts_bulk_module_streams_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Fetch available module streams for hosts.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_module_streams_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_hosts_bulk_module_streams_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch available module streams for hosts.


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_module_streams_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_hosts_bulk_module_streams_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/hosts/bulk/module_streams",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_hosts_bulk_traces(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Fetch traces for one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_traces_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_hosts_bulk_traces_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Fetch traces for one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_traces_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_hosts_bulk_traces_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch traces for one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_bulk_traces_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_hosts_bulk_traces_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/hosts/bulk/traces",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_add_host_collections(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        host_collection_ids: Annotated[
            List[StrictStr], Field(description="List of host collection ids")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Add one or more host collections to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param host_collection_ids: List of host collection ids (required)
        :type host_collection_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_add_host_collections_serialize(
            organization_id=organization_id,
            host_collection_ids=host_collection_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_add_host_collections_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        host_collection_ids: Annotated[
            List[StrictStr], Field(description="List of host collection ids")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Add one or more host collections to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param host_collection_ids: List of host collection ids (required)
        :type host_collection_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_add_host_collections_serialize(
            organization_id=organization_id,
            host_collection_ids=host_collection_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_add_host_collections_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        host_collection_ids: Annotated[
            List[StrictStr], Field(description="List of host collection ids")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add one or more host collections to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param host_collection_ids: List of host collection ids (required)
        :type host_collection_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_add_host_collections_serialize(
            organization_id=organization_id,
            host_collection_ids=host_collection_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_add_host_collections_serialize(
        self,
        organization_id,
        host_collection_ids,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "host_collection_ids": "csv",
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if host_collection_ids is not None:
            _form_params.append(("host_collection_ids", host_collection_ids))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/add_host_collections",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_add_subscriptions(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        subscriptions: Annotated[
            List[StrictStr], Field(description="Array of subscriptions to add")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Add subscriptions to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param subscriptions: Array of subscriptions to add (required)
        :type subscriptions: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_add_subscriptions_serialize(
            organization_id=organization_id,
            subscriptions=subscriptions,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_add_subscriptions_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        subscriptions: Annotated[
            List[StrictStr], Field(description="Array of subscriptions to add")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Add subscriptions to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param subscriptions: Array of subscriptions to add (required)
        :type subscriptions: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_add_subscriptions_serialize(
            organization_id=organization_id,
            subscriptions=subscriptions,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_add_subscriptions_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        subscriptions: Annotated[
            List[StrictStr], Field(description="Array of subscriptions to add")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add subscriptions to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param subscriptions: Array of subscriptions to add (required)
        :type subscriptions: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_add_subscriptions_serialize(
            organization_id=organization_id,
            subscriptions=subscriptions,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_add_subscriptions_serialize(
        self,
        organization_id,
        subscriptions,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "subscriptions": "csv",
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subscriptions is not None:
            _form_params.append(("subscriptions", subscriptions))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/add_subscriptions",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_auto_attach(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Trigger an auto-attach of subscriptions on one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_auto_attach_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_auto_attach_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Trigger an auto-attach of subscriptions on one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_auto_attach_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_auto_attach_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Trigger an auto-attach of subscriptions on one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_auto_attach_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_auto_attach_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/auto_attach",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_change_content_source(
        self,
        host_ids: Annotated[
            List[StrictStr],
            Field(
                description="The ids of the hosts to alter. Hosts not managed by Katello are ignored"
            ),
        ],
        environment_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the lifecycle environment"),
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the content view"),
        ],
        content_source_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the content source"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update the content source for specified hosts and generate the reconfiguration script


        :param host_ids: The ids of the hosts to alter. Hosts not managed by Katello are ignored (required)
        :type host_ids: List[str]
        :param environment_id: The id of the lifecycle environment (required)
        :type environment_id: float
        :param content_view_id: The id of the content view (required)
        :type content_view_id: float
        :param content_source_id: The id of the content source (required)
        :type content_source_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_change_content_source_serialize(
            host_ids=host_ids,
            environment_id=environment_id,
            content_view_id=content_view_id,
            content_source_id=content_source_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_change_content_source_with_http_info(
        self,
        host_ids: Annotated[
            List[StrictStr],
            Field(
                description="The ids of the hosts to alter. Hosts not managed by Katello are ignored"
            ),
        ],
        environment_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the lifecycle environment"),
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the content view"),
        ],
        content_source_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the content source"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update the content source for specified hosts and generate the reconfiguration script


        :param host_ids: The ids of the hosts to alter. Hosts not managed by Katello are ignored (required)
        :type host_ids: List[str]
        :param environment_id: The id of the lifecycle environment (required)
        :type environment_id: float
        :param content_view_id: The id of the content view (required)
        :type content_view_id: float
        :param content_source_id: The id of the content source (required)
        :type content_source_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_change_content_source_serialize(
            host_ids=host_ids,
            environment_id=environment_id,
            content_view_id=content_view_id,
            content_source_id=content_source_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_change_content_source_without_preload_content(
        self,
        host_ids: Annotated[
            List[StrictStr],
            Field(
                description="The ids of the hosts to alter. Hosts not managed by Katello are ignored"
            ),
        ],
        environment_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the lifecycle environment"),
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the content view"),
        ],
        content_source_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the content source"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update the content source for specified hosts and generate the reconfiguration script


        :param host_ids: The ids of the hosts to alter. Hosts not managed by Katello are ignored (required)
        :type host_ids: List[str]
        :param environment_id: The id of the lifecycle environment (required)
        :type environment_id: float
        :param content_view_id: The id of the content view (required)
        :type content_view_id: float
        :param content_source_id: The id of the content source (required)
        :type content_source_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_change_content_source_serialize(
            host_ids=host_ids,
            environment_id=environment_id,
            content_view_id=content_view_id,
            content_source_id=content_source_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_change_content_source_serialize(
        self,
        host_ids,
        environment_id,
        content_view_id,
        content_source_id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "host_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_ids is not None:
            _form_params.append(("host_ids", host_ids))
        if environment_id is not None:
            _form_params.append(("environment_id", environment_id))
        if content_view_id is not None:
            _form_params.append(("content_view_id", content_view_id))
        if content_source_id is not None:
            _form_params.append(("content_source_id", content_source_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/change_content_source",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_content_overrides(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        content_overrides: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of Content override parameters"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Set content overrides to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param content_overrides: Array of Content override parameters
        :type content_overrides: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_content_overrides_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            content_overrides=content_overrides,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_content_overrides_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        content_overrides: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of Content override parameters"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Set content overrides to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param content_overrides: Array of Content override parameters
        :type content_overrides: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_content_overrides_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            content_overrides=content_overrides,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_content_overrides_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        content_overrides: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of Content override parameters"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Set content overrides to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param content_overrides: Array of Content override parameters
        :type content_overrides: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_content_overrides_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            content_overrides=content_overrides,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_content_overrides_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        content_overrides,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
            "content_overrides": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        if content_overrides is not None:
            _form_params.append(("content_overrides", content_overrides))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/content_overrides",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_destroy(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Destroy one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_destroy_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_destroy_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Destroy one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_destroy_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_destroy_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Destroy one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_destroy_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_destroy_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/destroy",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_environment_content_view(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        environment_id: Optional[Union[StrictFloat, StrictInt]] = None,
        content_view_id: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Assign the environment and content view to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param environment_id:
        :type environment_id: float
        :param content_view_id:
        :type content_view_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_environment_content_view_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            environment_id=environment_id,
            content_view_id=content_view_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_environment_content_view_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        environment_id: Optional[Union[StrictFloat, StrictInt]] = None,
        content_view_id: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Assign the environment and content view to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param environment_id:
        :type environment_id: float
        :param content_view_id:
        :type content_view_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_environment_content_view_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            environment_id=environment_id,
            content_view_id=content_view_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_environment_content_view_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        environment_id: Optional[Union[StrictFloat, StrictInt]] = None,
        content_view_id: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Assign the environment and content view to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param environment_id:
        :type environment_id: float
        :param content_view_id:
        :type content_view_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_environment_content_view_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            environment_id=environment_id,
            content_view_id=content_view_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_environment_content_view_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        environment_id,
        content_view_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        if environment_id is not None:
            _form_params.append(("environment_id", environment_id))
        if content_view_id is not None:
            _form_params.append(("content_view_id", content_view_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/environment_content_view",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_release_version(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        release_version: Annotated[
            Optional[StrictStr], Field(description="content release version")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Assign the release version to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param release_version: content release version
        :type release_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_release_version_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            release_version=release_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_release_version_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        release_version: Annotated[
            Optional[StrictStr], Field(description="content release version")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Assign the release version to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param release_version: content release version
        :type release_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_release_version_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            release_version=release_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_release_version_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        release_version: Annotated[
            Optional[StrictStr], Field(description="content release version")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Assign the release version to one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param release_version: content release version
        :type release_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_release_version_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            release_version=release_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_release_version_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        release_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        if release_version is not None:
            _form_params.append(("release_version", release_version))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/release_version",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_remove_host_collections(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        host_collection_ids: Annotated[
            List[StrictStr], Field(description="List of host collection ids")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Remove one or more host collections from one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param host_collection_ids: List of host collection ids (required)
        :type host_collection_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_remove_host_collections_serialize(
            organization_id=organization_id,
            host_collection_ids=host_collection_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_remove_host_collections_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        host_collection_ids: Annotated[
            List[StrictStr], Field(description="List of host collection ids")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Remove one or more host collections from one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param host_collection_ids: List of host collection ids (required)
        :type host_collection_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_remove_host_collections_serialize(
            organization_id=organization_id,
            host_collection_ids=host_collection_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_remove_host_collections_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        host_collection_ids: Annotated[
            List[StrictStr], Field(description="List of host collection ids")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove one or more host collections from one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param host_collection_ids: List of host collection ids (required)
        :type host_collection_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_remove_host_collections_serialize(
            organization_id=organization_id,
            host_collection_ids=host_collection_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_remove_host_collections_serialize(
        self,
        organization_id,
        host_collection_ids,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "host_collection_ids": "csv",
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if host_collection_ids is not None:
            _form_params.append(("host_collection_ids", host_collection_ids))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/remove_host_collections",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_remove_subscriptions(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        subscriptions: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of subscriptions to remove"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Remove subscriptions from one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param subscriptions: Array of subscriptions to remove
        :type subscriptions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_remove_subscriptions_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            subscriptions=subscriptions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_remove_subscriptions_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        subscriptions: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of subscriptions to remove"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Remove subscriptions from one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param subscriptions: Array of subscriptions to remove
        :type subscriptions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_remove_subscriptions_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            subscriptions=subscriptions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_remove_subscriptions_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        subscriptions: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of subscriptions to remove"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove subscriptions from one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param subscriptions: Array of subscriptions to remove
        :type subscriptions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_remove_subscriptions_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            subscriptions=subscriptions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_remove_subscriptions_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        subscriptions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
            "subscriptions": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        if subscriptions is not None:
            _form_params.append(("subscriptions", subscriptions))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/remove_subscriptions",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_resolve_traces(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        trace_ids: Annotated[List[StrictStr], Field(description="Array of Trace IDs")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Resolve traces for one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param trace_ids: Array of Trace IDs (required)
        :type trace_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_resolve_traces_serialize(
            organization_id=organization_id,
            trace_ids=trace_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_resolve_traces_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        trace_ids: Annotated[List[StrictStr], Field(description="Array of Trace IDs")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Resolve traces for one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param trace_ids: Array of Trace IDs (required)
        :type trace_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_resolve_traces_serialize(
            organization_id=organization_id,
            trace_ids=trace_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_resolve_traces_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        trace_ids: Annotated[List[StrictStr], Field(description="Array of Trace IDs")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Resolve traces for one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param trace_ids: Array of Trace IDs (required)
        :type trace_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_resolve_traces_serialize(
            organization_id=organization_id,
            trace_ids=trace_ids,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_resolve_traces_serialize(
        self,
        organization_id,
        trace_ids,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "trace_ids": "csv",
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if trace_ids is not None:
            _form_params.append(("trace_ids", trace_ids))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/resolve_traces",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_bulk_system_purpose(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        service_level: Annotated[
            Optional[StrictStr], Field(description="Service level of host")
        ] = None,
        purpose_role: Annotated[
            Optional[StrictStr], Field(description="Role of host")
        ] = None,
        purpose_usage: Annotated[
            Optional[StrictStr], Field(description="Usage of host")
        ] = None,
        purpose_addons: Annotated[
            Optional[List[StrictStr]], Field(description="Sets the system add-ons")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Assign system purpose attributes on one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param service_level: Service level of host
        :type service_level: str
        :param purpose_role: Role of host
        :type purpose_role: str
        :param purpose_usage: Usage of host
        :type purpose_usage: str
        :param purpose_addons: Sets the system add-ons
        :type purpose_addons: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_system_purpose_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            service_level=service_level,
            purpose_role=purpose_role,
            purpose_usage=purpose_usage,
            purpose_addons=purpose_addons,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_bulk_system_purpose_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        service_level: Annotated[
            Optional[StrictStr], Field(description="Service level of host")
        ] = None,
        purpose_role: Annotated[
            Optional[StrictStr], Field(description="Role of host")
        ] = None,
        purpose_usage: Annotated[
            Optional[StrictStr], Field(description="Usage of host")
        ] = None,
        purpose_addons: Annotated[
            Optional[List[StrictStr]], Field(description="Sets the system add-ons")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Assign system purpose attributes on one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param service_level: Service level of host
        :type service_level: str
        :param purpose_role: Role of host
        :type purpose_role: str
        :param purpose_usage: Usage of host
        :type purpose_usage: str
        :param purpose_addons: Sets the system add-ons
        :type purpose_addons: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_system_purpose_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            service_level=service_level,
            purpose_role=purpose_role,
            purpose_usage=purpose_usage,
            purpose_addons=purpose_addons,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_bulk_system_purpose_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the organization")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for hosts to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of host ids to exclude and not run an action on"),
        ] = None,
        service_level: Annotated[
            Optional[StrictStr], Field(description="Service level of host")
        ] = None,
        purpose_role: Annotated[
            Optional[StrictStr], Field(description="Role of host")
        ] = None,
        purpose_usage: Annotated[
            Optional[StrictStr], Field(description="Usage of host")
        ] = None,
        purpose_addons: Annotated[
            Optional[List[StrictStr]], Field(description="Sets the system add-ons")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Assign system purpose attributes on one or more hosts


        :param organization_id: ID of the organization (required)
        :type organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param included_search: Search string for hosts to perform an action on
        :type included_search: str
        :param included_ids: List of host ids to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of host ids to exclude and not run an action on
        :type excluded_ids: List[str]
        :param service_level: Service level of host
        :type service_level: str
        :param purpose_role: Role of host
        :type purpose_role: str
        :param purpose_usage: Usage of host
        :type purpose_usage: str
        :param purpose_addons: Sets the system add-ons
        :type purpose_addons: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_bulk_system_purpose_serialize(
            organization_id=organization_id,
            location_id=location_id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            service_level=service_level,
            purpose_role=purpose_role,
            purpose_usage=purpose_usage,
            purpose_addons=purpose_addons,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_bulk_system_purpose_serialize(
        self,
        organization_id,
        location_id,
        included_search,
        included_ids,
        excluded_ids,
        service_level,
        purpose_role,
        purpose_usage,
        purpose_addons,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
            "purpose_addons": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        if service_level is not None:
            _form_params.append(("service_level", service_level))
        if purpose_role is not None:
            _form_params.append(("purpose_role", purpose_role))
        if purpose_usage is not None:
            _form_params.append(("purpose_usage", purpose_usage))
        if purpose_addons is not None:
            _form_params.append(("purpose_addons", purpose_addons))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/bulk/system_purpose",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
