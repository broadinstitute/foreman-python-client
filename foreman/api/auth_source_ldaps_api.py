# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr, field_validator

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class AuthSourceLdapsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_auth_source_ldaps_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete an LDAP authentication source


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_auth_source_ldaps_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_auth_source_ldaps_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete an LDAP authentication source


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_auth_source_ldaps_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_auth_source_ldaps_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an LDAP authentication source


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_auth_source_ldaps_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_auth_source_ldaps_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/auth_source_ldaps/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_auth_source_ldaps(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all LDAP authentication sources


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_auth_source_ldaps_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_auth_source_ldaps_with_http_info(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all LDAP authentication sources


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_auth_source_ldaps_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_auth_source_ldaps_without_preload_content(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all LDAP authentication sources


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_auth_source_ldaps_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_auth_source_ldaps_serialize(
        self,
        location_id,
        organization_id,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/auth_source_ldaps",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_auth_source_ldaps_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show an LDAP authentication source


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_auth_source_ldaps_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_auth_source_ldaps_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show an LDAP authentication source


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_auth_source_ldaps_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_auth_source_ldaps_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show an LDAP authentication source


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_auth_source_ldaps_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_auth_source_ldaps_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/auth_source_ldaps/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_locations_location_id_auth_source_ldaps(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List LDAP authentication sources per location


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_auth_source_ldaps_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_locations_location_id_auth_source_ldaps_with_http_info(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List LDAP authentication sources per location


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_auth_source_ldaps_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_locations_location_id_auth_source_ldaps_without_preload_content(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List LDAP authentication sources per location


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_auth_source_ldaps_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_locations_location_id_auth_source_ldaps_serialize(
        self,
        location_id,
        organization_id,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_id is not None:
            _path_params["location_id"] = location_id
        # process the query parameters
        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/locations/{location_id}/auth_source_ldaps",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations_organization_id_auth_source_ldaps(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List LDAP authentication sources per organization


        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_auth_source_ldaps_serialize(
            organization_id=organization_id,
            location_id=location_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_organization_id_auth_source_ldaps_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List LDAP authentication sources per organization


        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_auth_source_ldaps_serialize(
            organization_id=organization_id,
            location_id=location_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_organization_id_auth_source_ldaps_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List LDAP authentication sources per organization


        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_auth_source_ldaps_serialize(
            organization_id=organization_id,
            location_id=location_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_organization_id_auth_source_ldaps_serialize(
        self,
        organization_id,
        location_id,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations/{organization_id}/auth_source_ldaps",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_auth_source_ldaps(
        self,
        auth_source_ldap_name: StrictStr,
        auth_source_ldap_host: Annotated[
            StrictStr, Field(description="The hostname of the LDAP server")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        auth_source_ldap_port: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="defaults to 389"),
        ] = None,
        auth_source_ldap_account: Optional[StrictStr] = None,
        auth_source_ldap_base_dn: Optional[StrictStr] = None,
        auth_source_ldap_account_password: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_login: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_firstname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_lastname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_mail: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_photo: Optional[StrictStr] = None,
        auth_source_ldap_onthefly_register: Optional[StrictBool] = None,
        auth_source_ldap_usergroup_sync: Annotated[
            Optional[StrictBool],
            Field(description="sync external user groups on login"),
        ] = None,
        auth_source_ldap_tls: Optional[StrictBool] = None,
        auth_source_ldap_groups_base: Annotated[
            Optional[StrictStr], Field(description="groups base DN")
        ] = None,
        auth_source_ldap_use_netgroups: Annotated[
            Optional[StrictBool],
            Field(
                description="use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa"
            ),
        ] = None,
        auth_source_ldap_server_type: Annotated[
            Optional[StrictStr], Field(description="type of the LDAP server")
        ] = None,
        auth_source_ldap_ldap_filter: Annotated[
            Optional[StrictStr], Field(description="LDAP filter")
        ] = None,
        auth_source_ldap_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        auth_source_ldap_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create an LDAP authentication source


        :param auth_source_ldap_name: (required)
        :type auth_source_ldap_name: str
        :param auth_source_ldap_host: The hostname of the LDAP server (required)
        :type auth_source_ldap_host: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param auth_source_ldap_port: defaults to 389
        :type auth_source_ldap_port: float
        :param auth_source_ldap_account:
        :type auth_source_ldap_account: str
        :param auth_source_ldap_base_dn:
        :type auth_source_ldap_base_dn: str
        :param auth_source_ldap_account_password: required if onthefly_register is true
        :type auth_source_ldap_account_password: str
        :param auth_source_ldap_attr_login: required if onthefly_register is true
        :type auth_source_ldap_attr_login: str
        :param auth_source_ldap_attr_firstname: required if onthefly_register is true
        :type auth_source_ldap_attr_firstname: str
        :param auth_source_ldap_attr_lastname: required if onthefly_register is true
        :type auth_source_ldap_attr_lastname: str
        :param auth_source_ldap_attr_mail: required if onthefly_register is true
        :type auth_source_ldap_attr_mail: str
        :param auth_source_ldap_attr_photo:
        :type auth_source_ldap_attr_photo: str
        :param auth_source_ldap_onthefly_register:
        :type auth_source_ldap_onthefly_register: bool
        :param auth_source_ldap_usergroup_sync: sync external user groups on login
        :type auth_source_ldap_usergroup_sync: bool
        :param auth_source_ldap_tls:
        :type auth_source_ldap_tls: bool
        :param auth_source_ldap_groups_base: groups base DN
        :type auth_source_ldap_groups_base: str
        :param auth_source_ldap_use_netgroups: use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa
        :type auth_source_ldap_use_netgroups: bool
        :param auth_source_ldap_server_type: type of the LDAP server
        :type auth_source_ldap_server_type: str
        :param auth_source_ldap_ldap_filter: LDAP filter
        :type auth_source_ldap_ldap_filter: str
        :param auth_source_ldap_location_ids: REPLACE locations with given ids
        :type auth_source_ldap_location_ids: List[str]
        :param auth_source_ldap_organization_ids: REPLACE organizations with given ids.
        :type auth_source_ldap_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_auth_source_ldaps_serialize(
            auth_source_ldap_name=auth_source_ldap_name,
            auth_source_ldap_host=auth_source_ldap_host,
            location_id=location_id,
            organization_id=organization_id,
            auth_source_ldap_port=auth_source_ldap_port,
            auth_source_ldap_account=auth_source_ldap_account,
            auth_source_ldap_base_dn=auth_source_ldap_base_dn,
            auth_source_ldap_account_password=auth_source_ldap_account_password,
            auth_source_ldap_attr_login=auth_source_ldap_attr_login,
            auth_source_ldap_attr_firstname=auth_source_ldap_attr_firstname,
            auth_source_ldap_attr_lastname=auth_source_ldap_attr_lastname,
            auth_source_ldap_attr_mail=auth_source_ldap_attr_mail,
            auth_source_ldap_attr_photo=auth_source_ldap_attr_photo,
            auth_source_ldap_onthefly_register=auth_source_ldap_onthefly_register,
            auth_source_ldap_usergroup_sync=auth_source_ldap_usergroup_sync,
            auth_source_ldap_tls=auth_source_ldap_tls,
            auth_source_ldap_groups_base=auth_source_ldap_groups_base,
            auth_source_ldap_use_netgroups=auth_source_ldap_use_netgroups,
            auth_source_ldap_server_type=auth_source_ldap_server_type,
            auth_source_ldap_ldap_filter=auth_source_ldap_ldap_filter,
            auth_source_ldap_location_ids=auth_source_ldap_location_ids,
            auth_source_ldap_organization_ids=auth_source_ldap_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_auth_source_ldaps_with_http_info(
        self,
        auth_source_ldap_name: StrictStr,
        auth_source_ldap_host: Annotated[
            StrictStr, Field(description="The hostname of the LDAP server")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        auth_source_ldap_port: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="defaults to 389"),
        ] = None,
        auth_source_ldap_account: Optional[StrictStr] = None,
        auth_source_ldap_base_dn: Optional[StrictStr] = None,
        auth_source_ldap_account_password: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_login: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_firstname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_lastname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_mail: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_photo: Optional[StrictStr] = None,
        auth_source_ldap_onthefly_register: Optional[StrictBool] = None,
        auth_source_ldap_usergroup_sync: Annotated[
            Optional[StrictBool],
            Field(description="sync external user groups on login"),
        ] = None,
        auth_source_ldap_tls: Optional[StrictBool] = None,
        auth_source_ldap_groups_base: Annotated[
            Optional[StrictStr], Field(description="groups base DN")
        ] = None,
        auth_source_ldap_use_netgroups: Annotated[
            Optional[StrictBool],
            Field(
                description="use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa"
            ),
        ] = None,
        auth_source_ldap_server_type: Annotated[
            Optional[StrictStr], Field(description="type of the LDAP server")
        ] = None,
        auth_source_ldap_ldap_filter: Annotated[
            Optional[StrictStr], Field(description="LDAP filter")
        ] = None,
        auth_source_ldap_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        auth_source_ldap_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create an LDAP authentication source


        :param auth_source_ldap_name: (required)
        :type auth_source_ldap_name: str
        :param auth_source_ldap_host: The hostname of the LDAP server (required)
        :type auth_source_ldap_host: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param auth_source_ldap_port: defaults to 389
        :type auth_source_ldap_port: float
        :param auth_source_ldap_account:
        :type auth_source_ldap_account: str
        :param auth_source_ldap_base_dn:
        :type auth_source_ldap_base_dn: str
        :param auth_source_ldap_account_password: required if onthefly_register is true
        :type auth_source_ldap_account_password: str
        :param auth_source_ldap_attr_login: required if onthefly_register is true
        :type auth_source_ldap_attr_login: str
        :param auth_source_ldap_attr_firstname: required if onthefly_register is true
        :type auth_source_ldap_attr_firstname: str
        :param auth_source_ldap_attr_lastname: required if onthefly_register is true
        :type auth_source_ldap_attr_lastname: str
        :param auth_source_ldap_attr_mail: required if onthefly_register is true
        :type auth_source_ldap_attr_mail: str
        :param auth_source_ldap_attr_photo:
        :type auth_source_ldap_attr_photo: str
        :param auth_source_ldap_onthefly_register:
        :type auth_source_ldap_onthefly_register: bool
        :param auth_source_ldap_usergroup_sync: sync external user groups on login
        :type auth_source_ldap_usergroup_sync: bool
        :param auth_source_ldap_tls:
        :type auth_source_ldap_tls: bool
        :param auth_source_ldap_groups_base: groups base DN
        :type auth_source_ldap_groups_base: str
        :param auth_source_ldap_use_netgroups: use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa
        :type auth_source_ldap_use_netgroups: bool
        :param auth_source_ldap_server_type: type of the LDAP server
        :type auth_source_ldap_server_type: str
        :param auth_source_ldap_ldap_filter: LDAP filter
        :type auth_source_ldap_ldap_filter: str
        :param auth_source_ldap_location_ids: REPLACE locations with given ids
        :type auth_source_ldap_location_ids: List[str]
        :param auth_source_ldap_organization_ids: REPLACE organizations with given ids.
        :type auth_source_ldap_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_auth_source_ldaps_serialize(
            auth_source_ldap_name=auth_source_ldap_name,
            auth_source_ldap_host=auth_source_ldap_host,
            location_id=location_id,
            organization_id=organization_id,
            auth_source_ldap_port=auth_source_ldap_port,
            auth_source_ldap_account=auth_source_ldap_account,
            auth_source_ldap_base_dn=auth_source_ldap_base_dn,
            auth_source_ldap_account_password=auth_source_ldap_account_password,
            auth_source_ldap_attr_login=auth_source_ldap_attr_login,
            auth_source_ldap_attr_firstname=auth_source_ldap_attr_firstname,
            auth_source_ldap_attr_lastname=auth_source_ldap_attr_lastname,
            auth_source_ldap_attr_mail=auth_source_ldap_attr_mail,
            auth_source_ldap_attr_photo=auth_source_ldap_attr_photo,
            auth_source_ldap_onthefly_register=auth_source_ldap_onthefly_register,
            auth_source_ldap_usergroup_sync=auth_source_ldap_usergroup_sync,
            auth_source_ldap_tls=auth_source_ldap_tls,
            auth_source_ldap_groups_base=auth_source_ldap_groups_base,
            auth_source_ldap_use_netgroups=auth_source_ldap_use_netgroups,
            auth_source_ldap_server_type=auth_source_ldap_server_type,
            auth_source_ldap_ldap_filter=auth_source_ldap_ldap_filter,
            auth_source_ldap_location_ids=auth_source_ldap_location_ids,
            auth_source_ldap_organization_ids=auth_source_ldap_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_auth_source_ldaps_without_preload_content(
        self,
        auth_source_ldap_name: StrictStr,
        auth_source_ldap_host: Annotated[
            StrictStr, Field(description="The hostname of the LDAP server")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        auth_source_ldap_port: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="defaults to 389"),
        ] = None,
        auth_source_ldap_account: Optional[StrictStr] = None,
        auth_source_ldap_base_dn: Optional[StrictStr] = None,
        auth_source_ldap_account_password: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_login: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_firstname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_lastname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_mail: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_photo: Optional[StrictStr] = None,
        auth_source_ldap_onthefly_register: Optional[StrictBool] = None,
        auth_source_ldap_usergroup_sync: Annotated[
            Optional[StrictBool],
            Field(description="sync external user groups on login"),
        ] = None,
        auth_source_ldap_tls: Optional[StrictBool] = None,
        auth_source_ldap_groups_base: Annotated[
            Optional[StrictStr], Field(description="groups base DN")
        ] = None,
        auth_source_ldap_use_netgroups: Annotated[
            Optional[StrictBool],
            Field(
                description="use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa"
            ),
        ] = None,
        auth_source_ldap_server_type: Annotated[
            Optional[StrictStr], Field(description="type of the LDAP server")
        ] = None,
        auth_source_ldap_ldap_filter: Annotated[
            Optional[StrictStr], Field(description="LDAP filter")
        ] = None,
        auth_source_ldap_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        auth_source_ldap_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an LDAP authentication source


        :param auth_source_ldap_name: (required)
        :type auth_source_ldap_name: str
        :param auth_source_ldap_host: The hostname of the LDAP server (required)
        :type auth_source_ldap_host: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param auth_source_ldap_port: defaults to 389
        :type auth_source_ldap_port: float
        :param auth_source_ldap_account:
        :type auth_source_ldap_account: str
        :param auth_source_ldap_base_dn:
        :type auth_source_ldap_base_dn: str
        :param auth_source_ldap_account_password: required if onthefly_register is true
        :type auth_source_ldap_account_password: str
        :param auth_source_ldap_attr_login: required if onthefly_register is true
        :type auth_source_ldap_attr_login: str
        :param auth_source_ldap_attr_firstname: required if onthefly_register is true
        :type auth_source_ldap_attr_firstname: str
        :param auth_source_ldap_attr_lastname: required if onthefly_register is true
        :type auth_source_ldap_attr_lastname: str
        :param auth_source_ldap_attr_mail: required if onthefly_register is true
        :type auth_source_ldap_attr_mail: str
        :param auth_source_ldap_attr_photo:
        :type auth_source_ldap_attr_photo: str
        :param auth_source_ldap_onthefly_register:
        :type auth_source_ldap_onthefly_register: bool
        :param auth_source_ldap_usergroup_sync: sync external user groups on login
        :type auth_source_ldap_usergroup_sync: bool
        :param auth_source_ldap_tls:
        :type auth_source_ldap_tls: bool
        :param auth_source_ldap_groups_base: groups base DN
        :type auth_source_ldap_groups_base: str
        :param auth_source_ldap_use_netgroups: use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa
        :type auth_source_ldap_use_netgroups: bool
        :param auth_source_ldap_server_type: type of the LDAP server
        :type auth_source_ldap_server_type: str
        :param auth_source_ldap_ldap_filter: LDAP filter
        :type auth_source_ldap_ldap_filter: str
        :param auth_source_ldap_location_ids: REPLACE locations with given ids
        :type auth_source_ldap_location_ids: List[str]
        :param auth_source_ldap_organization_ids: REPLACE organizations with given ids.
        :type auth_source_ldap_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_auth_source_ldaps_serialize(
            auth_source_ldap_name=auth_source_ldap_name,
            auth_source_ldap_host=auth_source_ldap_host,
            location_id=location_id,
            organization_id=organization_id,
            auth_source_ldap_port=auth_source_ldap_port,
            auth_source_ldap_account=auth_source_ldap_account,
            auth_source_ldap_base_dn=auth_source_ldap_base_dn,
            auth_source_ldap_account_password=auth_source_ldap_account_password,
            auth_source_ldap_attr_login=auth_source_ldap_attr_login,
            auth_source_ldap_attr_firstname=auth_source_ldap_attr_firstname,
            auth_source_ldap_attr_lastname=auth_source_ldap_attr_lastname,
            auth_source_ldap_attr_mail=auth_source_ldap_attr_mail,
            auth_source_ldap_attr_photo=auth_source_ldap_attr_photo,
            auth_source_ldap_onthefly_register=auth_source_ldap_onthefly_register,
            auth_source_ldap_usergroup_sync=auth_source_ldap_usergroup_sync,
            auth_source_ldap_tls=auth_source_ldap_tls,
            auth_source_ldap_groups_base=auth_source_ldap_groups_base,
            auth_source_ldap_use_netgroups=auth_source_ldap_use_netgroups,
            auth_source_ldap_server_type=auth_source_ldap_server_type,
            auth_source_ldap_ldap_filter=auth_source_ldap_ldap_filter,
            auth_source_ldap_location_ids=auth_source_ldap_location_ids,
            auth_source_ldap_organization_ids=auth_source_ldap_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_auth_source_ldaps_serialize(
        self,
        auth_source_ldap_name,
        auth_source_ldap_host,
        location_id,
        organization_id,
        auth_source_ldap_port,
        auth_source_ldap_account,
        auth_source_ldap_base_dn,
        auth_source_ldap_account_password,
        auth_source_ldap_attr_login,
        auth_source_ldap_attr_firstname,
        auth_source_ldap_attr_lastname,
        auth_source_ldap_attr_mail,
        auth_source_ldap_attr_photo,
        auth_source_ldap_onthefly_register,
        auth_source_ldap_usergroup_sync,
        auth_source_ldap_tls,
        auth_source_ldap_groups_base,
        auth_source_ldap_use_netgroups,
        auth_source_ldap_server_type,
        auth_source_ldap_ldap_filter,
        auth_source_ldap_location_ids,
        auth_source_ldap_organization_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "auth_source_ldap[location_ids]": "csv",
            "auth_source_ldap[organization_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if auth_source_ldap_name is not None:
            _form_params.append(("auth_source_ldap[name]", auth_source_ldap_name))
        if auth_source_ldap_host is not None:
            _form_params.append(("auth_source_ldap[host]", auth_source_ldap_host))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if auth_source_ldap_port is not None:
            _form_params.append(("auth_source_ldap[port]", auth_source_ldap_port))
        if auth_source_ldap_account is not None:
            _form_params.append(("auth_source_ldap[account]", auth_source_ldap_account))
        if auth_source_ldap_base_dn is not None:
            _form_params.append(("auth_source_ldap[base_dn]", auth_source_ldap_base_dn))
        if auth_source_ldap_account_password is not None:
            _form_params.append(
                (
                    "auth_source_ldap[account_password]",
                    auth_source_ldap_account_password,
                )
            )
        if auth_source_ldap_attr_login is not None:
            _form_params.append(
                ("auth_source_ldap[attr_login]", auth_source_ldap_attr_login)
            )
        if auth_source_ldap_attr_firstname is not None:
            _form_params.append(
                ("auth_source_ldap[attr_firstname]", auth_source_ldap_attr_firstname)
            )
        if auth_source_ldap_attr_lastname is not None:
            _form_params.append(
                ("auth_source_ldap[attr_lastname]", auth_source_ldap_attr_lastname)
            )
        if auth_source_ldap_attr_mail is not None:
            _form_params.append(
                ("auth_source_ldap[attr_mail]", auth_source_ldap_attr_mail)
            )
        if auth_source_ldap_attr_photo is not None:
            _form_params.append(
                ("auth_source_ldap[attr_photo]", auth_source_ldap_attr_photo)
            )
        if auth_source_ldap_onthefly_register is not None:
            _form_params.append(
                (
                    "auth_source_ldap[onthefly_register]",
                    auth_source_ldap_onthefly_register,
                )
            )
        if auth_source_ldap_usergroup_sync is not None:
            _form_params.append(
                ("auth_source_ldap[usergroup_sync]", auth_source_ldap_usergroup_sync)
            )
        if auth_source_ldap_tls is not None:
            _form_params.append(("auth_source_ldap[tls]", auth_source_ldap_tls))
        if auth_source_ldap_groups_base is not None:
            _form_params.append(
                ("auth_source_ldap[groups_base]", auth_source_ldap_groups_base)
            )
        if auth_source_ldap_use_netgroups is not None:
            _form_params.append(
                ("auth_source_ldap[use_netgroups]", auth_source_ldap_use_netgroups)
            )
        if auth_source_ldap_server_type is not None:
            _form_params.append(
                ("auth_source_ldap[server_type]", auth_source_ldap_server_type)
            )
        if auth_source_ldap_ldap_filter is not None:
            _form_params.append(
                ("auth_source_ldap[ldap_filter]", auth_source_ldap_ldap_filter)
            )
        if auth_source_ldap_location_ids is not None:
            _form_params.append(
                ("auth_source_ldap[location_ids]", auth_source_ldap_location_ids)
            )
        if auth_source_ldap_organization_ids is not None:
            _form_params.append(
                (
                    "auth_source_ldap[organization_ids]",
                    auth_source_ldap_organization_ids,
                )
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/auth_source_ldaps",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_auth_source_ldaps_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        auth_source_ldap_name: Optional[StrictStr] = None,
        auth_source_ldap_host: Annotated[
            Optional[StrictStr], Field(description="The hostname of the LDAP server")
        ] = None,
        auth_source_ldap_port: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="defaults to 389"),
        ] = None,
        auth_source_ldap_account: Optional[StrictStr] = None,
        auth_source_ldap_base_dn: Optional[StrictStr] = None,
        auth_source_ldap_account_password: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_login: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_firstname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_lastname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_mail: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_photo: Optional[StrictStr] = None,
        auth_source_ldap_onthefly_register: Optional[StrictBool] = None,
        auth_source_ldap_usergroup_sync: Annotated[
            Optional[StrictBool],
            Field(description="sync external user groups on login"),
        ] = None,
        auth_source_ldap_tls: Optional[StrictBool] = None,
        auth_source_ldap_groups_base: Annotated[
            Optional[StrictStr], Field(description="groups base DN")
        ] = None,
        auth_source_ldap_use_netgroups: Annotated[
            Optional[StrictBool],
            Field(
                description="use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa"
            ),
        ] = None,
        auth_source_ldap_server_type: Annotated[
            Optional[StrictStr], Field(description="type of the LDAP server")
        ] = None,
        auth_source_ldap_ldap_filter: Annotated[
            Optional[StrictStr], Field(description="LDAP filter")
        ] = None,
        auth_source_ldap_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        auth_source_ldap_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update an LDAP authentication source


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param auth_source_ldap_name:
        :type auth_source_ldap_name: str
        :param auth_source_ldap_host: The hostname of the LDAP server
        :type auth_source_ldap_host: str
        :param auth_source_ldap_port: defaults to 389
        :type auth_source_ldap_port: float
        :param auth_source_ldap_account:
        :type auth_source_ldap_account: str
        :param auth_source_ldap_base_dn:
        :type auth_source_ldap_base_dn: str
        :param auth_source_ldap_account_password: required if onthefly_register is true
        :type auth_source_ldap_account_password: str
        :param auth_source_ldap_attr_login: required if onthefly_register is true
        :type auth_source_ldap_attr_login: str
        :param auth_source_ldap_attr_firstname: required if onthefly_register is true
        :type auth_source_ldap_attr_firstname: str
        :param auth_source_ldap_attr_lastname: required if onthefly_register is true
        :type auth_source_ldap_attr_lastname: str
        :param auth_source_ldap_attr_mail: required if onthefly_register is true
        :type auth_source_ldap_attr_mail: str
        :param auth_source_ldap_attr_photo:
        :type auth_source_ldap_attr_photo: str
        :param auth_source_ldap_onthefly_register:
        :type auth_source_ldap_onthefly_register: bool
        :param auth_source_ldap_usergroup_sync: sync external user groups on login
        :type auth_source_ldap_usergroup_sync: bool
        :param auth_source_ldap_tls:
        :type auth_source_ldap_tls: bool
        :param auth_source_ldap_groups_base: groups base DN
        :type auth_source_ldap_groups_base: str
        :param auth_source_ldap_use_netgroups: use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa
        :type auth_source_ldap_use_netgroups: bool
        :param auth_source_ldap_server_type: type of the LDAP server
        :type auth_source_ldap_server_type: str
        :param auth_source_ldap_ldap_filter: LDAP filter
        :type auth_source_ldap_ldap_filter: str
        :param auth_source_ldap_location_ids: REPLACE locations with given ids
        :type auth_source_ldap_location_ids: List[str]
        :param auth_source_ldap_organization_ids: REPLACE organizations with given ids.
        :type auth_source_ldap_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_auth_source_ldaps_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            auth_source_ldap_name=auth_source_ldap_name,
            auth_source_ldap_host=auth_source_ldap_host,
            auth_source_ldap_port=auth_source_ldap_port,
            auth_source_ldap_account=auth_source_ldap_account,
            auth_source_ldap_base_dn=auth_source_ldap_base_dn,
            auth_source_ldap_account_password=auth_source_ldap_account_password,
            auth_source_ldap_attr_login=auth_source_ldap_attr_login,
            auth_source_ldap_attr_firstname=auth_source_ldap_attr_firstname,
            auth_source_ldap_attr_lastname=auth_source_ldap_attr_lastname,
            auth_source_ldap_attr_mail=auth_source_ldap_attr_mail,
            auth_source_ldap_attr_photo=auth_source_ldap_attr_photo,
            auth_source_ldap_onthefly_register=auth_source_ldap_onthefly_register,
            auth_source_ldap_usergroup_sync=auth_source_ldap_usergroup_sync,
            auth_source_ldap_tls=auth_source_ldap_tls,
            auth_source_ldap_groups_base=auth_source_ldap_groups_base,
            auth_source_ldap_use_netgroups=auth_source_ldap_use_netgroups,
            auth_source_ldap_server_type=auth_source_ldap_server_type,
            auth_source_ldap_ldap_filter=auth_source_ldap_ldap_filter,
            auth_source_ldap_location_ids=auth_source_ldap_location_ids,
            auth_source_ldap_organization_ids=auth_source_ldap_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_auth_source_ldaps_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        auth_source_ldap_name: Optional[StrictStr] = None,
        auth_source_ldap_host: Annotated[
            Optional[StrictStr], Field(description="The hostname of the LDAP server")
        ] = None,
        auth_source_ldap_port: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="defaults to 389"),
        ] = None,
        auth_source_ldap_account: Optional[StrictStr] = None,
        auth_source_ldap_base_dn: Optional[StrictStr] = None,
        auth_source_ldap_account_password: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_login: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_firstname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_lastname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_mail: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_photo: Optional[StrictStr] = None,
        auth_source_ldap_onthefly_register: Optional[StrictBool] = None,
        auth_source_ldap_usergroup_sync: Annotated[
            Optional[StrictBool],
            Field(description="sync external user groups on login"),
        ] = None,
        auth_source_ldap_tls: Optional[StrictBool] = None,
        auth_source_ldap_groups_base: Annotated[
            Optional[StrictStr], Field(description="groups base DN")
        ] = None,
        auth_source_ldap_use_netgroups: Annotated[
            Optional[StrictBool],
            Field(
                description="use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa"
            ),
        ] = None,
        auth_source_ldap_server_type: Annotated[
            Optional[StrictStr], Field(description="type of the LDAP server")
        ] = None,
        auth_source_ldap_ldap_filter: Annotated[
            Optional[StrictStr], Field(description="LDAP filter")
        ] = None,
        auth_source_ldap_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        auth_source_ldap_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update an LDAP authentication source


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param auth_source_ldap_name:
        :type auth_source_ldap_name: str
        :param auth_source_ldap_host: The hostname of the LDAP server
        :type auth_source_ldap_host: str
        :param auth_source_ldap_port: defaults to 389
        :type auth_source_ldap_port: float
        :param auth_source_ldap_account:
        :type auth_source_ldap_account: str
        :param auth_source_ldap_base_dn:
        :type auth_source_ldap_base_dn: str
        :param auth_source_ldap_account_password: required if onthefly_register is true
        :type auth_source_ldap_account_password: str
        :param auth_source_ldap_attr_login: required if onthefly_register is true
        :type auth_source_ldap_attr_login: str
        :param auth_source_ldap_attr_firstname: required if onthefly_register is true
        :type auth_source_ldap_attr_firstname: str
        :param auth_source_ldap_attr_lastname: required if onthefly_register is true
        :type auth_source_ldap_attr_lastname: str
        :param auth_source_ldap_attr_mail: required if onthefly_register is true
        :type auth_source_ldap_attr_mail: str
        :param auth_source_ldap_attr_photo:
        :type auth_source_ldap_attr_photo: str
        :param auth_source_ldap_onthefly_register:
        :type auth_source_ldap_onthefly_register: bool
        :param auth_source_ldap_usergroup_sync: sync external user groups on login
        :type auth_source_ldap_usergroup_sync: bool
        :param auth_source_ldap_tls:
        :type auth_source_ldap_tls: bool
        :param auth_source_ldap_groups_base: groups base DN
        :type auth_source_ldap_groups_base: str
        :param auth_source_ldap_use_netgroups: use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa
        :type auth_source_ldap_use_netgroups: bool
        :param auth_source_ldap_server_type: type of the LDAP server
        :type auth_source_ldap_server_type: str
        :param auth_source_ldap_ldap_filter: LDAP filter
        :type auth_source_ldap_ldap_filter: str
        :param auth_source_ldap_location_ids: REPLACE locations with given ids
        :type auth_source_ldap_location_ids: List[str]
        :param auth_source_ldap_organization_ids: REPLACE organizations with given ids.
        :type auth_source_ldap_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_auth_source_ldaps_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            auth_source_ldap_name=auth_source_ldap_name,
            auth_source_ldap_host=auth_source_ldap_host,
            auth_source_ldap_port=auth_source_ldap_port,
            auth_source_ldap_account=auth_source_ldap_account,
            auth_source_ldap_base_dn=auth_source_ldap_base_dn,
            auth_source_ldap_account_password=auth_source_ldap_account_password,
            auth_source_ldap_attr_login=auth_source_ldap_attr_login,
            auth_source_ldap_attr_firstname=auth_source_ldap_attr_firstname,
            auth_source_ldap_attr_lastname=auth_source_ldap_attr_lastname,
            auth_source_ldap_attr_mail=auth_source_ldap_attr_mail,
            auth_source_ldap_attr_photo=auth_source_ldap_attr_photo,
            auth_source_ldap_onthefly_register=auth_source_ldap_onthefly_register,
            auth_source_ldap_usergroup_sync=auth_source_ldap_usergroup_sync,
            auth_source_ldap_tls=auth_source_ldap_tls,
            auth_source_ldap_groups_base=auth_source_ldap_groups_base,
            auth_source_ldap_use_netgroups=auth_source_ldap_use_netgroups,
            auth_source_ldap_server_type=auth_source_ldap_server_type,
            auth_source_ldap_ldap_filter=auth_source_ldap_ldap_filter,
            auth_source_ldap_location_ids=auth_source_ldap_location_ids,
            auth_source_ldap_organization_ids=auth_source_ldap_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_auth_source_ldaps_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        auth_source_ldap_name: Optional[StrictStr] = None,
        auth_source_ldap_host: Annotated[
            Optional[StrictStr], Field(description="The hostname of the LDAP server")
        ] = None,
        auth_source_ldap_port: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="defaults to 389"),
        ] = None,
        auth_source_ldap_account: Optional[StrictStr] = None,
        auth_source_ldap_base_dn: Optional[StrictStr] = None,
        auth_source_ldap_account_password: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_login: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_firstname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_lastname: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_mail: Annotated[
            Optional[StrictStr],
            Field(description="required if onthefly_register is true"),
        ] = None,
        auth_source_ldap_attr_photo: Optional[StrictStr] = None,
        auth_source_ldap_onthefly_register: Optional[StrictBool] = None,
        auth_source_ldap_usergroup_sync: Annotated[
            Optional[StrictBool],
            Field(description="sync external user groups on login"),
        ] = None,
        auth_source_ldap_tls: Optional[StrictBool] = None,
        auth_source_ldap_groups_base: Annotated[
            Optional[StrictStr], Field(description="groups base DN")
        ] = None,
        auth_source_ldap_use_netgroups: Annotated[
            Optional[StrictBool],
            Field(
                description="use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa"
            ),
        ] = None,
        auth_source_ldap_server_type: Annotated[
            Optional[StrictStr], Field(description="type of the LDAP server")
        ] = None,
        auth_source_ldap_ldap_filter: Annotated[
            Optional[StrictStr], Field(description="LDAP filter")
        ] = None,
        auth_source_ldap_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        auth_source_ldap_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update an LDAP authentication source


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param auth_source_ldap_name:
        :type auth_source_ldap_name: str
        :param auth_source_ldap_host: The hostname of the LDAP server
        :type auth_source_ldap_host: str
        :param auth_source_ldap_port: defaults to 389
        :type auth_source_ldap_port: float
        :param auth_source_ldap_account:
        :type auth_source_ldap_account: str
        :param auth_source_ldap_base_dn:
        :type auth_source_ldap_base_dn: str
        :param auth_source_ldap_account_password: required if onthefly_register is true
        :type auth_source_ldap_account_password: str
        :param auth_source_ldap_attr_login: required if onthefly_register is true
        :type auth_source_ldap_attr_login: str
        :param auth_source_ldap_attr_firstname: required if onthefly_register is true
        :type auth_source_ldap_attr_firstname: str
        :param auth_source_ldap_attr_lastname: required if onthefly_register is true
        :type auth_source_ldap_attr_lastname: str
        :param auth_source_ldap_attr_mail: required if onthefly_register is true
        :type auth_source_ldap_attr_mail: str
        :param auth_source_ldap_attr_photo:
        :type auth_source_ldap_attr_photo: str
        :param auth_source_ldap_onthefly_register:
        :type auth_source_ldap_onthefly_register: bool
        :param auth_source_ldap_usergroup_sync: sync external user groups on login
        :type auth_source_ldap_usergroup_sync: bool
        :param auth_source_ldap_tls:
        :type auth_source_ldap_tls: bool
        :param auth_source_ldap_groups_base: groups base DN
        :type auth_source_ldap_groups_base: str
        :param auth_source_ldap_use_netgroups: use NIS netgroups instead of posix groups, applicable only when server_type is posix or free_ipa
        :type auth_source_ldap_use_netgroups: bool
        :param auth_source_ldap_server_type: type of the LDAP server
        :type auth_source_ldap_server_type: str
        :param auth_source_ldap_ldap_filter: LDAP filter
        :type auth_source_ldap_ldap_filter: str
        :param auth_source_ldap_location_ids: REPLACE locations with given ids
        :type auth_source_ldap_location_ids: List[str]
        :param auth_source_ldap_organization_ids: REPLACE organizations with given ids.
        :type auth_source_ldap_organization_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_auth_source_ldaps_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            auth_source_ldap_name=auth_source_ldap_name,
            auth_source_ldap_host=auth_source_ldap_host,
            auth_source_ldap_port=auth_source_ldap_port,
            auth_source_ldap_account=auth_source_ldap_account,
            auth_source_ldap_base_dn=auth_source_ldap_base_dn,
            auth_source_ldap_account_password=auth_source_ldap_account_password,
            auth_source_ldap_attr_login=auth_source_ldap_attr_login,
            auth_source_ldap_attr_firstname=auth_source_ldap_attr_firstname,
            auth_source_ldap_attr_lastname=auth_source_ldap_attr_lastname,
            auth_source_ldap_attr_mail=auth_source_ldap_attr_mail,
            auth_source_ldap_attr_photo=auth_source_ldap_attr_photo,
            auth_source_ldap_onthefly_register=auth_source_ldap_onthefly_register,
            auth_source_ldap_usergroup_sync=auth_source_ldap_usergroup_sync,
            auth_source_ldap_tls=auth_source_ldap_tls,
            auth_source_ldap_groups_base=auth_source_ldap_groups_base,
            auth_source_ldap_use_netgroups=auth_source_ldap_use_netgroups,
            auth_source_ldap_server_type=auth_source_ldap_server_type,
            auth_source_ldap_ldap_filter=auth_source_ldap_ldap_filter,
            auth_source_ldap_location_ids=auth_source_ldap_location_ids,
            auth_source_ldap_organization_ids=auth_source_ldap_organization_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_auth_source_ldaps_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        auth_source_ldap_name,
        auth_source_ldap_host,
        auth_source_ldap_port,
        auth_source_ldap_account,
        auth_source_ldap_base_dn,
        auth_source_ldap_account_password,
        auth_source_ldap_attr_login,
        auth_source_ldap_attr_firstname,
        auth_source_ldap_attr_lastname,
        auth_source_ldap_attr_mail,
        auth_source_ldap_attr_photo,
        auth_source_ldap_onthefly_register,
        auth_source_ldap_usergroup_sync,
        auth_source_ldap_tls,
        auth_source_ldap_groups_base,
        auth_source_ldap_use_netgroups,
        auth_source_ldap_server_type,
        auth_source_ldap_ldap_filter,
        auth_source_ldap_location_ids,
        auth_source_ldap_organization_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "auth_source_ldap[location_ids]": "csv",
            "auth_source_ldap[organization_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if auth_source_ldap_name is not None:
            _form_params.append(("auth_source_ldap[name]", auth_source_ldap_name))
        if auth_source_ldap_host is not None:
            _form_params.append(("auth_source_ldap[host]", auth_source_ldap_host))
        if auth_source_ldap_port is not None:
            _form_params.append(("auth_source_ldap[port]", auth_source_ldap_port))
        if auth_source_ldap_account is not None:
            _form_params.append(("auth_source_ldap[account]", auth_source_ldap_account))
        if auth_source_ldap_base_dn is not None:
            _form_params.append(("auth_source_ldap[base_dn]", auth_source_ldap_base_dn))
        if auth_source_ldap_account_password is not None:
            _form_params.append(
                (
                    "auth_source_ldap[account_password]",
                    auth_source_ldap_account_password,
                )
            )
        if auth_source_ldap_attr_login is not None:
            _form_params.append(
                ("auth_source_ldap[attr_login]", auth_source_ldap_attr_login)
            )
        if auth_source_ldap_attr_firstname is not None:
            _form_params.append(
                ("auth_source_ldap[attr_firstname]", auth_source_ldap_attr_firstname)
            )
        if auth_source_ldap_attr_lastname is not None:
            _form_params.append(
                ("auth_source_ldap[attr_lastname]", auth_source_ldap_attr_lastname)
            )
        if auth_source_ldap_attr_mail is not None:
            _form_params.append(
                ("auth_source_ldap[attr_mail]", auth_source_ldap_attr_mail)
            )
        if auth_source_ldap_attr_photo is not None:
            _form_params.append(
                ("auth_source_ldap[attr_photo]", auth_source_ldap_attr_photo)
            )
        if auth_source_ldap_onthefly_register is not None:
            _form_params.append(
                (
                    "auth_source_ldap[onthefly_register]",
                    auth_source_ldap_onthefly_register,
                )
            )
        if auth_source_ldap_usergroup_sync is not None:
            _form_params.append(
                ("auth_source_ldap[usergroup_sync]", auth_source_ldap_usergroup_sync)
            )
        if auth_source_ldap_tls is not None:
            _form_params.append(("auth_source_ldap[tls]", auth_source_ldap_tls))
        if auth_source_ldap_groups_base is not None:
            _form_params.append(
                ("auth_source_ldap[groups_base]", auth_source_ldap_groups_base)
            )
        if auth_source_ldap_use_netgroups is not None:
            _form_params.append(
                ("auth_source_ldap[use_netgroups]", auth_source_ldap_use_netgroups)
            )
        if auth_source_ldap_server_type is not None:
            _form_params.append(
                ("auth_source_ldap[server_type]", auth_source_ldap_server_type)
            )
        if auth_source_ldap_ldap_filter is not None:
            _form_params.append(
                ("auth_source_ldap[ldap_filter]", auth_source_ldap_ldap_filter)
            )
        if auth_source_ldap_location_ids is not None:
            _form_params.append(
                ("auth_source_ldap[location_ids]", auth_source_ldap_location_ids)
            )
        if auth_source_ldap_organization_ids is not None:
            _form_params.append(
                (
                    "auth_source_ldap[organization_ids]",
                    auth_source_ldap_organization_ids,
                )
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/auth_source_ldaps/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_auth_source_ldaps_id_test(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Test LDAP connection


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_auth_source_ldaps_id_test_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_auth_source_ldaps_id_test_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Test LDAP connection


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_auth_source_ldaps_id_test_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_auth_source_ldaps_id_test_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Test LDAP connection


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_auth_source_ldaps_id_test_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_auth_source_ldaps_id_test_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/auth_source_ldaps/{id}/test",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
