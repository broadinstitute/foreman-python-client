# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr, field_validator

from typing import Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class RepositorySetsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def get_products_product_id_repository_sets(
        self,
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="Repository set name to search on")
        ] = None,
        enabled: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that have been enabled. Defaults to false"
            ),
        ] = None,
        with_active_subscription: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that are associated with an active subscriptions"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        with_custom: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied."
            ),
        ] = None,
        activation_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="activation key identifier"),
        ] = None,
        host_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Id of the host")
        ] = None,
        content_access_mode_all: Annotated[
            Optional[StrictBool],
            Field(
                description="Get all content available, not just that provided by subscriptions."
            ),
        ] = None,
        content_access_mode_env: Annotated[
            Optional[StrictBool],
            Field(
                description="Limit content to just that available in the host's or activation key's content view version and lifecycle environment."
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(description="Limit content to enabled / disabled / overridden"),
        ] = None,
        repository_type: Annotated[
            Optional[StrictStr], Field(description="Limit content to Red Hat / custom")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List repository sets for a product.


        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param name: Repository set name to search on
        :type name: str
        :param enabled: If true, only return repository sets that have been enabled. Defaults to false
        :type enabled: bool
        :param with_active_subscription: If true, only return repository sets that are associated with an active subscriptions
        :type with_active_subscription: bool
        :param organization_id: organization identifier
        :type organization_id: float
        :param with_custom: If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied.
        :type with_custom: bool
        :param activation_key_id: activation key identifier
        :type activation_key_id: float
        :param host_id: Id of the host
        :type host_id: float
        :param content_access_mode_all: Get all content available, not just that provided by subscriptions.
        :type content_access_mode_all: bool
        :param content_access_mode_env: Limit content to just that available in the host's or activation key's content view version and lifecycle environment.
        :type content_access_mode_env: bool
        :param status: Limit content to enabled / disabled / overridden
        :type status: str
        :param repository_type: Limit content to Red Hat / custom
        :type repository_type: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_products_product_id_repository_sets_serialize(
            product_id=product_id,
            name=name,
            enabled=enabled,
            with_active_subscription=with_active_subscription,
            organization_id=organization_id,
            with_custom=with_custom,
            activation_key_id=activation_key_id,
            host_id=host_id,
            content_access_mode_all=content_access_mode_all,
            content_access_mode_env=content_access_mode_env,
            status=status,
            repository_type=repository_type,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_products_product_id_repository_sets_with_http_info(
        self,
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="Repository set name to search on")
        ] = None,
        enabled: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that have been enabled. Defaults to false"
            ),
        ] = None,
        with_active_subscription: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that are associated with an active subscriptions"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        with_custom: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied."
            ),
        ] = None,
        activation_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="activation key identifier"),
        ] = None,
        host_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Id of the host")
        ] = None,
        content_access_mode_all: Annotated[
            Optional[StrictBool],
            Field(
                description="Get all content available, not just that provided by subscriptions."
            ),
        ] = None,
        content_access_mode_env: Annotated[
            Optional[StrictBool],
            Field(
                description="Limit content to just that available in the host's or activation key's content view version and lifecycle environment."
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(description="Limit content to enabled / disabled / overridden"),
        ] = None,
        repository_type: Annotated[
            Optional[StrictStr], Field(description="Limit content to Red Hat / custom")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List repository sets for a product.


        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param name: Repository set name to search on
        :type name: str
        :param enabled: If true, only return repository sets that have been enabled. Defaults to false
        :type enabled: bool
        :param with_active_subscription: If true, only return repository sets that are associated with an active subscriptions
        :type with_active_subscription: bool
        :param organization_id: organization identifier
        :type organization_id: float
        :param with_custom: If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied.
        :type with_custom: bool
        :param activation_key_id: activation key identifier
        :type activation_key_id: float
        :param host_id: Id of the host
        :type host_id: float
        :param content_access_mode_all: Get all content available, not just that provided by subscriptions.
        :type content_access_mode_all: bool
        :param content_access_mode_env: Limit content to just that available in the host's or activation key's content view version and lifecycle environment.
        :type content_access_mode_env: bool
        :param status: Limit content to enabled / disabled / overridden
        :type status: str
        :param repository_type: Limit content to Red Hat / custom
        :type repository_type: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_products_product_id_repository_sets_serialize(
            product_id=product_id,
            name=name,
            enabled=enabled,
            with_active_subscription=with_active_subscription,
            organization_id=organization_id,
            with_custom=with_custom,
            activation_key_id=activation_key_id,
            host_id=host_id,
            content_access_mode_all=content_access_mode_all,
            content_access_mode_env=content_access_mode_env,
            status=status,
            repository_type=repository_type,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_products_product_id_repository_sets_without_preload_content(
        self,
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="Repository set name to search on")
        ] = None,
        enabled: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that have been enabled. Defaults to false"
            ),
        ] = None,
        with_active_subscription: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that are associated with an active subscriptions"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        with_custom: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied."
            ),
        ] = None,
        activation_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="activation key identifier"),
        ] = None,
        host_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Id of the host")
        ] = None,
        content_access_mode_all: Annotated[
            Optional[StrictBool],
            Field(
                description="Get all content available, not just that provided by subscriptions."
            ),
        ] = None,
        content_access_mode_env: Annotated[
            Optional[StrictBool],
            Field(
                description="Limit content to just that available in the host's or activation key's content view version and lifecycle environment."
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(description="Limit content to enabled / disabled / overridden"),
        ] = None,
        repository_type: Annotated[
            Optional[StrictStr], Field(description="Limit content to Red Hat / custom")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List repository sets for a product.


        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param name: Repository set name to search on
        :type name: str
        :param enabled: If true, only return repository sets that have been enabled. Defaults to false
        :type enabled: bool
        :param with_active_subscription: If true, only return repository sets that are associated with an active subscriptions
        :type with_active_subscription: bool
        :param organization_id: organization identifier
        :type organization_id: float
        :param with_custom: If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied.
        :type with_custom: bool
        :param activation_key_id: activation key identifier
        :type activation_key_id: float
        :param host_id: Id of the host
        :type host_id: float
        :param content_access_mode_all: Get all content available, not just that provided by subscriptions.
        :type content_access_mode_all: bool
        :param content_access_mode_env: Limit content to just that available in the host's or activation key's content view version and lifecycle environment.
        :type content_access_mode_env: bool
        :param status: Limit content to enabled / disabled / overridden
        :type status: str
        :param repository_type: Limit content to Red Hat / custom
        :type repository_type: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_products_product_id_repository_sets_serialize(
            product_id=product_id,
            name=name,
            enabled=enabled,
            with_active_subscription=with_active_subscription,
            organization_id=organization_id,
            with_custom=with_custom,
            activation_key_id=activation_key_id,
            host_id=host_id,
            content_access_mode_all=content_access_mode_all,
            content_access_mode_env=content_access_mode_env,
            status=status,
            repository_type=repository_type,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_products_product_id_repository_sets_serialize(
        self,
        product_id,
        name,
        enabled,
        with_active_subscription,
        organization_id,
        with_custom,
        activation_key_id,
        host_id,
        content_access_mode_all,
        content_access_mode_env,
        status,
        repository_type,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if product_id is not None:
            _path_params["product_id"] = product_id
        # process the query parameters
        if name is not None:
            _query_params.append(("name", name))

        if enabled is not None:
            _query_params.append(("enabled", enabled))

        if with_active_subscription is not None:
            _query_params.append(("with_active_subscription", with_active_subscription))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if with_custom is not None:
            _query_params.append(("with_custom", with_custom))

        if activation_key_id is not None:
            _query_params.append(("activation_key_id", activation_key_id))

        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if content_access_mode_all is not None:
            _query_params.append(("content_access_mode_all", content_access_mode_all))

        if content_access_mode_env is not None:
            _query_params.append(("content_access_mode_env", content_access_mode_env))

        if status is not None:
            _query_params.append(("status", status))

        if repository_type is not None:
            _query_params.append(("repository_type", repository_type))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/products/{product_id}/repository_sets",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_products_product_id_repository_sets_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get info about a repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_products_product_id_repository_sets_id_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_products_product_id_repository_sets_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get info about a repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_products_product_id_repository_sets_id_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_products_product_id_repository_sets_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get info about a repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_products_product_id_repository_sets_id_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_products_product_id_repository_sets_id_serialize(
        self,
        id,
        product_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if product_id is not None:
            _path_params["product_id"] = product_id
        # process the query parameters
        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/products/{product_id}/repository_sets/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_products_product_id_repository_sets_id_available_repositories(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get list of available repositories for the repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_products_product_id_repository_sets_id_available_repositories_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_products_product_id_repository_sets_id_available_repositories_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get list of available repositories for the repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_products_product_id_repository_sets_id_available_repositories_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_products_product_id_repository_sets_id_available_repositories_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get list of available repositories for the repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_products_product_id_repository_sets_id_available_repositories_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_products_product_id_repository_sets_id_available_repositories_serialize(
        self,
        id,
        product_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if product_id is not None:
            _path_params["product_id"] = product_id
        # process the query parameters
        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/products/{product_id}/repository_sets/{id}/available_repositories",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_repository_sets(
        self,
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="Repository set name to search on")
        ] = None,
        enabled: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that have been enabled. Defaults to false"
            ),
        ] = None,
        with_active_subscription: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that are associated with an active subscriptions"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        with_custom: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied."
            ),
        ] = None,
        activation_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="activation key identifier"),
        ] = None,
        host_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Id of the host")
        ] = None,
        content_access_mode_all: Annotated[
            Optional[StrictBool],
            Field(
                description="Get all content available, not just that provided by subscriptions."
            ),
        ] = None,
        content_access_mode_env: Annotated[
            Optional[StrictBool],
            Field(
                description="Limit content to just that available in the host's or activation key's content view version and lifecycle environment."
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(description="Limit content to enabled / disabled / overridden"),
        ] = None,
        repository_type: Annotated[
            Optional[StrictStr], Field(description="Limit content to Red Hat / custom")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List repository sets.


        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param name: Repository set name to search on
        :type name: str
        :param enabled: If true, only return repository sets that have been enabled. Defaults to false
        :type enabled: bool
        :param with_active_subscription: If true, only return repository sets that are associated with an active subscriptions
        :type with_active_subscription: bool
        :param organization_id: organization identifier
        :type organization_id: float
        :param with_custom: If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied.
        :type with_custom: bool
        :param activation_key_id: activation key identifier
        :type activation_key_id: float
        :param host_id: Id of the host
        :type host_id: float
        :param content_access_mode_all: Get all content available, not just that provided by subscriptions.
        :type content_access_mode_all: bool
        :param content_access_mode_env: Limit content to just that available in the host's or activation key's content view version and lifecycle environment.
        :type content_access_mode_env: bool
        :param status: Limit content to enabled / disabled / overridden
        :type status: str
        :param repository_type: Limit content to Red Hat / custom
        :type repository_type: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repository_sets_serialize(
            product_id=product_id,
            name=name,
            enabled=enabled,
            with_active_subscription=with_active_subscription,
            organization_id=organization_id,
            with_custom=with_custom,
            activation_key_id=activation_key_id,
            host_id=host_id,
            content_access_mode_all=content_access_mode_all,
            content_access_mode_env=content_access_mode_env,
            status=status,
            repository_type=repository_type,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_repository_sets_with_http_info(
        self,
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="Repository set name to search on")
        ] = None,
        enabled: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that have been enabled. Defaults to false"
            ),
        ] = None,
        with_active_subscription: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that are associated with an active subscriptions"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        with_custom: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied."
            ),
        ] = None,
        activation_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="activation key identifier"),
        ] = None,
        host_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Id of the host")
        ] = None,
        content_access_mode_all: Annotated[
            Optional[StrictBool],
            Field(
                description="Get all content available, not just that provided by subscriptions."
            ),
        ] = None,
        content_access_mode_env: Annotated[
            Optional[StrictBool],
            Field(
                description="Limit content to just that available in the host's or activation key's content view version and lifecycle environment."
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(description="Limit content to enabled / disabled / overridden"),
        ] = None,
        repository_type: Annotated[
            Optional[StrictStr], Field(description="Limit content to Red Hat / custom")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List repository sets.


        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param name: Repository set name to search on
        :type name: str
        :param enabled: If true, only return repository sets that have been enabled. Defaults to false
        :type enabled: bool
        :param with_active_subscription: If true, only return repository sets that are associated with an active subscriptions
        :type with_active_subscription: bool
        :param organization_id: organization identifier
        :type organization_id: float
        :param with_custom: If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied.
        :type with_custom: bool
        :param activation_key_id: activation key identifier
        :type activation_key_id: float
        :param host_id: Id of the host
        :type host_id: float
        :param content_access_mode_all: Get all content available, not just that provided by subscriptions.
        :type content_access_mode_all: bool
        :param content_access_mode_env: Limit content to just that available in the host's or activation key's content view version and lifecycle environment.
        :type content_access_mode_env: bool
        :param status: Limit content to enabled / disabled / overridden
        :type status: str
        :param repository_type: Limit content to Red Hat / custom
        :type repository_type: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repository_sets_serialize(
            product_id=product_id,
            name=name,
            enabled=enabled,
            with_active_subscription=with_active_subscription,
            organization_id=organization_id,
            with_custom=with_custom,
            activation_key_id=activation_key_id,
            host_id=host_id,
            content_access_mode_all=content_access_mode_all,
            content_access_mode_env=content_access_mode_env,
            status=status,
            repository_type=repository_type,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_repository_sets_without_preload_content(
        self,
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="Repository set name to search on")
        ] = None,
        enabled: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that have been enabled. Defaults to false"
            ),
        ] = None,
        with_active_subscription: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, only return repository sets that are associated with an active subscriptions"
            ),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        with_custom: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied."
            ),
        ] = None,
        activation_key_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="activation key identifier"),
        ] = None,
        host_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Id of the host")
        ] = None,
        content_access_mode_all: Annotated[
            Optional[StrictBool],
            Field(
                description="Get all content available, not just that provided by subscriptions."
            ),
        ] = None,
        content_access_mode_env: Annotated[
            Optional[StrictBool],
            Field(
                description="Limit content to just that available in the host's or activation key's content view version and lifecycle environment."
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(description="Limit content to enabled / disabled / overridden"),
        ] = None,
        repository_type: Annotated[
            Optional[StrictStr], Field(description="Limit content to Red Hat / custom")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List repository sets.


        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param name: Repository set name to search on
        :type name: str
        :param enabled: If true, only return repository sets that have been enabled. Defaults to false
        :type enabled: bool
        :param with_active_subscription: If true, only return repository sets that are associated with an active subscriptions
        :type with_active_subscription: bool
        :param organization_id: organization identifier
        :type organization_id: float
        :param with_custom: If true, return custom repository sets along with redhat repos. Will be ignored if repository_type is supplied.
        :type with_custom: bool
        :param activation_key_id: activation key identifier
        :type activation_key_id: float
        :param host_id: Id of the host
        :type host_id: float
        :param content_access_mode_all: Get all content available, not just that provided by subscriptions.
        :type content_access_mode_all: bool
        :param content_access_mode_env: Limit content to just that available in the host's or activation key's content view version and lifecycle environment.
        :type content_access_mode_env: bool
        :param status: Limit content to enabled / disabled / overridden
        :type status: str
        :param repository_type: Limit content to Red Hat / custom
        :type repository_type: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repository_sets_serialize(
            product_id=product_id,
            name=name,
            enabled=enabled,
            with_active_subscription=with_active_subscription,
            organization_id=organization_id,
            with_custom=with_custom,
            activation_key_id=activation_key_id,
            host_id=host_id,
            content_access_mode_all=content_access_mode_all,
            content_access_mode_env=content_access_mode_env,
            status=status,
            repository_type=repository_type,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_repository_sets_serialize(
        self,
        product_id,
        name,
        enabled,
        with_active_subscription,
        organization_id,
        with_custom,
        activation_key_id,
        host_id,
        content_access_mode_all,
        content_access_mode_env,
        status,
        repository_type,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            _query_params.append(("product_id", product_id))

        if name is not None:
            _query_params.append(("name", name))

        if enabled is not None:
            _query_params.append(("enabled", enabled))

        if with_active_subscription is not None:
            _query_params.append(("with_active_subscription", with_active_subscription))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if with_custom is not None:
            _query_params.append(("with_custom", with_custom))

        if activation_key_id is not None:
            _query_params.append(("activation_key_id", activation_key_id))

        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if content_access_mode_all is not None:
            _query_params.append(("content_access_mode_all", content_access_mode_all))

        if content_access_mode_env is not None:
            _query_params.append(("content_access_mode_env", content_access_mode_env))

        if status is not None:
            _query_params.append(("status", status))

        if repository_type is not None:
            _query_params.append(("repository_type", repository_type))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/repository_sets",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_repository_sets_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get info about a repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repository_sets_id_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_repository_sets_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get info about a repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repository_sets_id_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_repository_sets_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get info about a repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repository_sets_id_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_repository_sets_id_serialize(
        self,
        id,
        product_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if product_id is not None:
            _query_params.append(("product_id", product_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/repository_sets/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_repository_sets_id_available_repositories(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get list of available repositories for the repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repository_sets_id_available_repositories_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_repository_sets_id_available_repositories_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get list of available repositories for the repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repository_sets_id_available_repositories_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_repository_sets_id_available_repositories_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of the repository set")
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of a product to list repository sets from"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get list of available repositories for the repository set


        :param id: ID of the repository set (required)
        :type id: float
        :param product_id: ID of a product to list repository sets from (required)
        :type product_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repository_sets_id_available_repositories_serialize(
            id=id,
            product_id=product_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_repository_sets_id_available_repositories_serialize(
        self,
        id,
        product_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if product_id is not None:
            _query_params.append(("product_id", product_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/repository_sets/{id}/available_repositories",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_products_product_id_repository_sets_id_disable(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to disable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the repository within the set to disable"),
        ] = None,
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to disable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to disable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Disable a repository from the set


        :param id: ID of the repository set to disable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param repository_id: ID of the repository within the set to disable
        :type repository_id: float
        :param basearch: Basearch to disable
        :type basearch: str
        :param releasever: Releasever to disable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_products_product_id_repository_sets_id_disable_serialize(
            id=id,
            product_id=product_id,
            repository_id=repository_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_products_product_id_repository_sets_id_disable_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to disable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the repository within the set to disable"),
        ] = None,
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to disable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to disable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Disable a repository from the set


        :param id: ID of the repository set to disable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param repository_id: ID of the repository within the set to disable
        :type repository_id: float
        :param basearch: Basearch to disable
        :type basearch: str
        :param releasever: Releasever to disable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_products_product_id_repository_sets_id_disable_serialize(
            id=id,
            product_id=product_id,
            repository_id=repository_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_products_product_id_repository_sets_id_disable_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to disable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the repository within the set to disable"),
        ] = None,
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to disable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to disable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Disable a repository from the set


        :param id: ID of the repository set to disable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param repository_id: ID of the repository within the set to disable
        :type repository_id: float
        :param basearch: Basearch to disable
        :type basearch: str
        :param releasever: Releasever to disable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_products_product_id_repository_sets_id_disable_serialize(
            id=id,
            product_id=product_id,
            repository_id=repository_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_products_product_id_repository_sets_id_disable_serialize(
        self,
        id,
        product_id,
        repository_id,
        basearch,
        releasever,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if product_id is not None:
            _path_params["product_id"] = product_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if repository_id is not None:
            _form_params.append(("repository_id", repository_id))
        if basearch is not None:
            _form_params.append(("basearch", basearch))
        if releasever is not None:
            _form_params.append(("releasever", releasever))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/products/{product_id}/repository_sets/{id}/disable",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_products_product_id_repository_sets_id_enable(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to enable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to enable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to enable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Enable a repository from the set


        :param id: ID of the repository set to enable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param basearch: Basearch to enable
        :type basearch: str
        :param releasever: Releasever to enable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_products_product_id_repository_sets_id_enable_serialize(
            id=id,
            product_id=product_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_products_product_id_repository_sets_id_enable_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to enable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to enable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to enable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Enable a repository from the set


        :param id: ID of the repository set to enable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param basearch: Basearch to enable
        :type basearch: str
        :param releasever: Releasever to enable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_products_product_id_repository_sets_id_enable_serialize(
            id=id,
            product_id=product_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_products_product_id_repository_sets_id_enable_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to enable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to enable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to enable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Enable a repository from the set


        :param id: ID of the repository set to enable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param basearch: Basearch to enable
        :type basearch: str
        :param releasever: Releasever to enable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_products_product_id_repository_sets_id_enable_serialize(
            id=id,
            product_id=product_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_products_product_id_repository_sets_id_enable_serialize(
        self,
        id,
        product_id,
        basearch,
        releasever,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if product_id is not None:
            _path_params["product_id"] = product_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if basearch is not None:
            _form_params.append(("basearch", basearch))
        if releasever is not None:
            _form_params.append(("releasever", releasever))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/products/{product_id}/repository_sets/{id}/enable",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_repository_sets_id_disable(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to disable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the repository within the set to disable"),
        ] = None,
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to disable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to disable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Disable a repository from the set


        :param id: ID of the repository set to disable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param repository_id: ID of the repository within the set to disable
        :type repository_id: float
        :param basearch: Basearch to disable
        :type basearch: str
        :param releasever: Releasever to disable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_repository_sets_id_disable_serialize(
            id=id,
            product_id=product_id,
            repository_id=repository_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_repository_sets_id_disable_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to disable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the repository within the set to disable"),
        ] = None,
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to disable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to disable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Disable a repository from the set


        :param id: ID of the repository set to disable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param repository_id: ID of the repository within the set to disable
        :type repository_id: float
        :param basearch: Basearch to disable
        :type basearch: str
        :param releasever: Releasever to disable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_repository_sets_id_disable_serialize(
            id=id,
            product_id=product_id,
            repository_id=repository_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_repository_sets_id_disable_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to disable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="ID of the repository within the set to disable"),
        ] = None,
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to disable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to disable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Disable a repository from the set


        :param id: ID of the repository set to disable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param repository_id: ID of the repository within the set to disable
        :type repository_id: float
        :param basearch: Basearch to disable
        :type basearch: str
        :param releasever: Releasever to disable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_repository_sets_id_disable_serialize(
            id=id,
            product_id=product_id,
            repository_id=repository_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_repository_sets_id_disable_serialize(
        self,
        id,
        product_id,
        repository_id,
        basearch,
        releasever,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if product_id is not None:
            _form_params.append(("product_id", product_id))
        if repository_id is not None:
            _form_params.append(("repository_id", repository_id))
        if basearch is not None:
            _form_params.append(("basearch", basearch))
        if releasever is not None:
            _form_params.append(("releasever", releasever))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/repository_sets/{id}/disable",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_repository_sets_id_enable(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to enable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to enable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to enable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Enable a repository from the set


        :param id: ID of the repository set to enable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param basearch: Basearch to enable
        :type basearch: str
        :param releasever: Releasever to enable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_repository_sets_id_enable_serialize(
            id=id,
            product_id=product_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_repository_sets_id_enable_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to enable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to enable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to enable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Enable a repository from the set


        :param id: ID of the repository set to enable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param basearch: Basearch to enable
        :type basearch: str
        :param releasever: Releasever to enable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_repository_sets_id_enable_serialize(
            id=id,
            product_id=product_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_repository_sets_id_enable_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the repository set to enable"),
        ],
        product_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="ID of the product containing the repository set"),
        ],
        basearch: Annotated[
            Optional[StrictStr], Field(description="Basearch to enable")
        ] = None,
        releasever: Annotated[
            Optional[StrictStr], Field(description="Releasever to enable")
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Enable a repository from the set


        :param id: ID of the repository set to enable (required)
        :type id: float
        :param product_id: ID of the product containing the repository set (required)
        :type product_id: float
        :param basearch: Basearch to enable
        :type basearch: str
        :param releasever: Releasever to enable
        :type releasever: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_repository_sets_id_enable_serialize(
            id=id,
            product_id=product_id,
            basearch=basearch,
            releasever=releasever,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_repository_sets_id_enable_serialize(
        self,
        id,
        product_id,
        basearch,
        releasever,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if product_id is not None:
            _form_params.append(("product_id", product_id))
        if basearch is not None:
            _form_params.append(("basearch", basearch))
        if releasever is not None:
            _form_params.append(("releasever", releasever))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/repository_sets/{id}/enable",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
