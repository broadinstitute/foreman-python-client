# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr, field_validator

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class SubnetsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_subnets_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Subnet numeric identifier"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a subnet


        :param id: Subnet numeric identifier (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_subnets_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_subnets_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Subnet numeric identifier"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a subnet


        :param id: Subnet numeric identifier (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_subnets_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_subnets_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Subnet numeric identifier"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a subnet


        :param id: Subnet numeric identifier (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_subnets_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_subnets_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/subnets/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_domains_domain_id_subnets(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List of subnets for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_domains_domain_id_subnets_serialize(
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_domains_domain_id_subnets_with_http_info(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List of subnets for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_domains_domain_id_subnets_serialize(
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_domains_domain_id_subnets_without_preload_content(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of subnets for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_domains_domain_id_subnets_serialize(
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_domains_domain_id_subnets_serialize(
        self,
        domain_id,
        location_id,
        organization_id,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params["domain_id"] = domain_id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/domains/{domain_id}/subnets",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_locations_location_id_subnets(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List of subnets per location


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_subnets_serialize(
            location_id=location_id,
            domain_id=domain_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_locations_location_id_subnets_with_http_info(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List of subnets per location


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_subnets_serialize(
            location_id=location_id,
            domain_id=domain_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_locations_location_id_subnets_without_preload_content(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of subnets per location


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_subnets_serialize(
            location_id=location_id,
            domain_id=domain_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_locations_location_id_subnets_serialize(
        self,
        location_id,
        domain_id,
        organization_id,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_id is not None:
            _path_params["location_id"] = location_id
        # process the query parameters
        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/locations/{location_id}/subnets",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations_organization_id_subnets(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List of subnets per organization


        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_subnets_serialize(
            organization_id=organization_id,
            domain_id=domain_id,
            location_id=location_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_organization_id_subnets_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List of subnets per organization


        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_subnets_serialize(
            organization_id=organization_id,
            domain_id=domain_id,
            location_id=location_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_organization_id_subnets_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of subnets per organization


        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_subnets_serialize(
            organization_id=organization_id,
            domain_id=domain_id,
            location_id=location_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_organization_id_subnets_serialize(
        self,
        organization_id,
        domain_id,
        location_id,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        # process the query parameters
        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations/{organization_id}/subnets",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_subnets(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List of subnets


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_serialize(
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_subnets_with_http_info(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List of subnets


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_serialize(
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_subnets_without_preload_content(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of subnets


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_serialize(
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_subnets_serialize(
        self,
        domain_id,
        location_id,
        organization_id,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/subnets",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_subnets_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a subnet


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_subnets_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a subnet


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_subnets_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a subnet


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_subnets_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        show_hidden_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if show_hidden_parameters is not None:
            _query_params.append(("show_hidden_parameters", show_hidden_parameters))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/subnets/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_subnets_id_freeip(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        mac: Annotated[
            Optional[StrictStr],
            Field(description="MAC address to reuse the IP for this host"),
        ] = None,
        excluded_ips: Annotated[
            Optional[List[StrictStr]],
            Field(description="IP addresses that should be excluded from suggestion"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Provides an unused IP address in this subnet


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param mac: MAC address to reuse the IP for this host
        :type mac: str
        :param excluded_ips: IP addresses that should be excluded from suggestion
        :type excluded_ips: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_id_freeip_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            mac=mac,
            excluded_ips=excluded_ips,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_subnets_id_freeip_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        mac: Annotated[
            Optional[StrictStr],
            Field(description="MAC address to reuse the IP for this host"),
        ] = None,
        excluded_ips: Annotated[
            Optional[List[StrictStr]],
            Field(description="IP addresses that should be excluded from suggestion"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Provides an unused IP address in this subnet


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param mac: MAC address to reuse the IP for this host
        :type mac: str
        :param excluded_ips: IP addresses that should be excluded from suggestion
        :type excluded_ips: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_id_freeip_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            mac=mac,
            excluded_ips=excluded_ips,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_subnets_id_freeip_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        mac: Annotated[
            Optional[StrictStr],
            Field(description="MAC address to reuse the IP for this host"),
        ] = None,
        excluded_ips: Annotated[
            Optional[List[StrictStr]],
            Field(description="IP addresses that should be excluded from suggestion"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Provides an unused IP address in this subnet


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param mac: MAC address to reuse the IP for this host
        :type mac: str
        :param excluded_ips: IP addresses that should be excluded from suggestion
        :type excluded_ips: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_id_freeip_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            mac=mac,
            excluded_ips=excluded_ips,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_subnets_id_freeip_serialize(
        self,
        id,
        location_id,
        organization_id,
        mac,
        excluded_ips,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "excluded_ips": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if mac is not None:
            _query_params.append(("mac", mac))

        if excluded_ips is not None:
            _query_params.append(("excluded_ips", excluded_ips))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/subnets/{id}/freeip",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_subnets(
        self,
        subnet_name: Annotated[StrictStr, Field(description="Subnet name")],
        subnet_network: Annotated[StrictStr, Field(description="Subnet network")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        subnet_description: Annotated[
            Optional[StrictStr], Field(description="Subnet description")
        ] = None,
        subnet_network_type: Annotated[
            Optional[StrictStr],
            Field(description="Type or protocol, IPv4 or IPv6, defaults to IPv4"),
        ] = None,
        subnet_cidr: Annotated[
            Optional[StrictStr], Field(description="Network prefix in CIDR notation")
        ] = None,
        subnet_mask: Annotated[
            Optional[StrictStr], Field(description="Netmask for this subnet")
        ] = None,
        subnet_gateway: Annotated[
            Optional[StrictStr], Field(description="Subnet gateway")
        ] = None,
        subnet_dns_primary: Annotated[
            Optional[StrictStr], Field(description="Primary DNS for this subnet")
        ] = None,
        subnet_dns_secondary: Annotated[
            Optional[StrictStr], Field(description="Secondary DNS for this subnet")
        ] = None,
        subnet_ipam: Annotated[
            Optional[StrictStr],
            Field(description="IP Address auto suggestion mode for this subnet."),
        ] = None,
        subnet_externalipam_group: Annotated[
            Optional[StrictStr],
            Field(
                description="External IPAM group - only relevant when IPAM is set to external"
            ),
        ] = None,
        subnet_from: Annotated[
            Optional[StrictStr],
            Field(description="Starting IP Address for IP auto suggestion"),
        ] = None,
        subnet_to: Annotated[
            Optional[StrictStr],
            Field(description="Ending IP Address for IP auto suggestion"),
        ] = None,
        subnet_vlanid: Annotated[
            Optional[StrictStr], Field(description="VLAN ID for this subnet")
        ] = None,
        subnet_mtu: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="MTU for this subnet"),
        ] = None,
        subnet_domain_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Domains in which this subnet is part"),
        ] = None,
        subnet_dhcp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DHCP Proxy ID to use within this subnet"),
        ] = None,
        subnet_tftp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="TFTP Proxy ID to use within this subnet"),
        ] = None,
        subnet_httpboot_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="HTTPBoot Proxy ID to use within this subnet"),
        ] = None,
        subnet_externalipam_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="External IPAM Proxy ID to use within this subnet"),
        ] = None,
        subnet_dns_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DNS Proxy ID to use within this subnet"),
        ] = None,
        subnet_template_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Template HTTP(S) Proxy ID to use within this subnet"),
        ] = None,
        subnet_bmc_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="BMC Proxy ID to use within this subnet"),
        ] = None,
        subnet_boot_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Default boot mode for interfaces assigned to this subnet."
            ),
        ] = None,
        subnet_subnet_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of parameters (name, value)"),
        ] = None,
        subnet_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        subnet_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        subnet_remote_execution_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of proxy IDs to be used for remote execution"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a subnet


        :param subnet_name: Subnet name (required)
        :type subnet_name: str
        :param subnet_network: Subnet network (required)
        :type subnet_network: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param subnet_description: Subnet description
        :type subnet_description: str
        :param subnet_network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4
        :type subnet_network_type: str
        :param subnet_cidr: Network prefix in CIDR notation
        :type subnet_cidr: str
        :param subnet_mask: Netmask for this subnet
        :type subnet_mask: str
        :param subnet_gateway: Subnet gateway
        :type subnet_gateway: str
        :param subnet_dns_primary: Primary DNS for this subnet
        :type subnet_dns_primary: str
        :param subnet_dns_secondary: Secondary DNS for this subnet
        :type subnet_dns_secondary: str
        :param subnet_ipam: IP Address auto suggestion mode for this subnet.
        :type subnet_ipam: str
        :param subnet_externalipam_group: External IPAM group - only relevant when IPAM is set to external
        :type subnet_externalipam_group: str
        :param subnet_from: Starting IP Address for IP auto suggestion
        :type subnet_from: str
        :param subnet_to: Ending IP Address for IP auto suggestion
        :type subnet_to: str
        :param subnet_vlanid: VLAN ID for this subnet
        :type subnet_vlanid: str
        :param subnet_mtu: MTU for this subnet
        :type subnet_mtu: float
        :param subnet_domain_ids: Domains in which this subnet is part
        :type subnet_domain_ids: List[str]
        :param subnet_dhcp_id: DHCP Proxy ID to use within this subnet
        :type subnet_dhcp_id: float
        :param subnet_tftp_id: TFTP Proxy ID to use within this subnet
        :type subnet_tftp_id: float
        :param subnet_httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :type subnet_httpboot_id: float
        :param subnet_externalipam_id: External IPAM Proxy ID to use within this subnet
        :type subnet_externalipam_id: float
        :param subnet_dns_id: DNS Proxy ID to use within this subnet
        :type subnet_dns_id: float
        :param subnet_template_id: Template HTTP(S) Proxy ID to use within this subnet
        :type subnet_template_id: float
        :param subnet_bmc_id: BMC Proxy ID to use within this subnet
        :type subnet_bmc_id: float
        :param subnet_boot_mode: Default boot mode for interfaces assigned to this subnet.
        :type subnet_boot_mode: str
        :param subnet_subnet_parameters_attributes: Array of parameters (name, value)
        :type subnet_subnet_parameters_attributes: List[str]
        :param subnet_location_ids: REPLACE locations with given ids
        :type subnet_location_ids: List[str]
        :param subnet_organization_ids: REPLACE organizations with given ids.
        :type subnet_organization_ids: List[str]
        :param subnet_remote_execution_proxy_ids: List of proxy IDs to be used for remote execution
        :type subnet_remote_execution_proxy_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_subnets_serialize(
            subnet_name=subnet_name,
            subnet_network=subnet_network,
            location_id=location_id,
            organization_id=organization_id,
            subnet_description=subnet_description,
            subnet_network_type=subnet_network_type,
            subnet_cidr=subnet_cidr,
            subnet_mask=subnet_mask,
            subnet_gateway=subnet_gateway,
            subnet_dns_primary=subnet_dns_primary,
            subnet_dns_secondary=subnet_dns_secondary,
            subnet_ipam=subnet_ipam,
            subnet_externalipam_group=subnet_externalipam_group,
            subnet_from=subnet_from,
            subnet_to=subnet_to,
            subnet_vlanid=subnet_vlanid,
            subnet_mtu=subnet_mtu,
            subnet_domain_ids=subnet_domain_ids,
            subnet_dhcp_id=subnet_dhcp_id,
            subnet_tftp_id=subnet_tftp_id,
            subnet_httpboot_id=subnet_httpboot_id,
            subnet_externalipam_id=subnet_externalipam_id,
            subnet_dns_id=subnet_dns_id,
            subnet_template_id=subnet_template_id,
            subnet_bmc_id=subnet_bmc_id,
            subnet_boot_mode=subnet_boot_mode,
            subnet_subnet_parameters_attributes=subnet_subnet_parameters_attributes,
            subnet_location_ids=subnet_location_ids,
            subnet_organization_ids=subnet_organization_ids,
            subnet_remote_execution_proxy_ids=subnet_remote_execution_proxy_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_subnets_with_http_info(
        self,
        subnet_name: Annotated[StrictStr, Field(description="Subnet name")],
        subnet_network: Annotated[StrictStr, Field(description="Subnet network")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        subnet_description: Annotated[
            Optional[StrictStr], Field(description="Subnet description")
        ] = None,
        subnet_network_type: Annotated[
            Optional[StrictStr],
            Field(description="Type or protocol, IPv4 or IPv6, defaults to IPv4"),
        ] = None,
        subnet_cidr: Annotated[
            Optional[StrictStr], Field(description="Network prefix in CIDR notation")
        ] = None,
        subnet_mask: Annotated[
            Optional[StrictStr], Field(description="Netmask for this subnet")
        ] = None,
        subnet_gateway: Annotated[
            Optional[StrictStr], Field(description="Subnet gateway")
        ] = None,
        subnet_dns_primary: Annotated[
            Optional[StrictStr], Field(description="Primary DNS for this subnet")
        ] = None,
        subnet_dns_secondary: Annotated[
            Optional[StrictStr], Field(description="Secondary DNS for this subnet")
        ] = None,
        subnet_ipam: Annotated[
            Optional[StrictStr],
            Field(description="IP Address auto suggestion mode for this subnet."),
        ] = None,
        subnet_externalipam_group: Annotated[
            Optional[StrictStr],
            Field(
                description="External IPAM group - only relevant when IPAM is set to external"
            ),
        ] = None,
        subnet_from: Annotated[
            Optional[StrictStr],
            Field(description="Starting IP Address for IP auto suggestion"),
        ] = None,
        subnet_to: Annotated[
            Optional[StrictStr],
            Field(description="Ending IP Address for IP auto suggestion"),
        ] = None,
        subnet_vlanid: Annotated[
            Optional[StrictStr], Field(description="VLAN ID for this subnet")
        ] = None,
        subnet_mtu: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="MTU for this subnet"),
        ] = None,
        subnet_domain_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Domains in which this subnet is part"),
        ] = None,
        subnet_dhcp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DHCP Proxy ID to use within this subnet"),
        ] = None,
        subnet_tftp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="TFTP Proxy ID to use within this subnet"),
        ] = None,
        subnet_httpboot_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="HTTPBoot Proxy ID to use within this subnet"),
        ] = None,
        subnet_externalipam_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="External IPAM Proxy ID to use within this subnet"),
        ] = None,
        subnet_dns_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DNS Proxy ID to use within this subnet"),
        ] = None,
        subnet_template_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Template HTTP(S) Proxy ID to use within this subnet"),
        ] = None,
        subnet_bmc_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="BMC Proxy ID to use within this subnet"),
        ] = None,
        subnet_boot_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Default boot mode for interfaces assigned to this subnet."
            ),
        ] = None,
        subnet_subnet_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of parameters (name, value)"),
        ] = None,
        subnet_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        subnet_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        subnet_remote_execution_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of proxy IDs to be used for remote execution"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a subnet


        :param subnet_name: Subnet name (required)
        :type subnet_name: str
        :param subnet_network: Subnet network (required)
        :type subnet_network: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param subnet_description: Subnet description
        :type subnet_description: str
        :param subnet_network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4
        :type subnet_network_type: str
        :param subnet_cidr: Network prefix in CIDR notation
        :type subnet_cidr: str
        :param subnet_mask: Netmask for this subnet
        :type subnet_mask: str
        :param subnet_gateway: Subnet gateway
        :type subnet_gateway: str
        :param subnet_dns_primary: Primary DNS for this subnet
        :type subnet_dns_primary: str
        :param subnet_dns_secondary: Secondary DNS for this subnet
        :type subnet_dns_secondary: str
        :param subnet_ipam: IP Address auto suggestion mode for this subnet.
        :type subnet_ipam: str
        :param subnet_externalipam_group: External IPAM group - only relevant when IPAM is set to external
        :type subnet_externalipam_group: str
        :param subnet_from: Starting IP Address for IP auto suggestion
        :type subnet_from: str
        :param subnet_to: Ending IP Address for IP auto suggestion
        :type subnet_to: str
        :param subnet_vlanid: VLAN ID for this subnet
        :type subnet_vlanid: str
        :param subnet_mtu: MTU for this subnet
        :type subnet_mtu: float
        :param subnet_domain_ids: Domains in which this subnet is part
        :type subnet_domain_ids: List[str]
        :param subnet_dhcp_id: DHCP Proxy ID to use within this subnet
        :type subnet_dhcp_id: float
        :param subnet_tftp_id: TFTP Proxy ID to use within this subnet
        :type subnet_tftp_id: float
        :param subnet_httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :type subnet_httpboot_id: float
        :param subnet_externalipam_id: External IPAM Proxy ID to use within this subnet
        :type subnet_externalipam_id: float
        :param subnet_dns_id: DNS Proxy ID to use within this subnet
        :type subnet_dns_id: float
        :param subnet_template_id: Template HTTP(S) Proxy ID to use within this subnet
        :type subnet_template_id: float
        :param subnet_bmc_id: BMC Proxy ID to use within this subnet
        :type subnet_bmc_id: float
        :param subnet_boot_mode: Default boot mode for interfaces assigned to this subnet.
        :type subnet_boot_mode: str
        :param subnet_subnet_parameters_attributes: Array of parameters (name, value)
        :type subnet_subnet_parameters_attributes: List[str]
        :param subnet_location_ids: REPLACE locations with given ids
        :type subnet_location_ids: List[str]
        :param subnet_organization_ids: REPLACE organizations with given ids.
        :type subnet_organization_ids: List[str]
        :param subnet_remote_execution_proxy_ids: List of proxy IDs to be used for remote execution
        :type subnet_remote_execution_proxy_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_subnets_serialize(
            subnet_name=subnet_name,
            subnet_network=subnet_network,
            location_id=location_id,
            organization_id=organization_id,
            subnet_description=subnet_description,
            subnet_network_type=subnet_network_type,
            subnet_cidr=subnet_cidr,
            subnet_mask=subnet_mask,
            subnet_gateway=subnet_gateway,
            subnet_dns_primary=subnet_dns_primary,
            subnet_dns_secondary=subnet_dns_secondary,
            subnet_ipam=subnet_ipam,
            subnet_externalipam_group=subnet_externalipam_group,
            subnet_from=subnet_from,
            subnet_to=subnet_to,
            subnet_vlanid=subnet_vlanid,
            subnet_mtu=subnet_mtu,
            subnet_domain_ids=subnet_domain_ids,
            subnet_dhcp_id=subnet_dhcp_id,
            subnet_tftp_id=subnet_tftp_id,
            subnet_httpboot_id=subnet_httpboot_id,
            subnet_externalipam_id=subnet_externalipam_id,
            subnet_dns_id=subnet_dns_id,
            subnet_template_id=subnet_template_id,
            subnet_bmc_id=subnet_bmc_id,
            subnet_boot_mode=subnet_boot_mode,
            subnet_subnet_parameters_attributes=subnet_subnet_parameters_attributes,
            subnet_location_ids=subnet_location_ids,
            subnet_organization_ids=subnet_organization_ids,
            subnet_remote_execution_proxy_ids=subnet_remote_execution_proxy_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_subnets_without_preload_content(
        self,
        subnet_name: Annotated[StrictStr, Field(description="Subnet name")],
        subnet_network: Annotated[StrictStr, Field(description="Subnet network")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        subnet_description: Annotated[
            Optional[StrictStr], Field(description="Subnet description")
        ] = None,
        subnet_network_type: Annotated[
            Optional[StrictStr],
            Field(description="Type or protocol, IPv4 or IPv6, defaults to IPv4"),
        ] = None,
        subnet_cidr: Annotated[
            Optional[StrictStr], Field(description="Network prefix in CIDR notation")
        ] = None,
        subnet_mask: Annotated[
            Optional[StrictStr], Field(description="Netmask for this subnet")
        ] = None,
        subnet_gateway: Annotated[
            Optional[StrictStr], Field(description="Subnet gateway")
        ] = None,
        subnet_dns_primary: Annotated[
            Optional[StrictStr], Field(description="Primary DNS for this subnet")
        ] = None,
        subnet_dns_secondary: Annotated[
            Optional[StrictStr], Field(description="Secondary DNS for this subnet")
        ] = None,
        subnet_ipam: Annotated[
            Optional[StrictStr],
            Field(description="IP Address auto suggestion mode for this subnet."),
        ] = None,
        subnet_externalipam_group: Annotated[
            Optional[StrictStr],
            Field(
                description="External IPAM group - only relevant when IPAM is set to external"
            ),
        ] = None,
        subnet_from: Annotated[
            Optional[StrictStr],
            Field(description="Starting IP Address for IP auto suggestion"),
        ] = None,
        subnet_to: Annotated[
            Optional[StrictStr],
            Field(description="Ending IP Address for IP auto suggestion"),
        ] = None,
        subnet_vlanid: Annotated[
            Optional[StrictStr], Field(description="VLAN ID for this subnet")
        ] = None,
        subnet_mtu: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="MTU for this subnet"),
        ] = None,
        subnet_domain_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Domains in which this subnet is part"),
        ] = None,
        subnet_dhcp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DHCP Proxy ID to use within this subnet"),
        ] = None,
        subnet_tftp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="TFTP Proxy ID to use within this subnet"),
        ] = None,
        subnet_httpboot_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="HTTPBoot Proxy ID to use within this subnet"),
        ] = None,
        subnet_externalipam_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="External IPAM Proxy ID to use within this subnet"),
        ] = None,
        subnet_dns_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DNS Proxy ID to use within this subnet"),
        ] = None,
        subnet_template_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Template HTTP(S) Proxy ID to use within this subnet"),
        ] = None,
        subnet_bmc_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="BMC Proxy ID to use within this subnet"),
        ] = None,
        subnet_boot_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Default boot mode for interfaces assigned to this subnet."
            ),
        ] = None,
        subnet_subnet_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of parameters (name, value)"),
        ] = None,
        subnet_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        subnet_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        subnet_remote_execution_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of proxy IDs to be used for remote execution"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a subnet


        :param subnet_name: Subnet name (required)
        :type subnet_name: str
        :param subnet_network: Subnet network (required)
        :type subnet_network: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param subnet_description: Subnet description
        :type subnet_description: str
        :param subnet_network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4
        :type subnet_network_type: str
        :param subnet_cidr: Network prefix in CIDR notation
        :type subnet_cidr: str
        :param subnet_mask: Netmask for this subnet
        :type subnet_mask: str
        :param subnet_gateway: Subnet gateway
        :type subnet_gateway: str
        :param subnet_dns_primary: Primary DNS for this subnet
        :type subnet_dns_primary: str
        :param subnet_dns_secondary: Secondary DNS for this subnet
        :type subnet_dns_secondary: str
        :param subnet_ipam: IP Address auto suggestion mode for this subnet.
        :type subnet_ipam: str
        :param subnet_externalipam_group: External IPAM group - only relevant when IPAM is set to external
        :type subnet_externalipam_group: str
        :param subnet_from: Starting IP Address for IP auto suggestion
        :type subnet_from: str
        :param subnet_to: Ending IP Address for IP auto suggestion
        :type subnet_to: str
        :param subnet_vlanid: VLAN ID for this subnet
        :type subnet_vlanid: str
        :param subnet_mtu: MTU for this subnet
        :type subnet_mtu: float
        :param subnet_domain_ids: Domains in which this subnet is part
        :type subnet_domain_ids: List[str]
        :param subnet_dhcp_id: DHCP Proxy ID to use within this subnet
        :type subnet_dhcp_id: float
        :param subnet_tftp_id: TFTP Proxy ID to use within this subnet
        :type subnet_tftp_id: float
        :param subnet_httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :type subnet_httpboot_id: float
        :param subnet_externalipam_id: External IPAM Proxy ID to use within this subnet
        :type subnet_externalipam_id: float
        :param subnet_dns_id: DNS Proxy ID to use within this subnet
        :type subnet_dns_id: float
        :param subnet_template_id: Template HTTP(S) Proxy ID to use within this subnet
        :type subnet_template_id: float
        :param subnet_bmc_id: BMC Proxy ID to use within this subnet
        :type subnet_bmc_id: float
        :param subnet_boot_mode: Default boot mode for interfaces assigned to this subnet.
        :type subnet_boot_mode: str
        :param subnet_subnet_parameters_attributes: Array of parameters (name, value)
        :type subnet_subnet_parameters_attributes: List[str]
        :param subnet_location_ids: REPLACE locations with given ids
        :type subnet_location_ids: List[str]
        :param subnet_organization_ids: REPLACE organizations with given ids.
        :type subnet_organization_ids: List[str]
        :param subnet_remote_execution_proxy_ids: List of proxy IDs to be used for remote execution
        :type subnet_remote_execution_proxy_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_subnets_serialize(
            subnet_name=subnet_name,
            subnet_network=subnet_network,
            location_id=location_id,
            organization_id=organization_id,
            subnet_description=subnet_description,
            subnet_network_type=subnet_network_type,
            subnet_cidr=subnet_cidr,
            subnet_mask=subnet_mask,
            subnet_gateway=subnet_gateway,
            subnet_dns_primary=subnet_dns_primary,
            subnet_dns_secondary=subnet_dns_secondary,
            subnet_ipam=subnet_ipam,
            subnet_externalipam_group=subnet_externalipam_group,
            subnet_from=subnet_from,
            subnet_to=subnet_to,
            subnet_vlanid=subnet_vlanid,
            subnet_mtu=subnet_mtu,
            subnet_domain_ids=subnet_domain_ids,
            subnet_dhcp_id=subnet_dhcp_id,
            subnet_tftp_id=subnet_tftp_id,
            subnet_httpboot_id=subnet_httpboot_id,
            subnet_externalipam_id=subnet_externalipam_id,
            subnet_dns_id=subnet_dns_id,
            subnet_template_id=subnet_template_id,
            subnet_bmc_id=subnet_bmc_id,
            subnet_boot_mode=subnet_boot_mode,
            subnet_subnet_parameters_attributes=subnet_subnet_parameters_attributes,
            subnet_location_ids=subnet_location_ids,
            subnet_organization_ids=subnet_organization_ids,
            subnet_remote_execution_proxy_ids=subnet_remote_execution_proxy_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_subnets_serialize(
        self,
        subnet_name,
        subnet_network,
        location_id,
        organization_id,
        subnet_description,
        subnet_network_type,
        subnet_cidr,
        subnet_mask,
        subnet_gateway,
        subnet_dns_primary,
        subnet_dns_secondary,
        subnet_ipam,
        subnet_externalipam_group,
        subnet_from,
        subnet_to,
        subnet_vlanid,
        subnet_mtu,
        subnet_domain_ids,
        subnet_dhcp_id,
        subnet_tftp_id,
        subnet_httpboot_id,
        subnet_externalipam_id,
        subnet_dns_id,
        subnet_template_id,
        subnet_bmc_id,
        subnet_boot_mode,
        subnet_subnet_parameters_attributes,
        subnet_location_ids,
        subnet_organization_ids,
        subnet_remote_execution_proxy_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "subnet[domain_ids]": "csv",
            "subnet[subnet_parameters_attributes]": "csv",
            "subnet[location_ids]": "csv",
            "subnet[organization_ids]": "csv",
            "subnet[remote_execution_proxy_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if subnet_name is not None:
            _form_params.append(("subnet[name]", subnet_name))
        if subnet_network is not None:
            _form_params.append(("subnet[network]", subnet_network))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_description is not None:
            _form_params.append(("subnet[description]", subnet_description))
        if subnet_network_type is not None:
            _form_params.append(("subnet[network_type]", subnet_network_type))
        if subnet_cidr is not None:
            _form_params.append(("subnet[cidr]", subnet_cidr))
        if subnet_mask is not None:
            _form_params.append(("subnet[mask]", subnet_mask))
        if subnet_gateway is not None:
            _form_params.append(("subnet[gateway]", subnet_gateway))
        if subnet_dns_primary is not None:
            _form_params.append(("subnet[dns_primary]", subnet_dns_primary))
        if subnet_dns_secondary is not None:
            _form_params.append(("subnet[dns_secondary]", subnet_dns_secondary))
        if subnet_ipam is not None:
            _form_params.append(("subnet[ipam]", subnet_ipam))
        if subnet_externalipam_group is not None:
            _form_params.append(
                ("subnet[externalipam_group]", subnet_externalipam_group)
            )
        if subnet_from is not None:
            _form_params.append(("subnet[from]", subnet_from))
        if subnet_to is not None:
            _form_params.append(("subnet[to]", subnet_to))
        if subnet_vlanid is not None:
            _form_params.append(("subnet[vlanid]", subnet_vlanid))
        if subnet_mtu is not None:
            _form_params.append(("subnet[mtu]", subnet_mtu))
        if subnet_domain_ids is not None:
            _form_params.append(("subnet[domain_ids]", subnet_domain_ids))
        if subnet_dhcp_id is not None:
            _form_params.append(("subnet[dhcp_id]", subnet_dhcp_id))
        if subnet_tftp_id is not None:
            _form_params.append(("subnet[tftp_id]", subnet_tftp_id))
        if subnet_httpboot_id is not None:
            _form_params.append(("subnet[httpboot_id]", subnet_httpboot_id))
        if subnet_externalipam_id is not None:
            _form_params.append(("subnet[externalipam_id]", subnet_externalipam_id))
        if subnet_dns_id is not None:
            _form_params.append(("subnet[dns_id]", subnet_dns_id))
        if subnet_template_id is not None:
            _form_params.append(("subnet[template_id]", subnet_template_id))
        if subnet_bmc_id is not None:
            _form_params.append(("subnet[bmc_id]", subnet_bmc_id))
        if subnet_boot_mode is not None:
            _form_params.append(("subnet[boot_mode]", subnet_boot_mode))
        if subnet_subnet_parameters_attributes is not None:
            _form_params.append(
                (
                    "subnet[subnet_parameters_attributes]",
                    subnet_subnet_parameters_attributes,
                )
            )
        if subnet_location_ids is not None:
            _form_params.append(("subnet[location_ids]", subnet_location_ids))
        if subnet_organization_ids is not None:
            _form_params.append(("subnet[organization_ids]", subnet_organization_ids))
        if subnet_remote_execution_proxy_ids is not None:
            _form_params.append(
                (
                    "subnet[remote_execution_proxy_ids]",
                    subnet_remote_execution_proxy_ids,
                )
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/subnets",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_subnets_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Subnet numeric identifier"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        subnet_name: Annotated[
            Optional[StrictStr], Field(description="Subnet name")
        ] = None,
        subnet_description: Annotated[
            Optional[StrictStr], Field(description="Subnet description")
        ] = None,
        subnet_network_type: Annotated[
            Optional[StrictStr],
            Field(description="Type or protocol, IPv4 or IPv6, defaults to IPv4"),
        ] = None,
        subnet_network: Annotated[
            Optional[StrictStr], Field(description="Subnet network")
        ] = None,
        subnet_cidr: Annotated[
            Optional[StrictStr], Field(description="Network prefix in CIDR notation")
        ] = None,
        subnet_mask: Annotated[
            Optional[StrictStr], Field(description="Netmask for this subnet")
        ] = None,
        subnet_gateway: Annotated[
            Optional[StrictStr], Field(description="Subnet gateway")
        ] = None,
        subnet_dns_primary: Annotated[
            Optional[StrictStr], Field(description="Primary DNS for this subnet")
        ] = None,
        subnet_dns_secondary: Annotated[
            Optional[StrictStr], Field(description="Secondary DNS for this subnet")
        ] = None,
        subnet_ipam: Annotated[
            Optional[StrictStr],
            Field(description="IP Address auto suggestion mode for this subnet."),
        ] = None,
        subnet_externalipam_group: Annotated[
            Optional[StrictStr],
            Field(
                description="External IPAM group - only relevant when IPAM is set to external"
            ),
        ] = None,
        subnet_from: Annotated[
            Optional[StrictStr],
            Field(description="Starting IP Address for IP auto suggestion"),
        ] = None,
        subnet_to: Annotated[
            Optional[StrictStr],
            Field(description="Ending IP Address for IP auto suggestion"),
        ] = None,
        subnet_vlanid: Annotated[
            Optional[StrictStr], Field(description="VLAN ID for this subnet")
        ] = None,
        subnet_mtu: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="MTU for this subnet"),
        ] = None,
        subnet_domain_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Domains in which this subnet is part"),
        ] = None,
        subnet_dhcp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DHCP Proxy ID to use within this subnet"),
        ] = None,
        subnet_tftp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="TFTP Proxy ID to use within this subnet"),
        ] = None,
        subnet_httpboot_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="HTTPBoot Proxy ID to use within this subnet"),
        ] = None,
        subnet_externalipam_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="External IPAM Proxy ID to use within this subnet"),
        ] = None,
        subnet_dns_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DNS Proxy ID to use within this subnet"),
        ] = None,
        subnet_template_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Template HTTP(S) Proxy ID to use within this subnet"),
        ] = None,
        subnet_bmc_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="BMC Proxy ID to use within this subnet"),
        ] = None,
        subnet_boot_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Default boot mode for interfaces assigned to this subnet."
            ),
        ] = None,
        subnet_subnet_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of parameters (name, value)"),
        ] = None,
        subnet_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        subnet_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        subnet_remote_execution_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of proxy IDs to be used for remote execution"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a subnet


        :param id: Subnet numeric identifier (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param subnet_name: Subnet name
        :type subnet_name: str
        :param subnet_description: Subnet description
        :type subnet_description: str
        :param subnet_network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4
        :type subnet_network_type: str
        :param subnet_network: Subnet network
        :type subnet_network: str
        :param subnet_cidr: Network prefix in CIDR notation
        :type subnet_cidr: str
        :param subnet_mask: Netmask for this subnet
        :type subnet_mask: str
        :param subnet_gateway: Subnet gateway
        :type subnet_gateway: str
        :param subnet_dns_primary: Primary DNS for this subnet
        :type subnet_dns_primary: str
        :param subnet_dns_secondary: Secondary DNS for this subnet
        :type subnet_dns_secondary: str
        :param subnet_ipam: IP Address auto suggestion mode for this subnet.
        :type subnet_ipam: str
        :param subnet_externalipam_group: External IPAM group - only relevant when IPAM is set to external
        :type subnet_externalipam_group: str
        :param subnet_from: Starting IP Address for IP auto suggestion
        :type subnet_from: str
        :param subnet_to: Ending IP Address for IP auto suggestion
        :type subnet_to: str
        :param subnet_vlanid: VLAN ID for this subnet
        :type subnet_vlanid: str
        :param subnet_mtu: MTU for this subnet
        :type subnet_mtu: float
        :param subnet_domain_ids: Domains in which this subnet is part
        :type subnet_domain_ids: List[str]
        :param subnet_dhcp_id: DHCP Proxy ID to use within this subnet
        :type subnet_dhcp_id: float
        :param subnet_tftp_id: TFTP Proxy ID to use within this subnet
        :type subnet_tftp_id: float
        :param subnet_httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :type subnet_httpboot_id: float
        :param subnet_externalipam_id: External IPAM Proxy ID to use within this subnet
        :type subnet_externalipam_id: float
        :param subnet_dns_id: DNS Proxy ID to use within this subnet
        :type subnet_dns_id: float
        :param subnet_template_id: Template HTTP(S) Proxy ID to use within this subnet
        :type subnet_template_id: float
        :param subnet_bmc_id: BMC Proxy ID to use within this subnet
        :type subnet_bmc_id: float
        :param subnet_boot_mode: Default boot mode for interfaces assigned to this subnet.
        :type subnet_boot_mode: str
        :param subnet_subnet_parameters_attributes: Array of parameters (name, value)
        :type subnet_subnet_parameters_attributes: List[str]
        :param subnet_location_ids: REPLACE locations with given ids
        :type subnet_location_ids: List[str]
        :param subnet_organization_ids: REPLACE organizations with given ids.
        :type subnet_organization_ids: List[str]
        :param subnet_remote_execution_proxy_ids: List of proxy IDs to be used for remote execution
        :type subnet_remote_execution_proxy_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_subnets_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_name=subnet_name,
            subnet_description=subnet_description,
            subnet_network_type=subnet_network_type,
            subnet_network=subnet_network,
            subnet_cidr=subnet_cidr,
            subnet_mask=subnet_mask,
            subnet_gateway=subnet_gateway,
            subnet_dns_primary=subnet_dns_primary,
            subnet_dns_secondary=subnet_dns_secondary,
            subnet_ipam=subnet_ipam,
            subnet_externalipam_group=subnet_externalipam_group,
            subnet_from=subnet_from,
            subnet_to=subnet_to,
            subnet_vlanid=subnet_vlanid,
            subnet_mtu=subnet_mtu,
            subnet_domain_ids=subnet_domain_ids,
            subnet_dhcp_id=subnet_dhcp_id,
            subnet_tftp_id=subnet_tftp_id,
            subnet_httpboot_id=subnet_httpboot_id,
            subnet_externalipam_id=subnet_externalipam_id,
            subnet_dns_id=subnet_dns_id,
            subnet_template_id=subnet_template_id,
            subnet_bmc_id=subnet_bmc_id,
            subnet_boot_mode=subnet_boot_mode,
            subnet_subnet_parameters_attributes=subnet_subnet_parameters_attributes,
            subnet_location_ids=subnet_location_ids,
            subnet_organization_ids=subnet_organization_ids,
            subnet_remote_execution_proxy_ids=subnet_remote_execution_proxy_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_subnets_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Subnet numeric identifier"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        subnet_name: Annotated[
            Optional[StrictStr], Field(description="Subnet name")
        ] = None,
        subnet_description: Annotated[
            Optional[StrictStr], Field(description="Subnet description")
        ] = None,
        subnet_network_type: Annotated[
            Optional[StrictStr],
            Field(description="Type or protocol, IPv4 or IPv6, defaults to IPv4"),
        ] = None,
        subnet_network: Annotated[
            Optional[StrictStr], Field(description="Subnet network")
        ] = None,
        subnet_cidr: Annotated[
            Optional[StrictStr], Field(description="Network prefix in CIDR notation")
        ] = None,
        subnet_mask: Annotated[
            Optional[StrictStr], Field(description="Netmask for this subnet")
        ] = None,
        subnet_gateway: Annotated[
            Optional[StrictStr], Field(description="Subnet gateway")
        ] = None,
        subnet_dns_primary: Annotated[
            Optional[StrictStr], Field(description="Primary DNS for this subnet")
        ] = None,
        subnet_dns_secondary: Annotated[
            Optional[StrictStr], Field(description="Secondary DNS for this subnet")
        ] = None,
        subnet_ipam: Annotated[
            Optional[StrictStr],
            Field(description="IP Address auto suggestion mode for this subnet."),
        ] = None,
        subnet_externalipam_group: Annotated[
            Optional[StrictStr],
            Field(
                description="External IPAM group - only relevant when IPAM is set to external"
            ),
        ] = None,
        subnet_from: Annotated[
            Optional[StrictStr],
            Field(description="Starting IP Address for IP auto suggestion"),
        ] = None,
        subnet_to: Annotated[
            Optional[StrictStr],
            Field(description="Ending IP Address for IP auto suggestion"),
        ] = None,
        subnet_vlanid: Annotated[
            Optional[StrictStr], Field(description="VLAN ID for this subnet")
        ] = None,
        subnet_mtu: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="MTU for this subnet"),
        ] = None,
        subnet_domain_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Domains in which this subnet is part"),
        ] = None,
        subnet_dhcp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DHCP Proxy ID to use within this subnet"),
        ] = None,
        subnet_tftp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="TFTP Proxy ID to use within this subnet"),
        ] = None,
        subnet_httpboot_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="HTTPBoot Proxy ID to use within this subnet"),
        ] = None,
        subnet_externalipam_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="External IPAM Proxy ID to use within this subnet"),
        ] = None,
        subnet_dns_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DNS Proxy ID to use within this subnet"),
        ] = None,
        subnet_template_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Template HTTP(S) Proxy ID to use within this subnet"),
        ] = None,
        subnet_bmc_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="BMC Proxy ID to use within this subnet"),
        ] = None,
        subnet_boot_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Default boot mode for interfaces assigned to this subnet."
            ),
        ] = None,
        subnet_subnet_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of parameters (name, value)"),
        ] = None,
        subnet_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        subnet_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        subnet_remote_execution_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of proxy IDs to be used for remote execution"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a subnet


        :param id: Subnet numeric identifier (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param subnet_name: Subnet name
        :type subnet_name: str
        :param subnet_description: Subnet description
        :type subnet_description: str
        :param subnet_network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4
        :type subnet_network_type: str
        :param subnet_network: Subnet network
        :type subnet_network: str
        :param subnet_cidr: Network prefix in CIDR notation
        :type subnet_cidr: str
        :param subnet_mask: Netmask for this subnet
        :type subnet_mask: str
        :param subnet_gateway: Subnet gateway
        :type subnet_gateway: str
        :param subnet_dns_primary: Primary DNS for this subnet
        :type subnet_dns_primary: str
        :param subnet_dns_secondary: Secondary DNS for this subnet
        :type subnet_dns_secondary: str
        :param subnet_ipam: IP Address auto suggestion mode for this subnet.
        :type subnet_ipam: str
        :param subnet_externalipam_group: External IPAM group - only relevant when IPAM is set to external
        :type subnet_externalipam_group: str
        :param subnet_from: Starting IP Address for IP auto suggestion
        :type subnet_from: str
        :param subnet_to: Ending IP Address for IP auto suggestion
        :type subnet_to: str
        :param subnet_vlanid: VLAN ID for this subnet
        :type subnet_vlanid: str
        :param subnet_mtu: MTU for this subnet
        :type subnet_mtu: float
        :param subnet_domain_ids: Domains in which this subnet is part
        :type subnet_domain_ids: List[str]
        :param subnet_dhcp_id: DHCP Proxy ID to use within this subnet
        :type subnet_dhcp_id: float
        :param subnet_tftp_id: TFTP Proxy ID to use within this subnet
        :type subnet_tftp_id: float
        :param subnet_httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :type subnet_httpboot_id: float
        :param subnet_externalipam_id: External IPAM Proxy ID to use within this subnet
        :type subnet_externalipam_id: float
        :param subnet_dns_id: DNS Proxy ID to use within this subnet
        :type subnet_dns_id: float
        :param subnet_template_id: Template HTTP(S) Proxy ID to use within this subnet
        :type subnet_template_id: float
        :param subnet_bmc_id: BMC Proxy ID to use within this subnet
        :type subnet_bmc_id: float
        :param subnet_boot_mode: Default boot mode for interfaces assigned to this subnet.
        :type subnet_boot_mode: str
        :param subnet_subnet_parameters_attributes: Array of parameters (name, value)
        :type subnet_subnet_parameters_attributes: List[str]
        :param subnet_location_ids: REPLACE locations with given ids
        :type subnet_location_ids: List[str]
        :param subnet_organization_ids: REPLACE organizations with given ids.
        :type subnet_organization_ids: List[str]
        :param subnet_remote_execution_proxy_ids: List of proxy IDs to be used for remote execution
        :type subnet_remote_execution_proxy_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_subnets_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_name=subnet_name,
            subnet_description=subnet_description,
            subnet_network_type=subnet_network_type,
            subnet_network=subnet_network,
            subnet_cidr=subnet_cidr,
            subnet_mask=subnet_mask,
            subnet_gateway=subnet_gateway,
            subnet_dns_primary=subnet_dns_primary,
            subnet_dns_secondary=subnet_dns_secondary,
            subnet_ipam=subnet_ipam,
            subnet_externalipam_group=subnet_externalipam_group,
            subnet_from=subnet_from,
            subnet_to=subnet_to,
            subnet_vlanid=subnet_vlanid,
            subnet_mtu=subnet_mtu,
            subnet_domain_ids=subnet_domain_ids,
            subnet_dhcp_id=subnet_dhcp_id,
            subnet_tftp_id=subnet_tftp_id,
            subnet_httpboot_id=subnet_httpboot_id,
            subnet_externalipam_id=subnet_externalipam_id,
            subnet_dns_id=subnet_dns_id,
            subnet_template_id=subnet_template_id,
            subnet_bmc_id=subnet_bmc_id,
            subnet_boot_mode=subnet_boot_mode,
            subnet_subnet_parameters_attributes=subnet_subnet_parameters_attributes,
            subnet_location_ids=subnet_location_ids,
            subnet_organization_ids=subnet_organization_ids,
            subnet_remote_execution_proxy_ids=subnet_remote_execution_proxy_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_subnets_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Subnet numeric identifier"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        subnet_name: Annotated[
            Optional[StrictStr], Field(description="Subnet name")
        ] = None,
        subnet_description: Annotated[
            Optional[StrictStr], Field(description="Subnet description")
        ] = None,
        subnet_network_type: Annotated[
            Optional[StrictStr],
            Field(description="Type or protocol, IPv4 or IPv6, defaults to IPv4"),
        ] = None,
        subnet_network: Annotated[
            Optional[StrictStr], Field(description="Subnet network")
        ] = None,
        subnet_cidr: Annotated[
            Optional[StrictStr], Field(description="Network prefix in CIDR notation")
        ] = None,
        subnet_mask: Annotated[
            Optional[StrictStr], Field(description="Netmask for this subnet")
        ] = None,
        subnet_gateway: Annotated[
            Optional[StrictStr], Field(description="Subnet gateway")
        ] = None,
        subnet_dns_primary: Annotated[
            Optional[StrictStr], Field(description="Primary DNS for this subnet")
        ] = None,
        subnet_dns_secondary: Annotated[
            Optional[StrictStr], Field(description="Secondary DNS for this subnet")
        ] = None,
        subnet_ipam: Annotated[
            Optional[StrictStr],
            Field(description="IP Address auto suggestion mode for this subnet."),
        ] = None,
        subnet_externalipam_group: Annotated[
            Optional[StrictStr],
            Field(
                description="External IPAM group - only relevant when IPAM is set to external"
            ),
        ] = None,
        subnet_from: Annotated[
            Optional[StrictStr],
            Field(description="Starting IP Address for IP auto suggestion"),
        ] = None,
        subnet_to: Annotated[
            Optional[StrictStr],
            Field(description="Ending IP Address for IP auto suggestion"),
        ] = None,
        subnet_vlanid: Annotated[
            Optional[StrictStr], Field(description="VLAN ID for this subnet")
        ] = None,
        subnet_mtu: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="MTU for this subnet"),
        ] = None,
        subnet_domain_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Domains in which this subnet is part"),
        ] = None,
        subnet_dhcp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DHCP Proxy ID to use within this subnet"),
        ] = None,
        subnet_tftp_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="TFTP Proxy ID to use within this subnet"),
        ] = None,
        subnet_httpboot_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="HTTPBoot Proxy ID to use within this subnet"),
        ] = None,
        subnet_externalipam_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="External IPAM Proxy ID to use within this subnet"),
        ] = None,
        subnet_dns_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="DNS Proxy ID to use within this subnet"),
        ] = None,
        subnet_template_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Template HTTP(S) Proxy ID to use within this subnet"),
        ] = None,
        subnet_bmc_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="BMC Proxy ID to use within this subnet"),
        ] = None,
        subnet_boot_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Default boot mode for interfaces assigned to this subnet."
            ),
        ] = None,
        subnet_subnet_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of parameters (name, value)"),
        ] = None,
        subnet_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        subnet_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        subnet_remote_execution_proxy_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of proxy IDs to be used for remote execution"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a subnet


        :param id: Subnet numeric identifier (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param subnet_name: Subnet name
        :type subnet_name: str
        :param subnet_description: Subnet description
        :type subnet_description: str
        :param subnet_network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4
        :type subnet_network_type: str
        :param subnet_network: Subnet network
        :type subnet_network: str
        :param subnet_cidr: Network prefix in CIDR notation
        :type subnet_cidr: str
        :param subnet_mask: Netmask for this subnet
        :type subnet_mask: str
        :param subnet_gateway: Subnet gateway
        :type subnet_gateway: str
        :param subnet_dns_primary: Primary DNS for this subnet
        :type subnet_dns_primary: str
        :param subnet_dns_secondary: Secondary DNS for this subnet
        :type subnet_dns_secondary: str
        :param subnet_ipam: IP Address auto suggestion mode for this subnet.
        :type subnet_ipam: str
        :param subnet_externalipam_group: External IPAM group - only relevant when IPAM is set to external
        :type subnet_externalipam_group: str
        :param subnet_from: Starting IP Address for IP auto suggestion
        :type subnet_from: str
        :param subnet_to: Ending IP Address for IP auto suggestion
        :type subnet_to: str
        :param subnet_vlanid: VLAN ID for this subnet
        :type subnet_vlanid: str
        :param subnet_mtu: MTU for this subnet
        :type subnet_mtu: float
        :param subnet_domain_ids: Domains in which this subnet is part
        :type subnet_domain_ids: List[str]
        :param subnet_dhcp_id: DHCP Proxy ID to use within this subnet
        :type subnet_dhcp_id: float
        :param subnet_tftp_id: TFTP Proxy ID to use within this subnet
        :type subnet_tftp_id: float
        :param subnet_httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :type subnet_httpboot_id: float
        :param subnet_externalipam_id: External IPAM Proxy ID to use within this subnet
        :type subnet_externalipam_id: float
        :param subnet_dns_id: DNS Proxy ID to use within this subnet
        :type subnet_dns_id: float
        :param subnet_template_id: Template HTTP(S) Proxy ID to use within this subnet
        :type subnet_template_id: float
        :param subnet_bmc_id: BMC Proxy ID to use within this subnet
        :type subnet_bmc_id: float
        :param subnet_boot_mode: Default boot mode for interfaces assigned to this subnet.
        :type subnet_boot_mode: str
        :param subnet_subnet_parameters_attributes: Array of parameters (name, value)
        :type subnet_subnet_parameters_attributes: List[str]
        :param subnet_location_ids: REPLACE locations with given ids
        :type subnet_location_ids: List[str]
        :param subnet_organization_ids: REPLACE organizations with given ids.
        :type subnet_organization_ids: List[str]
        :param subnet_remote_execution_proxy_ids: List of proxy IDs to be used for remote execution
        :type subnet_remote_execution_proxy_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_subnets_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_name=subnet_name,
            subnet_description=subnet_description,
            subnet_network_type=subnet_network_type,
            subnet_network=subnet_network,
            subnet_cidr=subnet_cidr,
            subnet_mask=subnet_mask,
            subnet_gateway=subnet_gateway,
            subnet_dns_primary=subnet_dns_primary,
            subnet_dns_secondary=subnet_dns_secondary,
            subnet_ipam=subnet_ipam,
            subnet_externalipam_group=subnet_externalipam_group,
            subnet_from=subnet_from,
            subnet_to=subnet_to,
            subnet_vlanid=subnet_vlanid,
            subnet_mtu=subnet_mtu,
            subnet_domain_ids=subnet_domain_ids,
            subnet_dhcp_id=subnet_dhcp_id,
            subnet_tftp_id=subnet_tftp_id,
            subnet_httpboot_id=subnet_httpboot_id,
            subnet_externalipam_id=subnet_externalipam_id,
            subnet_dns_id=subnet_dns_id,
            subnet_template_id=subnet_template_id,
            subnet_bmc_id=subnet_bmc_id,
            subnet_boot_mode=subnet_boot_mode,
            subnet_subnet_parameters_attributes=subnet_subnet_parameters_attributes,
            subnet_location_ids=subnet_location_ids,
            subnet_organization_ids=subnet_organization_ids,
            subnet_remote_execution_proxy_ids=subnet_remote_execution_proxy_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_subnets_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        subnet_name,
        subnet_description,
        subnet_network_type,
        subnet_network,
        subnet_cidr,
        subnet_mask,
        subnet_gateway,
        subnet_dns_primary,
        subnet_dns_secondary,
        subnet_ipam,
        subnet_externalipam_group,
        subnet_from,
        subnet_to,
        subnet_vlanid,
        subnet_mtu,
        subnet_domain_ids,
        subnet_dhcp_id,
        subnet_tftp_id,
        subnet_httpboot_id,
        subnet_externalipam_id,
        subnet_dns_id,
        subnet_template_id,
        subnet_bmc_id,
        subnet_boot_mode,
        subnet_subnet_parameters_attributes,
        subnet_location_ids,
        subnet_organization_ids,
        subnet_remote_execution_proxy_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "subnet[domain_ids]": "csv",
            "subnet[subnet_parameters_attributes]": "csv",
            "subnet[location_ids]": "csv",
            "subnet[organization_ids]": "csv",
            "subnet[remote_execution_proxy_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_name is not None:
            _form_params.append(("subnet[name]", subnet_name))
        if subnet_description is not None:
            _form_params.append(("subnet[description]", subnet_description))
        if subnet_network_type is not None:
            _form_params.append(("subnet[network_type]", subnet_network_type))
        if subnet_network is not None:
            _form_params.append(("subnet[network]", subnet_network))
        if subnet_cidr is not None:
            _form_params.append(("subnet[cidr]", subnet_cidr))
        if subnet_mask is not None:
            _form_params.append(("subnet[mask]", subnet_mask))
        if subnet_gateway is not None:
            _form_params.append(("subnet[gateway]", subnet_gateway))
        if subnet_dns_primary is not None:
            _form_params.append(("subnet[dns_primary]", subnet_dns_primary))
        if subnet_dns_secondary is not None:
            _form_params.append(("subnet[dns_secondary]", subnet_dns_secondary))
        if subnet_ipam is not None:
            _form_params.append(("subnet[ipam]", subnet_ipam))
        if subnet_externalipam_group is not None:
            _form_params.append(
                ("subnet[externalipam_group]", subnet_externalipam_group)
            )
        if subnet_from is not None:
            _form_params.append(("subnet[from]", subnet_from))
        if subnet_to is not None:
            _form_params.append(("subnet[to]", subnet_to))
        if subnet_vlanid is not None:
            _form_params.append(("subnet[vlanid]", subnet_vlanid))
        if subnet_mtu is not None:
            _form_params.append(("subnet[mtu]", subnet_mtu))
        if subnet_domain_ids is not None:
            _form_params.append(("subnet[domain_ids]", subnet_domain_ids))
        if subnet_dhcp_id is not None:
            _form_params.append(("subnet[dhcp_id]", subnet_dhcp_id))
        if subnet_tftp_id is not None:
            _form_params.append(("subnet[tftp_id]", subnet_tftp_id))
        if subnet_httpboot_id is not None:
            _form_params.append(("subnet[httpboot_id]", subnet_httpboot_id))
        if subnet_externalipam_id is not None:
            _form_params.append(("subnet[externalipam_id]", subnet_externalipam_id))
        if subnet_dns_id is not None:
            _form_params.append(("subnet[dns_id]", subnet_dns_id))
        if subnet_template_id is not None:
            _form_params.append(("subnet[template_id]", subnet_template_id))
        if subnet_bmc_id is not None:
            _form_params.append(("subnet[bmc_id]", subnet_bmc_id))
        if subnet_boot_mode is not None:
            _form_params.append(("subnet[boot_mode]", subnet_boot_mode))
        if subnet_subnet_parameters_attributes is not None:
            _form_params.append(
                (
                    "subnet[subnet_parameters_attributes]",
                    subnet_subnet_parameters_attributes,
                )
            )
        if subnet_location_ids is not None:
            _form_params.append(("subnet[location_ids]", subnet_location_ids))
        if subnet_organization_ids is not None:
            _form_params.append(("subnet[organization_ids]", subnet_organization_ids))
        if subnet_remote_execution_proxy_ids is not None:
            _form_params.append(
                (
                    "subnet[remote_execution_proxy_ids]",
                    subnet_remote_execution_proxy_ids,
                )
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/subnets/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
