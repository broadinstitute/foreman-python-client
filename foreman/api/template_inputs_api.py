# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr, field_validator

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class TemplateInputsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_templates_template_id_template_inputs_id(
        self,
        template_id: StrictStr,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a template input


        :param template_id: (required)
        :type template_id: str
        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_templates_template_id_template_inputs_id_serialize(
            template_id=template_id,
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_templates_template_id_template_inputs_id_with_http_info(
        self,
        template_id: StrictStr,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a template input


        :param template_id: (required)
        :type template_id: str
        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_templates_template_id_template_inputs_id_serialize(
            template_id=template_id,
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_templates_template_id_template_inputs_id_without_preload_content(
        self,
        template_id: StrictStr,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a template input


        :param template_id: (required)
        :type template_id: str
        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_templates_template_id_template_inputs_id_serialize(
            template_id=template_id,
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_templates_template_id_template_inputs_id_serialize(
        self,
        template_id,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_id is not None:
            _path_params["template_id"] = template_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/templates/{template_id}/template_inputs/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_templates_template_id_template_inputs(
        self,
        template_id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List template inputs


        :param template_id: (required)
        :type template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_templates_template_id_template_inputs_serialize(
            template_id=template_id,
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_templates_template_id_template_inputs_with_http_info(
        self,
        template_id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List template inputs


        :param template_id: (required)
        :type template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_templates_template_id_template_inputs_serialize(
            template_id=template_id,
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_templates_template_id_template_inputs_without_preload_content(
        self,
        template_id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List template inputs


        :param template_id: (required)
        :type template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_templates_template_id_template_inputs_serialize(
            template_id=template_id,
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_templates_template_id_template_inputs_serialize(
        self,
        template_id,
        location_id,
        organization_id,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_id is not None:
            _path_params["template_id"] = template_id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/templates/{template_id}/template_inputs",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_templates_template_id_template_inputs_id(
        self,
        template_id: StrictStr,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show template input details


        :param template_id: (required)
        :type template_id: str
        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_templates_template_id_template_inputs_id_serialize(
            template_id=template_id,
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_templates_template_id_template_inputs_id_with_http_info(
        self,
        template_id: StrictStr,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show template input details


        :param template_id: (required)
        :type template_id: str
        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_templates_template_id_template_inputs_id_serialize(
            template_id=template_id,
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_templates_template_id_template_inputs_id_without_preload_content(
        self,
        template_id: StrictStr,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show template input details


        :param template_id: (required)
        :type template_id: str
        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_templates_template_id_template_inputs_id_serialize(
            template_id=template_id,
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_templates_template_id_template_inputs_id_serialize(
        self,
        template_id,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_id is not None:
            _path_params["template_id"] = template_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/templates/{template_id}/template_inputs/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_templates_template_id_template_inputs(
        self,
        template_id: StrictStr,
        template_input_name: Annotated[StrictStr, Field(description="Input name")],
        template_input_input_type: Annotated[
            StrictStr, Field(description="Input type")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        template_input_description: Annotated[
            Optional[StrictStr], Field(description="Input description")
        ] = None,
        template_input_required: Annotated[
            Optional[StrictBool], Field(description="Input is required")
        ] = None,
        template_input_advanced: Annotated[
            Optional[StrictBool], Field(description="Input is advanced")
        ] = None,
        template_input_fact_name: Annotated[
            Optional[StrictStr],
            Field(description="Fact name, used when input type is Fact value"),
        ] = None,
        template_input_variable_name: Annotated[
            Optional[StrictStr],
            Field(description="Variable name, used when input type is Variable"),
        ] = None,
        template_input_options: Annotated[
            Optional[List[StrictStr]],
            Field(description="Selectable values for user inputs"),
        ] = None,
        template_input_default: Annotated[
            Optional[StrictStr], Field(description="Default value for user input")
        ] = None,
        template_input_hidden_value: Annotated[
            Optional[StrictBool],
            Field(
                description="The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords"
            ),
        ] = None,
        template_input_value_type: Annotated[
            Optional[StrictStr], Field(description="Value type, defaults to plain")
        ] = None,
        template_input_resource_type: Annotated[
            Optional[StrictStr],
            Field(
                description="For values of type search, this is the resource the value searches in"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a template input


        :param template_id: (required)
        :type template_id: str
        :param template_input_name: Input name (required)
        :type template_input_name: str
        :param template_input_input_type: Input type (required)
        :type template_input_input_type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param template_input_description: Input description
        :type template_input_description: str
        :param template_input_required: Input is required
        :type template_input_required: bool
        :param template_input_advanced: Input is advanced
        :type template_input_advanced: bool
        :param template_input_fact_name: Fact name, used when input type is Fact value
        :type template_input_fact_name: str
        :param template_input_variable_name: Variable name, used when input type is Variable
        :type template_input_variable_name: str
        :param template_input_options: Selectable values for user inputs
        :type template_input_options: List[str]
        :param template_input_default: Default value for user input
        :type template_input_default: str
        :param template_input_hidden_value: The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords
        :type template_input_hidden_value: bool
        :param template_input_value_type: Value type, defaults to plain
        :type template_input_value_type: str
        :param template_input_resource_type: For values of type search, this is the resource the value searches in
        :type template_input_resource_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_templates_template_id_template_inputs_serialize(
            template_id=template_id,
            template_input_name=template_input_name,
            template_input_input_type=template_input_input_type,
            location_id=location_id,
            organization_id=organization_id,
            template_input_description=template_input_description,
            template_input_required=template_input_required,
            template_input_advanced=template_input_advanced,
            template_input_fact_name=template_input_fact_name,
            template_input_variable_name=template_input_variable_name,
            template_input_options=template_input_options,
            template_input_default=template_input_default,
            template_input_hidden_value=template_input_hidden_value,
            template_input_value_type=template_input_value_type,
            template_input_resource_type=template_input_resource_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_templates_template_id_template_inputs_with_http_info(
        self,
        template_id: StrictStr,
        template_input_name: Annotated[StrictStr, Field(description="Input name")],
        template_input_input_type: Annotated[
            StrictStr, Field(description="Input type")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        template_input_description: Annotated[
            Optional[StrictStr], Field(description="Input description")
        ] = None,
        template_input_required: Annotated[
            Optional[StrictBool], Field(description="Input is required")
        ] = None,
        template_input_advanced: Annotated[
            Optional[StrictBool], Field(description="Input is advanced")
        ] = None,
        template_input_fact_name: Annotated[
            Optional[StrictStr],
            Field(description="Fact name, used when input type is Fact value"),
        ] = None,
        template_input_variable_name: Annotated[
            Optional[StrictStr],
            Field(description="Variable name, used when input type is Variable"),
        ] = None,
        template_input_options: Annotated[
            Optional[List[StrictStr]],
            Field(description="Selectable values for user inputs"),
        ] = None,
        template_input_default: Annotated[
            Optional[StrictStr], Field(description="Default value for user input")
        ] = None,
        template_input_hidden_value: Annotated[
            Optional[StrictBool],
            Field(
                description="The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords"
            ),
        ] = None,
        template_input_value_type: Annotated[
            Optional[StrictStr], Field(description="Value type, defaults to plain")
        ] = None,
        template_input_resource_type: Annotated[
            Optional[StrictStr],
            Field(
                description="For values of type search, this is the resource the value searches in"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a template input


        :param template_id: (required)
        :type template_id: str
        :param template_input_name: Input name (required)
        :type template_input_name: str
        :param template_input_input_type: Input type (required)
        :type template_input_input_type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param template_input_description: Input description
        :type template_input_description: str
        :param template_input_required: Input is required
        :type template_input_required: bool
        :param template_input_advanced: Input is advanced
        :type template_input_advanced: bool
        :param template_input_fact_name: Fact name, used when input type is Fact value
        :type template_input_fact_name: str
        :param template_input_variable_name: Variable name, used when input type is Variable
        :type template_input_variable_name: str
        :param template_input_options: Selectable values for user inputs
        :type template_input_options: List[str]
        :param template_input_default: Default value for user input
        :type template_input_default: str
        :param template_input_hidden_value: The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords
        :type template_input_hidden_value: bool
        :param template_input_value_type: Value type, defaults to plain
        :type template_input_value_type: str
        :param template_input_resource_type: For values of type search, this is the resource the value searches in
        :type template_input_resource_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_templates_template_id_template_inputs_serialize(
            template_id=template_id,
            template_input_name=template_input_name,
            template_input_input_type=template_input_input_type,
            location_id=location_id,
            organization_id=organization_id,
            template_input_description=template_input_description,
            template_input_required=template_input_required,
            template_input_advanced=template_input_advanced,
            template_input_fact_name=template_input_fact_name,
            template_input_variable_name=template_input_variable_name,
            template_input_options=template_input_options,
            template_input_default=template_input_default,
            template_input_hidden_value=template_input_hidden_value,
            template_input_value_type=template_input_value_type,
            template_input_resource_type=template_input_resource_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_templates_template_id_template_inputs_without_preload_content(
        self,
        template_id: StrictStr,
        template_input_name: Annotated[StrictStr, Field(description="Input name")],
        template_input_input_type: Annotated[
            StrictStr, Field(description="Input type")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        template_input_description: Annotated[
            Optional[StrictStr], Field(description="Input description")
        ] = None,
        template_input_required: Annotated[
            Optional[StrictBool], Field(description="Input is required")
        ] = None,
        template_input_advanced: Annotated[
            Optional[StrictBool], Field(description="Input is advanced")
        ] = None,
        template_input_fact_name: Annotated[
            Optional[StrictStr],
            Field(description="Fact name, used when input type is Fact value"),
        ] = None,
        template_input_variable_name: Annotated[
            Optional[StrictStr],
            Field(description="Variable name, used when input type is Variable"),
        ] = None,
        template_input_options: Annotated[
            Optional[List[StrictStr]],
            Field(description="Selectable values for user inputs"),
        ] = None,
        template_input_default: Annotated[
            Optional[StrictStr], Field(description="Default value for user input")
        ] = None,
        template_input_hidden_value: Annotated[
            Optional[StrictBool],
            Field(
                description="The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords"
            ),
        ] = None,
        template_input_value_type: Annotated[
            Optional[StrictStr], Field(description="Value type, defaults to plain")
        ] = None,
        template_input_resource_type: Annotated[
            Optional[StrictStr],
            Field(
                description="For values of type search, this is the resource the value searches in"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a template input


        :param template_id: (required)
        :type template_id: str
        :param template_input_name: Input name (required)
        :type template_input_name: str
        :param template_input_input_type: Input type (required)
        :type template_input_input_type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param template_input_description: Input description
        :type template_input_description: str
        :param template_input_required: Input is required
        :type template_input_required: bool
        :param template_input_advanced: Input is advanced
        :type template_input_advanced: bool
        :param template_input_fact_name: Fact name, used when input type is Fact value
        :type template_input_fact_name: str
        :param template_input_variable_name: Variable name, used when input type is Variable
        :type template_input_variable_name: str
        :param template_input_options: Selectable values for user inputs
        :type template_input_options: List[str]
        :param template_input_default: Default value for user input
        :type template_input_default: str
        :param template_input_hidden_value: The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords
        :type template_input_hidden_value: bool
        :param template_input_value_type: Value type, defaults to plain
        :type template_input_value_type: str
        :param template_input_resource_type: For values of type search, this is the resource the value searches in
        :type template_input_resource_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_templates_template_id_template_inputs_serialize(
            template_id=template_id,
            template_input_name=template_input_name,
            template_input_input_type=template_input_input_type,
            location_id=location_id,
            organization_id=organization_id,
            template_input_description=template_input_description,
            template_input_required=template_input_required,
            template_input_advanced=template_input_advanced,
            template_input_fact_name=template_input_fact_name,
            template_input_variable_name=template_input_variable_name,
            template_input_options=template_input_options,
            template_input_default=template_input_default,
            template_input_hidden_value=template_input_hidden_value,
            template_input_value_type=template_input_value_type,
            template_input_resource_type=template_input_resource_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_templates_template_id_template_inputs_serialize(
        self,
        template_id,
        template_input_name,
        template_input_input_type,
        location_id,
        organization_id,
        template_input_description,
        template_input_required,
        template_input_advanced,
        template_input_fact_name,
        template_input_variable_name,
        template_input_options,
        template_input_default,
        template_input_hidden_value,
        template_input_value_type,
        template_input_resource_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "template_input[options]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_id is not None:
            _path_params["template_id"] = template_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if template_input_name is not None:
            _form_params.append(("template_input[name]", template_input_name))
        if template_input_input_type is not None:
            _form_params.append(
                ("template_input[input_type]", template_input_input_type)
            )
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if template_input_description is not None:
            _form_params.append(
                ("template_input[description]", template_input_description)
            )
        if template_input_required is not None:
            _form_params.append(("template_input[required]", template_input_required))
        if template_input_advanced is not None:
            _form_params.append(("template_input[advanced]", template_input_advanced))
        if template_input_fact_name is not None:
            _form_params.append(("template_input[fact_name]", template_input_fact_name))
        if template_input_variable_name is not None:
            _form_params.append(
                ("template_input[variable_name]", template_input_variable_name)
            )
        if template_input_options is not None:
            _form_params.append(("template_input[options]", template_input_options))
        if template_input_default is not None:
            _form_params.append(("template_input[default]", template_input_default))
        if template_input_hidden_value is not None:
            _form_params.append(
                ("template_input[hidden_value]", template_input_hidden_value)
            )
        if template_input_value_type is not None:
            _form_params.append(
                ("template_input[value_type]", template_input_value_type)
            )
        if template_input_resource_type is not None:
            _form_params.append(
                ("template_input[resource_type]", template_input_resource_type)
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/templates/{template_id}/template_inputs",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_templates_template_id_template_inputs_id(
        self,
        template_id: StrictStr,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        template_input_name: Annotated[
            Optional[StrictStr], Field(description="Input name")
        ] = None,
        template_input_description: Annotated[
            Optional[StrictStr], Field(description="Input description")
        ] = None,
        template_input_required: Annotated[
            Optional[StrictBool], Field(description="Input is required")
        ] = None,
        template_input_advanced: Annotated[
            Optional[StrictBool], Field(description="Input is advanced")
        ] = None,
        template_input_input_type: Annotated[
            Optional[StrictStr], Field(description="Input type")
        ] = None,
        template_input_fact_name: Annotated[
            Optional[StrictStr],
            Field(description="Fact name, used when input type is Fact value"),
        ] = None,
        template_input_variable_name: Annotated[
            Optional[StrictStr],
            Field(description="Variable name, used when input type is Variable"),
        ] = None,
        template_input_options: Annotated[
            Optional[List[StrictStr]],
            Field(description="Selectable values for user inputs"),
        ] = None,
        template_input_default: Annotated[
            Optional[StrictStr], Field(description="Default value for user input")
        ] = None,
        template_input_hidden_value: Annotated[
            Optional[StrictBool],
            Field(
                description="The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords"
            ),
        ] = None,
        template_input_value_type: Annotated[
            Optional[StrictStr], Field(description="Value type, defaults to plain")
        ] = None,
        template_input_resource_type: Annotated[
            Optional[StrictStr],
            Field(
                description="For values of type search, this is the resource the value searches in"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a template input


        :param template_id: (required)
        :type template_id: str
        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param template_input_name: Input name
        :type template_input_name: str
        :param template_input_description: Input description
        :type template_input_description: str
        :param template_input_required: Input is required
        :type template_input_required: bool
        :param template_input_advanced: Input is advanced
        :type template_input_advanced: bool
        :param template_input_input_type: Input type
        :type template_input_input_type: str
        :param template_input_fact_name: Fact name, used when input type is Fact value
        :type template_input_fact_name: str
        :param template_input_variable_name: Variable name, used when input type is Variable
        :type template_input_variable_name: str
        :param template_input_options: Selectable values for user inputs
        :type template_input_options: List[str]
        :param template_input_default: Default value for user input
        :type template_input_default: str
        :param template_input_hidden_value: The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords
        :type template_input_hidden_value: bool
        :param template_input_value_type: Value type, defaults to plain
        :type template_input_value_type: str
        :param template_input_resource_type: For values of type search, this is the resource the value searches in
        :type template_input_resource_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_templates_template_id_template_inputs_id_serialize(
            template_id=template_id,
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            template_input_name=template_input_name,
            template_input_description=template_input_description,
            template_input_required=template_input_required,
            template_input_advanced=template_input_advanced,
            template_input_input_type=template_input_input_type,
            template_input_fact_name=template_input_fact_name,
            template_input_variable_name=template_input_variable_name,
            template_input_options=template_input_options,
            template_input_default=template_input_default,
            template_input_hidden_value=template_input_hidden_value,
            template_input_value_type=template_input_value_type,
            template_input_resource_type=template_input_resource_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_templates_template_id_template_inputs_id_with_http_info(
        self,
        template_id: StrictStr,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        template_input_name: Annotated[
            Optional[StrictStr], Field(description="Input name")
        ] = None,
        template_input_description: Annotated[
            Optional[StrictStr], Field(description="Input description")
        ] = None,
        template_input_required: Annotated[
            Optional[StrictBool], Field(description="Input is required")
        ] = None,
        template_input_advanced: Annotated[
            Optional[StrictBool], Field(description="Input is advanced")
        ] = None,
        template_input_input_type: Annotated[
            Optional[StrictStr], Field(description="Input type")
        ] = None,
        template_input_fact_name: Annotated[
            Optional[StrictStr],
            Field(description="Fact name, used when input type is Fact value"),
        ] = None,
        template_input_variable_name: Annotated[
            Optional[StrictStr],
            Field(description="Variable name, used when input type is Variable"),
        ] = None,
        template_input_options: Annotated[
            Optional[List[StrictStr]],
            Field(description="Selectable values for user inputs"),
        ] = None,
        template_input_default: Annotated[
            Optional[StrictStr], Field(description="Default value for user input")
        ] = None,
        template_input_hidden_value: Annotated[
            Optional[StrictBool],
            Field(
                description="The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords"
            ),
        ] = None,
        template_input_value_type: Annotated[
            Optional[StrictStr], Field(description="Value type, defaults to plain")
        ] = None,
        template_input_resource_type: Annotated[
            Optional[StrictStr],
            Field(
                description="For values of type search, this is the resource the value searches in"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a template input


        :param template_id: (required)
        :type template_id: str
        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param template_input_name: Input name
        :type template_input_name: str
        :param template_input_description: Input description
        :type template_input_description: str
        :param template_input_required: Input is required
        :type template_input_required: bool
        :param template_input_advanced: Input is advanced
        :type template_input_advanced: bool
        :param template_input_input_type: Input type
        :type template_input_input_type: str
        :param template_input_fact_name: Fact name, used when input type is Fact value
        :type template_input_fact_name: str
        :param template_input_variable_name: Variable name, used when input type is Variable
        :type template_input_variable_name: str
        :param template_input_options: Selectable values for user inputs
        :type template_input_options: List[str]
        :param template_input_default: Default value for user input
        :type template_input_default: str
        :param template_input_hidden_value: The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords
        :type template_input_hidden_value: bool
        :param template_input_value_type: Value type, defaults to plain
        :type template_input_value_type: str
        :param template_input_resource_type: For values of type search, this is the resource the value searches in
        :type template_input_resource_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_templates_template_id_template_inputs_id_serialize(
            template_id=template_id,
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            template_input_name=template_input_name,
            template_input_description=template_input_description,
            template_input_required=template_input_required,
            template_input_advanced=template_input_advanced,
            template_input_input_type=template_input_input_type,
            template_input_fact_name=template_input_fact_name,
            template_input_variable_name=template_input_variable_name,
            template_input_options=template_input_options,
            template_input_default=template_input_default,
            template_input_hidden_value=template_input_hidden_value,
            template_input_value_type=template_input_value_type,
            template_input_resource_type=template_input_resource_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_templates_template_id_template_inputs_id_without_preload_content(
        self,
        template_id: StrictStr,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        template_input_name: Annotated[
            Optional[StrictStr], Field(description="Input name")
        ] = None,
        template_input_description: Annotated[
            Optional[StrictStr], Field(description="Input description")
        ] = None,
        template_input_required: Annotated[
            Optional[StrictBool], Field(description="Input is required")
        ] = None,
        template_input_advanced: Annotated[
            Optional[StrictBool], Field(description="Input is advanced")
        ] = None,
        template_input_input_type: Annotated[
            Optional[StrictStr], Field(description="Input type")
        ] = None,
        template_input_fact_name: Annotated[
            Optional[StrictStr],
            Field(description="Fact name, used when input type is Fact value"),
        ] = None,
        template_input_variable_name: Annotated[
            Optional[StrictStr],
            Field(description="Variable name, used when input type is Variable"),
        ] = None,
        template_input_options: Annotated[
            Optional[List[StrictStr]],
            Field(description="Selectable values for user inputs"),
        ] = None,
        template_input_default: Annotated[
            Optional[StrictStr], Field(description="Default value for user input")
        ] = None,
        template_input_hidden_value: Annotated[
            Optional[StrictBool],
            Field(
                description="The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords"
            ),
        ] = None,
        template_input_value_type: Annotated[
            Optional[StrictStr], Field(description="Value type, defaults to plain")
        ] = None,
        template_input_resource_type: Annotated[
            Optional[StrictStr],
            Field(
                description="For values of type search, this is the resource the value searches in"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a template input


        :param template_id: (required)
        :type template_id: str
        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param template_input_name: Input name
        :type template_input_name: str
        :param template_input_description: Input description
        :type template_input_description: str
        :param template_input_required: Input is required
        :type template_input_required: bool
        :param template_input_advanced: Input is advanced
        :type template_input_advanced: bool
        :param template_input_input_type: Input type
        :type template_input_input_type: str
        :param template_input_fact_name: Fact name, used when input type is Fact value
        :type template_input_fact_name: str
        :param template_input_variable_name: Variable name, used when input type is Variable
        :type template_input_variable_name: str
        :param template_input_options: Selectable values for user inputs
        :type template_input_options: List[str]
        :param template_input_default: Default value for user input
        :type template_input_default: str
        :param template_input_hidden_value: The value contains sensitive information and shouldn not be normally visible, useful e.g. for passwords
        :type template_input_hidden_value: bool
        :param template_input_value_type: Value type, defaults to plain
        :type template_input_value_type: str
        :param template_input_resource_type: For values of type search, this is the resource the value searches in
        :type template_input_resource_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_templates_template_id_template_inputs_id_serialize(
            template_id=template_id,
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            template_input_name=template_input_name,
            template_input_description=template_input_description,
            template_input_required=template_input_required,
            template_input_advanced=template_input_advanced,
            template_input_input_type=template_input_input_type,
            template_input_fact_name=template_input_fact_name,
            template_input_variable_name=template_input_variable_name,
            template_input_options=template_input_options,
            template_input_default=template_input_default,
            template_input_hidden_value=template_input_hidden_value,
            template_input_value_type=template_input_value_type,
            template_input_resource_type=template_input_resource_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_templates_template_id_template_inputs_id_serialize(
        self,
        template_id,
        id,
        location_id,
        organization_id,
        template_input_name,
        template_input_description,
        template_input_required,
        template_input_advanced,
        template_input_input_type,
        template_input_fact_name,
        template_input_variable_name,
        template_input_options,
        template_input_default,
        template_input_hidden_value,
        template_input_value_type,
        template_input_resource_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "template_input[options]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_id is not None:
            _path_params["template_id"] = template_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if template_input_name is not None:
            _form_params.append(("template_input[name]", template_input_name))
        if template_input_description is not None:
            _form_params.append(
                ("template_input[description]", template_input_description)
            )
        if template_input_required is not None:
            _form_params.append(("template_input[required]", template_input_required))
        if template_input_advanced is not None:
            _form_params.append(("template_input[advanced]", template_input_advanced))
        if template_input_input_type is not None:
            _form_params.append(
                ("template_input[input_type]", template_input_input_type)
            )
        if template_input_fact_name is not None:
            _form_params.append(("template_input[fact_name]", template_input_fact_name))
        if template_input_variable_name is not None:
            _form_params.append(
                ("template_input[variable_name]", template_input_variable_name)
            )
        if template_input_options is not None:
            _form_params.append(("template_input[options]", template_input_options))
        if template_input_default is not None:
            _form_params.append(("template_input[default]", template_input_default))
        if template_input_hidden_value is not None:
            _form_params.append(
                ("template_input[hidden_value]", template_input_hidden_value)
            )
        if template_input_value_type is not None:
            _form_params.append(
                ("template_input[value_type]", template_input_value_type)
            )
        if template_input_resource_type is not None:
            _form_params.append(
                ("template_input[resource_type]", template_input_resource_type)
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/templates/{template_id}/template_inputs/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
