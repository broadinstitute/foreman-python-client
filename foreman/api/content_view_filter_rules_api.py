# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class ContentViewFilterRulesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_content_view_filters_content_view_filter_id_rules_id(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="rule identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a filter rule


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param id: rule identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._delete_content_view_filters_content_view_filter_id_rules_id_serialize(
                content_view_filter_id=content_view_filter_id,
                id=id,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_content_view_filters_content_view_filter_id_rules_id_with_http_info(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="rule identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a filter rule


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param id: rule identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._delete_content_view_filters_content_view_filter_id_rules_id_serialize(
                content_view_filter_id=content_view_filter_id,
                id=id,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_content_view_filters_content_view_filter_id_rules_id_without_preload_content(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="rule identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a filter rule


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param id: rule identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._delete_content_view_filters_content_view_filter_id_rules_id_serialize(
                content_view_filter_id=content_view_filter_id,
                id=id,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_content_view_filters_content_view_filter_id_rules_id_serialize(
        self,
        content_view_filter_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_filter_id is not None:
            _path_params["content_view_filter_id"] = content_view_filter_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/content_view_filters/{content_view_filter_id}/rules/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_view_filters_content_view_filter_id_rules(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        name: Annotated[
            Optional[StrictStr],
            Field(description="name of the content view filter rule"),
        ] = None,
        errata_id: Annotated[
            Optional[StrictStr],
            Field(description="errata_id of the content view filter rule"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List filter rules


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param name: name of the content view filter rule
        :type name: str
        :param errata_id: errata_id of the content view filter rule
        :type errata_id: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_content_view_filter_id_rules_serialize(
            content_view_filter_id=content_view_filter_id,
            name=name,
            errata_id=errata_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_view_filters_content_view_filter_id_rules_with_http_info(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        name: Annotated[
            Optional[StrictStr],
            Field(description="name of the content view filter rule"),
        ] = None,
        errata_id: Annotated[
            Optional[StrictStr],
            Field(description="errata_id of the content view filter rule"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List filter rules


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param name: name of the content view filter rule
        :type name: str
        :param errata_id: errata_id of the content view filter rule
        :type errata_id: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_content_view_filter_id_rules_serialize(
            content_view_filter_id=content_view_filter_id,
            name=name,
            errata_id=errata_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_view_filters_content_view_filter_id_rules_without_preload_content(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        name: Annotated[
            Optional[StrictStr],
            Field(description="name of the content view filter rule"),
        ] = None,
        errata_id: Annotated[
            Optional[StrictStr],
            Field(description="errata_id of the content view filter rule"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List filter rules


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param name: name of the content view filter rule
        :type name: str
        :param errata_id: errata_id of the content view filter rule
        :type errata_id: str
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_content_view_filter_id_rules_serialize(
            content_view_filter_id=content_view_filter_id,
            name=name,
            errata_id=errata_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_view_filters_content_view_filter_id_rules_serialize(
        self,
        content_view_filter_id,
        name,
        errata_id,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_filter_id is not None:
            _path_params["content_view_filter_id"] = content_view_filter_id
        # process the query parameters
        if name is not None:
            _query_params.append(("name", name))

        if errata_id is not None:
            _query_params.append(("errata_id", errata_id))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_view_filters/{content_view_filter_id}/rules",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_view_filters_content_view_filter_id_rules_id(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="rule identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show filter rule info


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param id: rule identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._get_content_view_filters_content_view_filter_id_rules_id_serialize(
                content_view_filter_id=content_view_filter_id,
                id=id,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_view_filters_content_view_filter_id_rules_id_with_http_info(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="rule identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show filter rule info


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param id: rule identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._get_content_view_filters_content_view_filter_id_rules_id_serialize(
                content_view_filter_id=content_view_filter_id,
                id=id,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_view_filters_content_view_filter_id_rules_id_without_preload_content(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="rule identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show filter rule info


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param id: rule identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._get_content_view_filters_content_view_filter_id_rules_id_serialize(
                content_view_filter_id=content_view_filter_id,
                id=id,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_view_filters_content_view_filter_id_rules_id_serialize(
        self,
        content_view_filter_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_filter_id is not None:
            _path_params["content_view_filter_id"] = content_view_filter_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_view_filters/{content_view_filter_id}/rules/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_content_view_filters_content_view_filter_id_rules(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        name: Annotated[
            Optional[List[StrictStr]],
            Field(description="deb, package, package group, or docker tag names"),
        ] = None,
        uuid: Annotated[
            Optional[StrictStr], Field(description="package group: uuid")
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="package: version")
        ] = None,
        architecture: Annotated[
            Optional[StrictStr], Field(description="package: architecture")
        ] = None,
        min_version: Annotated[
            Optional[StrictStr], Field(description="package: minimum version")
        ] = None,
        max_version: Annotated[
            Optional[StrictStr], Field(description="package: maximum version")
        ] = None,
        errata_id: Annotated[
            Optional[StrictStr], Field(description="erratum: id")
        ] = None,
        errata_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="erratum: IDs or a select all object"),
        ] = None,
        start_date: Annotated[
            Optional[StrictStr], Field(description="erratum: start date (YYYY-MM-DD)")
        ] = None,
        end_date: Annotated[
            Optional[StrictStr], Field(description="erratum: end date (YYYY-MM-DD)")
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]],
            Field(description="erratum: types (enhancement, bugfix, security)"),
        ] = None,
        date_type: Annotated[
            Optional[StrictStr],
            Field(
                description="erratum: search using the 'Issued On' or 'Updated On' column of the errata. Values are 'issued'/'updated'"
            ),
        ] = None,
        module_stream_ids: Annotated[
            Optional[List[StrictStr]], Field(description="module stream ids")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a filter rule. The parameters included should be based upon the filter type.


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param name: deb, package, package group, or docker tag names
        :type name: List[str]
        :param uuid: package group: uuid
        :type uuid: str
        :param version: package: version
        :type version: str
        :param architecture: package: architecture
        :type architecture: str
        :param min_version: package: minimum version
        :type min_version: str
        :param max_version: package: maximum version
        :type max_version: str
        :param errata_id: erratum: id
        :type errata_id: str
        :param errata_ids: erratum: IDs or a select all object
        :type errata_ids: List[str]
        :param start_date: erratum: start date (YYYY-MM-DD)
        :type start_date: str
        :param end_date: erratum: end date (YYYY-MM-DD)
        :type end_date: str
        :param types: erratum: types (enhancement, bugfix, security)
        :type types: List[str]
        :param date_type: erratum: search using the 'Issued On' or 'Updated On' column of the errata. Values are 'issued'/'updated'
        :type date_type: str
        :param module_stream_ids: module stream ids
        :type module_stream_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_filters_content_view_filter_id_rules_serialize(
            content_view_filter_id=content_view_filter_id,
            name=name,
            uuid=uuid,
            version=version,
            architecture=architecture,
            min_version=min_version,
            max_version=max_version,
            errata_id=errata_id,
            errata_ids=errata_ids,
            start_date=start_date,
            end_date=end_date,
            types=types,
            date_type=date_type,
            module_stream_ids=module_stream_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_content_view_filters_content_view_filter_id_rules_with_http_info(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        name: Annotated[
            Optional[List[StrictStr]],
            Field(description="deb, package, package group, or docker tag names"),
        ] = None,
        uuid: Annotated[
            Optional[StrictStr], Field(description="package group: uuid")
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="package: version")
        ] = None,
        architecture: Annotated[
            Optional[StrictStr], Field(description="package: architecture")
        ] = None,
        min_version: Annotated[
            Optional[StrictStr], Field(description="package: minimum version")
        ] = None,
        max_version: Annotated[
            Optional[StrictStr], Field(description="package: maximum version")
        ] = None,
        errata_id: Annotated[
            Optional[StrictStr], Field(description="erratum: id")
        ] = None,
        errata_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="erratum: IDs or a select all object"),
        ] = None,
        start_date: Annotated[
            Optional[StrictStr], Field(description="erratum: start date (YYYY-MM-DD)")
        ] = None,
        end_date: Annotated[
            Optional[StrictStr], Field(description="erratum: end date (YYYY-MM-DD)")
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]],
            Field(description="erratum: types (enhancement, bugfix, security)"),
        ] = None,
        date_type: Annotated[
            Optional[StrictStr],
            Field(
                description="erratum: search using the 'Issued On' or 'Updated On' column of the errata. Values are 'issued'/'updated'"
            ),
        ] = None,
        module_stream_ids: Annotated[
            Optional[List[StrictStr]], Field(description="module stream ids")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a filter rule. The parameters included should be based upon the filter type.


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param name: deb, package, package group, or docker tag names
        :type name: List[str]
        :param uuid: package group: uuid
        :type uuid: str
        :param version: package: version
        :type version: str
        :param architecture: package: architecture
        :type architecture: str
        :param min_version: package: minimum version
        :type min_version: str
        :param max_version: package: maximum version
        :type max_version: str
        :param errata_id: erratum: id
        :type errata_id: str
        :param errata_ids: erratum: IDs or a select all object
        :type errata_ids: List[str]
        :param start_date: erratum: start date (YYYY-MM-DD)
        :type start_date: str
        :param end_date: erratum: end date (YYYY-MM-DD)
        :type end_date: str
        :param types: erratum: types (enhancement, bugfix, security)
        :type types: List[str]
        :param date_type: erratum: search using the 'Issued On' or 'Updated On' column of the errata. Values are 'issued'/'updated'
        :type date_type: str
        :param module_stream_ids: module stream ids
        :type module_stream_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_filters_content_view_filter_id_rules_serialize(
            content_view_filter_id=content_view_filter_id,
            name=name,
            uuid=uuid,
            version=version,
            architecture=architecture,
            min_version=min_version,
            max_version=max_version,
            errata_id=errata_id,
            errata_ids=errata_ids,
            start_date=start_date,
            end_date=end_date,
            types=types,
            date_type=date_type,
            module_stream_ids=module_stream_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_content_view_filters_content_view_filter_id_rules_without_preload_content(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        name: Annotated[
            Optional[List[StrictStr]],
            Field(description="deb, package, package group, or docker tag names"),
        ] = None,
        uuid: Annotated[
            Optional[StrictStr], Field(description="package group: uuid")
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="package: version")
        ] = None,
        architecture: Annotated[
            Optional[StrictStr], Field(description="package: architecture")
        ] = None,
        min_version: Annotated[
            Optional[StrictStr], Field(description="package: minimum version")
        ] = None,
        max_version: Annotated[
            Optional[StrictStr], Field(description="package: maximum version")
        ] = None,
        errata_id: Annotated[
            Optional[StrictStr], Field(description="erratum: id")
        ] = None,
        errata_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="erratum: IDs or a select all object"),
        ] = None,
        start_date: Annotated[
            Optional[StrictStr], Field(description="erratum: start date (YYYY-MM-DD)")
        ] = None,
        end_date: Annotated[
            Optional[StrictStr], Field(description="erratum: end date (YYYY-MM-DD)")
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]],
            Field(description="erratum: types (enhancement, bugfix, security)"),
        ] = None,
        date_type: Annotated[
            Optional[StrictStr],
            Field(
                description="erratum: search using the 'Issued On' or 'Updated On' column of the errata. Values are 'issued'/'updated'"
            ),
        ] = None,
        module_stream_ids: Annotated[
            Optional[List[StrictStr]], Field(description="module stream ids")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a filter rule. The parameters included should be based upon the filter type.


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param name: deb, package, package group, or docker tag names
        :type name: List[str]
        :param uuid: package group: uuid
        :type uuid: str
        :param version: package: version
        :type version: str
        :param architecture: package: architecture
        :type architecture: str
        :param min_version: package: minimum version
        :type min_version: str
        :param max_version: package: maximum version
        :type max_version: str
        :param errata_id: erratum: id
        :type errata_id: str
        :param errata_ids: erratum: IDs or a select all object
        :type errata_ids: List[str]
        :param start_date: erratum: start date (YYYY-MM-DD)
        :type start_date: str
        :param end_date: erratum: end date (YYYY-MM-DD)
        :type end_date: str
        :param types: erratum: types (enhancement, bugfix, security)
        :type types: List[str]
        :param date_type: erratum: search using the 'Issued On' or 'Updated On' column of the errata. Values are 'issued'/'updated'
        :type date_type: str
        :param module_stream_ids: module stream ids
        :type module_stream_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_filters_content_view_filter_id_rules_serialize(
            content_view_filter_id=content_view_filter_id,
            name=name,
            uuid=uuid,
            version=version,
            architecture=architecture,
            min_version=min_version,
            max_version=max_version,
            errata_id=errata_id,
            errata_ids=errata_ids,
            start_date=start_date,
            end_date=end_date,
            types=types,
            date_type=date_type,
            module_stream_ids=module_stream_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_content_view_filters_content_view_filter_id_rules_serialize(
        self,
        content_view_filter_id,
        name,
        uuid,
        version,
        architecture,
        min_version,
        max_version,
        errata_id,
        errata_ids,
        start_date,
        end_date,
        types,
        date_type,
        module_stream_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "name": "csv",
            "errata_ids": "csv",
            "types": "csv",
            "module_stream_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_filter_id is not None:
            _path_params["content_view_filter_id"] = content_view_filter_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(("name", name))
        if uuid is not None:
            _form_params.append(("uuid", uuid))
        if version is not None:
            _form_params.append(("version", version))
        if architecture is not None:
            _form_params.append(("architecture", architecture))
        if min_version is not None:
            _form_params.append(("min_version", min_version))
        if max_version is not None:
            _form_params.append(("max_version", max_version))
        if errata_id is not None:
            _form_params.append(("errata_id", errata_id))
        if errata_ids is not None:
            _form_params.append(("errata_ids", errata_ids))
        if start_date is not None:
            _form_params.append(("start_date", start_date))
        if end_date is not None:
            _form_params.append(("end_date", end_date))
        if types is not None:
            _form_params.append(("types", types))
        if date_type is not None:
            _form_params.append(("date_type", date_type))
        if module_stream_ids is not None:
            _form_params.append(("module_stream_ids", module_stream_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/content_view_filters/{content_view_filter_id}/rules",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_view_filters_content_view_filter_id_rules_id(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="rule identifier")
        ],
        name: Annotated[
            Optional[StrictStr],
            Field(description="package, package group, or docker tag: name"),
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="package: version")
        ] = None,
        architecture: Annotated[
            Optional[StrictStr], Field(description="package: architecture")
        ] = None,
        min_version: Annotated[
            Optional[StrictStr], Field(description="package: minimum version")
        ] = None,
        max_version: Annotated[
            Optional[StrictStr], Field(description="package: maximum version")
        ] = None,
        errata_id: Annotated[
            Optional[StrictStr], Field(description="erratum: id")
        ] = None,
        start_date: Annotated[
            Optional[StrictStr], Field(description="erratum: start date (YYYY-MM-DD)")
        ] = None,
        end_date: Annotated[
            Optional[StrictStr], Field(description="erratum: end date (YYYY-MM-DD)")
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]],
            Field(description="erratum: types (enhancement, bugfix, security)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a filter rule. The parameters included should be based upon the filter type.


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param id: rule identifier (required)
        :type id: float
        :param name: package, package group, or docker tag: name
        :type name: str
        :param version: package: version
        :type version: str
        :param architecture: package: architecture
        :type architecture: str
        :param min_version: package: minimum version
        :type min_version: str
        :param max_version: package: maximum version
        :type max_version: str
        :param errata_id: erratum: id
        :type errata_id: str
        :param start_date: erratum: start date (YYYY-MM-DD)
        :type start_date: str
        :param end_date: erratum: end date (YYYY-MM-DD)
        :type end_date: str
        :param types: erratum: types (enhancement, bugfix, security)
        :type types: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._put_content_view_filters_content_view_filter_id_rules_id_serialize(
                content_view_filter_id=content_view_filter_id,
                id=id,
                name=name,
                version=version,
                architecture=architecture,
                min_version=min_version,
                max_version=max_version,
                errata_id=errata_id,
                start_date=start_date,
                end_date=end_date,
                types=types,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_view_filters_content_view_filter_id_rules_id_with_http_info(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="rule identifier")
        ],
        name: Annotated[
            Optional[StrictStr],
            Field(description="package, package group, or docker tag: name"),
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="package: version")
        ] = None,
        architecture: Annotated[
            Optional[StrictStr], Field(description="package: architecture")
        ] = None,
        min_version: Annotated[
            Optional[StrictStr], Field(description="package: minimum version")
        ] = None,
        max_version: Annotated[
            Optional[StrictStr], Field(description="package: maximum version")
        ] = None,
        errata_id: Annotated[
            Optional[StrictStr], Field(description="erratum: id")
        ] = None,
        start_date: Annotated[
            Optional[StrictStr], Field(description="erratum: start date (YYYY-MM-DD)")
        ] = None,
        end_date: Annotated[
            Optional[StrictStr], Field(description="erratum: end date (YYYY-MM-DD)")
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]],
            Field(description="erratum: types (enhancement, bugfix, security)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a filter rule. The parameters included should be based upon the filter type.


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param id: rule identifier (required)
        :type id: float
        :param name: package, package group, or docker tag: name
        :type name: str
        :param version: package: version
        :type version: str
        :param architecture: package: architecture
        :type architecture: str
        :param min_version: package: minimum version
        :type min_version: str
        :param max_version: package: maximum version
        :type max_version: str
        :param errata_id: erratum: id
        :type errata_id: str
        :param start_date: erratum: start date (YYYY-MM-DD)
        :type start_date: str
        :param end_date: erratum: end date (YYYY-MM-DD)
        :type end_date: str
        :param types: erratum: types (enhancement, bugfix, security)
        :type types: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._put_content_view_filters_content_view_filter_id_rules_id_serialize(
                content_view_filter_id=content_view_filter_id,
                id=id,
                name=name,
                version=version,
                architecture=architecture,
                min_version=min_version,
                max_version=max_version,
                errata_id=errata_id,
                start_date=start_date,
                end_date=end_date,
                types=types,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_view_filters_content_view_filter_id_rules_id_without_preload_content(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="rule identifier")
        ],
        name: Annotated[
            Optional[StrictStr],
            Field(description="package, package group, or docker tag: name"),
        ] = None,
        version: Annotated[
            Optional[StrictStr], Field(description="package: version")
        ] = None,
        architecture: Annotated[
            Optional[StrictStr], Field(description="package: architecture")
        ] = None,
        min_version: Annotated[
            Optional[StrictStr], Field(description="package: minimum version")
        ] = None,
        max_version: Annotated[
            Optional[StrictStr], Field(description="package: maximum version")
        ] = None,
        errata_id: Annotated[
            Optional[StrictStr], Field(description="erratum: id")
        ] = None,
        start_date: Annotated[
            Optional[StrictStr], Field(description="erratum: start date (YYYY-MM-DD)")
        ] = None,
        end_date: Annotated[
            Optional[StrictStr], Field(description="erratum: end date (YYYY-MM-DD)")
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]],
            Field(description="erratum: types (enhancement, bugfix, security)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a filter rule. The parameters included should be based upon the filter type.


        :param content_view_filter_id: filter identifier (required)
        :type content_view_filter_id: float
        :param id: rule identifier (required)
        :type id: float
        :param name: package, package group, or docker tag: name
        :type name: str
        :param version: package: version
        :type version: str
        :param architecture: package: architecture
        :type architecture: str
        :param min_version: package: minimum version
        :type min_version: str
        :param max_version: package: maximum version
        :type max_version: str
        :param errata_id: erratum: id
        :type errata_id: str
        :param start_date: erratum: start date (YYYY-MM-DD)
        :type start_date: str
        :param end_date: erratum: end date (YYYY-MM-DD)
        :type end_date: str
        :param types: erratum: types (enhancement, bugfix, security)
        :type types: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._put_content_view_filters_content_view_filter_id_rules_id_serialize(
                content_view_filter_id=content_view_filter_id,
                id=id,
                name=name,
                version=version,
                architecture=architecture,
                min_version=min_version,
                max_version=max_version,
                errata_id=errata_id,
                start_date=start_date,
                end_date=end_date,
                types=types,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_view_filters_content_view_filter_id_rules_id_serialize(
        self,
        content_view_filter_id,
        id,
        name,
        version,
        architecture,
        min_version,
        max_version,
        errata_id,
        start_date,
        end_date,
        types,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "types": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_filter_id is not None:
            _path_params["content_view_filter_id"] = content_view_filter_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(("name", name))
        if version is not None:
            _form_params.append(("version", version))
        if architecture is not None:
            _form_params.append(("architecture", architecture))
        if min_version is not None:
            _form_params.append(("min_version", min_version))
        if max_version is not None:
            _form_params.append(("max_version", max_version))
        if errata_id is not None:
            _form_params.append(("errata_id", errata_id))
        if start_date is not None:
            _form_params.append(("start_date", start_date))
        if end_date is not None:
            _form_params.append(("end_date", end_date))
        if types is not None:
            _form_params.append(("types", types))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_view_filters/{content_view_filter_id}/rules/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
