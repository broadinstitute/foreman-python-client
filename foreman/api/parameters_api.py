# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr, field_validator

from typing import Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class ParametersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_domains_domain_id_parameters(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete all nested parameters for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_domains_domain_id_parameters_serialize(
            domain_id=domain_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_domains_domain_id_parameters_with_http_info(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete all nested parameters for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_domains_domain_id_parameters_serialize(
            domain_id=domain_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_domains_domain_id_parameters_without_preload_content(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete all nested parameters for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_domains_domain_id_parameters_serialize(
            domain_id=domain_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_domains_domain_id_parameters_serialize(
        self,
        domain_id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params["domain_id"] = domain_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/domains/{domain_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_domains_domain_id_parameters_id(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_domains_domain_id_parameters_id_serialize(
            domain_id=domain_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_domains_domain_id_parameters_id_with_http_info(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_domains_domain_id_parameters_id_serialize(
            domain_id=domain_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_domains_domain_id_parameters_id_without_preload_content(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_domains_domain_id_parameters_id_serialize(
            domain_id=domain_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_domains_domain_id_parameters_id_serialize(
        self,
        domain_id,
        id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params["domain_id"] = domain_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/domains/{domain_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_hostgroups_hostgroup_id_parameters(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete all nested parameters for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hostgroups_hostgroup_id_parameters_serialize(
            hostgroup_id=hostgroup_id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_hostgroups_hostgroup_id_parameters_with_http_info(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete all nested parameters for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hostgroups_hostgroup_id_parameters_serialize(
            hostgroup_id=hostgroup_id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_hostgroups_hostgroup_id_parameters_without_preload_content(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete all nested parameters for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hostgroups_hostgroup_id_parameters_serialize(
            hostgroup_id=hostgroup_id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_hostgroups_hostgroup_id_parameters_serialize(
        self,
        hostgroup_id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hostgroup_id is not None:
            _path_params["hostgroup_id"] = hostgroup_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/hostgroups/{hostgroup_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_hostgroups_hostgroup_id_parameters_id(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hostgroups_hostgroup_id_parameters_id_serialize(
            hostgroup_id=hostgroup_id,
            id=id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_hostgroups_hostgroup_id_parameters_id_with_http_info(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hostgroups_hostgroup_id_parameters_id_serialize(
            hostgroup_id=hostgroup_id,
            id=id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_hostgroups_hostgroup_id_parameters_id_without_preload_content(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hostgroups_hostgroup_id_parameters_id_serialize(
            hostgroup_id=hostgroup_id,
            id=id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_hostgroups_hostgroup_id_parameters_id_serialize(
        self,
        hostgroup_id,
        id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hostgroup_id is not None:
            _path_params["hostgroup_id"] = hostgroup_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/hostgroups/{hostgroup_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_hosts_host_id_parameters(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete all nested parameters for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_host_id_parameters_serialize(
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_hosts_host_id_parameters_with_http_info(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete all nested parameters for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_host_id_parameters_serialize(
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_hosts_host_id_parameters_without_preload_content(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete all nested parameters for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_host_id_parameters_serialize(
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_hosts_host_id_parameters_serialize(
        self,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if host_id is not None:
            _path_params["host_id"] = host_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/hosts/{host_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_hosts_host_id_parameters_id(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_host_id_parameters_id_serialize(
            host_id=host_id,
            id=id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_hosts_host_id_parameters_id_with_http_info(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_host_id_parameters_id_serialize(
            host_id=host_id,
            id=id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_hosts_host_id_parameters_id_without_preload_content(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_host_id_parameters_id_serialize(
            host_id=host_id,
            id=id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_hosts_host_id_parameters_id_serialize(
        self,
        host_id,
        id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if host_id is not None:
            _path_params["host_id"] = host_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/hosts/{host_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_locations_location_id_parameters(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete all nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_locations_location_id_parameters_serialize(
            location_id=location_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_locations_location_id_parameters_with_http_info(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete all nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_locations_location_id_parameters_serialize(
            location_id=location_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_locations_location_id_parameters_without_preload_content(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete all nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_locations_location_id_parameters_serialize(
            location_id=location_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_locations_location_id_parameters_serialize(
        self,
        location_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_id is not None:
            _path_params["location_id"] = location_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/locations/{location_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_locations_location_id_parameters_id(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_locations_location_id_parameters_id_serialize(
            location_id=location_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_locations_location_id_parameters_id_with_http_info(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_locations_location_id_parameters_id_serialize(
            location_id=location_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_locations_location_id_parameters_id_without_preload_content(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_locations_location_id_parameters_id_serialize(
            location_id=location_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_locations_location_id_parameters_id_serialize(
        self,
        location_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_id is not None:
            _path_params["location_id"] = location_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/locations/{location_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_operatingsystems_operatingsystem_id_parameters(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete all nested parameters for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_operatingsystems_operatingsystem_id_parameters_serialize(
            operatingsystem_id=operatingsystem_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_operatingsystems_operatingsystem_id_parameters_with_http_info(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete all nested parameters for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_operatingsystems_operatingsystem_id_parameters_serialize(
            operatingsystem_id=operatingsystem_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_operatingsystems_operatingsystem_id_parameters_without_preload_content(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete all nested parameters for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_operatingsystems_operatingsystem_id_parameters_serialize(
            operatingsystem_id=operatingsystem_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_operatingsystems_operatingsystem_id_parameters_serialize(
        self,
        operatingsystem_id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if operatingsystem_id is not None:
            _path_params["operatingsystem_id"] = operatingsystem_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/operatingsystems/{operatingsystem_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_operatingsystems_operatingsystem_id_parameters_id(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._delete_operatingsystems_operatingsystem_id_parameters_id_serialize(
                operatingsystem_id=operatingsystem_id,
                id=id,
                host_id=host_id,
                hostgroup_id=hostgroup_id,
                domain_id=domain_id,
                location_id=location_id,
                organization_id=organization_id,
                subnet_id=subnet_id,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._delete_operatingsystems_operatingsystem_id_parameters_id_serialize(
                operatingsystem_id=operatingsystem_id,
                id=id,
                host_id=host_id,
                hostgroup_id=hostgroup_id,
                domain_id=domain_id,
                location_id=location_id,
                organization_id=organization_id,
                subnet_id=subnet_id,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_operatingsystems_operatingsystem_id_parameters_id_without_preload_content(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._delete_operatingsystems_operatingsystem_id_parameters_id_serialize(
                operatingsystem_id=operatingsystem_id,
                id=id,
                host_id=host_id,
                hostgroup_id=hostgroup_id,
                domain_id=domain_id,
                location_id=location_id,
                organization_id=organization_id,
                subnet_id=subnet_id,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_operatingsystems_operatingsystem_id_parameters_id_serialize(
        self,
        operatingsystem_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if operatingsystem_id is not None:
            _path_params["operatingsystem_id"] = operatingsystem_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/operatingsystems/{operatingsystem_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_organizations_organization_id_parameters(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete all nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_organizations_organization_id_parameters_serialize(
            organization_id=organization_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_organizations_organization_id_parameters_with_http_info(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete all nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_organizations_organization_id_parameters_serialize(
            organization_id=organization_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_organizations_organization_id_parameters_without_preload_content(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete all nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_organizations_organization_id_parameters_serialize(
            organization_id=organization_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_organizations_organization_id_parameters_serialize(
        self,
        organization_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/organizations/{organization_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_organizations_organization_id_parameters_id(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_organizations_organization_id_parameters_id_serialize(
            organization_id=organization_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_organizations_organization_id_parameters_id_with_http_info(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_organizations_organization_id_parameters_id_serialize(
            organization_id=organization_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_organizations_organization_id_parameters_id_without_preload_content(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_organizations_organization_id_parameters_id_serialize(
            organization_id=organization_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_organizations_organization_id_parameters_id_serialize(
        self,
        organization_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/organizations/{organization_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_subnets_subnet_id_parameters(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete all nested parameters for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_subnets_subnet_id_parameters_serialize(
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_subnets_subnet_id_parameters_with_http_info(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete all nested parameters for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_subnets_subnet_id_parameters_serialize(
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_subnets_subnet_id_parameters_without_preload_content(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete all nested parameters for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_subnets_subnet_id_parameters_serialize(
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_subnets_subnet_id_parameters_serialize(
        self,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subnet_id is not None:
            _path_params["subnet_id"] = subnet_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/subnets/{subnet_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_subnets_subnet_id_parameters_id(
        self,
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a nested parameter for a subnet


        :param id: ID of parameter (required)
        :type id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_subnets_subnet_id_parameters_id_serialize(
            id=id,
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_subnets_subnet_id_parameters_id_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a nested parameter for a subnet


        :param id: ID of parameter (required)
        :type id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_subnets_subnet_id_parameters_id_serialize(
            id=id,
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_subnets_subnet_id_parameters_id_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a nested parameter for a subnet


        :param id: ID of parameter (required)
        :type id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_subnets_subnet_id_parameters_id_serialize(
            id=id,
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_subnets_subnet_id_parameters_id_serialize(
        self,
        id,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if subnet_id is not None:
            _path_params["subnet_id"] = subnet_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/subnets/{subnet_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_domains_domain_id_parameters(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all parameters for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_domains_domain_id_parameters_serialize(
            domain_id=domain_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_domains_domain_id_parameters_with_http_info(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all parameters for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_domains_domain_id_parameters_serialize(
            domain_id=domain_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_domains_domain_id_parameters_without_preload_content(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all parameters for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_domains_domain_id_parameters_serialize(
            domain_id=domain_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_domains_domain_id_parameters_serialize(
        self,
        domain_id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        show_hidden,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params["domain_id"] = domain_id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/domains/{domain_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_domains_domain_id_parameters_id(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_domains_domain_id_parameters_id_serialize(
            domain_id=domain_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_domains_domain_id_parameters_id_with_http_info(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_domains_domain_id_parameters_id_serialize(
            domain_id=domain_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_domains_domain_id_parameters_id_without_preload_content(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_domains_domain_id_parameters_id_serialize(
            domain_id=domain_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_domains_domain_id_parameters_id_serialize(
        self,
        domain_id,
        id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        show_hidden,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params["domain_id"] = domain_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/domains/{domain_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hostgroups_hostgroup_id_parameters(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all parameters for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_hostgroup_id_parameters_serialize(
            hostgroup_id=hostgroup_id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hostgroups_hostgroup_id_parameters_with_http_info(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all parameters for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_hostgroup_id_parameters_serialize(
            hostgroup_id=hostgroup_id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hostgroups_hostgroup_id_parameters_without_preload_content(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all parameters for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_hostgroup_id_parameters_serialize(
            hostgroup_id=hostgroup_id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hostgroups_hostgroup_id_parameters_serialize(
        self,
        hostgroup_id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        show_hidden,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hostgroup_id is not None:
            _path_params["hostgroup_id"] = hostgroup_id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hostgroups/{hostgroup_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hostgroups_hostgroup_id_parameters_id(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_hostgroup_id_parameters_id_serialize(
            hostgroup_id=hostgroup_id,
            id=id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hostgroups_hostgroup_id_parameters_id_with_http_info(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_hostgroup_id_parameters_id_serialize(
            hostgroup_id=hostgroup_id,
            id=id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hostgroups_hostgroup_id_parameters_id_without_preload_content(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_hostgroup_id_parameters_id_serialize(
            hostgroup_id=hostgroup_id,
            id=id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hostgroups_hostgroup_id_parameters_id_serialize(
        self,
        hostgroup_id,
        id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        show_hidden,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hostgroup_id is not None:
            _path_params["hostgroup_id"] = hostgroup_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hostgroups/{hostgroup_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hosts_host_id_parameters(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all parameters for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_host_id_parameters_serialize(
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hosts_host_id_parameters_with_http_info(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all parameters for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_host_id_parameters_serialize(
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hosts_host_id_parameters_without_preload_content(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all parameters for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_host_id_parameters_serialize(
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hosts_host_id_parameters_serialize(
        self,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        show_hidden,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if host_id is not None:
            _path_params["host_id"] = host_id
        # process the query parameters
        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hosts/{host_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hosts_host_id_parameters_id(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_host_id_parameters_id_serialize(
            host_id=host_id,
            id=id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hosts_host_id_parameters_id_with_http_info(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_host_id_parameters_id_serialize(
            host_id=host_id,
            id=id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hosts_host_id_parameters_id_without_preload_content(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_host_id_parameters_id_serialize(
            host_id=host_id,
            id=id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hosts_host_id_parameters_id_serialize(
        self,
        host_id,
        id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        show_hidden,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if host_id is not None:
            _path_params["host_id"] = host_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hosts/{host_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_locations_location_id_parameters(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all parameters for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_parameters_serialize(
            location_id=location_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_locations_location_id_parameters_with_http_info(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all parameters for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_parameters_serialize(
            location_id=location_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_locations_location_id_parameters_without_preload_content(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all parameters for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_parameters_serialize(
            location_id=location_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_locations_location_id_parameters_serialize(
        self,
        location_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        show_hidden,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_id is not None:
            _path_params["location_id"] = location_id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/locations/{location_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_locations_location_id_parameters_id(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_parameters_id_serialize(
            location_id=location_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_locations_location_id_parameters_id_with_http_info(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_parameters_id_serialize(
            location_id=location_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_locations_location_id_parameters_id_without_preload_content(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_parameters_id_serialize(
            location_id=location_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_locations_location_id_parameters_id_serialize(
        self,
        location_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        show_hidden,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_id is not None:
            _path_params["location_id"] = location_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/locations/{location_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_operatingsystems_operatingsystem_id_parameters(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all parameters for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_operatingsystem_id_parameters_serialize(
            operatingsystem_id=operatingsystem_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_operatingsystems_operatingsystem_id_parameters_with_http_info(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all parameters for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_operatingsystem_id_parameters_serialize(
            operatingsystem_id=operatingsystem_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_operatingsystems_operatingsystem_id_parameters_without_preload_content(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all parameters for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_operatingsystem_id_parameters_serialize(
            operatingsystem_id=operatingsystem_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_operatingsystems_operatingsystem_id_parameters_serialize(
        self,
        operatingsystem_id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        show_hidden,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if operatingsystem_id is not None:
            _path_params["operatingsystem_id"] = operatingsystem_id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/operatingsystems/{operatingsystem_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_operatingsystems_operatingsystem_id_parameters_id(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_operatingsystem_id_parameters_id_serialize(
            operatingsystem_id=operatingsystem_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_operatingsystem_id_parameters_id_serialize(
            operatingsystem_id=operatingsystem_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_operatingsystems_operatingsystem_id_parameters_id_without_preload_content(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_operatingsystem_id_parameters_id_serialize(
            operatingsystem_id=operatingsystem_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_operatingsystems_operatingsystem_id_parameters_id_serialize(
        self,
        operatingsystem_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        show_hidden,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if operatingsystem_id is not None:
            _path_params["operatingsystem_id"] = operatingsystem_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/operatingsystems/{operatingsystem_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations_organization_id_parameters(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all parameters for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_parameters_serialize(
            organization_id=organization_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_organization_id_parameters_with_http_info(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all parameters for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_parameters_serialize(
            organization_id=organization_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_organization_id_parameters_without_preload_content(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all parameters for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_parameters_serialize(
            organization_id=organization_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_organization_id_parameters_serialize(
        self,
        organization_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        show_hidden,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations/{organization_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations_organization_id_parameters_id(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_parameters_id_serialize(
            organization_id=organization_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_organization_id_parameters_id_with_http_info(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_parameters_id_serialize(
            organization_id=organization_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_organization_id_parameters_id_without_preload_content(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_parameters_id_serialize(
            organization_id=organization_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_organization_id_parameters_id_serialize(
        self,
        organization_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        show_hidden,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if subnet_id is not None:
            _query_params.append(("subnet_id", subnet_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations/{organization_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_subnets_subnet_id_parameters(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all parameters for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_subnet_id_parameters_serialize(
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_subnets_subnet_id_parameters_with_http_info(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all parameters for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_subnet_id_parameters_serialize(
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_subnets_subnet_id_parameters_without_preload_content(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all parameters for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_subnet_id_parameters_serialize(
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden=show_hidden,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_subnets_subnet_id_parameters_serialize(
        self,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        show_hidden,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subnet_id is not None:
            _path_params["subnet_id"] = subnet_id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/subnets/{subnet_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_subnets_subnet_id_parameters_id(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a nested parameter for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_subnet_id_parameters_id_serialize(
            subnet_id=subnet_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_subnets_subnet_id_parameters_id_with_http_info(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a nested parameter for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_subnet_id_parameters_id_serialize(
            subnet_id=subnet_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_subnets_subnet_id_parameters_id_without_preload_content(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        show_hidden: Annotated[
            Optional[StrictBool], Field(description="Display hidden values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a nested parameter for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param show_hidden: Display hidden values
        :type show_hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_subnets_subnet_id_parameters_id_serialize(
            subnet_id=subnet_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden=show_hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_subnets_subnet_id_parameters_id_serialize(
        self,
        subnet_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        show_hidden,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subnet_id is not None:
            _path_params["subnet_id"] = subnet_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if host_id is not None:
            _query_params.append(("host_id", host_id))

        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if domain_id is not None:
            _query_params.append(("domain_id", domain_id))

        if operatingsystem_id is not None:
            _query_params.append(("operatingsystem_id", operatingsystem_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if show_hidden is not None:
            _query_params.append(("show_hidden", show_hidden))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/subnets/{subnet_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_domains_domain_id_parameters(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_domains_domain_id_parameters_serialize(
            domain_id=domain_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_domains_domain_id_parameters_with_http_info(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_domains_domain_id_parameters_serialize(
            domain_id=domain_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_domains_domain_id_parameters_without_preload_content(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_domains_domain_id_parameters_serialize(
            domain_id=domain_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_domains_domain_id_parameters_serialize(
        self,
        domain_id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params["domain_id"] = domain_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/domains/{domain_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_hostgroups_hostgroup_id_parameters(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hostgroups_hostgroup_id_parameters_serialize(
            hostgroup_id=hostgroup_id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_hostgroups_hostgroup_id_parameters_with_http_info(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hostgroups_hostgroup_id_parameters_serialize(
            hostgroup_id=hostgroup_id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_hostgroups_hostgroup_id_parameters_without_preload_content(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hostgroups_hostgroup_id_parameters_serialize(
            hostgroup_id=hostgroup_id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_hostgroups_hostgroup_id_parameters_serialize(
        self,
        hostgroup_id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hostgroup_id is not None:
            _path_params["hostgroup_id"] = hostgroup_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/hostgroups/{hostgroup_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_hosts_host_id_parameters(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_host_id_parameters_serialize(
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_hosts_host_id_parameters_with_http_info(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_host_id_parameters_serialize(
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_hosts_host_id_parameters_without_preload_content(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_host_id_parameters_serialize(
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_hosts_host_id_parameters_serialize(
        self,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if host_id is not None:
            _path_params["host_id"] = host_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/hosts/{host_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_locations_location_id_parameters(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_locations_location_id_parameters_serialize(
            location_id=location_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_locations_location_id_parameters_with_http_info(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_locations_location_id_parameters_serialize(
            location_id=location_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_locations_location_id_parameters_without_preload_content(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_locations_location_id_parameters_serialize(
            location_id=location_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_locations_location_id_parameters_serialize(
        self,
        location_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_id is not None:
            _path_params["location_id"] = location_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/locations/{location_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_operatingsystems_operatingsystem_id_parameters(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_operatingsystems_operatingsystem_id_parameters_serialize(
            operatingsystem_id=operatingsystem_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_operatingsystems_operatingsystem_id_parameters_with_http_info(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_operatingsystems_operatingsystem_id_parameters_serialize(
            operatingsystem_id=operatingsystem_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_operatingsystems_operatingsystem_id_parameters_without_preload_content(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_operatingsystems_operatingsystem_id_parameters_serialize(
            operatingsystem_id=operatingsystem_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_operatingsystems_operatingsystem_id_parameters_serialize(
        self,
        operatingsystem_id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if operatingsystem_id is not None:
            _path_params["operatingsystem_id"] = operatingsystem_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/operatingsystems/{operatingsystem_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_organizations_organization_id_parameters(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_organizations_organization_id_parameters_serialize(
            organization_id=organization_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_organizations_organization_id_parameters_with_http_info(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_organizations_organization_id_parameters_serialize(
            organization_id=organization_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_organizations_organization_id_parameters_without_preload_content(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_organizations_organization_id_parameters_serialize(
            organization_id=organization_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_organizations_organization_id_parameters_serialize(
        self,
        organization_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/organizations/{organization_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_subnets_subnet_id_parameters(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a nested parameter for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_subnets_subnet_id_parameters_serialize(
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_subnets_subnet_id_parameters_with_http_info(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a nested parameter for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_subnets_subnet_id_parameters_serialize(
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_subnets_subnet_id_parameters_without_preload_content(
        self,
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        parameter_name: StrictStr,
        parameter_value: StrictStr,
        parameter_parameter_type: Annotated[
            StrictStr, Field(description="Type of value")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a nested parameter for a subnet


        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param parameter_name: (required)
        :type parameter_name: str
        :param parameter_value: (required)
        :type parameter_value: str
        :param parameter_parameter_type: Type of value (required)
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_subnets_subnet_id_parameters_serialize(
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_subnets_subnet_id_parameters_serialize(
        self,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subnet_id is not None:
            _path_params["subnet_id"] = subnet_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/subnets/{subnet_id}/parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_domains_domain_id_parameters_id(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_domains_domain_id_parameters_id_serialize(
            domain_id=domain_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_domains_domain_id_parameters_id_with_http_info(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_domains_domain_id_parameters_id_serialize(
            domain_id=domain_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_domains_domain_id_parameters_id_without_preload_content(
        self,
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a nested parameter for a domain


        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_domains_domain_id_parameters_id_serialize(
            domain_id=domain_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_domains_domain_id_parameters_id_serialize(
        self,
        domain_id,
        id,
        host_id,
        hostgroup_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params["domain_id"] = domain_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/domains/{domain_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hostgroups_hostgroup_id_parameters_id(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hostgroups_hostgroup_id_parameters_id_serialize(
            hostgroup_id=hostgroup_id,
            id=id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hostgroups_hostgroup_id_parameters_id_with_http_info(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hostgroups_hostgroup_id_parameters_id_serialize(
            hostgroup_id=hostgroup_id,
            id=id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hostgroups_hostgroup_id_parameters_id_without_preload_content(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a nested parameter for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hostgroups_hostgroup_id_parameters_id_serialize(
            hostgroup_id=hostgroup_id,
            id=id,
            host_id=host_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hostgroups_hostgroup_id_parameters_id_serialize(
        self,
        hostgroup_id,
        id,
        host_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hostgroup_id is not None:
            _path_params["hostgroup_id"] = hostgroup_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hostgroups/{hostgroup_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_host_id_parameters_id(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_host_id_parameters_id_serialize(
            host_id=host_id,
            id=id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_host_id_parameters_id_with_http_info(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_host_id_parameters_id_serialize(
            host_id=host_id,
            id=id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_host_id_parameters_id_without_preload_content(
        self,
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a nested parameter for a host


        :param host_id: ID of host (required)
        :type host_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_host_id_parameters_id_serialize(
            host_id=host_id,
            id=id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_host_id_parameters_id_serialize(
        self,
        host_id,
        id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if host_id is not None:
            _path_params["host_id"] = host_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/{host_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_locations_location_id_parameters_id(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_locations_location_id_parameters_id_serialize(
            location_id=location_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_locations_location_id_parameters_id_with_http_info(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_locations_location_id_parameters_id_serialize(
            location_id=location_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_locations_location_id_parameters_id_without_preload_content(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a nested parameter for a location


        :param location_id: ID of location (required)
        :type location_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_locations_location_id_parameters_id_serialize(
            location_id=location_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_locations_location_id_parameters_id_serialize(
        self,
        location_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_id is not None:
            _path_params["location_id"] = location_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/locations/{location_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_operatingsystems_operatingsystem_id_parameters_id(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_operatingsystems_operatingsystem_id_parameters_id_serialize(
            operatingsystem_id=operatingsystem_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_operatingsystems_operatingsystem_id_parameters_id_with_http_info(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_operatingsystems_operatingsystem_id_parameters_id_serialize(
            operatingsystem_id=operatingsystem_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_operatingsystems_operatingsystem_id_parameters_id_without_preload_content(
        self,
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a nested parameter for an operating system


        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_operatingsystems_operatingsystem_id_parameters_id_serialize(
            operatingsystem_id=operatingsystem_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            location_id=location_id,
            organization_id=organization_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_operatingsystems_operatingsystem_id_parameters_id_serialize(
        self,
        operatingsystem_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        location_id,
        organization_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if operatingsystem_id is not None:
            _path_params["operatingsystem_id"] = operatingsystem_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/operatingsystems/{operatingsystem_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_organizations_organization_id_parameters_id(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_organization_id_parameters_id_serialize(
            organization_id=organization_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_organizations_organization_id_parameters_id_with_http_info(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_organization_id_parameters_id_serialize(
            organization_id=organization_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_organizations_organization_id_parameters_id_without_preload_content(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a nested parameter for an organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param id: ID of parameter (required)
        :type id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_organization_id_parameters_id_serialize(
            organization_id=organization_id,
            id=id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            subnet_id=subnet_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_organizations_organization_id_parameters_id_serialize(
        self,
        organization_id,
        id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        subnet_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if subnet_id is not None:
            _form_params.append(("subnet_id", subnet_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/organizations/{organization_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_subnets_subnet_id_parameters_id(
        self,
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a nested parameter for a subnet


        :param id: ID of parameter (required)
        :type id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_subnets_subnet_id_parameters_id_serialize(
            id=id,
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_subnets_subnet_id_parameters_id_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a nested parameter for a subnet


        :param id: ID of parameter (required)
        :type id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_subnets_subnet_id_parameters_id_serialize(
            id=id,
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_subnets_subnet_id_parameters_id_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of parameter")],
        subnet_id: Annotated[StrictStr, Field(description="ID of subnet")],
        host_id: Annotated[StrictStr, Field(description="ID of host")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        domain_id: Annotated[StrictStr, Field(description="ID of domain")],
        operatingsystem_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="ID of operating system")
        ],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        parameter_name: Optional[StrictStr] = None,
        parameter_value: Optional[StrictStr] = None,
        parameter_parameter_type: Annotated[
            Optional[StrictStr], Field(description="Type of value")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a nested parameter for a subnet


        :param id: ID of parameter (required)
        :type id: str
        :param subnet_id: ID of subnet (required)
        :type subnet_id: str
        :param host_id: ID of host (required)
        :type host_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param domain_id: ID of domain (required)
        :type domain_id: str
        :param operatingsystem_id: ID of operating system (required)
        :type operatingsystem_id: float
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param parameter_name:
        :type parameter_name: str
        :param parameter_value:
        :type parameter_value: str
        :param parameter_parameter_type: Type of value
        :type parameter_parameter_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_subnets_subnet_id_parameters_id_serialize(
            id=id,
            subnet_id=subnet_id,
            host_id=host_id,
            hostgroup_id=hostgroup_id,
            domain_id=domain_id,
            operatingsystem_id=operatingsystem_id,
            location_id=location_id,
            organization_id=organization_id,
            parameter_name=parameter_name,
            parameter_value=parameter_value,
            parameter_parameter_type=parameter_parameter_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_subnets_subnet_id_parameters_id_serialize(
        self,
        id,
        subnet_id,
        host_id,
        hostgroup_id,
        domain_id,
        operatingsystem_id,
        location_id,
        organization_id,
        parameter_name,
        parameter_value,
        parameter_parameter_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if subnet_id is not None:
            _path_params["subnet_id"] = subnet_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_id is not None:
            _form_params.append(("host_id", host_id))
        if hostgroup_id is not None:
            _form_params.append(("hostgroup_id", hostgroup_id))
        if domain_id is not None:
            _form_params.append(("domain_id", domain_id))
        if operatingsystem_id is not None:
            _form_params.append(("operatingsystem_id", operatingsystem_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if parameter_name is not None:
            _form_params.append(("parameter[name]", parameter_name))
        if parameter_value is not None:
            _form_params.append(("parameter[value]", parameter_value))
        if parameter_parameter_type is not None:
            _form_params.append(("parameter[parameter_type]", parameter_parameter_type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/subnets/{subnet_id}/parameters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
