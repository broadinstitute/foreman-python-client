# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr

from typing import Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class JobInvocationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def get_job_invocations(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List job invocations


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_job_invocations_with_http_info(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List job invocations


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_job_invocations_without_preload_content(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List job invocations


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_job_invocations_serialize(
        self,
        location_id,
        organization_id,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/job_invocations",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_job_invocations_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        host_status: Annotated[
            Optional[StrictBool], Field(description="Show Job status for the hosts")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show job invocation


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param host_status: Show Job status for the hosts
        :type host_status: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            host_status=host_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_job_invocations_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        host_status: Annotated[
            Optional[StrictBool], Field(description="Show Job status for the hosts")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show job invocation


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param host_status: Show Job status for the hosts
        :type host_status: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            host_status=host_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_job_invocations_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        host_status: Annotated[
            Optional[StrictBool], Field(description="Show Job status for the hosts")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show job invocation


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param host_status: Show Job status for the hosts
        :type host_status: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            host_status=host_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_job_invocations_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        host_status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if host_status is not None:
            _query_params.append(("host_status", host_status))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/job_invocations/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_job_invocations_id_hosts_host_id(
        self,
        id: StrictStr,
        host_id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        since: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get output for a host


        :param id: (required)
        :type id: str
        :param host_id: (required)
        :type host_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param since:
        :type since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_hosts_host_id_serialize(
            id=id,
            host_id=host_id,
            location_id=location_id,
            organization_id=organization_id,
            since=since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_job_invocations_id_hosts_host_id_with_http_info(
        self,
        id: StrictStr,
        host_id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        since: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get output for a host


        :param id: (required)
        :type id: str
        :param host_id: (required)
        :type host_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param since:
        :type since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_hosts_host_id_serialize(
            id=id,
            host_id=host_id,
            location_id=location_id,
            organization_id=organization_id,
            since=since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_job_invocations_id_hosts_host_id_without_preload_content(
        self,
        id: StrictStr,
        host_id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        since: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get output for a host


        :param id: (required)
        :type id: str
        :param host_id: (required)
        :type host_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param since:
        :type since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_hosts_host_id_serialize(
            id=id,
            host_id=host_id,
            location_id=location_id,
            organization_id=organization_id,
            since=since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_job_invocations_id_hosts_host_id_serialize(
        self,
        id,
        host_id,
        location_id,
        organization_id,
        since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if host_id is not None:
            _path_params["host_id"] = host_id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if since is not None:
            _query_params.append(("since", since))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/job_invocations/{id}/hosts/{host_id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_job_invocations_id_hosts_host_id_raw(
        self,
        id: StrictStr,
        host_id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get raw output for a host


        :param id: (required)
        :type id: str
        :param host_id: (required)
        :type host_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_hosts_host_id_raw_serialize(
            id=id,
            host_id=host_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_job_invocations_id_hosts_host_id_raw_with_http_info(
        self,
        id: StrictStr,
        host_id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get raw output for a host


        :param id: (required)
        :type id: str
        :param host_id: (required)
        :type host_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_hosts_host_id_raw_serialize(
            id=id,
            host_id=host_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_job_invocations_id_hosts_host_id_raw_without_preload_content(
        self,
        id: StrictStr,
        host_id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get raw output for a host


        :param id: (required)
        :type id: str
        :param host_id: (required)
        :type host_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_hosts_host_id_raw_serialize(
            id=id,
            host_id=host_id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_job_invocations_id_hosts_host_id_raw_serialize(
        self,
        id,
        host_id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if host_id is not None:
            _path_params["host_id"] = host_id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/job_invocations/{id}/hosts/{host_id}/raw",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_job_invocations_id_outputs(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search_query: Optional[StrictStr] = None,
        since: Optional[StrictStr] = None,
        raw: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get outputs of hosts in a job


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search_query:
        :type search_query: str
        :param since:
        :type since: str
        :param raw:
        :type raw: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_outputs_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            search_query=search_query,
            since=since,
            raw=raw,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_job_invocations_id_outputs_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search_query: Optional[StrictStr] = None,
        since: Optional[StrictStr] = None,
        raw: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get outputs of hosts in a job


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search_query:
        :type search_query: str
        :param since:
        :type since: str
        :param raw:
        :type raw: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_outputs_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            search_query=search_query,
            since=since,
            raw=raw,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_job_invocations_id_outputs_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search_query: Optional[StrictStr] = None,
        since: Optional[StrictStr] = None,
        raw: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get outputs of hosts in a job


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search_query:
        :type search_query: str
        :param since:
        :type since: str
        :param raw:
        :type raw: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_job_invocations_id_outputs_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            search_query=search_query,
            since=since,
            raw=raw,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_job_invocations_id_outputs_serialize(
        self,
        id,
        location_id,
        organization_id,
        search_query,
        since,
        raw,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search_query is not None:
            _query_params.append(("search_query", search_query))

        if since is not None:
            _query_params.append(("since", since))

        if raw is not None:
            _query_params.append(("raw", raw))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/job_invocations/{id}/outputs",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_job_invocations(
        self,
        job_invocation_targeting_type: Annotated[
            StrictStr,
            Field(
                description='Invocation type, one of {\\"static_query\\"=>\\"Static Query\\", \\"dynamic_query\\"=>\\"Dynamic Query\\"}'
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        job_invocation_job_template_id: Annotated[
            Optional[StrictStr],
            Field(
                description="The job template to use, parameter is required unless feature was specified"
            ),
        ] = None,
        job_invocation_randomized_ordering: Annotated[
            Optional[StrictBool],
            Field(description="Execute the jobs on hosts in randomized order"),
        ] = None,
        job_invocation_ssh_effective_user: Annotated[
            Optional[StrictStr],
            Field(
                description="What user should be used to run the script (using sudo-like mechanisms). Defaults to a template parameter or global setting."
            ),
        ] = None,
        job_invocation_ssh_effective_user_password: Annotated[
            Optional[StrictStr],
            Field(
                description="Set password for effective user (using sudo-like mechanisms)"
            ),
        ] = None,
        job_invocation_ssh_user: Annotated[
            Optional[StrictStr], Field(description="Set SSH user")
        ] = None,
        job_invocation_password: Annotated[
            Optional[StrictStr], Field(description="Set SSH password")
        ] = None,
        job_invocation_key_passphrase: Annotated[
            Optional[StrictStr], Field(description="Set SSH key passphrase")
        ] = None,
        job_invocation_recurrence_cron_line: Annotated[
            Optional[StrictStr],
            Field(description="How often the job should occur, in the cron format"),
        ] = None,
        job_invocation_recurrence_max_iteration: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Repeat a maximum of N times"),
        ] = None,
        job_invocation_recurrence_end_time: Annotated[
            Optional[StrictStr],
            Field(description="Perform no more executions after this time"),
        ] = None,
        job_invocation_recurrence_purpose: Annotated[
            Optional[StrictStr], Field(description="Designation of a special purpose")
        ] = None,
        job_invocation_scheduling_start_at: Annotated[
            Optional[StrictStr], Field(description="Schedule the job for a future time")
        ] = None,
        job_invocation_scheduling_start_before: Annotated[
            Optional[StrictStr],
            Field(
                description="Indicates that the action should be cancelled if it cannot be started before this time."
            ),
        ] = None,
        job_invocation_concurrency_control_concurrency_level: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Run at most N tasks at a time"),
        ] = None,
        job_invocation_bookmark_id: Optional[Union[StrictFloat, StrictInt]] = None,
        job_invocation_search_query: Optional[StrictStr] = None,
        job_invocation_description_format: Annotated[
            Optional[StrictStr],
            Field(
                description="Override the description format from the template for this invocation only"
            ),
        ] = None,
        job_invocation_execution_timeout_interval: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Override the timeout interval from the template for this invocation only"
            ),
        ] = None,
        job_invocation_feature: Annotated[
            Optional[StrictStr],
            Field(
                description="Remote execution feature label that should be triggered, job template assigned to this feature will be used"
            ),
        ] = None,
        job_invocation_time_to_pickup: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Override the global time to pickup interval for this invocation only"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a job invocation


        :param job_invocation_targeting_type: Invocation type, one of {\\\"static_query\\\"=>\\\"Static Query\\\", \\\"dynamic_query\\\"=>\\\"Dynamic Query\\\"} (required)
        :type job_invocation_targeting_type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param job_invocation_job_template_id: The job template to use, parameter is required unless feature was specified
        :type job_invocation_job_template_id: str
        :param job_invocation_randomized_ordering: Execute the jobs on hosts in randomized order
        :type job_invocation_randomized_ordering: bool
        :param job_invocation_ssh_effective_user: What user should be used to run the script (using sudo-like mechanisms). Defaults to a template parameter or global setting.
        :type job_invocation_ssh_effective_user: str
        :param job_invocation_ssh_effective_user_password: Set password for effective user (using sudo-like mechanisms)
        :type job_invocation_ssh_effective_user_password: str
        :param job_invocation_ssh_user: Set SSH user
        :type job_invocation_ssh_user: str
        :param job_invocation_password: Set SSH password
        :type job_invocation_password: str
        :param job_invocation_key_passphrase: Set SSH key passphrase
        :type job_invocation_key_passphrase: str
        :param job_invocation_recurrence_cron_line: How often the job should occur, in the cron format
        :type job_invocation_recurrence_cron_line: str
        :param job_invocation_recurrence_max_iteration: Repeat a maximum of N times
        :type job_invocation_recurrence_max_iteration: float
        :param job_invocation_recurrence_end_time: Perform no more executions after this time
        :type job_invocation_recurrence_end_time: str
        :param job_invocation_recurrence_purpose: Designation of a special purpose
        :type job_invocation_recurrence_purpose: str
        :param job_invocation_scheduling_start_at: Schedule the job for a future time
        :type job_invocation_scheduling_start_at: str
        :param job_invocation_scheduling_start_before: Indicates that the action should be cancelled if it cannot be started before this time.
        :type job_invocation_scheduling_start_before: str
        :param job_invocation_concurrency_control_concurrency_level: Run at most N tasks at a time
        :type job_invocation_concurrency_control_concurrency_level: float
        :param job_invocation_bookmark_id:
        :type job_invocation_bookmark_id: float
        :param job_invocation_search_query:
        :type job_invocation_search_query: str
        :param job_invocation_description_format: Override the description format from the template for this invocation only
        :type job_invocation_description_format: str
        :param job_invocation_execution_timeout_interval: Override the timeout interval from the template for this invocation only
        :type job_invocation_execution_timeout_interval: float
        :param job_invocation_feature: Remote execution feature label that should be triggered, job template assigned to this feature will be used
        :type job_invocation_feature: str
        :param job_invocation_time_to_pickup: Override the global time to pickup interval for this invocation only
        :type job_invocation_time_to_pickup: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_job_invocations_serialize(
            job_invocation_targeting_type=job_invocation_targeting_type,
            location_id=location_id,
            organization_id=organization_id,
            job_invocation_job_template_id=job_invocation_job_template_id,
            job_invocation_randomized_ordering=job_invocation_randomized_ordering,
            job_invocation_ssh_effective_user=job_invocation_ssh_effective_user,
            job_invocation_ssh_effective_user_password=job_invocation_ssh_effective_user_password,
            job_invocation_ssh_user=job_invocation_ssh_user,
            job_invocation_password=job_invocation_password,
            job_invocation_key_passphrase=job_invocation_key_passphrase,
            job_invocation_recurrence_cron_line=job_invocation_recurrence_cron_line,
            job_invocation_recurrence_max_iteration=job_invocation_recurrence_max_iteration,
            job_invocation_recurrence_end_time=job_invocation_recurrence_end_time,
            job_invocation_recurrence_purpose=job_invocation_recurrence_purpose,
            job_invocation_scheduling_start_at=job_invocation_scheduling_start_at,
            job_invocation_scheduling_start_before=job_invocation_scheduling_start_before,
            job_invocation_concurrency_control_concurrency_level=job_invocation_concurrency_control_concurrency_level,
            job_invocation_bookmark_id=job_invocation_bookmark_id,
            job_invocation_search_query=job_invocation_search_query,
            job_invocation_description_format=job_invocation_description_format,
            job_invocation_execution_timeout_interval=job_invocation_execution_timeout_interval,
            job_invocation_feature=job_invocation_feature,
            job_invocation_time_to_pickup=job_invocation_time_to_pickup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_job_invocations_with_http_info(
        self,
        job_invocation_targeting_type: Annotated[
            StrictStr,
            Field(
                description='Invocation type, one of {\\"static_query\\"=>\\"Static Query\\", \\"dynamic_query\\"=>\\"Dynamic Query\\"}'
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        job_invocation_job_template_id: Annotated[
            Optional[StrictStr],
            Field(
                description="The job template to use, parameter is required unless feature was specified"
            ),
        ] = None,
        job_invocation_randomized_ordering: Annotated[
            Optional[StrictBool],
            Field(description="Execute the jobs on hosts in randomized order"),
        ] = None,
        job_invocation_ssh_effective_user: Annotated[
            Optional[StrictStr],
            Field(
                description="What user should be used to run the script (using sudo-like mechanisms). Defaults to a template parameter or global setting."
            ),
        ] = None,
        job_invocation_ssh_effective_user_password: Annotated[
            Optional[StrictStr],
            Field(
                description="Set password for effective user (using sudo-like mechanisms)"
            ),
        ] = None,
        job_invocation_ssh_user: Annotated[
            Optional[StrictStr], Field(description="Set SSH user")
        ] = None,
        job_invocation_password: Annotated[
            Optional[StrictStr], Field(description="Set SSH password")
        ] = None,
        job_invocation_key_passphrase: Annotated[
            Optional[StrictStr], Field(description="Set SSH key passphrase")
        ] = None,
        job_invocation_recurrence_cron_line: Annotated[
            Optional[StrictStr],
            Field(description="How often the job should occur, in the cron format"),
        ] = None,
        job_invocation_recurrence_max_iteration: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Repeat a maximum of N times"),
        ] = None,
        job_invocation_recurrence_end_time: Annotated[
            Optional[StrictStr],
            Field(description="Perform no more executions after this time"),
        ] = None,
        job_invocation_recurrence_purpose: Annotated[
            Optional[StrictStr], Field(description="Designation of a special purpose")
        ] = None,
        job_invocation_scheduling_start_at: Annotated[
            Optional[StrictStr], Field(description="Schedule the job for a future time")
        ] = None,
        job_invocation_scheduling_start_before: Annotated[
            Optional[StrictStr],
            Field(
                description="Indicates that the action should be cancelled if it cannot be started before this time."
            ),
        ] = None,
        job_invocation_concurrency_control_concurrency_level: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Run at most N tasks at a time"),
        ] = None,
        job_invocation_bookmark_id: Optional[Union[StrictFloat, StrictInt]] = None,
        job_invocation_search_query: Optional[StrictStr] = None,
        job_invocation_description_format: Annotated[
            Optional[StrictStr],
            Field(
                description="Override the description format from the template for this invocation only"
            ),
        ] = None,
        job_invocation_execution_timeout_interval: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Override the timeout interval from the template for this invocation only"
            ),
        ] = None,
        job_invocation_feature: Annotated[
            Optional[StrictStr],
            Field(
                description="Remote execution feature label that should be triggered, job template assigned to this feature will be used"
            ),
        ] = None,
        job_invocation_time_to_pickup: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Override the global time to pickup interval for this invocation only"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a job invocation


        :param job_invocation_targeting_type: Invocation type, one of {\\\"static_query\\\"=>\\\"Static Query\\\", \\\"dynamic_query\\\"=>\\\"Dynamic Query\\\"} (required)
        :type job_invocation_targeting_type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param job_invocation_job_template_id: The job template to use, parameter is required unless feature was specified
        :type job_invocation_job_template_id: str
        :param job_invocation_randomized_ordering: Execute the jobs on hosts in randomized order
        :type job_invocation_randomized_ordering: bool
        :param job_invocation_ssh_effective_user: What user should be used to run the script (using sudo-like mechanisms). Defaults to a template parameter or global setting.
        :type job_invocation_ssh_effective_user: str
        :param job_invocation_ssh_effective_user_password: Set password for effective user (using sudo-like mechanisms)
        :type job_invocation_ssh_effective_user_password: str
        :param job_invocation_ssh_user: Set SSH user
        :type job_invocation_ssh_user: str
        :param job_invocation_password: Set SSH password
        :type job_invocation_password: str
        :param job_invocation_key_passphrase: Set SSH key passphrase
        :type job_invocation_key_passphrase: str
        :param job_invocation_recurrence_cron_line: How often the job should occur, in the cron format
        :type job_invocation_recurrence_cron_line: str
        :param job_invocation_recurrence_max_iteration: Repeat a maximum of N times
        :type job_invocation_recurrence_max_iteration: float
        :param job_invocation_recurrence_end_time: Perform no more executions after this time
        :type job_invocation_recurrence_end_time: str
        :param job_invocation_recurrence_purpose: Designation of a special purpose
        :type job_invocation_recurrence_purpose: str
        :param job_invocation_scheduling_start_at: Schedule the job for a future time
        :type job_invocation_scheduling_start_at: str
        :param job_invocation_scheduling_start_before: Indicates that the action should be cancelled if it cannot be started before this time.
        :type job_invocation_scheduling_start_before: str
        :param job_invocation_concurrency_control_concurrency_level: Run at most N tasks at a time
        :type job_invocation_concurrency_control_concurrency_level: float
        :param job_invocation_bookmark_id:
        :type job_invocation_bookmark_id: float
        :param job_invocation_search_query:
        :type job_invocation_search_query: str
        :param job_invocation_description_format: Override the description format from the template for this invocation only
        :type job_invocation_description_format: str
        :param job_invocation_execution_timeout_interval: Override the timeout interval from the template for this invocation only
        :type job_invocation_execution_timeout_interval: float
        :param job_invocation_feature: Remote execution feature label that should be triggered, job template assigned to this feature will be used
        :type job_invocation_feature: str
        :param job_invocation_time_to_pickup: Override the global time to pickup interval for this invocation only
        :type job_invocation_time_to_pickup: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_job_invocations_serialize(
            job_invocation_targeting_type=job_invocation_targeting_type,
            location_id=location_id,
            organization_id=organization_id,
            job_invocation_job_template_id=job_invocation_job_template_id,
            job_invocation_randomized_ordering=job_invocation_randomized_ordering,
            job_invocation_ssh_effective_user=job_invocation_ssh_effective_user,
            job_invocation_ssh_effective_user_password=job_invocation_ssh_effective_user_password,
            job_invocation_ssh_user=job_invocation_ssh_user,
            job_invocation_password=job_invocation_password,
            job_invocation_key_passphrase=job_invocation_key_passphrase,
            job_invocation_recurrence_cron_line=job_invocation_recurrence_cron_line,
            job_invocation_recurrence_max_iteration=job_invocation_recurrence_max_iteration,
            job_invocation_recurrence_end_time=job_invocation_recurrence_end_time,
            job_invocation_recurrence_purpose=job_invocation_recurrence_purpose,
            job_invocation_scheduling_start_at=job_invocation_scheduling_start_at,
            job_invocation_scheduling_start_before=job_invocation_scheduling_start_before,
            job_invocation_concurrency_control_concurrency_level=job_invocation_concurrency_control_concurrency_level,
            job_invocation_bookmark_id=job_invocation_bookmark_id,
            job_invocation_search_query=job_invocation_search_query,
            job_invocation_description_format=job_invocation_description_format,
            job_invocation_execution_timeout_interval=job_invocation_execution_timeout_interval,
            job_invocation_feature=job_invocation_feature,
            job_invocation_time_to_pickup=job_invocation_time_to_pickup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_job_invocations_without_preload_content(
        self,
        job_invocation_targeting_type: Annotated[
            StrictStr,
            Field(
                description='Invocation type, one of {\\"static_query\\"=>\\"Static Query\\", \\"dynamic_query\\"=>\\"Dynamic Query\\"}'
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        job_invocation_job_template_id: Annotated[
            Optional[StrictStr],
            Field(
                description="The job template to use, parameter is required unless feature was specified"
            ),
        ] = None,
        job_invocation_randomized_ordering: Annotated[
            Optional[StrictBool],
            Field(description="Execute the jobs on hosts in randomized order"),
        ] = None,
        job_invocation_ssh_effective_user: Annotated[
            Optional[StrictStr],
            Field(
                description="What user should be used to run the script (using sudo-like mechanisms). Defaults to a template parameter or global setting."
            ),
        ] = None,
        job_invocation_ssh_effective_user_password: Annotated[
            Optional[StrictStr],
            Field(
                description="Set password for effective user (using sudo-like mechanisms)"
            ),
        ] = None,
        job_invocation_ssh_user: Annotated[
            Optional[StrictStr], Field(description="Set SSH user")
        ] = None,
        job_invocation_password: Annotated[
            Optional[StrictStr], Field(description="Set SSH password")
        ] = None,
        job_invocation_key_passphrase: Annotated[
            Optional[StrictStr], Field(description="Set SSH key passphrase")
        ] = None,
        job_invocation_recurrence_cron_line: Annotated[
            Optional[StrictStr],
            Field(description="How often the job should occur, in the cron format"),
        ] = None,
        job_invocation_recurrence_max_iteration: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Repeat a maximum of N times"),
        ] = None,
        job_invocation_recurrence_end_time: Annotated[
            Optional[StrictStr],
            Field(description="Perform no more executions after this time"),
        ] = None,
        job_invocation_recurrence_purpose: Annotated[
            Optional[StrictStr], Field(description="Designation of a special purpose")
        ] = None,
        job_invocation_scheduling_start_at: Annotated[
            Optional[StrictStr], Field(description="Schedule the job for a future time")
        ] = None,
        job_invocation_scheduling_start_before: Annotated[
            Optional[StrictStr],
            Field(
                description="Indicates that the action should be cancelled if it cannot be started before this time."
            ),
        ] = None,
        job_invocation_concurrency_control_concurrency_level: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Run at most N tasks at a time"),
        ] = None,
        job_invocation_bookmark_id: Optional[Union[StrictFloat, StrictInt]] = None,
        job_invocation_search_query: Optional[StrictStr] = None,
        job_invocation_description_format: Annotated[
            Optional[StrictStr],
            Field(
                description="Override the description format from the template for this invocation only"
            ),
        ] = None,
        job_invocation_execution_timeout_interval: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Override the timeout interval from the template for this invocation only"
            ),
        ] = None,
        job_invocation_feature: Annotated[
            Optional[StrictStr],
            Field(
                description="Remote execution feature label that should be triggered, job template assigned to this feature will be used"
            ),
        ] = None,
        job_invocation_time_to_pickup: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Override the global time to pickup interval for this invocation only"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a job invocation


        :param job_invocation_targeting_type: Invocation type, one of {\\\"static_query\\\"=>\\\"Static Query\\\", \\\"dynamic_query\\\"=>\\\"Dynamic Query\\\"} (required)
        :type job_invocation_targeting_type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param job_invocation_job_template_id: The job template to use, parameter is required unless feature was specified
        :type job_invocation_job_template_id: str
        :param job_invocation_randomized_ordering: Execute the jobs on hosts in randomized order
        :type job_invocation_randomized_ordering: bool
        :param job_invocation_ssh_effective_user: What user should be used to run the script (using sudo-like mechanisms). Defaults to a template parameter or global setting.
        :type job_invocation_ssh_effective_user: str
        :param job_invocation_ssh_effective_user_password: Set password for effective user (using sudo-like mechanisms)
        :type job_invocation_ssh_effective_user_password: str
        :param job_invocation_ssh_user: Set SSH user
        :type job_invocation_ssh_user: str
        :param job_invocation_password: Set SSH password
        :type job_invocation_password: str
        :param job_invocation_key_passphrase: Set SSH key passphrase
        :type job_invocation_key_passphrase: str
        :param job_invocation_recurrence_cron_line: How often the job should occur, in the cron format
        :type job_invocation_recurrence_cron_line: str
        :param job_invocation_recurrence_max_iteration: Repeat a maximum of N times
        :type job_invocation_recurrence_max_iteration: float
        :param job_invocation_recurrence_end_time: Perform no more executions after this time
        :type job_invocation_recurrence_end_time: str
        :param job_invocation_recurrence_purpose: Designation of a special purpose
        :type job_invocation_recurrence_purpose: str
        :param job_invocation_scheduling_start_at: Schedule the job for a future time
        :type job_invocation_scheduling_start_at: str
        :param job_invocation_scheduling_start_before: Indicates that the action should be cancelled if it cannot be started before this time.
        :type job_invocation_scheduling_start_before: str
        :param job_invocation_concurrency_control_concurrency_level: Run at most N tasks at a time
        :type job_invocation_concurrency_control_concurrency_level: float
        :param job_invocation_bookmark_id:
        :type job_invocation_bookmark_id: float
        :param job_invocation_search_query:
        :type job_invocation_search_query: str
        :param job_invocation_description_format: Override the description format from the template for this invocation only
        :type job_invocation_description_format: str
        :param job_invocation_execution_timeout_interval: Override the timeout interval from the template for this invocation only
        :type job_invocation_execution_timeout_interval: float
        :param job_invocation_feature: Remote execution feature label that should be triggered, job template assigned to this feature will be used
        :type job_invocation_feature: str
        :param job_invocation_time_to_pickup: Override the global time to pickup interval for this invocation only
        :type job_invocation_time_to_pickup: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_job_invocations_serialize(
            job_invocation_targeting_type=job_invocation_targeting_type,
            location_id=location_id,
            organization_id=organization_id,
            job_invocation_job_template_id=job_invocation_job_template_id,
            job_invocation_randomized_ordering=job_invocation_randomized_ordering,
            job_invocation_ssh_effective_user=job_invocation_ssh_effective_user,
            job_invocation_ssh_effective_user_password=job_invocation_ssh_effective_user_password,
            job_invocation_ssh_user=job_invocation_ssh_user,
            job_invocation_password=job_invocation_password,
            job_invocation_key_passphrase=job_invocation_key_passphrase,
            job_invocation_recurrence_cron_line=job_invocation_recurrence_cron_line,
            job_invocation_recurrence_max_iteration=job_invocation_recurrence_max_iteration,
            job_invocation_recurrence_end_time=job_invocation_recurrence_end_time,
            job_invocation_recurrence_purpose=job_invocation_recurrence_purpose,
            job_invocation_scheduling_start_at=job_invocation_scheduling_start_at,
            job_invocation_scheduling_start_before=job_invocation_scheduling_start_before,
            job_invocation_concurrency_control_concurrency_level=job_invocation_concurrency_control_concurrency_level,
            job_invocation_bookmark_id=job_invocation_bookmark_id,
            job_invocation_search_query=job_invocation_search_query,
            job_invocation_description_format=job_invocation_description_format,
            job_invocation_execution_timeout_interval=job_invocation_execution_timeout_interval,
            job_invocation_feature=job_invocation_feature,
            job_invocation_time_to_pickup=job_invocation_time_to_pickup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_job_invocations_serialize(
        self,
        job_invocation_targeting_type,
        location_id,
        organization_id,
        job_invocation_job_template_id,
        job_invocation_randomized_ordering,
        job_invocation_ssh_effective_user,
        job_invocation_ssh_effective_user_password,
        job_invocation_ssh_user,
        job_invocation_password,
        job_invocation_key_passphrase,
        job_invocation_recurrence_cron_line,
        job_invocation_recurrence_max_iteration,
        job_invocation_recurrence_end_time,
        job_invocation_recurrence_purpose,
        job_invocation_scheduling_start_at,
        job_invocation_scheduling_start_before,
        job_invocation_concurrency_control_concurrency_level,
        job_invocation_bookmark_id,
        job_invocation_search_query,
        job_invocation_description_format,
        job_invocation_execution_timeout_interval,
        job_invocation_feature,
        job_invocation_time_to_pickup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if job_invocation_targeting_type is not None:
            _form_params.append(
                ("job_invocation[targeting_type]", job_invocation_targeting_type)
            )
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if job_invocation_job_template_id is not None:
            _form_params.append(
                ("job_invocation[job_template_id]", job_invocation_job_template_id)
            )
        if job_invocation_randomized_ordering is not None:
            _form_params.append(
                (
                    "job_invocation[randomized_ordering]",
                    job_invocation_randomized_ordering,
                )
            )
        if job_invocation_ssh_effective_user is not None:
            _form_params.append(
                (
                    "job_invocation[ssh][effective_user]",
                    job_invocation_ssh_effective_user,
                )
            )
        if job_invocation_ssh_effective_user_password is not None:
            _form_params.append(
                (
                    "job_invocation[ssh][effective_user_password]",
                    job_invocation_ssh_effective_user_password,
                )
            )
        if job_invocation_ssh_user is not None:
            _form_params.append(("job_invocation[ssh_user]", job_invocation_ssh_user))
        if job_invocation_password is not None:
            _form_params.append(("job_invocation[password]", job_invocation_password))
        if job_invocation_key_passphrase is not None:
            _form_params.append(
                ("job_invocation[key_passphrase]", job_invocation_key_passphrase)
            )
        if job_invocation_recurrence_cron_line is not None:
            _form_params.append(
                (
                    "job_invocation[recurrence][cron_line]",
                    job_invocation_recurrence_cron_line,
                )
            )
        if job_invocation_recurrence_max_iteration is not None:
            _form_params.append(
                (
                    "job_invocation[recurrence][max_iteration]",
                    job_invocation_recurrence_max_iteration,
                )
            )
        if job_invocation_recurrence_end_time is not None:
            _form_params.append(
                (
                    "job_invocation[recurrence][end_time]",
                    job_invocation_recurrence_end_time,
                )
            )
        if job_invocation_recurrence_purpose is not None:
            _form_params.append(
                (
                    "job_invocation[recurrence][purpose]",
                    job_invocation_recurrence_purpose,
                )
            )
        if job_invocation_scheduling_start_at is not None:
            _form_params.append(
                (
                    "job_invocation[scheduling][start_at]",
                    job_invocation_scheduling_start_at,
                )
            )
        if job_invocation_scheduling_start_before is not None:
            _form_params.append(
                (
                    "job_invocation[scheduling][start_before]",
                    job_invocation_scheduling_start_before,
                )
            )
        if job_invocation_concurrency_control_concurrency_level is not None:
            _form_params.append(
                (
                    "job_invocation[concurrency_control][concurrency_level]",
                    job_invocation_concurrency_control_concurrency_level,
                )
            )
        if job_invocation_bookmark_id is not None:
            _form_params.append(
                ("job_invocation[bookmark_id]", job_invocation_bookmark_id)
            )
        if job_invocation_search_query is not None:
            _form_params.append(
                ("job_invocation[search_query]", job_invocation_search_query)
            )
        if job_invocation_description_format is not None:
            _form_params.append(
                (
                    "job_invocation[description_format]",
                    job_invocation_description_format,
                )
            )
        if job_invocation_execution_timeout_interval is not None:
            _form_params.append(
                (
                    "job_invocation[execution_timeout_interval]",
                    job_invocation_execution_timeout_interval,
                )
            )
        if job_invocation_feature is not None:
            _form_params.append(("job_invocation[feature]", job_invocation_feature))
        if job_invocation_time_to_pickup is not None:
            _form_params.append(
                ("job_invocation[time_to_pickup]", job_invocation_time_to_pickup)
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/job_invocations",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_job_invocations_id_cancel(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        force: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Cancel job invocation


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param force:
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_job_invocations_id_cancel_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_job_invocations_id_cancel_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        force: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Cancel job invocation


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param force:
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_job_invocations_id_cancel_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_job_invocations_id_cancel_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        force: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel job invocation


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param force:
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_job_invocations_id_cancel_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_job_invocations_id_cancel_serialize(
        self,
        id,
        location_id,
        organization_id,
        force,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if force is not None:
            _form_params.append(("force", force))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/job_invocations/{id}/cancel",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_job_invocations_id_rerun(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        failed_only: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Rerun job on failed hosts


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param failed_only:
        :type failed_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_job_invocations_id_rerun_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            failed_only=failed_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_job_invocations_id_rerun_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        failed_only: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Rerun job on failed hosts


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param failed_only:
        :type failed_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_job_invocations_id_rerun_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            failed_only=failed_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_job_invocations_id_rerun_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        failed_only: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Rerun job on failed hosts


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param failed_only:
        :type failed_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_job_invocations_id_rerun_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            failed_only=failed_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_job_invocations_id_rerun_serialize(
        self,
        id,
        location_id,
        organization_id,
        failed_only,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if failed_only is not None:
            _form_params.append(("failed_only", failed_only))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/job_invocations/{id}/rerun",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
