# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class ContentViewsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_content_views_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a content view


        :param id: content view numeric identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_views_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_content_views_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a content view


        :param id: content view numeric identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_views_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_content_views_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a content view


        :param id: content view numeric identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_views_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_content_views_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/content_views/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_content_views_id_environments_environment_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        environment_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="environment numeric identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Remove a content view from an environment


        :param id: content view numeric identifier (required)
        :type id: float
        :param environment_id: environment numeric identifier (required)
        :type environment_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_views_id_environments_environment_id_serialize(
            id=id,
            environment_id=environment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_content_views_id_environments_environment_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        environment_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="environment numeric identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Remove a content view from an environment


        :param id: content view numeric identifier (required)
        :type id: float
        :param environment_id: environment numeric identifier (required)
        :type environment_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_views_id_environments_environment_id_serialize(
            id=id,
            environment_id=environment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_content_views_id_environments_environment_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        environment_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="environment numeric identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove a content view from an environment


        :param id: content view numeric identifier (required)
        :type id: float
        :param environment_id: environment numeric identifier (required)
        :type environment_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_views_id_environments_environment_id_serialize(
            id=id,
            environment_id=environment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_content_views_id_environments_environment_id_serialize(
        self,
        id,
        environment_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if environment_id is not None:
            _path_params["environment_id"] = environment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/content_views/{id}/environments/{environment_id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_views(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        noncomposite: Annotated[
            Optional[StrictBool],
            Field(description="Filter out composite content views"),
        ] = None,
        composite: Annotated[
            Optional[StrictBool],
            Field(description="Filter only composite content views"),
        ] = None,
        without: Annotated[
            Optional[List[StrictStr]],
            Field(description="Do not include this array of content views"),
        ] = None,
        name: Annotated[
            Optional[StrictStr], Field(description="Name of the content view")
        ] = None,
        label: Annotated[
            Optional[StrictStr], Field(description="Label of the content view")
        ] = None,
        include_generated: Annotated[
            Optional[StrictBool],
            Field(
                description="Include content views generated by imports/exports. Defaults to false"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List content views


        :param organization_id: organization identifier (required)
        :type organization_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param noncomposite: Filter out composite content views
        :type noncomposite: bool
        :param composite: Filter only composite content views
        :type composite: bool
        :param without: Do not include this array of content views
        :type without: List[str]
        :param name: Name of the content view
        :type name: str
        :param label: Label of the content view
        :type label: str
        :param include_generated: Include content views generated by imports/exports. Defaults to false
        :type include_generated: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_serialize(
            organization_id=organization_id,
            environment_id=environment_id,
            nondefault=nondefault,
            noncomposite=noncomposite,
            composite=composite,
            without=without,
            name=name,
            label=label,
            include_generated=include_generated,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_views_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        noncomposite: Annotated[
            Optional[StrictBool],
            Field(description="Filter out composite content views"),
        ] = None,
        composite: Annotated[
            Optional[StrictBool],
            Field(description="Filter only composite content views"),
        ] = None,
        without: Annotated[
            Optional[List[StrictStr]],
            Field(description="Do not include this array of content views"),
        ] = None,
        name: Annotated[
            Optional[StrictStr], Field(description="Name of the content view")
        ] = None,
        label: Annotated[
            Optional[StrictStr], Field(description="Label of the content view")
        ] = None,
        include_generated: Annotated[
            Optional[StrictBool],
            Field(
                description="Include content views generated by imports/exports. Defaults to false"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List content views


        :param organization_id: organization identifier (required)
        :type organization_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param noncomposite: Filter out composite content views
        :type noncomposite: bool
        :param composite: Filter only composite content views
        :type composite: bool
        :param without: Do not include this array of content views
        :type without: List[str]
        :param name: Name of the content view
        :type name: str
        :param label: Label of the content view
        :type label: str
        :param include_generated: Include content views generated by imports/exports. Defaults to false
        :type include_generated: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_serialize(
            organization_id=organization_id,
            environment_id=environment_id,
            nondefault=nondefault,
            noncomposite=noncomposite,
            composite=composite,
            without=without,
            name=name,
            label=label,
            include_generated=include_generated,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_views_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        noncomposite: Annotated[
            Optional[StrictBool],
            Field(description="Filter out composite content views"),
        ] = None,
        composite: Annotated[
            Optional[StrictBool],
            Field(description="Filter only composite content views"),
        ] = None,
        without: Annotated[
            Optional[List[StrictStr]],
            Field(description="Do not include this array of content views"),
        ] = None,
        name: Annotated[
            Optional[StrictStr], Field(description="Name of the content view")
        ] = None,
        label: Annotated[
            Optional[StrictStr], Field(description="Label of the content view")
        ] = None,
        include_generated: Annotated[
            Optional[StrictBool],
            Field(
                description="Include content views generated by imports/exports. Defaults to false"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List content views


        :param organization_id: organization identifier (required)
        :type organization_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param noncomposite: Filter out composite content views
        :type noncomposite: bool
        :param composite: Filter only composite content views
        :type composite: bool
        :param without: Do not include this array of content views
        :type without: List[str]
        :param name: Name of the content view
        :type name: str
        :param label: Label of the content view
        :type label: str
        :param include_generated: Include content views generated by imports/exports. Defaults to false
        :type include_generated: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_serialize(
            organization_id=organization_id,
            environment_id=environment_id,
            nondefault=nondefault,
            noncomposite=noncomposite,
            composite=composite,
            without=without,
            name=name,
            label=label,
            include_generated=include_generated,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_views_serialize(
        self,
        organization_id,
        environment_id,
        nondefault,
        noncomposite,
        composite,
        without,
        name,
        label,
        include_generated,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "without": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if environment_id is not None:
            _query_params.append(("environment_id", environment_id))

        if nondefault is not None:
            _query_params.append(("nondefault", nondefault))

        if noncomposite is not None:
            _query_params.append(("noncomposite", noncomposite))

        if composite is not None:
            _query_params.append(("composite", composite))

        if without is not None:
            _query_params.append(("without", without))

        if name is not None:
            _query_params.append(("name", name))

        if label is not None:
            _query_params.append(("label", label))

        if include_generated is not None:
            _query_params.append(("include_generated", include_generated))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_views",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_views_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a content view


        :param id: content view numeric identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_views_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a content view


        :param id: content view numeric identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_views_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a content view


        :param id: content view numeric identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_views_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_views/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations_organization_id_content_views(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        noncomposite: Annotated[
            Optional[StrictBool],
            Field(description="Filter out composite content views"),
        ] = None,
        composite: Annotated[
            Optional[StrictBool],
            Field(description="Filter only composite content views"),
        ] = None,
        without: Annotated[
            Optional[List[StrictStr]],
            Field(description="Do not include this array of content views"),
        ] = None,
        name: Annotated[
            Optional[StrictStr], Field(description="Name of the content view")
        ] = None,
        label: Annotated[
            Optional[StrictStr], Field(description="Label of the content view")
        ] = None,
        include_generated: Annotated[
            Optional[StrictBool],
            Field(
                description="Include content views generated by imports/exports. Defaults to false"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List content views


        :param organization_id: organization identifier (required)
        :type organization_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param noncomposite: Filter out composite content views
        :type noncomposite: bool
        :param composite: Filter only composite content views
        :type composite: bool
        :param without: Do not include this array of content views
        :type without: List[str]
        :param name: Name of the content view
        :type name: str
        :param label: Label of the content view
        :type label: str
        :param include_generated: Include content views generated by imports/exports. Defaults to false
        :type include_generated: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_content_views_serialize(
            organization_id=organization_id,
            environment_id=environment_id,
            nondefault=nondefault,
            noncomposite=noncomposite,
            composite=composite,
            without=without,
            name=name,
            label=label,
            include_generated=include_generated,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_organization_id_content_views_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        noncomposite: Annotated[
            Optional[StrictBool],
            Field(description="Filter out composite content views"),
        ] = None,
        composite: Annotated[
            Optional[StrictBool],
            Field(description="Filter only composite content views"),
        ] = None,
        without: Annotated[
            Optional[List[StrictStr]],
            Field(description="Do not include this array of content views"),
        ] = None,
        name: Annotated[
            Optional[StrictStr], Field(description="Name of the content view")
        ] = None,
        label: Annotated[
            Optional[StrictStr], Field(description="Label of the content view")
        ] = None,
        include_generated: Annotated[
            Optional[StrictBool],
            Field(
                description="Include content views generated by imports/exports. Defaults to false"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List content views


        :param organization_id: organization identifier (required)
        :type organization_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param noncomposite: Filter out composite content views
        :type noncomposite: bool
        :param composite: Filter only composite content views
        :type composite: bool
        :param without: Do not include this array of content views
        :type without: List[str]
        :param name: Name of the content view
        :type name: str
        :param label: Label of the content view
        :type label: str
        :param include_generated: Include content views generated by imports/exports. Defaults to false
        :type include_generated: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_content_views_serialize(
            organization_id=organization_id,
            environment_id=environment_id,
            nondefault=nondefault,
            noncomposite=noncomposite,
            composite=composite,
            without=without,
            name=name,
            label=label,
            include_generated=include_generated,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_organization_id_content_views_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization identifier")
        ],
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        nondefault: Annotated[
            Optional[StrictBool], Field(description="Filter out default content views")
        ] = None,
        noncomposite: Annotated[
            Optional[StrictBool],
            Field(description="Filter out composite content views"),
        ] = None,
        composite: Annotated[
            Optional[StrictBool],
            Field(description="Filter only composite content views"),
        ] = None,
        without: Annotated[
            Optional[List[StrictStr]],
            Field(description="Do not include this array of content views"),
        ] = None,
        name: Annotated[
            Optional[StrictStr], Field(description="Name of the content view")
        ] = None,
        label: Annotated[
            Optional[StrictStr], Field(description="Label of the content view")
        ] = None,
        include_generated: Annotated[
            Optional[StrictBool],
            Field(
                description="Include content views generated by imports/exports. Defaults to false"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List content views


        :param organization_id: organization identifier (required)
        :type organization_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param nondefault: Filter out default content views
        :type nondefault: bool
        :param noncomposite: Filter out composite content views
        :type noncomposite: bool
        :param composite: Filter only composite content views
        :type composite: bool
        :param without: Do not include this array of content views
        :type without: List[str]
        :param name: Name of the content view
        :type name: str
        :param label: Label of the content view
        :type label: str
        :param include_generated: Include content views generated by imports/exports. Defaults to false
        :type include_generated: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_content_views_serialize(
            organization_id=organization_id,
            environment_id=environment_id,
            nondefault=nondefault,
            noncomposite=noncomposite,
            composite=composite,
            without=without,
            name=name,
            label=label,
            include_generated=include_generated,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_organization_id_content_views_serialize(
        self,
        organization_id,
        environment_id,
        nondefault,
        noncomposite,
        composite,
        without,
        name,
        label,
        include_generated,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "without": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        # process the query parameters
        if environment_id is not None:
            _query_params.append(("environment_id", environment_id))

        if nondefault is not None:
            _query_params.append(("nondefault", nondefault))

        if noncomposite is not None:
            _query_params.append(("noncomposite", noncomposite))

        if composite is not None:
            _query_params.append(("composite", composite))

        if without is not None:
            _query_params.append(("without", without))

        if name is not None:
            _query_params.append(("name", name))

        if label is not None:
            _query_params.append(("label", label))

        if include_generated is not None:
            _query_params.append(("include_generated", include_generated))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations/{organization_id}/content_views",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_content_views(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization identifier")
        ],
        name: Annotated[StrictStr, Field(description="Name of the content view")],
        label: Annotated[
            Optional[StrictStr], Field(description="Content view label")
        ] = None,
        composite: Annotated[
            Optional[StrictBool], Field(description="Composite content view")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="Description for the content view")
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of repository ids")
        ] = None,
        component_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of component content view version ids for composite views"
            ),
        ] = None,
        auto_publish: Annotated[
            Optional[StrictBool],
            Field(description="Enable/Disable auto publish of composite view"),
        ] = None,
        solve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="Solve RPM dependencies by default on Content View publish, defaults to false"
            ),
        ] = None,
        import_only: Annotated[
            Optional[StrictBool],
            Field(
                description="Designate this Content View for importing from upstream servers only. Defaults to false"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a content view


        :param organization_id: Organization identifier (required)
        :type organization_id: float
        :param name: Name of the content view (required)
        :type name: str
        :param label: Content view label
        :type label: str
        :param composite: Composite content view
        :type composite: bool
        :param description: Description for the content view
        :type description: str
        :param repository_ids: List of repository ids
        :type repository_ids: List[str]
        :param component_ids: List of component content view version ids for composite views
        :type component_ids: List[str]
        :param auto_publish: Enable/Disable auto publish of composite view
        :type auto_publish: bool
        :param solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :type solve_dependencies: bool
        :param import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :type import_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_serialize(
            organization_id=organization_id,
            name=name,
            label=label,
            composite=composite,
            description=description,
            repository_ids=repository_ids,
            component_ids=component_ids,
            auto_publish=auto_publish,
            solve_dependencies=solve_dependencies,
            import_only=import_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_content_views_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization identifier")
        ],
        name: Annotated[StrictStr, Field(description="Name of the content view")],
        label: Annotated[
            Optional[StrictStr], Field(description="Content view label")
        ] = None,
        composite: Annotated[
            Optional[StrictBool], Field(description="Composite content view")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="Description for the content view")
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of repository ids")
        ] = None,
        component_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of component content view version ids for composite views"
            ),
        ] = None,
        auto_publish: Annotated[
            Optional[StrictBool],
            Field(description="Enable/Disable auto publish of composite view"),
        ] = None,
        solve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="Solve RPM dependencies by default on Content View publish, defaults to false"
            ),
        ] = None,
        import_only: Annotated[
            Optional[StrictBool],
            Field(
                description="Designate this Content View for importing from upstream servers only. Defaults to false"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a content view


        :param organization_id: Organization identifier (required)
        :type organization_id: float
        :param name: Name of the content view (required)
        :type name: str
        :param label: Content view label
        :type label: str
        :param composite: Composite content view
        :type composite: bool
        :param description: Description for the content view
        :type description: str
        :param repository_ids: List of repository ids
        :type repository_ids: List[str]
        :param component_ids: List of component content view version ids for composite views
        :type component_ids: List[str]
        :param auto_publish: Enable/Disable auto publish of composite view
        :type auto_publish: bool
        :param solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :type solve_dependencies: bool
        :param import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :type import_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_serialize(
            organization_id=organization_id,
            name=name,
            label=label,
            composite=composite,
            description=description,
            repository_ids=repository_ids,
            component_ids=component_ids,
            auto_publish=auto_publish,
            solve_dependencies=solve_dependencies,
            import_only=import_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_content_views_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization identifier")
        ],
        name: Annotated[StrictStr, Field(description="Name of the content view")],
        label: Annotated[
            Optional[StrictStr], Field(description="Content view label")
        ] = None,
        composite: Annotated[
            Optional[StrictBool], Field(description="Composite content view")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="Description for the content view")
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of repository ids")
        ] = None,
        component_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of component content view version ids for composite views"
            ),
        ] = None,
        auto_publish: Annotated[
            Optional[StrictBool],
            Field(description="Enable/Disable auto publish of composite view"),
        ] = None,
        solve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="Solve RPM dependencies by default on Content View publish, defaults to false"
            ),
        ] = None,
        import_only: Annotated[
            Optional[StrictBool],
            Field(
                description="Designate this Content View for importing from upstream servers only. Defaults to false"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a content view


        :param organization_id: Organization identifier (required)
        :type organization_id: float
        :param name: Name of the content view (required)
        :type name: str
        :param label: Content view label
        :type label: str
        :param composite: Composite content view
        :type composite: bool
        :param description: Description for the content view
        :type description: str
        :param repository_ids: List of repository ids
        :type repository_ids: List[str]
        :param component_ids: List of component content view version ids for composite views
        :type component_ids: List[str]
        :param auto_publish: Enable/Disable auto publish of composite view
        :type auto_publish: bool
        :param solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :type solve_dependencies: bool
        :param import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :type import_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_serialize(
            organization_id=organization_id,
            name=name,
            label=label,
            composite=composite,
            description=description,
            repository_ids=repository_ids,
            component_ids=component_ids,
            auto_publish=auto_publish,
            solve_dependencies=solve_dependencies,
            import_only=import_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_content_views_serialize(
        self,
        organization_id,
        name,
        label,
        composite,
        description,
        repository_ids,
        component_ids,
        auto_publish,
        solve_dependencies,
        import_only,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "repository_ids": "csv",
            "component_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if name is not None:
            _form_params.append(("name", name))
        if label is not None:
            _form_params.append(("label", label))
        if composite is not None:
            _form_params.append(("composite", composite))
        if description is not None:
            _form_params.append(("description", description))
        if repository_ids is not None:
            _form_params.append(("repository_ids", repository_ids))
        if component_ids is not None:
            _form_params.append(("component_ids", component_ids))
        if auto_publish is not None:
            _form_params.append(("auto_publish", auto_publish))
        if solve_dependencies is not None:
            _form_params.append(("solve_dependencies", solve_dependencies))
        if import_only is not None:
            _form_params.append(("import_only", import_only))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/content_views",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_content_views_id_copy(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view numeric identifier"),
        ],
        name: Annotated[StrictStr, Field(description="New content view name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Make copy of a content view


        :param id: Content view numeric identifier (required)
        :type id: float
        :param name: New content view name (required)
        :type name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_id_copy_serialize(
            id=id,
            name=name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_content_views_id_copy_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view numeric identifier"),
        ],
        name: Annotated[StrictStr, Field(description="New content view name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Make copy of a content view


        :param id: Content view numeric identifier (required)
        :type id: float
        :param name: New content view name (required)
        :type name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_id_copy_serialize(
            id=id,
            name=name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_content_views_id_copy_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="Content view numeric identifier"),
        ],
        name: Annotated[StrictStr, Field(description="New content view name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Make copy of a content view


        :param id: Content view numeric identifier (required)
        :type id: float
        :param name: New content view name (required)
        :type name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_id_copy_serialize(
            id=id,
            name=name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_content_views_id_copy_serialize(
        self,
        id,
        name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(("name", name))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/content_views/{id}/copy",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_content_views_id_publish(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        description: Annotated[
            Optional[StrictStr],
            Field(description="Description for the new published content view version"),
        ] = None,
        major: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Override the major version number"),
        ] = None,
        minor: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Override the minor version number"),
        ] = None,
        environment_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Identifiers for Lifecycle Environment"),
        ] = None,
        publish_only_if_needed: Annotated[
            Optional[StrictBool],
            Field(
                description="Check audited changes and proceed only if content or filters have changed since last publish"
            ),
        ] = None,
        is_force_promote: Annotated[
            Optional[StrictBool],
            Field(
                description="Force content view promotion and bypass lifecycle environment restriction"
            ),
        ] = None,
        repos_units: Annotated[
            Optional[List[StrictStr]],
            Field(description="Specify the list of units in each repo"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Publish a content view


        :param id: Content view identifier (required)
        :type id: float
        :param description: Description for the new published content view version
        :type description: str
        :param major: Override the major version number
        :type major: float
        :param minor: Override the minor version number
        :type minor: float
        :param environment_ids: Identifiers for Lifecycle Environment
        :type environment_ids: List[str]
        :param publish_only_if_needed: Check audited changes and proceed only if content or filters have changed since last publish
        :type publish_only_if_needed: bool
        :param is_force_promote: Force content view promotion and bypass lifecycle environment restriction
        :type is_force_promote: bool
        :param repos_units: Specify the list of units in each repo
        :type repos_units: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_id_publish_serialize(
            id=id,
            description=description,
            major=major,
            minor=minor,
            environment_ids=environment_ids,
            publish_only_if_needed=publish_only_if_needed,
            is_force_promote=is_force_promote,
            repos_units=repos_units,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_content_views_id_publish_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        description: Annotated[
            Optional[StrictStr],
            Field(description="Description for the new published content view version"),
        ] = None,
        major: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Override the major version number"),
        ] = None,
        minor: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Override the minor version number"),
        ] = None,
        environment_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Identifiers for Lifecycle Environment"),
        ] = None,
        publish_only_if_needed: Annotated[
            Optional[StrictBool],
            Field(
                description="Check audited changes and proceed only if content or filters have changed since last publish"
            ),
        ] = None,
        is_force_promote: Annotated[
            Optional[StrictBool],
            Field(
                description="Force content view promotion and bypass lifecycle environment restriction"
            ),
        ] = None,
        repos_units: Annotated[
            Optional[List[StrictStr]],
            Field(description="Specify the list of units in each repo"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Publish a content view


        :param id: Content view identifier (required)
        :type id: float
        :param description: Description for the new published content view version
        :type description: str
        :param major: Override the major version number
        :type major: float
        :param minor: Override the minor version number
        :type minor: float
        :param environment_ids: Identifiers for Lifecycle Environment
        :type environment_ids: List[str]
        :param publish_only_if_needed: Check audited changes and proceed only if content or filters have changed since last publish
        :type publish_only_if_needed: bool
        :param is_force_promote: Force content view promotion and bypass lifecycle environment restriction
        :type is_force_promote: bool
        :param repos_units: Specify the list of units in each repo
        :type repos_units: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_id_publish_serialize(
            id=id,
            description=description,
            major=major,
            minor=minor,
            environment_ids=environment_ids,
            publish_only_if_needed=publish_only_if_needed,
            is_force_promote=is_force_promote,
            repos_units=repos_units,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_content_views_id_publish_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        description: Annotated[
            Optional[StrictStr],
            Field(description="Description for the new published content view version"),
        ] = None,
        major: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Override the major version number"),
        ] = None,
        minor: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Override the minor version number"),
        ] = None,
        environment_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="Identifiers for Lifecycle Environment"),
        ] = None,
        publish_only_if_needed: Annotated[
            Optional[StrictBool],
            Field(
                description="Check audited changes and proceed only if content or filters have changed since last publish"
            ),
        ] = None,
        is_force_promote: Annotated[
            Optional[StrictBool],
            Field(
                description="Force content view promotion and bypass lifecycle environment restriction"
            ),
        ] = None,
        repos_units: Annotated[
            Optional[List[StrictStr]],
            Field(description="Specify the list of units in each repo"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Publish a content view


        :param id: Content view identifier (required)
        :type id: float
        :param description: Description for the new published content view version
        :type description: str
        :param major: Override the major version number
        :type major: float
        :param minor: Override the minor version number
        :type minor: float
        :param environment_ids: Identifiers for Lifecycle Environment
        :type environment_ids: List[str]
        :param publish_only_if_needed: Check audited changes and proceed only if content or filters have changed since last publish
        :type publish_only_if_needed: bool
        :param is_force_promote: Force content view promotion and bypass lifecycle environment restriction
        :type is_force_promote: bool
        :param repos_units: Specify the list of units in each repo
        :type repos_units: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_id_publish_serialize(
            id=id,
            description=description,
            major=major,
            minor=minor,
            environment_ids=environment_ids,
            publish_only_if_needed=publish_only_if_needed,
            is_force_promote=is_force_promote,
            repos_units=repos_units,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_content_views_id_publish_serialize(
        self,
        id,
        description,
        major,
        minor,
        environment_ids,
        publish_only_if_needed,
        is_force_promote,
        repos_units,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "environment_ids": "csv",
            "repos_units": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if description is not None:
            _form_params.append(("description", description))
        if major is not None:
            _form_params.append(("major", major))
        if minor is not None:
            _form_params.append(("minor", minor))
        if environment_ids is not None:
            _form_params.append(("environment_ids", environment_ids))
        if publish_only_if_needed is not None:
            _form_params.append(("publish_only_if_needed", publish_only_if_needed))
        if is_force_promote is not None:
            _form_params.append(("is_force_promote", is_force_promote))
        if repos_units is not None:
            _form_params.append(("repos_units", repos_units))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/content_views/{id}/publish",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_organizations_organization_id_content_views(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization identifier")
        ],
        name: Annotated[StrictStr, Field(description="Name of the content view")],
        label: Annotated[
            Optional[StrictStr], Field(description="Content view label")
        ] = None,
        composite: Annotated[
            Optional[StrictBool], Field(description="Composite content view")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="Description for the content view")
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of repository ids")
        ] = None,
        component_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of component content view version ids for composite views"
            ),
        ] = None,
        auto_publish: Annotated[
            Optional[StrictBool],
            Field(description="Enable/Disable auto publish of composite view"),
        ] = None,
        solve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="Solve RPM dependencies by default on Content View publish, defaults to false"
            ),
        ] = None,
        import_only: Annotated[
            Optional[StrictBool],
            Field(
                description="Designate this Content View for importing from upstream servers only. Defaults to false"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a content view


        :param organization_id: Organization identifier (required)
        :type organization_id: float
        :param name: Name of the content view (required)
        :type name: str
        :param label: Content view label
        :type label: str
        :param composite: Composite content view
        :type composite: bool
        :param description: Description for the content view
        :type description: str
        :param repository_ids: List of repository ids
        :type repository_ids: List[str]
        :param component_ids: List of component content view version ids for composite views
        :type component_ids: List[str]
        :param auto_publish: Enable/Disable auto publish of composite view
        :type auto_publish: bool
        :param solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :type solve_dependencies: bool
        :param import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :type import_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_organizations_organization_id_content_views_serialize(
            organization_id=organization_id,
            name=name,
            label=label,
            composite=composite,
            description=description,
            repository_ids=repository_ids,
            component_ids=component_ids,
            auto_publish=auto_publish,
            solve_dependencies=solve_dependencies,
            import_only=import_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_organizations_organization_id_content_views_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization identifier")
        ],
        name: Annotated[StrictStr, Field(description="Name of the content view")],
        label: Annotated[
            Optional[StrictStr], Field(description="Content view label")
        ] = None,
        composite: Annotated[
            Optional[StrictBool], Field(description="Composite content view")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="Description for the content view")
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of repository ids")
        ] = None,
        component_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of component content view version ids for composite views"
            ),
        ] = None,
        auto_publish: Annotated[
            Optional[StrictBool],
            Field(description="Enable/Disable auto publish of composite view"),
        ] = None,
        solve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="Solve RPM dependencies by default on Content View publish, defaults to false"
            ),
        ] = None,
        import_only: Annotated[
            Optional[StrictBool],
            Field(
                description="Designate this Content View for importing from upstream servers only. Defaults to false"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a content view


        :param organization_id: Organization identifier (required)
        :type organization_id: float
        :param name: Name of the content view (required)
        :type name: str
        :param label: Content view label
        :type label: str
        :param composite: Composite content view
        :type composite: bool
        :param description: Description for the content view
        :type description: str
        :param repository_ids: List of repository ids
        :type repository_ids: List[str]
        :param component_ids: List of component content view version ids for composite views
        :type component_ids: List[str]
        :param auto_publish: Enable/Disable auto publish of composite view
        :type auto_publish: bool
        :param solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :type solve_dependencies: bool
        :param import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :type import_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_organizations_organization_id_content_views_serialize(
            organization_id=organization_id,
            name=name,
            label=label,
            composite=composite,
            description=description,
            repository_ids=repository_ids,
            component_ids=component_ids,
            auto_publish=auto_publish,
            solve_dependencies=solve_dependencies,
            import_only=import_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_organizations_organization_id_content_views_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization identifier")
        ],
        name: Annotated[StrictStr, Field(description="Name of the content view")],
        label: Annotated[
            Optional[StrictStr], Field(description="Content view label")
        ] = None,
        composite: Annotated[
            Optional[StrictBool], Field(description="Composite content view")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="Description for the content view")
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of repository ids")
        ] = None,
        component_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of component content view version ids for composite views"
            ),
        ] = None,
        auto_publish: Annotated[
            Optional[StrictBool],
            Field(description="Enable/Disable auto publish of composite view"),
        ] = None,
        solve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="Solve RPM dependencies by default on Content View publish, defaults to false"
            ),
        ] = None,
        import_only: Annotated[
            Optional[StrictBool],
            Field(
                description="Designate this Content View for importing from upstream servers only. Defaults to false"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a content view


        :param organization_id: Organization identifier (required)
        :type organization_id: float
        :param name: Name of the content view (required)
        :type name: str
        :param label: Content view label
        :type label: str
        :param composite: Composite content view
        :type composite: bool
        :param description: Description for the content view
        :type description: str
        :param repository_ids: List of repository ids
        :type repository_ids: List[str]
        :param component_ids: List of component content view version ids for composite views
        :type component_ids: List[str]
        :param auto_publish: Enable/Disable auto publish of composite view
        :type auto_publish: bool
        :param solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :type solve_dependencies: bool
        :param import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :type import_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_organizations_organization_id_content_views_serialize(
            organization_id=organization_id,
            name=name,
            label=label,
            composite=composite,
            description=description,
            repository_ids=repository_ids,
            component_ids=component_ids,
            auto_publish=auto_publish,
            solve_dependencies=solve_dependencies,
            import_only=import_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_organizations_organization_id_content_views_serialize(
        self,
        organization_id,
        name,
        label,
        composite,
        description,
        repository_ids,
        component_ids,
        auto_publish,
        solve_dependencies,
        import_only,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "repository_ids": "csv",
            "component_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(("name", name))
        if label is not None:
            _form_params.append(("label", label))
        if composite is not None:
            _form_params.append(("composite", composite))
        if description is not None:
            _form_params.append(("description", description))
        if repository_ids is not None:
            _form_params.append(("repository_ids", repository_ids))
        if component_ids is not None:
            _form_params.append(("component_ids", component_ids))
        if auto_publish is not None:
            _form_params.append(("auto_publish", auto_publish))
        if solve_dependencies is not None:
            _form_params.append(("solve_dependencies", solve_dependencies))
        if import_only is not None:
            _form_params.append(("import_only", import_only))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/organizations/{organization_id}/content_views",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_views_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="New name for the content view")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="Description for the content view")
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of repository ids")
        ] = None,
        component_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of component content view version ids for composite views"
            ),
        ] = None,
        auto_publish: Annotated[
            Optional[StrictBool],
            Field(description="Enable/Disable auto publish of composite view"),
        ] = None,
        solve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="Solve RPM dependencies by default on Content View publish, defaults to false"
            ),
        ] = None,
        import_only: Annotated[
            Optional[StrictBool],
            Field(
                description="Designate this Content View for importing from upstream servers only. Defaults to false"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a content view


        :param id: Content view identifier (required)
        :type id: float
        :param name: New name for the content view
        :type name: str
        :param description: Description for the content view
        :type description: str
        :param repository_ids: List of repository ids
        :type repository_ids: List[str]
        :param component_ids: List of component content view version ids for composite views
        :type component_ids: List[str]
        :param auto_publish: Enable/Disable auto publish of composite view
        :type auto_publish: bool
        :param solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :type solve_dependencies: bool
        :param import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :type import_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_serialize(
            id=id,
            name=name,
            description=description,
            repository_ids=repository_ids,
            component_ids=component_ids,
            auto_publish=auto_publish,
            solve_dependencies=solve_dependencies,
            import_only=import_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_views_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="New name for the content view")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="Description for the content view")
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of repository ids")
        ] = None,
        component_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of component content view version ids for composite views"
            ),
        ] = None,
        auto_publish: Annotated[
            Optional[StrictBool],
            Field(description="Enable/Disable auto publish of composite view"),
        ] = None,
        solve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="Solve RPM dependencies by default on Content View publish, defaults to false"
            ),
        ] = None,
        import_only: Annotated[
            Optional[StrictBool],
            Field(
                description="Designate this Content View for importing from upstream servers only. Defaults to false"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a content view


        :param id: Content view identifier (required)
        :type id: float
        :param name: New name for the content view
        :type name: str
        :param description: Description for the content view
        :type description: str
        :param repository_ids: List of repository ids
        :type repository_ids: List[str]
        :param component_ids: List of component content view version ids for composite views
        :type component_ids: List[str]
        :param auto_publish: Enable/Disable auto publish of composite view
        :type auto_publish: bool
        :param solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :type solve_dependencies: bool
        :param import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :type import_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_serialize(
            id=id,
            name=name,
            description=description,
            repository_ids=repository_ids,
            component_ids=component_ids,
            auto_publish=auto_publish,
            solve_dependencies=solve_dependencies,
            import_only=import_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_views_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Content view identifier")
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="New name for the content view")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="Description for the content view")
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of repository ids")
        ] = None,
        component_ids: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of component content view version ids for composite views"
            ),
        ] = None,
        auto_publish: Annotated[
            Optional[StrictBool],
            Field(description="Enable/Disable auto publish of composite view"),
        ] = None,
        solve_dependencies: Annotated[
            Optional[StrictBool],
            Field(
                description="Solve RPM dependencies by default on Content View publish, defaults to false"
            ),
        ] = None,
        import_only: Annotated[
            Optional[StrictBool],
            Field(
                description="Designate this Content View for importing from upstream servers only. Defaults to false"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a content view


        :param id: Content view identifier (required)
        :type id: float
        :param name: New name for the content view
        :type name: str
        :param description: Description for the content view
        :type description: str
        :param repository_ids: List of repository ids
        :type repository_ids: List[str]
        :param component_ids: List of component content view version ids for composite views
        :type component_ids: List[str]
        :param auto_publish: Enable/Disable auto publish of composite view
        :type auto_publish: bool
        :param solve_dependencies: Solve RPM dependencies by default on Content View publish, defaults to false
        :type solve_dependencies: bool
        :param import_only: Designate this Content View for importing from upstream servers only. Defaults to false
        :type import_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_serialize(
            id=id,
            name=name,
            description=description,
            repository_ids=repository_ids,
            component_ids=component_ids,
            auto_publish=auto_publish,
            solve_dependencies=solve_dependencies,
            import_only=import_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_views_id_serialize(
        self,
        id,
        name,
        description,
        repository_ids,
        component_ids,
        auto_publish,
        solve_dependencies,
        import_only,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "repository_ids": "csv",
            "component_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(("name", name))
        if description is not None:
            _form_params.append(("description", description))
        if repository_ids is not None:
            _form_params.append(("repository_ids", repository_ids))
        if component_ids is not None:
            _form_params.append(("component_ids", component_ids))
        if auto_publish is not None:
            _form_params.append(("auto_publish", auto_publish))
        if solve_dependencies is not None:
            _form_params.append(("solve_dependencies", solve_dependencies))
        if import_only is not None:
            _form_params.append(("import_only", import_only))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_views/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_views_id_bulk_delete_versions(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for versions to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of versions to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of versions to exclude and not run an action on"),
        ] = None,
        system_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned systems to"),
        ] = None,
        system_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned systems to"),
        ] = None,
        key_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned activation keys to"),
        ] = None,
        key_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned activation keys to"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Bulk remove versions from a content view and reassign systems and keys


        :param id: content view numeric identifier (required)
        :type id: float
        :param included_search: Search string for versions to perform an action on
        :type included_search: str
        :param included_ids: List of versions to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of versions to exclude and not run an action on
        :type excluded_ids: List[str]
        :param system_content_view_id: content view to reassign orphaned systems to
        :type system_content_view_id: float
        :param system_environment_id: environment to reassign orphaned systems to
        :type system_environment_id: float
        :param key_content_view_id: content view to reassign orphaned activation keys to
        :type key_content_view_id: float
        :param key_environment_id: environment to reassign orphaned activation keys to
        :type key_environment_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_bulk_delete_versions_serialize(
            id=id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            system_content_view_id=system_content_view_id,
            system_environment_id=system_environment_id,
            key_content_view_id=key_content_view_id,
            key_environment_id=key_environment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_views_id_bulk_delete_versions_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for versions to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of versions to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of versions to exclude and not run an action on"),
        ] = None,
        system_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned systems to"),
        ] = None,
        system_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned systems to"),
        ] = None,
        key_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned activation keys to"),
        ] = None,
        key_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned activation keys to"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Bulk remove versions from a content view and reassign systems and keys


        :param id: content view numeric identifier (required)
        :type id: float
        :param included_search: Search string for versions to perform an action on
        :type included_search: str
        :param included_ids: List of versions to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of versions to exclude and not run an action on
        :type excluded_ids: List[str]
        :param system_content_view_id: content view to reassign orphaned systems to
        :type system_content_view_id: float
        :param system_environment_id: environment to reassign orphaned systems to
        :type system_environment_id: float
        :param key_content_view_id: content view to reassign orphaned activation keys to
        :type key_content_view_id: float
        :param key_environment_id: environment to reassign orphaned activation keys to
        :type key_environment_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_bulk_delete_versions_serialize(
            id=id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            system_content_view_id=system_content_view_id,
            system_environment_id=system_environment_id,
            key_content_view_id=key_content_view_id,
            key_environment_id=key_environment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_views_id_bulk_delete_versions_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        included_search: Annotated[
            Optional[StrictStr],
            Field(description="Search string for versions to perform an action on"),
        ] = None,
        included_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of versions to perform an action on"),
        ] = None,
        excluded_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of versions to exclude and not run an action on"),
        ] = None,
        system_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned systems to"),
        ] = None,
        system_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned systems to"),
        ] = None,
        key_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned activation keys to"),
        ] = None,
        key_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned activation keys to"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Bulk remove versions from a content view and reassign systems and keys


        :param id: content view numeric identifier (required)
        :type id: float
        :param included_search: Search string for versions to perform an action on
        :type included_search: str
        :param included_ids: List of versions to perform an action on
        :type included_ids: List[str]
        :param excluded_ids: List of versions to exclude and not run an action on
        :type excluded_ids: List[str]
        :param system_content_view_id: content view to reassign orphaned systems to
        :type system_content_view_id: float
        :param system_environment_id: environment to reassign orphaned systems to
        :type system_environment_id: float
        :param key_content_view_id: content view to reassign orphaned activation keys to
        :type key_content_view_id: float
        :param key_environment_id: environment to reassign orphaned activation keys to
        :type key_environment_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_bulk_delete_versions_serialize(
            id=id,
            included_search=included_search,
            included_ids=included_ids,
            excluded_ids=excluded_ids,
            system_content_view_id=system_content_view_id,
            system_environment_id=system_environment_id,
            key_content_view_id=key_content_view_id,
            key_environment_id=key_environment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_views_id_bulk_delete_versions_serialize(
        self,
        id,
        included_search,
        included_ids,
        excluded_ids,
        system_content_view_id,
        system_environment_id,
        key_content_view_id,
        key_environment_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "included[ids]": "csv",
            "excluded[ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if included_search is not None:
            _form_params.append(("included[search]", included_search))
        if included_ids is not None:
            _form_params.append(("included[ids]", included_ids))
        if excluded_ids is not None:
            _form_params.append(("excluded[ids]", excluded_ids))
        if system_content_view_id is not None:
            _form_params.append(("system_content_view_id", system_content_view_id))
        if system_environment_id is not None:
            _form_params.append(("system_environment_id", system_environment_id))
        if key_content_view_id is not None:
            _form_params.append(("key_content_view_id", key_content_view_id))
        if key_environment_id is not None:
            _form_params.append(("key_environment_id", key_environment_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_views/{id}/bulk_delete_versions",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_views_id_remove(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        environment_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="environment numeric identifiers to be removed"),
        ] = None,
        content_view_version_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="content view version identifiers to be deleted"),
        ] = None,
        system_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned systems to"),
        ] = None,
        system_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned systems to"),
        ] = None,
        key_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned activation keys to"),
        ] = None,
        key_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned activation keys to"),
        ] = None,
        destroy_content_view: Annotated[
            Optional[StrictBool],
            Field(
                description="delete the content view with all the versions and environments"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Remove versions and/or environments from a content view and reassign systems and keys


        :param id: content view numeric identifier (required)
        :type id: float
        :param environment_ids: environment numeric identifiers to be removed
        :type environment_ids: List[str]
        :param content_view_version_ids: content view version identifiers to be deleted
        :type content_view_version_ids: List[str]
        :param system_content_view_id: content view to reassign orphaned systems to
        :type system_content_view_id: float
        :param system_environment_id: environment to reassign orphaned systems to
        :type system_environment_id: float
        :param key_content_view_id: content view to reassign orphaned activation keys to
        :type key_content_view_id: float
        :param key_environment_id: environment to reassign orphaned activation keys to
        :type key_environment_id: float
        :param destroy_content_view: delete the content view with all the versions and environments
        :type destroy_content_view: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_remove_serialize(
            id=id,
            environment_ids=environment_ids,
            content_view_version_ids=content_view_version_ids,
            system_content_view_id=system_content_view_id,
            system_environment_id=system_environment_id,
            key_content_view_id=key_content_view_id,
            key_environment_id=key_environment_id,
            destroy_content_view=destroy_content_view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_views_id_remove_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        environment_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="environment numeric identifiers to be removed"),
        ] = None,
        content_view_version_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="content view version identifiers to be deleted"),
        ] = None,
        system_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned systems to"),
        ] = None,
        system_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned systems to"),
        ] = None,
        key_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned activation keys to"),
        ] = None,
        key_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned activation keys to"),
        ] = None,
        destroy_content_view: Annotated[
            Optional[StrictBool],
            Field(
                description="delete the content view with all the versions and environments"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Remove versions and/or environments from a content view and reassign systems and keys


        :param id: content view numeric identifier (required)
        :type id: float
        :param environment_ids: environment numeric identifiers to be removed
        :type environment_ids: List[str]
        :param content_view_version_ids: content view version identifiers to be deleted
        :type content_view_version_ids: List[str]
        :param system_content_view_id: content view to reassign orphaned systems to
        :type system_content_view_id: float
        :param system_environment_id: environment to reassign orphaned systems to
        :type system_environment_id: float
        :param key_content_view_id: content view to reassign orphaned activation keys to
        :type key_content_view_id: float
        :param key_environment_id: environment to reassign orphaned activation keys to
        :type key_environment_id: float
        :param destroy_content_view: delete the content view with all the versions and environments
        :type destroy_content_view: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_remove_serialize(
            id=id,
            environment_ids=environment_ids,
            content_view_version_ids=content_view_version_ids,
            system_content_view_id=system_content_view_id,
            system_environment_id=system_environment_id,
            key_content_view_id=key_content_view_id,
            key_environment_id=key_environment_id,
            destroy_content_view=destroy_content_view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_views_id_remove_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        environment_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="environment numeric identifiers to be removed"),
        ] = None,
        content_view_version_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="content view version identifiers to be deleted"),
        ] = None,
        system_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned systems to"),
        ] = None,
        system_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned systems to"),
        ] = None,
        key_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view to reassign orphaned activation keys to"),
        ] = None,
        key_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment to reassign orphaned activation keys to"),
        ] = None,
        destroy_content_view: Annotated[
            Optional[StrictBool],
            Field(
                description="delete the content view with all the versions and environments"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove versions and/or environments from a content view and reassign systems and keys


        :param id: content view numeric identifier (required)
        :type id: float
        :param environment_ids: environment numeric identifiers to be removed
        :type environment_ids: List[str]
        :param content_view_version_ids: content view version identifiers to be deleted
        :type content_view_version_ids: List[str]
        :param system_content_view_id: content view to reassign orphaned systems to
        :type system_content_view_id: float
        :param system_environment_id: environment to reassign orphaned systems to
        :type system_environment_id: float
        :param key_content_view_id: content view to reassign orphaned activation keys to
        :type key_content_view_id: float
        :param key_environment_id: environment to reassign orphaned activation keys to
        :type key_environment_id: float
        :param destroy_content_view: delete the content view with all the versions and environments
        :type destroy_content_view: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_remove_serialize(
            id=id,
            environment_ids=environment_ids,
            content_view_version_ids=content_view_version_ids,
            system_content_view_id=system_content_view_id,
            system_environment_id=system_environment_id,
            key_content_view_id=key_content_view_id,
            key_environment_id=key_environment_id,
            destroy_content_view=destroy_content_view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_views_id_remove_serialize(
        self,
        id,
        environment_ids,
        content_view_version_ids,
        system_content_view_id,
        system_environment_id,
        key_content_view_id,
        key_environment_id,
        destroy_content_view,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "environment_ids": "csv",
            "content_view_version_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if environment_ids is not None:
            _form_params.append(("environment_ids", environment_ids))
        if content_view_version_ids is not None:
            _form_params.append(("content_view_version_ids", content_view_version_ids))
        if system_content_view_id is not None:
            _form_params.append(("system_content_view_id", system_content_view_id))
        if system_environment_id is not None:
            _form_params.append(("system_environment_id", system_environment_id))
        if key_content_view_id is not None:
            _form_params.append(("key_content_view_id", key_content_view_id))
        if key_environment_id is not None:
            _form_params.append(("key_environment_id", key_environment_id))
        if destroy_content_view is not None:
            _form_params.append(("destroy_content_view", destroy_content_view))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_views/{id}/remove",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_views_id_remove_filters(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        filter_ids: Annotated[List[StrictStr], Field(description="filter identifiers")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete multiple filters from a content view


        :param id: content view numeric identifier (required)
        :type id: float
        :param filter_ids: filter identifiers (required)
        :type filter_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_remove_filters_serialize(
            id=id,
            filter_ids=filter_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_views_id_remove_filters_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        filter_ids: Annotated[List[StrictStr], Field(description="filter identifiers")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete multiple filters from a content view


        :param id: content view numeric identifier (required)
        :type id: float
        :param filter_ids: filter identifiers (required)
        :type filter_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_remove_filters_serialize(
            id=id,
            filter_ids=filter_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_views_id_remove_filters_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view numeric identifier"),
        ],
        filter_ids: Annotated[List[StrictStr], Field(description="filter identifiers")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete multiple filters from a content view


        :param id: content view numeric identifier (required)
        :type id: float
        :param filter_ids: filter identifiers (required)
        :type filter_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_id_remove_filters_serialize(
            id=id,
            filter_ids=filter_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_views_id_remove_filters_serialize(
        self,
        id,
        filter_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "filter_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if filter_ids is not None:
            _form_params.append(("filter_ids", filter_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_views/{id}/remove_filters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
