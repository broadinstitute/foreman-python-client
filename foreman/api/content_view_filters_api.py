# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class ContentViewFiltersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_content_view_filters_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete a filter


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_view_filters_id_serialize(
            id=id,
            content_view_id=content_view_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_content_view_filters_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete a filter


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_view_filters_id_serialize(
            id=id,
            content_view_id=content_view_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_content_view_filters_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete a filter


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_view_filters_id_serialize(
            id=id,
            content_view_id=content_view_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_content_view_filters_id_serialize(
        self,
        id,
        content_view_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if content_view_id is not None:
            _form_params.append(("content_view_id", content_view_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/content_view_filters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_content_views_content_view_id_filters_id(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete a filter


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_views_content_view_id_filters_id_serialize(
            content_view_id=content_view_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_content_views_content_view_id_filters_id_with_http_info(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete a filter


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_views_content_view_id_filters_id_serialize(
            content_view_id=content_view_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_content_views_content_view_id_filters_id_without_preload_content(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete a filter


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_content_views_content_view_id_filters_id_serialize(
            content_view_id=content_view_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_content_views_content_view_id_filters_id_serialize(
        self,
        content_view_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_id is not None:
            _path_params["content_view_id"] = content_view_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/content_views/{content_view_id}/filters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_view_filters(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        name: Annotated[
            Optional[StrictStr],
            Field(description="filter content view filters by name"),
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]], Field(description="types of filters")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """list filters


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param name: filter content view filters by name
        :type name: str
        :param types: types of filters
        :type types: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_serialize(
            content_view_id=content_view_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            name=name,
            types=types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_view_filters_with_http_info(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        name: Annotated[
            Optional[StrictStr],
            Field(description="filter content view filters by name"),
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]], Field(description="types of filters")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """list filters


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param name: filter content view filters by name
        :type name: str
        :param types: types of filters
        :type types: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_serialize(
            content_view_id=content_view_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            name=name,
            types=types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_view_filters_without_preload_content(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        name: Annotated[
            Optional[StrictStr],
            Field(description="filter content view filters by name"),
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]], Field(description="types of filters")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list filters


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param name: filter content view filters by name
        :type name: str
        :param types: types of filters
        :type types: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_serialize(
            content_view_id=content_view_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            name=name,
            types=types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_view_filters_serialize(
        self,
        content_view_id,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        name,
        types,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "types": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if content_view_id is not None:
            _query_params.append(("content_view_id", content_view_id))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        if name is not None:
            _query_params.append(("name", name))

        if types is not None:
            _query_params.append(("types", types))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_view_filters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_view_filters_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """show filter info


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_id_serialize(
            id=id,
            content_view_id=content_view_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_view_filters_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """show filter info


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_id_serialize(
            id=id,
            content_view_id=content_view_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_view_filters_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """show filter info


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_id_serialize(
            id=id,
            content_view_id=content_view_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_view_filters_id_serialize(
        self,
        id,
        content_view_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if content_view_id is not None:
            _query_params.append(("content_view_id", content_view_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_view_filters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_views_content_view_id_filters(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        name: Annotated[
            Optional[StrictStr],
            Field(description="filter content view filters by name"),
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]], Field(description="types of filters")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """list filters


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param name: filter content view filters by name
        :type name: str
        :param types: types of filters
        :type types: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_content_view_id_filters_serialize(
            content_view_id=content_view_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            name=name,
            types=types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_views_content_view_id_filters_with_http_info(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        name: Annotated[
            Optional[StrictStr],
            Field(description="filter content view filters by name"),
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]], Field(description="types of filters")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """list filters


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param name: filter content view filters by name
        :type name: str
        :param types: types of filters
        :type types: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_content_view_id_filters_serialize(
            content_view_id=content_view_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            name=name,
            types=types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_views_content_view_id_filters_without_preload_content(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        name: Annotated[
            Optional[StrictStr],
            Field(description="filter content view filters by name"),
        ] = None,
        types: Annotated[
            Optional[List[StrictStr]], Field(description="types of filters")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list filters


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param name: filter content view filters by name
        :type name: str
        :param types: types of filters
        :type types: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_content_view_id_filters_serialize(
            content_view_id=content_view_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            name=name,
            types=types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_views_content_view_id_filters_serialize(
        self,
        content_view_id,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        name,
        types,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "types": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_id is not None:
            _path_params["content_view_id"] = content_view_id
        # process the query parameters
        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        if name is not None:
            _query_params.append(("name", name))

        if types is not None:
            _query_params.append(("types", types))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_views/{content_view_id}/filters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_views_content_view_id_filters_id(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """show filter info


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_content_view_id_filters_id_serialize(
            content_view_id=content_view_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_views_content_view_id_filters_id_with_http_info(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """show filter info


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_content_view_id_filters_id_serialize(
            content_view_id=content_view_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_views_content_view_id_filters_id_without_preload_content(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """show filter info


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_content_view_id_filters_id_serialize(
            content_view_id=content_view_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_views_content_view_id_filters_id_serialize(
        self,
        content_view_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_id is not None:
            _path_params["content_view_id"] = content_view_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_views/{content_view_id}/filters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_content_view_filters(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        name: Annotated[StrictStr, Field(description="name of the filter")],
        type: Annotated[
            StrictStr,
            Field(
                description="type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd)"
            ),
        ],
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """create a filter for a content view


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param name: name of the filter (required)
        :type name: str
        :param type: type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd) (required)
        :type type: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_filters_serialize(
            content_view_id=content_view_id,
            name=name,
            type=type,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_content_view_filters_with_http_info(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        name: Annotated[StrictStr, Field(description="name of the filter")],
        type: Annotated[
            StrictStr,
            Field(
                description="type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd)"
            ),
        ],
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """create a filter for a content view


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param name: name of the filter (required)
        :type name: str
        :param type: type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd) (required)
        :type type: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_filters_serialize(
            content_view_id=content_view_id,
            name=name,
            type=type,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_content_view_filters_without_preload_content(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        name: Annotated[StrictStr, Field(description="name of the filter")],
        type: Annotated[
            StrictStr,
            Field(
                description="type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd)"
            ),
        ],
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create a filter for a content view


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param name: name of the filter (required)
        :type name: str
        :param type: type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd) (required)
        :type type: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_view_filters_serialize(
            content_view_id=content_view_id,
            name=name,
            type=type,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_content_view_filters_serialize(
        self,
        content_view_id,
        name,
        type,
        original_packages,
        original_module_streams,
        inclusion,
        repository_ids,
        description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "repository_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if content_view_id is not None:
            _form_params.append(("content_view_id", content_view_id))
        if name is not None:
            _form_params.append(("name", name))
        if type is not None:
            _form_params.append(("type", type))
        if original_packages is not None:
            _form_params.append(("original_packages", original_packages))
        if original_module_streams is not None:
            _form_params.append(("original_module_streams", original_module_streams))
        if inclusion is not None:
            _form_params.append(("inclusion", inclusion))
        if repository_ids is not None:
            _form_params.append(("repository_ids", repository_ids))
        if description is not None:
            _form_params.append(("description", description))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/content_view_filters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_content_views_content_view_id_filters(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        name: Annotated[StrictStr, Field(description="name of the filter")],
        type: Annotated[
            StrictStr,
            Field(
                description="type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd)"
            ),
        ],
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """create a filter for a content view


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param name: name of the filter (required)
        :type name: str
        :param type: type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd) (required)
        :type type: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_content_view_id_filters_serialize(
            content_view_id=content_view_id,
            name=name,
            type=type,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_content_views_content_view_id_filters_with_http_info(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        name: Annotated[StrictStr, Field(description="name of the filter")],
        type: Annotated[
            StrictStr,
            Field(
                description="type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd)"
            ),
        ],
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """create a filter for a content view


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param name: name of the filter (required)
        :type name: str
        :param type: type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd) (required)
        :type type: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_content_view_id_filters_serialize(
            content_view_id=content_view_id,
            name=name,
            type=type,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_content_views_content_view_id_filters_without_preload_content(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        name: Annotated[StrictStr, Field(description="name of the filter")],
        type: Annotated[
            StrictStr,
            Field(
                description="type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd)"
            ),
        ],
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create a filter for a content view


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param name: name of the filter (required)
        :type name: str
        :param type: type of filter (e.g. deb, rpm, package_group, erratum, erratum_id, erratum_date, docker, modulemd) (required)
        :type type: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_content_views_content_view_id_filters_serialize(
            content_view_id=content_view_id,
            name=name,
            type=type,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_content_views_content_view_id_filters_serialize(
        self,
        content_view_id,
        name,
        type,
        original_packages,
        original_module_streams,
        inclusion,
        repository_ids,
        description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "repository_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_id is not None:
            _path_params["content_view_id"] = content_view_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(("name", name))
        if type is not None:
            _form_params.append(("type", type))
        if original_packages is not None:
            _form_params.append(("original_packages", original_packages))
        if original_module_streams is not None:
            _form_params.append(("original_module_streams", original_module_streams))
        if inclusion is not None:
            _form_params.append(("inclusion", inclusion))
        if repository_ids is not None:
            _form_params.append(("repository_ids", repository_ids))
        if description is not None:
            _form_params.append(("description", description))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/content_views/{content_view_id}/filters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_view_filters_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="new name for the filter")
        ] = None,
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """update a filter


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param name: new name for the filter
        :type name: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_filters_id_serialize(
            id=id,
            content_view_id=content_view_id,
            name=name,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_view_filters_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="new name for the filter")
        ] = None,
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """update a filter


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param name: new name for the filter
        :type name: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_filters_id_serialize(
            id=id,
            content_view_id=content_view_id,
            name=name,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_view_filters_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="new name for the filter")
        ] = None,
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update a filter


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param name: new name for the filter
        :type name: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_filters_id_serialize(
            id=id,
            content_view_id=content_view_id,
            name=name,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_view_filters_id_serialize(
        self,
        id,
        content_view_id,
        name,
        original_packages,
        original_module_streams,
        inclusion,
        repository_ids,
        description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "repository_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if content_view_id is not None:
            _form_params.append(("content_view_id", content_view_id))
        if name is not None:
            _form_params.append(("name", name))
        if original_packages is not None:
            _form_params.append(("original_packages", original_packages))
        if original_module_streams is not None:
            _form_params.append(("original_module_streams", original_module_streams))
        if inclusion is not None:
            _form_params.append(("inclusion", inclusion))
        if repository_ids is not None:
            _form_params.append(("repository_ids", repository_ids))
        if description is not None:
            _form_params.append(("description", description))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_view_filters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_view_filters_id_add_filter_rules(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        rules_params: Annotated[
            Optional[List[StrictStr]], Field(description="Rules to be added")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """bulk add filter rules


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param rules_params: Rules to be added
        :type rules_params: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_filters_id_add_filter_rules_serialize(
            id=id,
            content_view_id=content_view_id,
            rules_params=rules_params,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_view_filters_id_add_filter_rules_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        rules_params: Annotated[
            Optional[List[StrictStr]], Field(description="Rules to be added")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """bulk add filter rules


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param rules_params: Rules to be added
        :type rules_params: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_filters_id_add_filter_rules_serialize(
            id=id,
            content_view_id=content_view_id,
            rules_params=rules_params,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_view_filters_id_add_filter_rules_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        rules_params: Annotated[
            Optional[List[StrictStr]], Field(description="Rules to be added")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bulk add filter rules


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param rules_params: Rules to be added
        :type rules_params: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_filters_id_add_filter_rules_serialize(
            id=id,
            content_view_id=content_view_id,
            rules_params=rules_params,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_view_filters_id_add_filter_rules_serialize(
        self,
        id,
        content_view_id,
        rules_params,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "rules_params": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if content_view_id is not None:
            _form_params.append(("content_view_id", content_view_id))
        if rules_params is not None:
            _form_params.append(("rules_params", rules_params))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_view_filters/{id}/add_filter_rules",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_view_filters_id_remove_filter_rules(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        rule_ids: Annotated[List[StrictStr], Field(description="filter identifiers")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """bulk delete filter rules


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param rule_ids: filter identifiers (required)
        :type rule_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_filters_id_remove_filter_rules_serialize(
            id=id,
            content_view_id=content_view_id,
            rule_ids=rule_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_view_filters_id_remove_filter_rules_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        rule_ids: Annotated[List[StrictStr], Field(description="filter identifiers")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """bulk delete filter rules


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param rule_ids: filter identifiers (required)
        :type rule_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_filters_id_remove_filter_rules_serialize(
            id=id,
            content_view_id=content_view_id,
            rule_ids=rule_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_view_filters_id_remove_filter_rules_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        rule_ids: Annotated[List[StrictStr], Field(description="filter identifiers")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bulk delete filter rules


        :param id: filter identifier (required)
        :type id: float
        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param rule_ids: filter identifiers (required)
        :type rule_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_view_filters_id_remove_filter_rules_serialize(
            id=id,
            content_view_id=content_view_id,
            rule_ids=rule_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_view_filters_id_remove_filter_rules_serialize(
        self,
        id,
        content_view_id,
        rule_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "rule_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if content_view_id is not None:
            _form_params.append(("content_view_id", content_view_id))
        if rule_ids is not None:
            _form_params.append(("rule_ids", rule_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_view_filters/{id}/remove_filter_rules",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_views_content_view_id_filters_id(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="new name for the filter")
        ] = None,
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """update a filter


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param name: new name for the filter
        :type name: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_content_view_id_filters_id_serialize(
            content_view_id=content_view_id,
            id=id,
            name=name,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_views_content_view_id_filters_id_with_http_info(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="new name for the filter")
        ] = None,
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """update a filter


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param name: new name for the filter
        :type name: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_content_view_id_filters_id_serialize(
            content_view_id=content_view_id,
            id=id,
            name=name,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_views_content_view_id_filters_id_without_preload_content(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        name: Annotated[
            Optional[StrictStr], Field(description="new name for the filter")
        ] = None,
        original_packages: Annotated[
            Optional[StrictBool],
            Field(
                description="add all packages without errata to the included/excluded list. (package filter only)"
            ),
        ] = None,
        original_module_streams: Annotated[
            Optional[StrictBool],
            Field(
                description="add all module streams without errata to the included/excluded list. (module stream filter only)"
            ),
        ] = None,
        inclusion: Annotated[
            Optional[StrictBool],
            Field(
                description="specifies if content should be included or excluded, default: inclusion=false"
            ),
        ] = None,
        repository_ids: Annotated[
            Optional[List[StrictStr]], Field(description="list of repository ids")
        ] = None,
        description: Annotated[
            Optional[StrictStr], Field(description="description of the filter")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update a filter


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param name: new name for the filter
        :type name: str
        :param original_packages: add all packages without errata to the included/excluded list. (package filter only)
        :type original_packages: bool
        :param original_module_streams: add all module streams without errata to the included/excluded list. (module stream filter only)
        :type original_module_streams: bool
        :param inclusion: specifies if content should be included or excluded, default: inclusion=false
        :type inclusion: bool
        :param repository_ids: list of repository ids
        :type repository_ids: List[str]
        :param description: description of the filter
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_content_view_id_filters_id_serialize(
            content_view_id=content_view_id,
            id=id,
            name=name,
            original_packages=original_packages,
            original_module_streams=original_module_streams,
            inclusion=inclusion,
            repository_ids=repository_ids,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_views_content_view_id_filters_id_serialize(
        self,
        content_view_id,
        id,
        name,
        original_packages,
        original_module_streams,
        inclusion,
        repository_ids,
        description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "repository_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_id is not None:
            _path_params["content_view_id"] = content_view_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(("name", name))
        if original_packages is not None:
            _form_params.append(("original_packages", original_packages))
        if original_module_streams is not None:
            _form_params.append(("original_module_streams", original_module_streams))
        if inclusion is not None:
            _form_params.append(("inclusion", inclusion))
        if repository_ids is not None:
            _form_params.append(("repository_ids", repository_ids))
        if description is not None:
            _form_params.append(("description", description))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_views/{content_view_id}/filters/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_views_content_view_id_filters_id_add_filter_rules(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        rules_params: Annotated[
            Optional[List[StrictStr]], Field(description="Rules to be added")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """bulk add filter rules


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param rules_params: Rules to be added
        :type rules_params: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_content_view_id_filters_id_add_filter_rules_serialize(
            content_view_id=content_view_id,
            id=id,
            rules_params=rules_params,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_views_content_view_id_filters_id_add_filter_rules_with_http_info(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        rules_params: Annotated[
            Optional[List[StrictStr]], Field(description="Rules to be added")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """bulk add filter rules


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param rules_params: Rules to be added
        :type rules_params: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_content_view_id_filters_id_add_filter_rules_serialize(
            content_view_id=content_view_id,
            id=id,
            rules_params=rules_params,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_views_content_view_id_filters_id_add_filter_rules_without_preload_content(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        rules_params: Annotated[
            Optional[List[StrictStr]], Field(description="Rules to be added")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bulk add filter rules


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param rules_params: Rules to be added
        :type rules_params: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_content_view_id_filters_id_add_filter_rules_serialize(
            content_view_id=content_view_id,
            id=id,
            rules_params=rules_params,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_views_content_view_id_filters_id_add_filter_rules_serialize(
        self,
        content_view_id,
        id,
        rules_params,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "rules_params": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_id is not None:
            _path_params["content_view_id"] = content_view_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if rules_params is not None:
            _form_params.append(("rules_params", rules_params))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_views/{content_view_id}/filters/{id}/add_filter_rules",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_content_views_content_view_id_filters_id_remove_filter_rules(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        rule_ids: Annotated[List[StrictStr], Field(description="filter identifiers")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """bulk delete filter rules


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param rule_ids: filter identifiers (required)
        :type rule_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_content_view_id_filters_id_remove_filter_rules_serialize(
            content_view_id=content_view_id,
            id=id,
            rule_ids=rule_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_content_views_content_view_id_filters_id_remove_filter_rules_with_http_info(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        rule_ids: Annotated[List[StrictStr], Field(description="filter identifiers")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """bulk delete filter rules


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param rule_ids: filter identifiers (required)
        :type rule_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_content_view_id_filters_id_remove_filter_rules_serialize(
            content_view_id=content_view_id,
            id=id,
            rule_ids=rule_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_content_views_content_view_id_filters_id_remove_filter_rules_without_preload_content(
        self,
        content_view_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="content view identifier")
        ],
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="filter identifier")
        ],
        rule_ids: Annotated[List[StrictStr], Field(description="filter identifiers")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bulk delete filter rules


        :param content_view_id: content view identifier (required)
        :type content_view_id: float
        :param id: filter identifier (required)
        :type id: float
        :param rule_ids: filter identifiers (required)
        :type rule_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_content_views_content_view_id_filters_id_remove_filter_rules_serialize(
            content_view_id=content_view_id,
            id=id,
            rule_ids=rule_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_content_views_content_view_id_filters_id_remove_filter_rules_serialize(
        self,
        content_view_id,
        id,
        rule_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "rule_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_id is not None:
            _path_params["content_view_id"] = content_view_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if rule_ids is not None:
            _form_params.append(("rule_ids", rule_ids))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/content_views/{content_view_id}/filters/{id}/remove_filter_rules",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
