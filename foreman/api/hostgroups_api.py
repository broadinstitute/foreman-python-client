# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr, field_validator

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class HostgroupsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_hostgroups_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a host group


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hostgroups_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_hostgroups_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a host group


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hostgroups_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_hostgroups_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a host group


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hostgroups_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_hostgroups_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/hostgroups/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hostgroups(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        include: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of extra information types to include"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all host groups


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param include: Array of extra information types to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hostgroups_with_http_info(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        include: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of extra information types to include"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all host groups


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param include: Array of extra information types to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hostgroups_without_preload_content(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        include: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of extra information types to include"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all host groups


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param include: Array of extra information types to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hostgroups_serialize(
        self,
        location_id,
        organization_id,
        search,
        order,
        page,
        per_page,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "include": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hostgroups",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hostgroups_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a host group


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hostgroups_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a host group


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hostgroups_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a host group


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hostgroups_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        show_hidden_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if show_hidden_parameters is not None:
            _query_params.append(("show_hidden_parameters", show_hidden_parameters))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hostgroups/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_locations_location_id_hostgroups(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        include: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of extra information types to include"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all host groups per location


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param include: Array of extra information types to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_hostgroups_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_locations_location_id_hostgroups_with_http_info(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        include: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of extra information types to include"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all host groups per location


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param include: Array of extra information types to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_hostgroups_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_locations_location_id_hostgroups_without_preload_content(
        self,
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        include: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of extra information types to include"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all host groups per location


        :param location_id: Scope by locations (required)
        :type location_id: float
        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param include: Array of extra information types to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_hostgroups_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_locations_location_id_hostgroups_serialize(
        self,
        location_id,
        organization_id,
        search,
        order,
        page,
        per_page,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "include": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_id is not None:
            _path_params["location_id"] = location_id
        # process the query parameters
        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/locations/{location_id}/hostgroups",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations_organization_id_hostgroups(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        include: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of extra information types to include"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all host groups per organization


        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param include: Array of extra information types to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_hostgroups_serialize(
            organization_id=organization_id,
            location_id=location_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_organization_id_hostgroups_with_http_info(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        include: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of extra information types to include"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all host groups per organization


        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param include: Array of extra information types to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_hostgroups_serialize(
            organization_id=organization_id,
            location_id=location_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_organization_id_hostgroups_without_preload_content(
        self,
        organization_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by organizations")
        ],
        location_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Scope by locations")
        ],
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        include: Annotated[
            Optional[List[StrictStr]],
            Field(description="Array of extra information types to include"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all host groups per organization


        :param organization_id: Scope by organizations (required)
        :type organization_id: float
        :param location_id: Scope by locations (required)
        :type location_id: float
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param include: Array of extra information types to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_hostgroups_serialize(
            organization_id=organization_id,
            location_id=location_id,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_organization_id_hostgroups_serialize(
        self,
        organization_id,
        location_id,
        search,
        order,
        page,
        per_page,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "include": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations/{organization_id}/hostgroups",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_hostgroups(
        self,
        hostgroup_name: Annotated[
            StrictStr, Field(description="Name of the host group")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        hostgroup_description: Annotated[
            Optional[StrictStr], Field(description="Host group description")
        ] = None,
        hostgroup_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Parent ID of the host group"),
        ] = None,
        hostgroup_compute_profile_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute profile ID"),
        ] = None,
        hostgroup_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute resource ID"),
        ] = None,
        hostgroup_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Operating system ID"),
        ] = None,
        hostgroup_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Architecture ID"),
        ] = None,
        hostgroup_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        hostgroup_medium_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Media ID")
        ] = None,
        hostgroup_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Partition table ID"),
        ] = None,
        hostgroup_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet ID")
        ] = None,
        hostgroup_subnet6_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet IPv6 ID")
        ] = None,
        hostgroup_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Domain ID")
        ] = None,
        hostgroup_realm_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Realm ID")
        ] = None,
        hostgroup_group_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        hostgroup_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        hostgroup_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        hostgroup_root_pass: Annotated[
            Optional[StrictStr], Field(description="Root password on provisioned hosts")
        ] = None,
        hostgroup_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        hostgroup_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        hostgroup_content_source_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content source ID"),
        ] = None,
        hostgroup_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content view ID"),
        ] = None,
        hostgroup_lifecycle_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Lifecycle environment ID"),
        ] = None,
        hostgroup_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Kickstart repository ID"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a host group


        :param hostgroup_name: Name of the host group (required)
        :type hostgroup_name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param hostgroup_description: Host group description
        :type hostgroup_description: str
        :param hostgroup_parent_id: Parent ID of the host group
        :type hostgroup_parent_id: float
        :param hostgroup_compute_profile_id: Compute profile ID
        :type hostgroup_compute_profile_id: float
        :param hostgroup_compute_resource_id: Compute resource ID
        :type hostgroup_compute_resource_id: float
        :param hostgroup_operatingsystem_id: Operating system ID
        :type hostgroup_operatingsystem_id: float
        :param hostgroup_architecture_id: Architecture ID
        :type hostgroup_architecture_id: float
        :param hostgroup_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type hostgroup_pxe_loader: str
        :param hostgroup_medium_id: Media ID
        :type hostgroup_medium_id: float
        :param hostgroup_ptable_id: Partition table ID
        :type hostgroup_ptable_id: float
        :param hostgroup_subnet_id: Subnet ID
        :type hostgroup_subnet_id: float
        :param hostgroup_subnet6_id: Subnet IPv6 ID
        :type hostgroup_subnet6_id: float
        :param hostgroup_domain_id: Domain ID
        :type hostgroup_domain_id: float
        :param hostgroup_realm_id: Realm ID
        :type hostgroup_realm_id: float
        :param hostgroup_group_parameters_attributes: Array of parameters
        :type hostgroup_group_parameters_attributes: List[str]
        :param hostgroup_puppet_proxy_id: Puppet proxy ID
        :type hostgroup_puppet_proxy_id: float
        :param hostgroup_puppet_ca_proxy_id: Puppet CA proxy ID
        :type hostgroup_puppet_ca_proxy_id: float
        :param hostgroup_root_pass: Root password on provisioned hosts
        :type hostgroup_root_pass: str
        :param hostgroup_location_ids: REPLACE locations with given ids
        :type hostgroup_location_ids: List[str]
        :param hostgroup_organization_ids: REPLACE organizations with given ids.
        :type hostgroup_organization_ids: List[str]
        :param hostgroup_content_source_id: Content source ID
        :type hostgroup_content_source_id: float
        :param hostgroup_content_view_id: Content view ID
        :type hostgroup_content_view_id: float
        :param hostgroup_lifecycle_environment_id: Lifecycle environment ID
        :type hostgroup_lifecycle_environment_id: float
        :param hostgroup_kickstart_repository_id: Kickstart repository ID
        :type hostgroup_kickstart_repository_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hostgroups_serialize(
            hostgroup_name=hostgroup_name,
            location_id=location_id,
            organization_id=organization_id,
            hostgroup_description=hostgroup_description,
            hostgroup_parent_id=hostgroup_parent_id,
            hostgroup_compute_profile_id=hostgroup_compute_profile_id,
            hostgroup_compute_resource_id=hostgroup_compute_resource_id,
            hostgroup_operatingsystem_id=hostgroup_operatingsystem_id,
            hostgroup_architecture_id=hostgroup_architecture_id,
            hostgroup_pxe_loader=hostgroup_pxe_loader,
            hostgroup_medium_id=hostgroup_medium_id,
            hostgroup_ptable_id=hostgroup_ptable_id,
            hostgroup_subnet_id=hostgroup_subnet_id,
            hostgroup_subnet6_id=hostgroup_subnet6_id,
            hostgroup_domain_id=hostgroup_domain_id,
            hostgroup_realm_id=hostgroup_realm_id,
            hostgroup_group_parameters_attributes=hostgroup_group_parameters_attributes,
            hostgroup_puppet_proxy_id=hostgroup_puppet_proxy_id,
            hostgroup_puppet_ca_proxy_id=hostgroup_puppet_ca_proxy_id,
            hostgroup_root_pass=hostgroup_root_pass,
            hostgroup_location_ids=hostgroup_location_ids,
            hostgroup_organization_ids=hostgroup_organization_ids,
            hostgroup_content_source_id=hostgroup_content_source_id,
            hostgroup_content_view_id=hostgroup_content_view_id,
            hostgroup_lifecycle_environment_id=hostgroup_lifecycle_environment_id,
            hostgroup_kickstart_repository_id=hostgroup_kickstart_repository_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_hostgroups_with_http_info(
        self,
        hostgroup_name: Annotated[
            StrictStr, Field(description="Name of the host group")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        hostgroup_description: Annotated[
            Optional[StrictStr], Field(description="Host group description")
        ] = None,
        hostgroup_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Parent ID of the host group"),
        ] = None,
        hostgroup_compute_profile_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute profile ID"),
        ] = None,
        hostgroup_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute resource ID"),
        ] = None,
        hostgroup_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Operating system ID"),
        ] = None,
        hostgroup_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Architecture ID"),
        ] = None,
        hostgroup_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        hostgroup_medium_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Media ID")
        ] = None,
        hostgroup_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Partition table ID"),
        ] = None,
        hostgroup_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet ID")
        ] = None,
        hostgroup_subnet6_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet IPv6 ID")
        ] = None,
        hostgroup_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Domain ID")
        ] = None,
        hostgroup_realm_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Realm ID")
        ] = None,
        hostgroup_group_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        hostgroup_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        hostgroup_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        hostgroup_root_pass: Annotated[
            Optional[StrictStr], Field(description="Root password on provisioned hosts")
        ] = None,
        hostgroup_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        hostgroup_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        hostgroup_content_source_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content source ID"),
        ] = None,
        hostgroup_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content view ID"),
        ] = None,
        hostgroup_lifecycle_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Lifecycle environment ID"),
        ] = None,
        hostgroup_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Kickstart repository ID"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a host group


        :param hostgroup_name: Name of the host group (required)
        :type hostgroup_name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param hostgroup_description: Host group description
        :type hostgroup_description: str
        :param hostgroup_parent_id: Parent ID of the host group
        :type hostgroup_parent_id: float
        :param hostgroup_compute_profile_id: Compute profile ID
        :type hostgroup_compute_profile_id: float
        :param hostgroup_compute_resource_id: Compute resource ID
        :type hostgroup_compute_resource_id: float
        :param hostgroup_operatingsystem_id: Operating system ID
        :type hostgroup_operatingsystem_id: float
        :param hostgroup_architecture_id: Architecture ID
        :type hostgroup_architecture_id: float
        :param hostgroup_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type hostgroup_pxe_loader: str
        :param hostgroup_medium_id: Media ID
        :type hostgroup_medium_id: float
        :param hostgroup_ptable_id: Partition table ID
        :type hostgroup_ptable_id: float
        :param hostgroup_subnet_id: Subnet ID
        :type hostgroup_subnet_id: float
        :param hostgroup_subnet6_id: Subnet IPv6 ID
        :type hostgroup_subnet6_id: float
        :param hostgroup_domain_id: Domain ID
        :type hostgroup_domain_id: float
        :param hostgroup_realm_id: Realm ID
        :type hostgroup_realm_id: float
        :param hostgroup_group_parameters_attributes: Array of parameters
        :type hostgroup_group_parameters_attributes: List[str]
        :param hostgroup_puppet_proxy_id: Puppet proxy ID
        :type hostgroup_puppet_proxy_id: float
        :param hostgroup_puppet_ca_proxy_id: Puppet CA proxy ID
        :type hostgroup_puppet_ca_proxy_id: float
        :param hostgroup_root_pass: Root password on provisioned hosts
        :type hostgroup_root_pass: str
        :param hostgroup_location_ids: REPLACE locations with given ids
        :type hostgroup_location_ids: List[str]
        :param hostgroup_organization_ids: REPLACE organizations with given ids.
        :type hostgroup_organization_ids: List[str]
        :param hostgroup_content_source_id: Content source ID
        :type hostgroup_content_source_id: float
        :param hostgroup_content_view_id: Content view ID
        :type hostgroup_content_view_id: float
        :param hostgroup_lifecycle_environment_id: Lifecycle environment ID
        :type hostgroup_lifecycle_environment_id: float
        :param hostgroup_kickstart_repository_id: Kickstart repository ID
        :type hostgroup_kickstart_repository_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hostgroups_serialize(
            hostgroup_name=hostgroup_name,
            location_id=location_id,
            organization_id=organization_id,
            hostgroup_description=hostgroup_description,
            hostgroup_parent_id=hostgroup_parent_id,
            hostgroup_compute_profile_id=hostgroup_compute_profile_id,
            hostgroup_compute_resource_id=hostgroup_compute_resource_id,
            hostgroup_operatingsystem_id=hostgroup_operatingsystem_id,
            hostgroup_architecture_id=hostgroup_architecture_id,
            hostgroup_pxe_loader=hostgroup_pxe_loader,
            hostgroup_medium_id=hostgroup_medium_id,
            hostgroup_ptable_id=hostgroup_ptable_id,
            hostgroup_subnet_id=hostgroup_subnet_id,
            hostgroup_subnet6_id=hostgroup_subnet6_id,
            hostgroup_domain_id=hostgroup_domain_id,
            hostgroup_realm_id=hostgroup_realm_id,
            hostgroup_group_parameters_attributes=hostgroup_group_parameters_attributes,
            hostgroup_puppet_proxy_id=hostgroup_puppet_proxy_id,
            hostgroup_puppet_ca_proxy_id=hostgroup_puppet_ca_proxy_id,
            hostgroup_root_pass=hostgroup_root_pass,
            hostgroup_location_ids=hostgroup_location_ids,
            hostgroup_organization_ids=hostgroup_organization_ids,
            hostgroup_content_source_id=hostgroup_content_source_id,
            hostgroup_content_view_id=hostgroup_content_view_id,
            hostgroup_lifecycle_environment_id=hostgroup_lifecycle_environment_id,
            hostgroup_kickstart_repository_id=hostgroup_kickstart_repository_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_hostgroups_without_preload_content(
        self,
        hostgroup_name: Annotated[
            StrictStr, Field(description="Name of the host group")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        hostgroup_description: Annotated[
            Optional[StrictStr], Field(description="Host group description")
        ] = None,
        hostgroup_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Parent ID of the host group"),
        ] = None,
        hostgroup_compute_profile_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute profile ID"),
        ] = None,
        hostgroup_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute resource ID"),
        ] = None,
        hostgroup_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Operating system ID"),
        ] = None,
        hostgroup_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Architecture ID"),
        ] = None,
        hostgroup_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        hostgroup_medium_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Media ID")
        ] = None,
        hostgroup_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Partition table ID"),
        ] = None,
        hostgroup_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet ID")
        ] = None,
        hostgroup_subnet6_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet IPv6 ID")
        ] = None,
        hostgroup_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Domain ID")
        ] = None,
        hostgroup_realm_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Realm ID")
        ] = None,
        hostgroup_group_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        hostgroup_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        hostgroup_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        hostgroup_root_pass: Annotated[
            Optional[StrictStr], Field(description="Root password on provisioned hosts")
        ] = None,
        hostgroup_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        hostgroup_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        hostgroup_content_source_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content source ID"),
        ] = None,
        hostgroup_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content view ID"),
        ] = None,
        hostgroup_lifecycle_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Lifecycle environment ID"),
        ] = None,
        hostgroup_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Kickstart repository ID"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a host group


        :param hostgroup_name: Name of the host group (required)
        :type hostgroup_name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param hostgroup_description: Host group description
        :type hostgroup_description: str
        :param hostgroup_parent_id: Parent ID of the host group
        :type hostgroup_parent_id: float
        :param hostgroup_compute_profile_id: Compute profile ID
        :type hostgroup_compute_profile_id: float
        :param hostgroup_compute_resource_id: Compute resource ID
        :type hostgroup_compute_resource_id: float
        :param hostgroup_operatingsystem_id: Operating system ID
        :type hostgroup_operatingsystem_id: float
        :param hostgroup_architecture_id: Architecture ID
        :type hostgroup_architecture_id: float
        :param hostgroup_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type hostgroup_pxe_loader: str
        :param hostgroup_medium_id: Media ID
        :type hostgroup_medium_id: float
        :param hostgroup_ptable_id: Partition table ID
        :type hostgroup_ptable_id: float
        :param hostgroup_subnet_id: Subnet ID
        :type hostgroup_subnet_id: float
        :param hostgroup_subnet6_id: Subnet IPv6 ID
        :type hostgroup_subnet6_id: float
        :param hostgroup_domain_id: Domain ID
        :type hostgroup_domain_id: float
        :param hostgroup_realm_id: Realm ID
        :type hostgroup_realm_id: float
        :param hostgroup_group_parameters_attributes: Array of parameters
        :type hostgroup_group_parameters_attributes: List[str]
        :param hostgroup_puppet_proxy_id: Puppet proxy ID
        :type hostgroup_puppet_proxy_id: float
        :param hostgroup_puppet_ca_proxy_id: Puppet CA proxy ID
        :type hostgroup_puppet_ca_proxy_id: float
        :param hostgroup_root_pass: Root password on provisioned hosts
        :type hostgroup_root_pass: str
        :param hostgroup_location_ids: REPLACE locations with given ids
        :type hostgroup_location_ids: List[str]
        :param hostgroup_organization_ids: REPLACE organizations with given ids.
        :type hostgroup_organization_ids: List[str]
        :param hostgroup_content_source_id: Content source ID
        :type hostgroup_content_source_id: float
        :param hostgroup_content_view_id: Content view ID
        :type hostgroup_content_view_id: float
        :param hostgroup_lifecycle_environment_id: Lifecycle environment ID
        :type hostgroup_lifecycle_environment_id: float
        :param hostgroup_kickstart_repository_id: Kickstart repository ID
        :type hostgroup_kickstart_repository_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hostgroups_serialize(
            hostgroup_name=hostgroup_name,
            location_id=location_id,
            organization_id=organization_id,
            hostgroup_description=hostgroup_description,
            hostgroup_parent_id=hostgroup_parent_id,
            hostgroup_compute_profile_id=hostgroup_compute_profile_id,
            hostgroup_compute_resource_id=hostgroup_compute_resource_id,
            hostgroup_operatingsystem_id=hostgroup_operatingsystem_id,
            hostgroup_architecture_id=hostgroup_architecture_id,
            hostgroup_pxe_loader=hostgroup_pxe_loader,
            hostgroup_medium_id=hostgroup_medium_id,
            hostgroup_ptable_id=hostgroup_ptable_id,
            hostgroup_subnet_id=hostgroup_subnet_id,
            hostgroup_subnet6_id=hostgroup_subnet6_id,
            hostgroup_domain_id=hostgroup_domain_id,
            hostgroup_realm_id=hostgroup_realm_id,
            hostgroup_group_parameters_attributes=hostgroup_group_parameters_attributes,
            hostgroup_puppet_proxy_id=hostgroup_puppet_proxy_id,
            hostgroup_puppet_ca_proxy_id=hostgroup_puppet_ca_proxy_id,
            hostgroup_root_pass=hostgroup_root_pass,
            hostgroup_location_ids=hostgroup_location_ids,
            hostgroup_organization_ids=hostgroup_organization_ids,
            hostgroup_content_source_id=hostgroup_content_source_id,
            hostgroup_content_view_id=hostgroup_content_view_id,
            hostgroup_lifecycle_environment_id=hostgroup_lifecycle_environment_id,
            hostgroup_kickstart_repository_id=hostgroup_kickstart_repository_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_hostgroups_serialize(
        self,
        hostgroup_name,
        location_id,
        organization_id,
        hostgroup_description,
        hostgroup_parent_id,
        hostgroup_compute_profile_id,
        hostgroup_compute_resource_id,
        hostgroup_operatingsystem_id,
        hostgroup_architecture_id,
        hostgroup_pxe_loader,
        hostgroup_medium_id,
        hostgroup_ptable_id,
        hostgroup_subnet_id,
        hostgroup_subnet6_id,
        hostgroup_domain_id,
        hostgroup_realm_id,
        hostgroup_group_parameters_attributes,
        hostgroup_puppet_proxy_id,
        hostgroup_puppet_ca_proxy_id,
        hostgroup_root_pass,
        hostgroup_location_ids,
        hostgroup_organization_ids,
        hostgroup_content_source_id,
        hostgroup_content_view_id,
        hostgroup_lifecycle_environment_id,
        hostgroup_kickstart_repository_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "hostgroup[group_parameters_attributes]": "csv",
            "hostgroup[location_ids]": "csv",
            "hostgroup[organization_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if hostgroup_name is not None:
            _form_params.append(("hostgroup[name]", hostgroup_name))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if hostgroup_description is not None:
            _form_params.append(("hostgroup[description]", hostgroup_description))
        if hostgroup_parent_id is not None:
            _form_params.append(("hostgroup[parent_id]", hostgroup_parent_id))
        if hostgroup_compute_profile_id is not None:
            _form_params.append(
                ("hostgroup[compute_profile_id]", hostgroup_compute_profile_id)
            )
        if hostgroup_compute_resource_id is not None:
            _form_params.append(
                ("hostgroup[compute_resource_id]", hostgroup_compute_resource_id)
            )
        if hostgroup_operatingsystem_id is not None:
            _form_params.append(
                ("hostgroup[operatingsystem_id]", hostgroup_operatingsystem_id)
            )
        if hostgroup_architecture_id is not None:
            _form_params.append(
                ("hostgroup[architecture_id]", hostgroup_architecture_id)
            )
        if hostgroup_pxe_loader is not None:
            _form_params.append(("hostgroup[pxe_loader]", hostgroup_pxe_loader))
        if hostgroup_medium_id is not None:
            _form_params.append(("hostgroup[medium_id]", hostgroup_medium_id))
        if hostgroup_ptable_id is not None:
            _form_params.append(("hostgroup[ptable_id]", hostgroup_ptable_id))
        if hostgroup_subnet_id is not None:
            _form_params.append(("hostgroup[subnet_id]", hostgroup_subnet_id))
        if hostgroup_subnet6_id is not None:
            _form_params.append(("hostgroup[subnet6_id]", hostgroup_subnet6_id))
        if hostgroup_domain_id is not None:
            _form_params.append(("hostgroup[domain_id]", hostgroup_domain_id))
        if hostgroup_realm_id is not None:
            _form_params.append(("hostgroup[realm_id]", hostgroup_realm_id))
        if hostgroup_group_parameters_attributes is not None:
            _form_params.append(
                (
                    "hostgroup[group_parameters_attributes]",
                    hostgroup_group_parameters_attributes,
                )
            )
        if hostgroup_puppet_proxy_id is not None:
            _form_params.append(
                ("hostgroup[puppet_proxy_id]", hostgroup_puppet_proxy_id)
            )
        if hostgroup_puppet_ca_proxy_id is not None:
            _form_params.append(
                ("hostgroup[puppet_ca_proxy_id]", hostgroup_puppet_ca_proxy_id)
            )
        if hostgroup_root_pass is not None:
            _form_params.append(("hostgroup[root_pass]", hostgroup_root_pass))
        if hostgroup_location_ids is not None:
            _form_params.append(("hostgroup[location_ids]", hostgroup_location_ids))
        if hostgroup_organization_ids is not None:
            _form_params.append(
                ("hostgroup[organization_ids]", hostgroup_organization_ids)
            )
        if hostgroup_content_source_id is not None:
            _form_params.append(
                ("hostgroup[content_source_id]", hostgroup_content_source_id)
            )
        if hostgroup_content_view_id is not None:
            _form_params.append(
                ("hostgroup[content_view_id]", hostgroup_content_view_id)
            )
        if hostgroup_lifecycle_environment_id is not None:
            _form_params.append(
                (
                    "hostgroup[lifecycle_environment_id]",
                    hostgroup_lifecycle_environment_id,
                )
            )
        if hostgroup_kickstart_repository_id is not None:
            _form_params.append(
                (
                    "hostgroup[kickstart_repository_id]",
                    hostgroup_kickstart_repository_id,
                )
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/hostgroups",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_hostgroups_id_clone(
        self,
        id: Union[StrictFloat, StrictInt],
        name: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Clone a host group


        :param id: (required)
        :type id: float
        :param name: (required)
        :type name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hostgroups_id_clone_serialize(
            id=id,
            name=name,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_hostgroups_id_clone_with_http_info(
        self,
        id: Union[StrictFloat, StrictInt],
        name: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Clone a host group


        :param id: (required)
        :type id: float
        :param name: (required)
        :type name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hostgroups_id_clone_serialize(
            id=id,
            name=name,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_hostgroups_id_clone_without_preload_content(
        self,
        id: Union[StrictFloat, StrictInt],
        name: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Clone a host group


        :param id: (required)
        :type id: float
        :param name: (required)
        :type name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hostgroups_id_clone_serialize(
            id=id,
            name=name,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_hostgroups_id_clone_serialize(
        self,
        id,
        name,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(("name", name))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/hostgroups/{id}/clone",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hostgroups_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        hostgroup_name: Annotated[
            Optional[StrictStr], Field(description="Name of the host group")
        ] = None,
        hostgroup_description: Annotated[
            Optional[StrictStr], Field(description="Host group description")
        ] = None,
        hostgroup_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Parent ID of the host group"),
        ] = None,
        hostgroup_compute_profile_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute profile ID"),
        ] = None,
        hostgroup_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute resource ID"),
        ] = None,
        hostgroup_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Operating system ID"),
        ] = None,
        hostgroup_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Architecture ID"),
        ] = None,
        hostgroup_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        hostgroup_medium_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Media ID")
        ] = None,
        hostgroup_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Partition table ID"),
        ] = None,
        hostgroup_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet ID")
        ] = None,
        hostgroup_subnet6_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet IPv6 ID")
        ] = None,
        hostgroup_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Domain ID")
        ] = None,
        hostgroup_realm_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Realm ID")
        ] = None,
        hostgroup_group_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        hostgroup_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        hostgroup_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        hostgroup_root_pass: Annotated[
            Optional[StrictStr], Field(description="Root password on provisioned hosts")
        ] = None,
        hostgroup_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        hostgroup_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        hostgroup_content_source_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content source ID"),
        ] = None,
        hostgroup_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content view ID"),
        ] = None,
        hostgroup_lifecycle_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Lifecycle environment ID"),
        ] = None,
        hostgroup_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Kickstart repository ID"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a host group


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param hostgroup_name: Name of the host group
        :type hostgroup_name: str
        :param hostgroup_description: Host group description
        :type hostgroup_description: str
        :param hostgroup_parent_id: Parent ID of the host group
        :type hostgroup_parent_id: float
        :param hostgroup_compute_profile_id: Compute profile ID
        :type hostgroup_compute_profile_id: float
        :param hostgroup_compute_resource_id: Compute resource ID
        :type hostgroup_compute_resource_id: float
        :param hostgroup_operatingsystem_id: Operating system ID
        :type hostgroup_operatingsystem_id: float
        :param hostgroup_architecture_id: Architecture ID
        :type hostgroup_architecture_id: float
        :param hostgroup_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type hostgroup_pxe_loader: str
        :param hostgroup_medium_id: Media ID
        :type hostgroup_medium_id: float
        :param hostgroup_ptable_id: Partition table ID
        :type hostgroup_ptable_id: float
        :param hostgroup_subnet_id: Subnet ID
        :type hostgroup_subnet_id: float
        :param hostgroup_subnet6_id: Subnet IPv6 ID
        :type hostgroup_subnet6_id: float
        :param hostgroup_domain_id: Domain ID
        :type hostgroup_domain_id: float
        :param hostgroup_realm_id: Realm ID
        :type hostgroup_realm_id: float
        :param hostgroup_group_parameters_attributes: Array of parameters
        :type hostgroup_group_parameters_attributes: List[str]
        :param hostgroup_puppet_proxy_id: Puppet proxy ID
        :type hostgroup_puppet_proxy_id: float
        :param hostgroup_puppet_ca_proxy_id: Puppet CA proxy ID
        :type hostgroup_puppet_ca_proxy_id: float
        :param hostgroup_root_pass: Root password on provisioned hosts
        :type hostgroup_root_pass: str
        :param hostgroup_location_ids: REPLACE locations with given ids
        :type hostgroup_location_ids: List[str]
        :param hostgroup_organization_ids: REPLACE organizations with given ids.
        :type hostgroup_organization_ids: List[str]
        :param hostgroup_content_source_id: Content source ID
        :type hostgroup_content_source_id: float
        :param hostgroup_content_view_id: Content view ID
        :type hostgroup_content_view_id: float
        :param hostgroup_lifecycle_environment_id: Lifecycle environment ID
        :type hostgroup_lifecycle_environment_id: float
        :param hostgroup_kickstart_repository_id: Kickstart repository ID
        :type hostgroup_kickstart_repository_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hostgroups_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            hostgroup_name=hostgroup_name,
            hostgroup_description=hostgroup_description,
            hostgroup_parent_id=hostgroup_parent_id,
            hostgroup_compute_profile_id=hostgroup_compute_profile_id,
            hostgroup_compute_resource_id=hostgroup_compute_resource_id,
            hostgroup_operatingsystem_id=hostgroup_operatingsystem_id,
            hostgroup_architecture_id=hostgroup_architecture_id,
            hostgroup_pxe_loader=hostgroup_pxe_loader,
            hostgroup_medium_id=hostgroup_medium_id,
            hostgroup_ptable_id=hostgroup_ptable_id,
            hostgroup_subnet_id=hostgroup_subnet_id,
            hostgroup_subnet6_id=hostgroup_subnet6_id,
            hostgroup_domain_id=hostgroup_domain_id,
            hostgroup_realm_id=hostgroup_realm_id,
            hostgroup_group_parameters_attributes=hostgroup_group_parameters_attributes,
            hostgroup_puppet_proxy_id=hostgroup_puppet_proxy_id,
            hostgroup_puppet_ca_proxy_id=hostgroup_puppet_ca_proxy_id,
            hostgroup_root_pass=hostgroup_root_pass,
            hostgroup_location_ids=hostgroup_location_ids,
            hostgroup_organization_ids=hostgroup_organization_ids,
            hostgroup_content_source_id=hostgroup_content_source_id,
            hostgroup_content_view_id=hostgroup_content_view_id,
            hostgroup_lifecycle_environment_id=hostgroup_lifecycle_environment_id,
            hostgroup_kickstart_repository_id=hostgroup_kickstart_repository_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hostgroups_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        hostgroup_name: Annotated[
            Optional[StrictStr], Field(description="Name of the host group")
        ] = None,
        hostgroup_description: Annotated[
            Optional[StrictStr], Field(description="Host group description")
        ] = None,
        hostgroup_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Parent ID of the host group"),
        ] = None,
        hostgroup_compute_profile_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute profile ID"),
        ] = None,
        hostgroup_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute resource ID"),
        ] = None,
        hostgroup_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Operating system ID"),
        ] = None,
        hostgroup_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Architecture ID"),
        ] = None,
        hostgroup_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        hostgroup_medium_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Media ID")
        ] = None,
        hostgroup_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Partition table ID"),
        ] = None,
        hostgroup_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet ID")
        ] = None,
        hostgroup_subnet6_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet IPv6 ID")
        ] = None,
        hostgroup_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Domain ID")
        ] = None,
        hostgroup_realm_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Realm ID")
        ] = None,
        hostgroup_group_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        hostgroup_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        hostgroup_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        hostgroup_root_pass: Annotated[
            Optional[StrictStr], Field(description="Root password on provisioned hosts")
        ] = None,
        hostgroup_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        hostgroup_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        hostgroup_content_source_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content source ID"),
        ] = None,
        hostgroup_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content view ID"),
        ] = None,
        hostgroup_lifecycle_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Lifecycle environment ID"),
        ] = None,
        hostgroup_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Kickstart repository ID"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a host group


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param hostgroup_name: Name of the host group
        :type hostgroup_name: str
        :param hostgroup_description: Host group description
        :type hostgroup_description: str
        :param hostgroup_parent_id: Parent ID of the host group
        :type hostgroup_parent_id: float
        :param hostgroup_compute_profile_id: Compute profile ID
        :type hostgroup_compute_profile_id: float
        :param hostgroup_compute_resource_id: Compute resource ID
        :type hostgroup_compute_resource_id: float
        :param hostgroup_operatingsystem_id: Operating system ID
        :type hostgroup_operatingsystem_id: float
        :param hostgroup_architecture_id: Architecture ID
        :type hostgroup_architecture_id: float
        :param hostgroup_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type hostgroup_pxe_loader: str
        :param hostgroup_medium_id: Media ID
        :type hostgroup_medium_id: float
        :param hostgroup_ptable_id: Partition table ID
        :type hostgroup_ptable_id: float
        :param hostgroup_subnet_id: Subnet ID
        :type hostgroup_subnet_id: float
        :param hostgroup_subnet6_id: Subnet IPv6 ID
        :type hostgroup_subnet6_id: float
        :param hostgroup_domain_id: Domain ID
        :type hostgroup_domain_id: float
        :param hostgroup_realm_id: Realm ID
        :type hostgroup_realm_id: float
        :param hostgroup_group_parameters_attributes: Array of parameters
        :type hostgroup_group_parameters_attributes: List[str]
        :param hostgroup_puppet_proxy_id: Puppet proxy ID
        :type hostgroup_puppet_proxy_id: float
        :param hostgroup_puppet_ca_proxy_id: Puppet CA proxy ID
        :type hostgroup_puppet_ca_proxy_id: float
        :param hostgroup_root_pass: Root password on provisioned hosts
        :type hostgroup_root_pass: str
        :param hostgroup_location_ids: REPLACE locations with given ids
        :type hostgroup_location_ids: List[str]
        :param hostgroup_organization_ids: REPLACE organizations with given ids.
        :type hostgroup_organization_ids: List[str]
        :param hostgroup_content_source_id: Content source ID
        :type hostgroup_content_source_id: float
        :param hostgroup_content_view_id: Content view ID
        :type hostgroup_content_view_id: float
        :param hostgroup_lifecycle_environment_id: Lifecycle environment ID
        :type hostgroup_lifecycle_environment_id: float
        :param hostgroup_kickstart_repository_id: Kickstart repository ID
        :type hostgroup_kickstart_repository_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hostgroups_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            hostgroup_name=hostgroup_name,
            hostgroup_description=hostgroup_description,
            hostgroup_parent_id=hostgroup_parent_id,
            hostgroup_compute_profile_id=hostgroup_compute_profile_id,
            hostgroup_compute_resource_id=hostgroup_compute_resource_id,
            hostgroup_operatingsystem_id=hostgroup_operatingsystem_id,
            hostgroup_architecture_id=hostgroup_architecture_id,
            hostgroup_pxe_loader=hostgroup_pxe_loader,
            hostgroup_medium_id=hostgroup_medium_id,
            hostgroup_ptable_id=hostgroup_ptable_id,
            hostgroup_subnet_id=hostgroup_subnet_id,
            hostgroup_subnet6_id=hostgroup_subnet6_id,
            hostgroup_domain_id=hostgroup_domain_id,
            hostgroup_realm_id=hostgroup_realm_id,
            hostgroup_group_parameters_attributes=hostgroup_group_parameters_attributes,
            hostgroup_puppet_proxy_id=hostgroup_puppet_proxy_id,
            hostgroup_puppet_ca_proxy_id=hostgroup_puppet_ca_proxy_id,
            hostgroup_root_pass=hostgroup_root_pass,
            hostgroup_location_ids=hostgroup_location_ids,
            hostgroup_organization_ids=hostgroup_organization_ids,
            hostgroup_content_source_id=hostgroup_content_source_id,
            hostgroup_content_view_id=hostgroup_content_view_id,
            hostgroup_lifecycle_environment_id=hostgroup_lifecycle_environment_id,
            hostgroup_kickstart_repository_id=hostgroup_kickstart_repository_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hostgroups_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        hostgroup_name: Annotated[
            Optional[StrictStr], Field(description="Name of the host group")
        ] = None,
        hostgroup_description: Annotated[
            Optional[StrictStr], Field(description="Host group description")
        ] = None,
        hostgroup_parent_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Parent ID of the host group"),
        ] = None,
        hostgroup_compute_profile_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute profile ID"),
        ] = None,
        hostgroup_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Compute resource ID"),
        ] = None,
        hostgroup_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Operating system ID"),
        ] = None,
        hostgroup_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Architecture ID"),
        ] = None,
        hostgroup_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        hostgroup_medium_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Media ID")
        ] = None,
        hostgroup_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Partition table ID"),
        ] = None,
        hostgroup_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet ID")
        ] = None,
        hostgroup_subnet6_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Subnet IPv6 ID")
        ] = None,
        hostgroup_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Domain ID")
        ] = None,
        hostgroup_realm_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Realm ID")
        ] = None,
        hostgroup_group_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        hostgroup_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        hostgroup_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        hostgroup_root_pass: Annotated[
            Optional[StrictStr], Field(description="Root password on provisioned hosts")
        ] = None,
        hostgroup_location_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE locations with given ids"),
        ] = None,
        hostgroup_organization_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="REPLACE organizations with given ids."),
        ] = None,
        hostgroup_content_source_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content source ID"),
        ] = None,
        hostgroup_content_view_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Content view ID"),
        ] = None,
        hostgroup_lifecycle_environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Lifecycle environment ID"),
        ] = None,
        hostgroup_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Kickstart repository ID"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a host group


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param hostgroup_name: Name of the host group
        :type hostgroup_name: str
        :param hostgroup_description: Host group description
        :type hostgroup_description: str
        :param hostgroup_parent_id: Parent ID of the host group
        :type hostgroup_parent_id: float
        :param hostgroup_compute_profile_id: Compute profile ID
        :type hostgroup_compute_profile_id: float
        :param hostgroup_compute_resource_id: Compute resource ID
        :type hostgroup_compute_resource_id: float
        :param hostgroup_operatingsystem_id: Operating system ID
        :type hostgroup_operatingsystem_id: float
        :param hostgroup_architecture_id: Architecture ID
        :type hostgroup_architecture_id: float
        :param hostgroup_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type hostgroup_pxe_loader: str
        :param hostgroup_medium_id: Media ID
        :type hostgroup_medium_id: float
        :param hostgroup_ptable_id: Partition table ID
        :type hostgroup_ptable_id: float
        :param hostgroup_subnet_id: Subnet ID
        :type hostgroup_subnet_id: float
        :param hostgroup_subnet6_id: Subnet IPv6 ID
        :type hostgroup_subnet6_id: float
        :param hostgroup_domain_id: Domain ID
        :type hostgroup_domain_id: float
        :param hostgroup_realm_id: Realm ID
        :type hostgroup_realm_id: float
        :param hostgroup_group_parameters_attributes: Array of parameters
        :type hostgroup_group_parameters_attributes: List[str]
        :param hostgroup_puppet_proxy_id: Puppet proxy ID
        :type hostgroup_puppet_proxy_id: float
        :param hostgroup_puppet_ca_proxy_id: Puppet CA proxy ID
        :type hostgroup_puppet_ca_proxy_id: float
        :param hostgroup_root_pass: Root password on provisioned hosts
        :type hostgroup_root_pass: str
        :param hostgroup_location_ids: REPLACE locations with given ids
        :type hostgroup_location_ids: List[str]
        :param hostgroup_organization_ids: REPLACE organizations with given ids.
        :type hostgroup_organization_ids: List[str]
        :param hostgroup_content_source_id: Content source ID
        :type hostgroup_content_source_id: float
        :param hostgroup_content_view_id: Content view ID
        :type hostgroup_content_view_id: float
        :param hostgroup_lifecycle_environment_id: Lifecycle environment ID
        :type hostgroup_lifecycle_environment_id: float
        :param hostgroup_kickstart_repository_id: Kickstart repository ID
        :type hostgroup_kickstart_repository_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hostgroups_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            hostgroup_name=hostgroup_name,
            hostgroup_description=hostgroup_description,
            hostgroup_parent_id=hostgroup_parent_id,
            hostgroup_compute_profile_id=hostgroup_compute_profile_id,
            hostgroup_compute_resource_id=hostgroup_compute_resource_id,
            hostgroup_operatingsystem_id=hostgroup_operatingsystem_id,
            hostgroup_architecture_id=hostgroup_architecture_id,
            hostgroup_pxe_loader=hostgroup_pxe_loader,
            hostgroup_medium_id=hostgroup_medium_id,
            hostgroup_ptable_id=hostgroup_ptable_id,
            hostgroup_subnet_id=hostgroup_subnet_id,
            hostgroup_subnet6_id=hostgroup_subnet6_id,
            hostgroup_domain_id=hostgroup_domain_id,
            hostgroup_realm_id=hostgroup_realm_id,
            hostgroup_group_parameters_attributes=hostgroup_group_parameters_attributes,
            hostgroup_puppet_proxy_id=hostgroup_puppet_proxy_id,
            hostgroup_puppet_ca_proxy_id=hostgroup_puppet_ca_proxy_id,
            hostgroup_root_pass=hostgroup_root_pass,
            hostgroup_location_ids=hostgroup_location_ids,
            hostgroup_organization_ids=hostgroup_organization_ids,
            hostgroup_content_source_id=hostgroup_content_source_id,
            hostgroup_content_view_id=hostgroup_content_view_id,
            hostgroup_lifecycle_environment_id=hostgroup_lifecycle_environment_id,
            hostgroup_kickstart_repository_id=hostgroup_kickstart_repository_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hostgroups_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        hostgroup_name,
        hostgroup_description,
        hostgroup_parent_id,
        hostgroup_compute_profile_id,
        hostgroup_compute_resource_id,
        hostgroup_operatingsystem_id,
        hostgroup_architecture_id,
        hostgroup_pxe_loader,
        hostgroup_medium_id,
        hostgroup_ptable_id,
        hostgroup_subnet_id,
        hostgroup_subnet6_id,
        hostgroup_domain_id,
        hostgroup_realm_id,
        hostgroup_group_parameters_attributes,
        hostgroup_puppet_proxy_id,
        hostgroup_puppet_ca_proxy_id,
        hostgroup_root_pass,
        hostgroup_location_ids,
        hostgroup_organization_ids,
        hostgroup_content_source_id,
        hostgroup_content_view_id,
        hostgroup_lifecycle_environment_id,
        hostgroup_kickstart_repository_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "hostgroup[group_parameters_attributes]": "csv",
            "hostgroup[location_ids]": "csv",
            "hostgroup[organization_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if hostgroup_name is not None:
            _form_params.append(("hostgroup[name]", hostgroup_name))
        if hostgroup_description is not None:
            _form_params.append(("hostgroup[description]", hostgroup_description))
        if hostgroup_parent_id is not None:
            _form_params.append(("hostgroup[parent_id]", hostgroup_parent_id))
        if hostgroup_compute_profile_id is not None:
            _form_params.append(
                ("hostgroup[compute_profile_id]", hostgroup_compute_profile_id)
            )
        if hostgroup_compute_resource_id is not None:
            _form_params.append(
                ("hostgroup[compute_resource_id]", hostgroup_compute_resource_id)
            )
        if hostgroup_operatingsystem_id is not None:
            _form_params.append(
                ("hostgroup[operatingsystem_id]", hostgroup_operatingsystem_id)
            )
        if hostgroup_architecture_id is not None:
            _form_params.append(
                ("hostgroup[architecture_id]", hostgroup_architecture_id)
            )
        if hostgroup_pxe_loader is not None:
            _form_params.append(("hostgroup[pxe_loader]", hostgroup_pxe_loader))
        if hostgroup_medium_id is not None:
            _form_params.append(("hostgroup[medium_id]", hostgroup_medium_id))
        if hostgroup_ptable_id is not None:
            _form_params.append(("hostgroup[ptable_id]", hostgroup_ptable_id))
        if hostgroup_subnet_id is not None:
            _form_params.append(("hostgroup[subnet_id]", hostgroup_subnet_id))
        if hostgroup_subnet6_id is not None:
            _form_params.append(("hostgroup[subnet6_id]", hostgroup_subnet6_id))
        if hostgroup_domain_id is not None:
            _form_params.append(("hostgroup[domain_id]", hostgroup_domain_id))
        if hostgroup_realm_id is not None:
            _form_params.append(("hostgroup[realm_id]", hostgroup_realm_id))
        if hostgroup_group_parameters_attributes is not None:
            _form_params.append(
                (
                    "hostgroup[group_parameters_attributes]",
                    hostgroup_group_parameters_attributes,
                )
            )
        if hostgroup_puppet_proxy_id is not None:
            _form_params.append(
                ("hostgroup[puppet_proxy_id]", hostgroup_puppet_proxy_id)
            )
        if hostgroup_puppet_ca_proxy_id is not None:
            _form_params.append(
                ("hostgroup[puppet_ca_proxy_id]", hostgroup_puppet_ca_proxy_id)
            )
        if hostgroup_root_pass is not None:
            _form_params.append(("hostgroup[root_pass]", hostgroup_root_pass))
        if hostgroup_location_ids is not None:
            _form_params.append(("hostgroup[location_ids]", hostgroup_location_ids))
        if hostgroup_organization_ids is not None:
            _form_params.append(
                ("hostgroup[organization_ids]", hostgroup_organization_ids)
            )
        if hostgroup_content_source_id is not None:
            _form_params.append(
                ("hostgroup[content_source_id]", hostgroup_content_source_id)
            )
        if hostgroup_content_view_id is not None:
            _form_params.append(
                ("hostgroup[content_view_id]", hostgroup_content_view_id)
            )
        if hostgroup_lifecycle_environment_id is not None:
            _form_params.append(
                (
                    "hostgroup[lifecycle_environment_id]",
                    hostgroup_lifecycle_environment_id,
                )
            )
        if hostgroup_kickstart_repository_id is not None:
            _form_params.append(
                (
                    "hostgroup[kickstart_repository_id]",
                    hostgroup_kickstart_repository_id,
                )
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hostgroups/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hostgroups_id_rebuild_config(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        only: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status"
            ),
        ] = None,
        children_hosts: Annotated[
            Optional[StrictBool], Field(description="Operate on child hostgroup hosts")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Rebuild orchestration config


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param only: Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status
        :type only: List[str]
        :param children_hosts: Operate on child hostgroup hosts
        :type children_hosts: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hostgroups_id_rebuild_config_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            only=only,
            children_hosts=children_hosts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hostgroups_id_rebuild_config_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        only: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status"
            ),
        ] = None,
        children_hosts: Annotated[
            Optional[StrictBool], Field(description="Operate on child hostgroup hosts")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Rebuild orchestration config


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param only: Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status
        :type only: List[str]
        :param children_hosts: Operate on child hostgroup hosts
        :type children_hosts: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hostgroups_id_rebuild_config_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            only=only,
            children_hosts=children_hosts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hostgroups_id_rebuild_config_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        only: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status"
            ),
        ] = None,
        children_hosts: Annotated[
            Optional[StrictBool], Field(description="Operate on child hostgroup hosts")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Rebuild orchestration config


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param only: Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status
        :type only: List[str]
        :param children_hosts: Operate on child hostgroup hosts
        :type children_hosts: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hostgroups_id_rebuild_config_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            only=only,
            children_hosts=children_hosts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hostgroups_id_rebuild_config_serialize(
        self,
        id,
        location_id,
        organization_id,
        only,
        children_hosts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "only": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if only is not None:
            _form_params.append(("only", only))
        if children_hosts is not None:
            _form_params.append(("children_hosts", children_hosts))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hostgroups/{id}/rebuild_config",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
