# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr, field_validator

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class OperatingsystemsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_operatingsystems_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_operatingsystems_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_operatingsystems_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_operatingsystems_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_operatingsystems_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_operatingsystems_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_operatingsystems_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/operatingsystems/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_architectures_architecture_id_operatingsystems(
        self,
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all operating systems for nested architecture


        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_architectures_architecture_id_operatingsystems_serialize(
            architecture_id=architecture_id,
            medium_id=medium_id,
            ptable_id=ptable_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_architectures_architecture_id_operatingsystems_with_http_info(
        self,
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all operating systems for nested architecture


        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_architectures_architecture_id_operatingsystems_serialize(
            architecture_id=architecture_id,
            medium_id=medium_id,
            ptable_id=ptable_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_architectures_architecture_id_operatingsystems_without_preload_content(
        self,
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all operating systems for nested architecture


        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_architectures_architecture_id_operatingsystems_serialize(
            architecture_id=architecture_id,
            medium_id=medium_id,
            ptable_id=ptable_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_architectures_architecture_id_operatingsystems_serialize(
        self,
        architecture_id,
        medium_id,
        ptable_id,
        provisioning_template_id,
        location_id,
        organization_id,
        os_parameters_attributes,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "os_parameters_attributes": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if architecture_id is not None:
            _path_params["architecture_id"] = architecture_id
        # process the query parameters
        if medium_id is not None:
            _query_params.append(("medium_id", medium_id))

        if ptable_id is not None:
            _query_params.append(("ptable_id", ptable_id))

        if provisioning_template_id is not None:
            _query_params.append(("provisioning_template_id", provisioning_template_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if os_parameters_attributes is not None:
            _query_params.append(("os_parameters_attributes", os_parameters_attributes))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/architectures/{architecture_id}/operatingsystems",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_media_medium_id_operatingsystems(
        self,
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all operating systems for nested medium


        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_media_medium_id_operatingsystems_serialize(
            medium_id=medium_id,
            architecture_id=architecture_id,
            ptable_id=ptable_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_media_medium_id_operatingsystems_with_http_info(
        self,
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all operating systems for nested medium


        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_media_medium_id_operatingsystems_serialize(
            medium_id=medium_id,
            architecture_id=architecture_id,
            ptable_id=ptable_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_media_medium_id_operatingsystems_without_preload_content(
        self,
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all operating systems for nested medium


        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_media_medium_id_operatingsystems_serialize(
            medium_id=medium_id,
            architecture_id=architecture_id,
            ptable_id=ptable_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_media_medium_id_operatingsystems_serialize(
        self,
        medium_id,
        architecture_id,
        ptable_id,
        provisioning_template_id,
        location_id,
        organization_id,
        os_parameters_attributes,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "os_parameters_attributes": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if medium_id is not None:
            _path_params["medium_id"] = medium_id
        # process the query parameters
        if architecture_id is not None:
            _query_params.append(("architecture_id", architecture_id))

        if ptable_id is not None:
            _query_params.append(("ptable_id", ptable_id))

        if provisioning_template_id is not None:
            _query_params.append(("provisioning_template_id", provisioning_template_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if os_parameters_attributes is not None:
            _query_params.append(("os_parameters_attributes", os_parameters_attributes))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/media/{medium_id}/operatingsystems",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_operatingsystems(
        self,
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all operating systems


        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_serialize(
            architecture_id=architecture_id,
            medium_id=medium_id,
            ptable_id=ptable_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_operatingsystems_with_http_info(
        self,
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all operating systems


        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_serialize(
            architecture_id=architecture_id,
            medium_id=medium_id,
            ptable_id=ptable_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_operatingsystems_without_preload_content(
        self,
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all operating systems


        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_serialize(
            architecture_id=architecture_id,
            medium_id=medium_id,
            ptable_id=ptable_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_operatingsystems_serialize(
        self,
        architecture_id,
        medium_id,
        ptable_id,
        provisioning_template_id,
        location_id,
        organization_id,
        os_parameters_attributes,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "os_parameters_attributes": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if architecture_id is not None:
            _query_params.append(("architecture_id", architecture_id))

        if medium_id is not None:
            _query_params.append(("medium_id", medium_id))

        if ptable_id is not None:
            _query_params.append(("ptable_id", ptable_id))

        if provisioning_template_id is not None:
            _query_params.append(("provisioning_template_id", provisioning_template_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if os_parameters_attributes is not None:
            _query_params.append(("os_parameters_attributes", os_parameters_attributes))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/operatingsystems",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_operatingsystems_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_operatingsystems_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_operatingsystems_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_operatingsystems_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        show_hidden_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if show_hidden_parameters is not None:
            _query_params.append(("show_hidden_parameters", show_hidden_parameters))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/operatingsystems/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_operatingsystems_id_bootfiles(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        medium: Optional[StrictStr] = None,
        architecture: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List boot files for an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param medium:
        :type medium: str
        :param architecture:
        :type architecture: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_id_bootfiles_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            medium=medium,
            architecture=architecture,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_operatingsystems_id_bootfiles_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        medium: Optional[StrictStr] = None,
        architecture: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List boot files for an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param medium:
        :type medium: str
        :param architecture:
        :type architecture: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_id_bootfiles_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            medium=medium,
            architecture=architecture,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_operatingsystems_id_bootfiles_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        medium: Optional[StrictStr] = None,
        architecture: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List boot files for an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param medium:
        :type medium: str
        :param architecture:
        :type architecture: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_operatingsystems_id_bootfiles_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            medium=medium,
            architecture=architecture,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_operatingsystems_id_bootfiles_serialize(
        self,
        id,
        location_id,
        organization_id,
        medium,
        architecture,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if medium is not None:
            _query_params.append(("medium", medium))

        if architecture is not None:
            _query_params.append(("architecture", architecture))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/operatingsystems/{id}/bootfiles",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_provisioning_templates_provisioning_template_id_operatingsystems(
        self,
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all operating systems for nested provisioning template


        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_provisioning_templates_provisioning_template_id_operatingsystems_serialize(
            provisioning_template_id=provisioning_template_id,
            architecture_id=architecture_id,
            medium_id=medium_id,
            ptable_id=ptable_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_provisioning_templates_provisioning_template_id_operatingsystems_with_http_info(
        self,
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all operating systems for nested provisioning template


        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_provisioning_templates_provisioning_template_id_operatingsystems_serialize(
            provisioning_template_id=provisioning_template_id,
            architecture_id=architecture_id,
            medium_id=medium_id,
            ptable_id=ptable_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_provisioning_templates_provisioning_template_id_operatingsystems_without_preload_content(
        self,
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all operating systems for nested provisioning template


        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_provisioning_templates_provisioning_template_id_operatingsystems_serialize(
            provisioning_template_id=provisioning_template_id,
            architecture_id=architecture_id,
            medium_id=medium_id,
            ptable_id=ptable_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_provisioning_templates_provisioning_template_id_operatingsystems_serialize(
        self,
        provisioning_template_id,
        architecture_id,
        medium_id,
        ptable_id,
        location_id,
        organization_id,
        os_parameters_attributes,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "os_parameters_attributes": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if provisioning_template_id is not None:
            _path_params["provisioning_template_id"] = provisioning_template_id
        # process the query parameters
        if architecture_id is not None:
            _query_params.append(("architecture_id", architecture_id))

        if medium_id is not None:
            _query_params.append(("medium_id", medium_id))

        if ptable_id is not None:
            _query_params.append(("ptable_id", ptable_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if os_parameters_attributes is not None:
            _query_params.append(("os_parameters_attributes", os_parameters_attributes))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/provisioning_templates/{provisioning_template_id}/operatingsystems",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_ptables_ptable_id_operatingsystems(
        self,
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all operating systems for nested partition table


        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_ptables_ptable_id_operatingsystems_serialize(
            ptable_id=ptable_id,
            architecture_id=architecture_id,
            medium_id=medium_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_ptables_ptable_id_operatingsystems_with_http_info(
        self,
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all operating systems for nested partition table


        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_ptables_ptable_id_operatingsystems_serialize(
            ptable_id=ptable_id,
            architecture_id=architecture_id,
            medium_id=medium_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_ptables_ptable_id_operatingsystems_without_preload_content(
        self,
        ptable_id: Annotated[StrictStr, Field(description="ID of partition table")],
        architecture_id: Annotated[StrictStr, Field(description="ID of architecture")],
        medium_id: Annotated[StrictStr, Field(description="ID of medium")],
        provisioning_template_id: Annotated[
            StrictStr, Field(description="ID of template")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all operating systems for nested partition table


        :param ptable_id: ID of partition table (required)
        :type ptable_id: str
        :param architecture_id: ID of architecture (required)
        :type architecture_id: str
        :param medium_id: ID of medium (required)
        :type medium_id: str
        :param provisioning_template_id: ID of template (required)
        :type provisioning_template_id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param os_parameters_attributes: Array of parameters
        :type os_parameters_attributes: List[str]
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_ptables_ptable_id_operatingsystems_serialize(
            ptable_id=ptable_id,
            architecture_id=architecture_id,
            medium_id=medium_id,
            provisioning_template_id=provisioning_template_id,
            location_id=location_id,
            organization_id=organization_id,
            os_parameters_attributes=os_parameters_attributes,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_ptables_ptable_id_operatingsystems_serialize(
        self,
        ptable_id,
        architecture_id,
        medium_id,
        provisioning_template_id,
        location_id,
        organization_id,
        os_parameters_attributes,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "os_parameters_attributes": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ptable_id is not None:
            _path_params["ptable_id"] = ptable_id
        # process the query parameters
        if architecture_id is not None:
            _query_params.append(("architecture_id", architecture_id))

        if medium_id is not None:
            _query_params.append(("medium_id", medium_id))

        if provisioning_template_id is not None:
            _query_params.append(("provisioning_template_id", provisioning_template_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if os_parameters_attributes is not None:
            _query_params.append(("os_parameters_attributes", os_parameters_attributes))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/ptables/{ptable_id}/operatingsystems",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_operatingsystems(
        self,
        operatingsystem_name: StrictStr,
        operatingsystem_major: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        operatingsystem_minor: Optional[StrictStr] = None,
        operatingsystem_description: Optional[StrictStr] = None,
        operatingsystem_family: Optional[StrictStr] = None,
        operatingsystem_release_name: Optional[StrictStr] = None,
        operatingsystem_os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        operatingsystem_password_hash: Annotated[
            Optional[StrictStr], Field(description="Root password hash function to use")
        ] = None,
        operatingsystem_architecture_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated architectures"),
        ] = None,
        operatingsystem_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated provisioning templates"),
        ] = None,
        operatingsystem_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="IDs of associated media")
        ] = None,
        operatingsystem_ptable_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated partition tables"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create an operating system


        :param operatingsystem_name: (required)
        :type operatingsystem_name: str
        :param operatingsystem_major: (required)
        :type operatingsystem_major: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param operatingsystem_minor:
        :type operatingsystem_minor: str
        :param operatingsystem_description:
        :type operatingsystem_description: str
        :param operatingsystem_family:
        :type operatingsystem_family: str
        :param operatingsystem_release_name:
        :type operatingsystem_release_name: str
        :param operatingsystem_os_parameters_attributes: Array of parameters
        :type operatingsystem_os_parameters_attributes: List[str]
        :param operatingsystem_password_hash: Root password hash function to use
        :type operatingsystem_password_hash: str
        :param operatingsystem_architecture_ids: IDs of associated architectures
        :type operatingsystem_architecture_ids: List[str]
        :param operatingsystem_provisioning_template_ids: IDs of associated provisioning templates
        :type operatingsystem_provisioning_template_ids: List[str]
        :param operatingsystem_medium_ids: IDs of associated media
        :type operatingsystem_medium_ids: List[str]
        :param operatingsystem_ptable_ids: IDs of associated partition tables
        :type operatingsystem_ptable_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_operatingsystems_serialize(
            operatingsystem_name=operatingsystem_name,
            operatingsystem_major=operatingsystem_major,
            location_id=location_id,
            organization_id=organization_id,
            operatingsystem_minor=operatingsystem_minor,
            operatingsystem_description=operatingsystem_description,
            operatingsystem_family=operatingsystem_family,
            operatingsystem_release_name=operatingsystem_release_name,
            operatingsystem_os_parameters_attributes=operatingsystem_os_parameters_attributes,
            operatingsystem_password_hash=operatingsystem_password_hash,
            operatingsystem_architecture_ids=operatingsystem_architecture_ids,
            operatingsystem_provisioning_template_ids=operatingsystem_provisioning_template_ids,
            operatingsystem_medium_ids=operatingsystem_medium_ids,
            operatingsystem_ptable_ids=operatingsystem_ptable_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_operatingsystems_with_http_info(
        self,
        operatingsystem_name: StrictStr,
        operatingsystem_major: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        operatingsystem_minor: Optional[StrictStr] = None,
        operatingsystem_description: Optional[StrictStr] = None,
        operatingsystem_family: Optional[StrictStr] = None,
        operatingsystem_release_name: Optional[StrictStr] = None,
        operatingsystem_os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        operatingsystem_password_hash: Annotated[
            Optional[StrictStr], Field(description="Root password hash function to use")
        ] = None,
        operatingsystem_architecture_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated architectures"),
        ] = None,
        operatingsystem_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated provisioning templates"),
        ] = None,
        operatingsystem_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="IDs of associated media")
        ] = None,
        operatingsystem_ptable_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated partition tables"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create an operating system


        :param operatingsystem_name: (required)
        :type operatingsystem_name: str
        :param operatingsystem_major: (required)
        :type operatingsystem_major: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param operatingsystem_minor:
        :type operatingsystem_minor: str
        :param operatingsystem_description:
        :type operatingsystem_description: str
        :param operatingsystem_family:
        :type operatingsystem_family: str
        :param operatingsystem_release_name:
        :type operatingsystem_release_name: str
        :param operatingsystem_os_parameters_attributes: Array of parameters
        :type operatingsystem_os_parameters_attributes: List[str]
        :param operatingsystem_password_hash: Root password hash function to use
        :type operatingsystem_password_hash: str
        :param operatingsystem_architecture_ids: IDs of associated architectures
        :type operatingsystem_architecture_ids: List[str]
        :param operatingsystem_provisioning_template_ids: IDs of associated provisioning templates
        :type operatingsystem_provisioning_template_ids: List[str]
        :param operatingsystem_medium_ids: IDs of associated media
        :type operatingsystem_medium_ids: List[str]
        :param operatingsystem_ptable_ids: IDs of associated partition tables
        :type operatingsystem_ptable_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_operatingsystems_serialize(
            operatingsystem_name=operatingsystem_name,
            operatingsystem_major=operatingsystem_major,
            location_id=location_id,
            organization_id=organization_id,
            operatingsystem_minor=operatingsystem_minor,
            operatingsystem_description=operatingsystem_description,
            operatingsystem_family=operatingsystem_family,
            operatingsystem_release_name=operatingsystem_release_name,
            operatingsystem_os_parameters_attributes=operatingsystem_os_parameters_attributes,
            operatingsystem_password_hash=operatingsystem_password_hash,
            operatingsystem_architecture_ids=operatingsystem_architecture_ids,
            operatingsystem_provisioning_template_ids=operatingsystem_provisioning_template_ids,
            operatingsystem_medium_ids=operatingsystem_medium_ids,
            operatingsystem_ptable_ids=operatingsystem_ptable_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_operatingsystems_without_preload_content(
        self,
        operatingsystem_name: StrictStr,
        operatingsystem_major: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        operatingsystem_minor: Optional[StrictStr] = None,
        operatingsystem_description: Optional[StrictStr] = None,
        operatingsystem_family: Optional[StrictStr] = None,
        operatingsystem_release_name: Optional[StrictStr] = None,
        operatingsystem_os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        operatingsystem_password_hash: Annotated[
            Optional[StrictStr], Field(description="Root password hash function to use")
        ] = None,
        operatingsystem_architecture_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated architectures"),
        ] = None,
        operatingsystem_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated provisioning templates"),
        ] = None,
        operatingsystem_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="IDs of associated media")
        ] = None,
        operatingsystem_ptable_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated partition tables"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an operating system


        :param operatingsystem_name: (required)
        :type operatingsystem_name: str
        :param operatingsystem_major: (required)
        :type operatingsystem_major: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param operatingsystem_minor:
        :type operatingsystem_minor: str
        :param operatingsystem_description:
        :type operatingsystem_description: str
        :param operatingsystem_family:
        :type operatingsystem_family: str
        :param operatingsystem_release_name:
        :type operatingsystem_release_name: str
        :param operatingsystem_os_parameters_attributes: Array of parameters
        :type operatingsystem_os_parameters_attributes: List[str]
        :param operatingsystem_password_hash: Root password hash function to use
        :type operatingsystem_password_hash: str
        :param operatingsystem_architecture_ids: IDs of associated architectures
        :type operatingsystem_architecture_ids: List[str]
        :param operatingsystem_provisioning_template_ids: IDs of associated provisioning templates
        :type operatingsystem_provisioning_template_ids: List[str]
        :param operatingsystem_medium_ids: IDs of associated media
        :type operatingsystem_medium_ids: List[str]
        :param operatingsystem_ptable_ids: IDs of associated partition tables
        :type operatingsystem_ptable_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_operatingsystems_serialize(
            operatingsystem_name=operatingsystem_name,
            operatingsystem_major=operatingsystem_major,
            location_id=location_id,
            organization_id=organization_id,
            operatingsystem_minor=operatingsystem_minor,
            operatingsystem_description=operatingsystem_description,
            operatingsystem_family=operatingsystem_family,
            operatingsystem_release_name=operatingsystem_release_name,
            operatingsystem_os_parameters_attributes=operatingsystem_os_parameters_attributes,
            operatingsystem_password_hash=operatingsystem_password_hash,
            operatingsystem_architecture_ids=operatingsystem_architecture_ids,
            operatingsystem_provisioning_template_ids=operatingsystem_provisioning_template_ids,
            operatingsystem_medium_ids=operatingsystem_medium_ids,
            operatingsystem_ptable_ids=operatingsystem_ptable_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_operatingsystems_serialize(
        self,
        operatingsystem_name,
        operatingsystem_major,
        location_id,
        organization_id,
        operatingsystem_minor,
        operatingsystem_description,
        operatingsystem_family,
        operatingsystem_release_name,
        operatingsystem_os_parameters_attributes,
        operatingsystem_password_hash,
        operatingsystem_architecture_ids,
        operatingsystem_provisioning_template_ids,
        operatingsystem_medium_ids,
        operatingsystem_ptable_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "operatingsystem[os_parameters_attributes]": "csv",
            "operatingsystem[architecture_ids]": "csv",
            "operatingsystem[provisioning_template_ids]": "csv",
            "operatingsystem[medium_ids]": "csv",
            "operatingsystem[ptable_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if operatingsystem_name is not None:
            _form_params.append(("operatingsystem[name]", operatingsystem_name))
        if operatingsystem_major is not None:
            _form_params.append(("operatingsystem[major]", operatingsystem_major))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if operatingsystem_minor is not None:
            _form_params.append(("operatingsystem[minor]", operatingsystem_minor))
        if operatingsystem_description is not None:
            _form_params.append(
                ("operatingsystem[description]", operatingsystem_description)
            )
        if operatingsystem_family is not None:
            _form_params.append(("operatingsystem[family]", operatingsystem_family))
        if operatingsystem_release_name is not None:
            _form_params.append(
                ("operatingsystem[release_name]", operatingsystem_release_name)
            )
        if operatingsystem_os_parameters_attributes is not None:
            _form_params.append(
                (
                    "operatingsystem[os_parameters_attributes]",
                    operatingsystem_os_parameters_attributes,
                )
            )
        if operatingsystem_password_hash is not None:
            _form_params.append(
                ("operatingsystem[password_hash]", operatingsystem_password_hash)
            )
        if operatingsystem_architecture_ids is not None:
            _form_params.append(
                ("operatingsystem[architecture_ids]", operatingsystem_architecture_ids)
            )
        if operatingsystem_provisioning_template_ids is not None:
            _form_params.append(
                (
                    "operatingsystem[provisioning_template_ids]",
                    operatingsystem_provisioning_template_ids,
                )
            )
        if operatingsystem_medium_ids is not None:
            _form_params.append(
                ("operatingsystem[medium_ids]", operatingsystem_medium_ids)
            )
        if operatingsystem_ptable_ids is not None:
            _form_params.append(
                ("operatingsystem[ptable_ids]", operatingsystem_ptable_ids)
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/operatingsystems",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_operatingsystems_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        operatingsystem_name: Optional[StrictStr] = None,
        operatingsystem_major: Optional[StrictStr] = None,
        operatingsystem_minor: Optional[StrictStr] = None,
        operatingsystem_description: Optional[StrictStr] = None,
        operatingsystem_family: Optional[StrictStr] = None,
        operatingsystem_release_name: Optional[StrictStr] = None,
        operatingsystem_os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        operatingsystem_password_hash: Annotated[
            Optional[StrictStr], Field(description="Root password hash function to use")
        ] = None,
        operatingsystem_architecture_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated architectures"),
        ] = None,
        operatingsystem_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated provisioning templates"),
        ] = None,
        operatingsystem_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="IDs of associated media")
        ] = None,
        operatingsystem_ptable_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated partition tables"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param operatingsystem_name:
        :type operatingsystem_name: str
        :param operatingsystem_major:
        :type operatingsystem_major: str
        :param operatingsystem_minor:
        :type operatingsystem_minor: str
        :param operatingsystem_description:
        :type operatingsystem_description: str
        :param operatingsystem_family:
        :type operatingsystem_family: str
        :param operatingsystem_release_name:
        :type operatingsystem_release_name: str
        :param operatingsystem_os_parameters_attributes: Array of parameters
        :type operatingsystem_os_parameters_attributes: List[str]
        :param operatingsystem_password_hash: Root password hash function to use
        :type operatingsystem_password_hash: str
        :param operatingsystem_architecture_ids: IDs of associated architectures
        :type operatingsystem_architecture_ids: List[str]
        :param operatingsystem_provisioning_template_ids: IDs of associated provisioning templates
        :type operatingsystem_provisioning_template_ids: List[str]
        :param operatingsystem_medium_ids: IDs of associated media
        :type operatingsystem_medium_ids: List[str]
        :param operatingsystem_ptable_ids: IDs of associated partition tables
        :type operatingsystem_ptable_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_operatingsystems_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            operatingsystem_name=operatingsystem_name,
            operatingsystem_major=operatingsystem_major,
            operatingsystem_minor=operatingsystem_minor,
            operatingsystem_description=operatingsystem_description,
            operatingsystem_family=operatingsystem_family,
            operatingsystem_release_name=operatingsystem_release_name,
            operatingsystem_os_parameters_attributes=operatingsystem_os_parameters_attributes,
            operatingsystem_password_hash=operatingsystem_password_hash,
            operatingsystem_architecture_ids=operatingsystem_architecture_ids,
            operatingsystem_provisioning_template_ids=operatingsystem_provisioning_template_ids,
            operatingsystem_medium_ids=operatingsystem_medium_ids,
            operatingsystem_ptable_ids=operatingsystem_ptable_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_operatingsystems_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        operatingsystem_name: Optional[StrictStr] = None,
        operatingsystem_major: Optional[StrictStr] = None,
        operatingsystem_minor: Optional[StrictStr] = None,
        operatingsystem_description: Optional[StrictStr] = None,
        operatingsystem_family: Optional[StrictStr] = None,
        operatingsystem_release_name: Optional[StrictStr] = None,
        operatingsystem_os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        operatingsystem_password_hash: Annotated[
            Optional[StrictStr], Field(description="Root password hash function to use")
        ] = None,
        operatingsystem_architecture_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated architectures"),
        ] = None,
        operatingsystem_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated provisioning templates"),
        ] = None,
        operatingsystem_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="IDs of associated media")
        ] = None,
        operatingsystem_ptable_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated partition tables"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param operatingsystem_name:
        :type operatingsystem_name: str
        :param operatingsystem_major:
        :type operatingsystem_major: str
        :param operatingsystem_minor:
        :type operatingsystem_minor: str
        :param operatingsystem_description:
        :type operatingsystem_description: str
        :param operatingsystem_family:
        :type operatingsystem_family: str
        :param operatingsystem_release_name:
        :type operatingsystem_release_name: str
        :param operatingsystem_os_parameters_attributes: Array of parameters
        :type operatingsystem_os_parameters_attributes: List[str]
        :param operatingsystem_password_hash: Root password hash function to use
        :type operatingsystem_password_hash: str
        :param operatingsystem_architecture_ids: IDs of associated architectures
        :type operatingsystem_architecture_ids: List[str]
        :param operatingsystem_provisioning_template_ids: IDs of associated provisioning templates
        :type operatingsystem_provisioning_template_ids: List[str]
        :param operatingsystem_medium_ids: IDs of associated media
        :type operatingsystem_medium_ids: List[str]
        :param operatingsystem_ptable_ids: IDs of associated partition tables
        :type operatingsystem_ptable_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_operatingsystems_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            operatingsystem_name=operatingsystem_name,
            operatingsystem_major=operatingsystem_major,
            operatingsystem_minor=operatingsystem_minor,
            operatingsystem_description=operatingsystem_description,
            operatingsystem_family=operatingsystem_family,
            operatingsystem_release_name=operatingsystem_release_name,
            operatingsystem_os_parameters_attributes=operatingsystem_os_parameters_attributes,
            operatingsystem_password_hash=operatingsystem_password_hash,
            operatingsystem_architecture_ids=operatingsystem_architecture_ids,
            operatingsystem_provisioning_template_ids=operatingsystem_provisioning_template_ids,
            operatingsystem_medium_ids=operatingsystem_medium_ids,
            operatingsystem_ptable_ids=operatingsystem_ptable_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_operatingsystems_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        operatingsystem_name: Optional[StrictStr] = None,
        operatingsystem_major: Optional[StrictStr] = None,
        operatingsystem_minor: Optional[StrictStr] = None,
        operatingsystem_description: Optional[StrictStr] = None,
        operatingsystem_family: Optional[StrictStr] = None,
        operatingsystem_release_name: Optional[StrictStr] = None,
        operatingsystem_os_parameters_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Array of parameters")
        ] = None,
        operatingsystem_password_hash: Annotated[
            Optional[StrictStr], Field(description="Root password hash function to use")
        ] = None,
        operatingsystem_architecture_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated architectures"),
        ] = None,
        operatingsystem_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated provisioning templates"),
        ] = None,
        operatingsystem_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="IDs of associated media")
        ] = None,
        operatingsystem_ptable_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="IDs of associated partition tables"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update an operating system


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param operatingsystem_name:
        :type operatingsystem_name: str
        :param operatingsystem_major:
        :type operatingsystem_major: str
        :param operatingsystem_minor:
        :type operatingsystem_minor: str
        :param operatingsystem_description:
        :type operatingsystem_description: str
        :param operatingsystem_family:
        :type operatingsystem_family: str
        :param operatingsystem_release_name:
        :type operatingsystem_release_name: str
        :param operatingsystem_os_parameters_attributes: Array of parameters
        :type operatingsystem_os_parameters_attributes: List[str]
        :param operatingsystem_password_hash: Root password hash function to use
        :type operatingsystem_password_hash: str
        :param operatingsystem_architecture_ids: IDs of associated architectures
        :type operatingsystem_architecture_ids: List[str]
        :param operatingsystem_provisioning_template_ids: IDs of associated provisioning templates
        :type operatingsystem_provisioning_template_ids: List[str]
        :param operatingsystem_medium_ids: IDs of associated media
        :type operatingsystem_medium_ids: List[str]
        :param operatingsystem_ptable_ids: IDs of associated partition tables
        :type operatingsystem_ptable_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_operatingsystems_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            operatingsystem_name=operatingsystem_name,
            operatingsystem_major=operatingsystem_major,
            operatingsystem_minor=operatingsystem_minor,
            operatingsystem_description=operatingsystem_description,
            operatingsystem_family=operatingsystem_family,
            operatingsystem_release_name=operatingsystem_release_name,
            operatingsystem_os_parameters_attributes=operatingsystem_os_parameters_attributes,
            operatingsystem_password_hash=operatingsystem_password_hash,
            operatingsystem_architecture_ids=operatingsystem_architecture_ids,
            operatingsystem_provisioning_template_ids=operatingsystem_provisioning_template_ids,
            operatingsystem_medium_ids=operatingsystem_medium_ids,
            operatingsystem_ptable_ids=operatingsystem_ptable_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_operatingsystems_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        operatingsystem_name,
        operatingsystem_major,
        operatingsystem_minor,
        operatingsystem_description,
        operatingsystem_family,
        operatingsystem_release_name,
        operatingsystem_os_parameters_attributes,
        operatingsystem_password_hash,
        operatingsystem_architecture_ids,
        operatingsystem_provisioning_template_ids,
        operatingsystem_medium_ids,
        operatingsystem_ptable_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "operatingsystem[os_parameters_attributes]": "csv",
            "operatingsystem[architecture_ids]": "csv",
            "operatingsystem[provisioning_template_ids]": "csv",
            "operatingsystem[medium_ids]": "csv",
            "operatingsystem[ptable_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if operatingsystem_name is not None:
            _form_params.append(("operatingsystem[name]", operatingsystem_name))
        if operatingsystem_major is not None:
            _form_params.append(("operatingsystem[major]", operatingsystem_major))
        if operatingsystem_minor is not None:
            _form_params.append(("operatingsystem[minor]", operatingsystem_minor))
        if operatingsystem_description is not None:
            _form_params.append(
                ("operatingsystem[description]", operatingsystem_description)
            )
        if operatingsystem_family is not None:
            _form_params.append(("operatingsystem[family]", operatingsystem_family))
        if operatingsystem_release_name is not None:
            _form_params.append(
                ("operatingsystem[release_name]", operatingsystem_release_name)
            )
        if operatingsystem_os_parameters_attributes is not None:
            _form_params.append(
                (
                    "operatingsystem[os_parameters_attributes]",
                    operatingsystem_os_parameters_attributes,
                )
            )
        if operatingsystem_password_hash is not None:
            _form_params.append(
                ("operatingsystem[password_hash]", operatingsystem_password_hash)
            )
        if operatingsystem_architecture_ids is not None:
            _form_params.append(
                ("operatingsystem[architecture_ids]", operatingsystem_architecture_ids)
            )
        if operatingsystem_provisioning_template_ids is not None:
            _form_params.append(
                (
                    "operatingsystem[provisioning_template_ids]",
                    operatingsystem_provisioning_template_ids,
                )
            )
        if operatingsystem_medium_ids is not None:
            _form_params.append(
                ("operatingsystem[medium_ids]", operatingsystem_medium_ids)
            )
        if operatingsystem_ptable_ids is not None:
            _form_params.append(
                ("operatingsystem[ptable_ids]", operatingsystem_ptable_ids)
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/operatingsystems/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
