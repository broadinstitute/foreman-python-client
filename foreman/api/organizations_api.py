# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class OrganizationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_organizations_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete an organization


        :param id: Organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_organizations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_organizations_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete an organization


        :param id: Organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_organizations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_organizations_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an organization


        :param id: Organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_organizations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_organizations_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/organizations/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all organizations


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_with_http_info(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all organizations


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_without_preload_content(
        self,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all organizations


        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_serialize(
            location_id=location_id,
            organization_id=organization_id,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_serialize(
        self,
        location_id,
        organization_id,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show organization


        :param id: organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show organization


        :param id: organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show organization


        :param id: organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations_id_redhat_provider(
        self,
        id: Union[StrictFloat, StrictInt],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all :resource_id


        :param id: (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_id_redhat_provider_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_id_redhat_provider_with_http_info(
        self,
        id: Union[StrictFloat, StrictInt],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all :resource_id


        :param id: (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_id_redhat_provider_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_id_redhat_provider_without_preload_content(
        self,
        id: Union[StrictFloat, StrictInt],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all :resource_id


        :param id: (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_id_redhat_provider_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_id_redhat_provider_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations/{id}/redhat_provider",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations_id_releases(
        self,
        id: Annotated[StrictStr, Field(description="ID of the Organization")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List available releases in the organization


        :param id: ID of the Organization (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_id_releases_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_id_releases_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the Organization")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List available releases in the organization


        :param id: ID of the Organization (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_id_releases_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_id_releases_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the Organization")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List available releases in the organization


        :param id: ID of the Organization (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_id_releases_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_id_releases_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations/{id}/releases",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations_label_download_debug_certificate(
        self,
        label: Annotated[StrictStr, Field(description="Organization label")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Download a debug certificate


        :param label: Organization label (required)
        :type label: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_label_download_debug_certificate_serialize(
            label=label,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_label_download_debug_certificate_with_http_info(
        self,
        label: Annotated[StrictStr, Field(description="Organization label")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Download a debug certificate


        :param label: Organization label (required)
        :type label: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_label_download_debug_certificate_serialize(
            label=label,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_label_download_debug_certificate_without_preload_content(
        self,
        label: Annotated[StrictStr, Field(description="Organization label")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download a debug certificate


        :param label: Organization label (required)
        :type label: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_label_download_debug_certificate_serialize(
            label=label,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_label_download_debug_certificate_serialize(
        self,
        label,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if label is not None:
            _path_params["label"] = label
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations/{label}/download_debug_certificate",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_organizations(
        self,
        organization_name: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        organization_description: Optional[StrictStr] = None,
        organization_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        organization_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        organization_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        organization_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        organization_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        organization_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        organization_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        organization_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        organization_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        organization_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        organization_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        organization_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        organization_location_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated location IDs")
        ] = None,
        organization_label: Optional[StrictStr] = None,
        simple_content_access: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether to turn on Simple Content Access for the organization."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create organization


        :param organization_name: (required)
        :type organization_name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param organization_description:
        :type organization_description: str
        :param organization_user_ids: User IDs
        :type organization_user_ids: List[str]
        :param organization_smart_proxy_ids: Smart proxy IDs
        :type organization_smart_proxy_ids: List[str]
        :param organization_compute_resource_ids: Compute resource IDs
        :type organization_compute_resource_ids: List[str]
        :param organization_medium_ids: Medium IDs
        :type organization_medium_ids: List[str]
        :param organization_ptable_ids: Partition template IDs
        :type organization_ptable_ids: List[str]
        :param organization_provisioning_template_ids: Provisioning template IDs
        :type organization_provisioning_template_ids: List[str]
        :param organization_domain_ids: Domain IDs
        :type organization_domain_ids: List[str]
        :param organization_realm_ids: Realm IDs
        :type organization_realm_ids: List[str]
        :param organization_hostgroup_ids: Host group IDs
        :type organization_hostgroup_ids: List[str]
        :param organization_environment_ids: Environment IDs
        :type organization_environment_ids: List[str]
        :param organization_subnet_ids: Subnet IDs
        :type organization_subnet_ids: List[str]
        :param organization_ignore_types: List of resources types that will be automatically associated
        :type organization_ignore_types: List[str]
        :param organization_location_ids: Associated location IDs
        :type organization_location_ids: List[str]
        :param organization_label:
        :type organization_label: str
        :param simple_content_access: Whether to turn on Simple Content Access for the organization.
        :type simple_content_access: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_organizations_serialize(
            organization_name=organization_name,
            location_id=location_id,
            organization_id=organization_id,
            organization_description=organization_description,
            organization_user_ids=organization_user_ids,
            organization_smart_proxy_ids=organization_smart_proxy_ids,
            organization_compute_resource_ids=organization_compute_resource_ids,
            organization_medium_ids=organization_medium_ids,
            organization_ptable_ids=organization_ptable_ids,
            organization_provisioning_template_ids=organization_provisioning_template_ids,
            organization_domain_ids=organization_domain_ids,
            organization_realm_ids=organization_realm_ids,
            organization_hostgroup_ids=organization_hostgroup_ids,
            organization_environment_ids=organization_environment_ids,
            organization_subnet_ids=organization_subnet_ids,
            organization_ignore_types=organization_ignore_types,
            organization_location_ids=organization_location_ids,
            organization_label=organization_label,
            simple_content_access=simple_content_access,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_organizations_with_http_info(
        self,
        organization_name: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        organization_description: Optional[StrictStr] = None,
        organization_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        organization_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        organization_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        organization_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        organization_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        organization_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        organization_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        organization_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        organization_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        organization_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        organization_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        organization_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        organization_location_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated location IDs")
        ] = None,
        organization_label: Optional[StrictStr] = None,
        simple_content_access: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether to turn on Simple Content Access for the organization."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create organization


        :param organization_name: (required)
        :type organization_name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param organization_description:
        :type organization_description: str
        :param organization_user_ids: User IDs
        :type organization_user_ids: List[str]
        :param organization_smart_proxy_ids: Smart proxy IDs
        :type organization_smart_proxy_ids: List[str]
        :param organization_compute_resource_ids: Compute resource IDs
        :type organization_compute_resource_ids: List[str]
        :param organization_medium_ids: Medium IDs
        :type organization_medium_ids: List[str]
        :param organization_ptable_ids: Partition template IDs
        :type organization_ptable_ids: List[str]
        :param organization_provisioning_template_ids: Provisioning template IDs
        :type organization_provisioning_template_ids: List[str]
        :param organization_domain_ids: Domain IDs
        :type organization_domain_ids: List[str]
        :param organization_realm_ids: Realm IDs
        :type organization_realm_ids: List[str]
        :param organization_hostgroup_ids: Host group IDs
        :type organization_hostgroup_ids: List[str]
        :param organization_environment_ids: Environment IDs
        :type organization_environment_ids: List[str]
        :param organization_subnet_ids: Subnet IDs
        :type organization_subnet_ids: List[str]
        :param organization_ignore_types: List of resources types that will be automatically associated
        :type organization_ignore_types: List[str]
        :param organization_location_ids: Associated location IDs
        :type organization_location_ids: List[str]
        :param organization_label:
        :type organization_label: str
        :param simple_content_access: Whether to turn on Simple Content Access for the organization.
        :type simple_content_access: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_organizations_serialize(
            organization_name=organization_name,
            location_id=location_id,
            organization_id=organization_id,
            organization_description=organization_description,
            organization_user_ids=organization_user_ids,
            organization_smart_proxy_ids=organization_smart_proxy_ids,
            organization_compute_resource_ids=organization_compute_resource_ids,
            organization_medium_ids=organization_medium_ids,
            organization_ptable_ids=organization_ptable_ids,
            organization_provisioning_template_ids=organization_provisioning_template_ids,
            organization_domain_ids=organization_domain_ids,
            organization_realm_ids=organization_realm_ids,
            organization_hostgroup_ids=organization_hostgroup_ids,
            organization_environment_ids=organization_environment_ids,
            organization_subnet_ids=organization_subnet_ids,
            organization_ignore_types=organization_ignore_types,
            organization_location_ids=organization_location_ids,
            organization_label=organization_label,
            simple_content_access=simple_content_access,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_organizations_without_preload_content(
        self,
        organization_name: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        organization_description: Optional[StrictStr] = None,
        organization_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        organization_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        organization_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        organization_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        organization_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        organization_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        organization_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        organization_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        organization_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        organization_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        organization_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        organization_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        organization_location_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated location IDs")
        ] = None,
        organization_label: Optional[StrictStr] = None,
        simple_content_access: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether to turn on Simple Content Access for the organization."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create organization


        :param organization_name: (required)
        :type organization_name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param organization_description:
        :type organization_description: str
        :param organization_user_ids: User IDs
        :type organization_user_ids: List[str]
        :param organization_smart_proxy_ids: Smart proxy IDs
        :type organization_smart_proxy_ids: List[str]
        :param organization_compute_resource_ids: Compute resource IDs
        :type organization_compute_resource_ids: List[str]
        :param organization_medium_ids: Medium IDs
        :type organization_medium_ids: List[str]
        :param organization_ptable_ids: Partition template IDs
        :type organization_ptable_ids: List[str]
        :param organization_provisioning_template_ids: Provisioning template IDs
        :type organization_provisioning_template_ids: List[str]
        :param organization_domain_ids: Domain IDs
        :type organization_domain_ids: List[str]
        :param organization_realm_ids: Realm IDs
        :type organization_realm_ids: List[str]
        :param organization_hostgroup_ids: Host group IDs
        :type organization_hostgroup_ids: List[str]
        :param organization_environment_ids: Environment IDs
        :type organization_environment_ids: List[str]
        :param organization_subnet_ids: Subnet IDs
        :type organization_subnet_ids: List[str]
        :param organization_ignore_types: List of resources types that will be automatically associated
        :type organization_ignore_types: List[str]
        :param organization_location_ids: Associated location IDs
        :type organization_location_ids: List[str]
        :param organization_label:
        :type organization_label: str
        :param simple_content_access: Whether to turn on Simple Content Access for the organization.
        :type simple_content_access: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_organizations_serialize(
            organization_name=organization_name,
            location_id=location_id,
            organization_id=organization_id,
            organization_description=organization_description,
            organization_user_ids=organization_user_ids,
            organization_smart_proxy_ids=organization_smart_proxy_ids,
            organization_compute_resource_ids=organization_compute_resource_ids,
            organization_medium_ids=organization_medium_ids,
            organization_ptable_ids=organization_ptable_ids,
            organization_provisioning_template_ids=organization_provisioning_template_ids,
            organization_domain_ids=organization_domain_ids,
            organization_realm_ids=organization_realm_ids,
            organization_hostgroup_ids=organization_hostgroup_ids,
            organization_environment_ids=organization_environment_ids,
            organization_subnet_ids=organization_subnet_ids,
            organization_ignore_types=organization_ignore_types,
            organization_location_ids=organization_location_ids,
            organization_label=organization_label,
            simple_content_access=simple_content_access,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_organizations_serialize(
        self,
        organization_name,
        location_id,
        organization_id,
        organization_description,
        organization_user_ids,
        organization_smart_proxy_ids,
        organization_compute_resource_ids,
        organization_medium_ids,
        organization_ptable_ids,
        organization_provisioning_template_ids,
        organization_domain_ids,
        organization_realm_ids,
        organization_hostgroup_ids,
        organization_environment_ids,
        organization_subnet_ids,
        organization_ignore_types,
        organization_location_ids,
        organization_label,
        simple_content_access,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "organization[user_ids]": "csv",
            "organization[smart_proxy_ids]": "csv",
            "organization[compute_resource_ids]": "csv",
            "organization[medium_ids]": "csv",
            "organization[ptable_ids]": "csv",
            "organization[provisioning_template_ids]": "csv",
            "organization[domain_ids]": "csv",
            "organization[realm_ids]": "csv",
            "organization[hostgroup_ids]": "csv",
            "organization[environment_ids]": "csv",
            "organization[subnet_ids]": "csv",
            "organization[ignore_types]": "csv",
            "organization[location_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if organization_name is not None:
            _form_params.append(("organization[name]", organization_name))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if organization_description is not None:
            _form_params.append(("organization[description]", organization_description))
        if organization_user_ids is not None:
            _form_params.append(("organization[user_ids]", organization_user_ids))
        if organization_smart_proxy_ids is not None:
            _form_params.append(
                ("organization[smart_proxy_ids]", organization_smart_proxy_ids)
            )
        if organization_compute_resource_ids is not None:
            _form_params.append(
                (
                    "organization[compute_resource_ids]",
                    organization_compute_resource_ids,
                )
            )
        if organization_medium_ids is not None:
            _form_params.append(("organization[medium_ids]", organization_medium_ids))
        if organization_ptable_ids is not None:
            _form_params.append(("organization[ptable_ids]", organization_ptable_ids))
        if organization_provisioning_template_ids is not None:
            _form_params.append(
                (
                    "organization[provisioning_template_ids]",
                    organization_provisioning_template_ids,
                )
            )
        if organization_domain_ids is not None:
            _form_params.append(("organization[domain_ids]", organization_domain_ids))
        if organization_realm_ids is not None:
            _form_params.append(("organization[realm_ids]", organization_realm_ids))
        if organization_hostgroup_ids is not None:
            _form_params.append(
                ("organization[hostgroup_ids]", organization_hostgroup_ids)
            )
        if organization_environment_ids is not None:
            _form_params.append(
                ("organization[environment_ids]", organization_environment_ids)
            )
        if organization_subnet_ids is not None:
            _form_params.append(("organization[subnet_ids]", organization_subnet_ids))
        if organization_ignore_types is not None:
            _form_params.append(
                ("organization[ignore_types]", organization_ignore_types)
            )
        if organization_location_ids is not None:
            _form_params.append(
                ("organization[location_ids]", organization_location_ids)
            )
        if organization_label is not None:
            _form_params.append(("organization[label]", organization_label))
        if simple_content_access is not None:
            _form_params.append(("simple_content_access", simple_content_access))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/organizations",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_organizations_id(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        redhat_repository_url: Annotated[
            Optional[StrictStr], Field(description="Red Hat CDN URL")
        ] = None,
        simple_content_access: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether Simple Content Access should be enabled for the organization."
            ),
        ] = None,
        organization_name: Optional[StrictStr] = None,
        organization_description: Optional[StrictStr] = None,
        organization_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        organization_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        organization_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        organization_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        organization_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        organization_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        organization_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        organization_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        organization_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        organization_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        organization_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        organization_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        organization_location_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated location IDs")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update organization


        :param id: organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param redhat_repository_url: Red Hat CDN URL
        :type redhat_repository_url: str
        :param simple_content_access: Whether Simple Content Access should be enabled for the organization.
        :type simple_content_access: bool
        :param organization_name:
        :type organization_name: str
        :param organization_description:
        :type organization_description: str
        :param organization_user_ids: User IDs
        :type organization_user_ids: List[str]
        :param organization_smart_proxy_ids: Smart proxy IDs
        :type organization_smart_proxy_ids: List[str]
        :param organization_compute_resource_ids: Compute resource IDs
        :type organization_compute_resource_ids: List[str]
        :param organization_medium_ids: Medium IDs
        :type organization_medium_ids: List[str]
        :param organization_ptable_ids: Partition template IDs
        :type organization_ptable_ids: List[str]
        :param organization_provisioning_template_ids: Provisioning template IDs
        :type organization_provisioning_template_ids: List[str]
        :param organization_domain_ids: Domain IDs
        :type organization_domain_ids: List[str]
        :param organization_realm_ids: Realm IDs
        :type organization_realm_ids: List[str]
        :param organization_hostgroup_ids: Host group IDs
        :type organization_hostgroup_ids: List[str]
        :param organization_environment_ids: Environment IDs
        :type organization_environment_ids: List[str]
        :param organization_subnet_ids: Subnet IDs
        :type organization_subnet_ids: List[str]
        :param organization_ignore_types: List of resources types that will be automatically associated
        :type organization_ignore_types: List[str]
        :param organization_location_ids: Associated location IDs
        :type organization_location_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            redhat_repository_url=redhat_repository_url,
            simple_content_access=simple_content_access,
            organization_name=organization_name,
            organization_description=organization_description,
            organization_user_ids=organization_user_ids,
            organization_smart_proxy_ids=organization_smart_proxy_ids,
            organization_compute_resource_ids=organization_compute_resource_ids,
            organization_medium_ids=organization_medium_ids,
            organization_ptable_ids=organization_ptable_ids,
            organization_provisioning_template_ids=organization_provisioning_template_ids,
            organization_domain_ids=organization_domain_ids,
            organization_realm_ids=organization_realm_ids,
            organization_hostgroup_ids=organization_hostgroup_ids,
            organization_environment_ids=organization_environment_ids,
            organization_subnet_ids=organization_subnet_ids,
            organization_ignore_types=organization_ignore_types,
            organization_location_ids=organization_location_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_organizations_id_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        redhat_repository_url: Annotated[
            Optional[StrictStr], Field(description="Red Hat CDN URL")
        ] = None,
        simple_content_access: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether Simple Content Access should be enabled for the organization."
            ),
        ] = None,
        organization_name: Optional[StrictStr] = None,
        organization_description: Optional[StrictStr] = None,
        organization_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        organization_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        organization_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        organization_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        organization_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        organization_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        organization_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        organization_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        organization_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        organization_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        organization_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        organization_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        organization_location_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated location IDs")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update organization


        :param id: organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param redhat_repository_url: Red Hat CDN URL
        :type redhat_repository_url: str
        :param simple_content_access: Whether Simple Content Access should be enabled for the organization.
        :type simple_content_access: bool
        :param organization_name:
        :type organization_name: str
        :param organization_description:
        :type organization_description: str
        :param organization_user_ids: User IDs
        :type organization_user_ids: List[str]
        :param organization_smart_proxy_ids: Smart proxy IDs
        :type organization_smart_proxy_ids: List[str]
        :param organization_compute_resource_ids: Compute resource IDs
        :type organization_compute_resource_ids: List[str]
        :param organization_medium_ids: Medium IDs
        :type organization_medium_ids: List[str]
        :param organization_ptable_ids: Partition template IDs
        :type organization_ptable_ids: List[str]
        :param organization_provisioning_template_ids: Provisioning template IDs
        :type organization_provisioning_template_ids: List[str]
        :param organization_domain_ids: Domain IDs
        :type organization_domain_ids: List[str]
        :param organization_realm_ids: Realm IDs
        :type organization_realm_ids: List[str]
        :param organization_hostgroup_ids: Host group IDs
        :type organization_hostgroup_ids: List[str]
        :param organization_environment_ids: Environment IDs
        :type organization_environment_ids: List[str]
        :param organization_subnet_ids: Subnet IDs
        :type organization_subnet_ids: List[str]
        :param organization_ignore_types: List of resources types that will be automatically associated
        :type organization_ignore_types: List[str]
        :param organization_location_ids: Associated location IDs
        :type organization_location_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            redhat_repository_url=redhat_repository_url,
            simple_content_access=simple_content_access,
            organization_name=organization_name,
            organization_description=organization_description,
            organization_user_ids=organization_user_ids,
            organization_smart_proxy_ids=organization_smart_proxy_ids,
            organization_compute_resource_ids=organization_compute_resource_ids,
            organization_medium_ids=organization_medium_ids,
            organization_ptable_ids=organization_ptable_ids,
            organization_provisioning_template_ids=organization_provisioning_template_ids,
            organization_domain_ids=organization_domain_ids,
            organization_realm_ids=organization_realm_ids,
            organization_hostgroup_ids=organization_hostgroup_ids,
            organization_environment_ids=organization_environment_ids,
            organization_subnet_ids=organization_subnet_ids,
            organization_ignore_types=organization_ignore_types,
            organization_location_ids=organization_location_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_organizations_id_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        redhat_repository_url: Annotated[
            Optional[StrictStr], Field(description="Red Hat CDN URL")
        ] = None,
        simple_content_access: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether Simple Content Access should be enabled for the organization."
            ),
        ] = None,
        organization_name: Optional[StrictStr] = None,
        organization_description: Optional[StrictStr] = None,
        organization_user_ids: Annotated[
            Optional[List[StrictStr]], Field(description="User IDs")
        ] = None,
        organization_smart_proxy_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Smart proxy IDs")
        ] = None,
        organization_compute_resource_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Compute resource IDs")
        ] = None,
        organization_medium_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Medium IDs")
        ] = None,
        organization_ptable_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Partition template IDs")
        ] = None,
        organization_provisioning_template_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Provisioning template IDs")
        ] = None,
        organization_domain_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Domain IDs")
        ] = None,
        organization_realm_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Realm IDs")
        ] = None,
        organization_hostgroup_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Host group IDs")
        ] = None,
        organization_environment_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Environment IDs")
        ] = None,
        organization_subnet_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Subnet IDs")
        ] = None,
        organization_ignore_types: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="List of resources types that will be automatically associated"
            ),
        ] = None,
        organization_location_ids: Annotated[
            Optional[List[StrictStr]], Field(description="Associated location IDs")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update organization


        :param id: organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param redhat_repository_url: Red Hat CDN URL
        :type redhat_repository_url: str
        :param simple_content_access: Whether Simple Content Access should be enabled for the organization.
        :type simple_content_access: bool
        :param organization_name:
        :type organization_name: str
        :param organization_description:
        :type organization_description: str
        :param organization_user_ids: User IDs
        :type organization_user_ids: List[str]
        :param organization_smart_proxy_ids: Smart proxy IDs
        :type organization_smart_proxy_ids: List[str]
        :param organization_compute_resource_ids: Compute resource IDs
        :type organization_compute_resource_ids: List[str]
        :param organization_medium_ids: Medium IDs
        :type organization_medium_ids: List[str]
        :param organization_ptable_ids: Partition template IDs
        :type organization_ptable_ids: List[str]
        :param organization_provisioning_template_ids: Provisioning template IDs
        :type organization_provisioning_template_ids: List[str]
        :param organization_domain_ids: Domain IDs
        :type organization_domain_ids: List[str]
        :param organization_realm_ids: Realm IDs
        :type organization_realm_ids: List[str]
        :param organization_hostgroup_ids: Host group IDs
        :type organization_hostgroup_ids: List[str]
        :param organization_environment_ids: Environment IDs
        :type organization_environment_ids: List[str]
        :param organization_subnet_ids: Subnet IDs
        :type organization_subnet_ids: List[str]
        :param organization_ignore_types: List of resources types that will be automatically associated
        :type organization_ignore_types: List[str]
        :param organization_location_ids: Associated location IDs
        :type organization_location_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            redhat_repository_url=redhat_repository_url,
            simple_content_access=simple_content_access,
            organization_name=organization_name,
            organization_description=organization_description,
            organization_user_ids=organization_user_ids,
            organization_smart_proxy_ids=organization_smart_proxy_ids,
            organization_compute_resource_ids=organization_compute_resource_ids,
            organization_medium_ids=organization_medium_ids,
            organization_ptable_ids=organization_ptable_ids,
            organization_provisioning_template_ids=organization_provisioning_template_ids,
            organization_domain_ids=organization_domain_ids,
            organization_realm_ids=organization_realm_ids,
            organization_hostgroup_ids=organization_hostgroup_ids,
            organization_environment_ids=organization_environment_ids,
            organization_subnet_ids=organization_subnet_ids,
            organization_ignore_types=organization_ignore_types,
            organization_location_ids=organization_location_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_organizations_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        redhat_repository_url,
        simple_content_access,
        organization_name,
        organization_description,
        organization_user_ids,
        organization_smart_proxy_ids,
        organization_compute_resource_ids,
        organization_medium_ids,
        organization_ptable_ids,
        organization_provisioning_template_ids,
        organization_domain_ids,
        organization_realm_ids,
        organization_hostgroup_ids,
        organization_environment_ids,
        organization_subnet_ids,
        organization_ignore_types,
        organization_location_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "organization[user_ids]": "csv",
            "organization[smart_proxy_ids]": "csv",
            "organization[compute_resource_ids]": "csv",
            "organization[medium_ids]": "csv",
            "organization[ptable_ids]": "csv",
            "organization[provisioning_template_ids]": "csv",
            "organization[domain_ids]": "csv",
            "organization[realm_ids]": "csv",
            "organization[hostgroup_ids]": "csv",
            "organization[environment_ids]": "csv",
            "organization[subnet_ids]": "csv",
            "organization[ignore_types]": "csv",
            "organization[location_ids]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if redhat_repository_url is not None:
            _form_params.append(("redhat_repository_url", redhat_repository_url))
        if simple_content_access is not None:
            _form_params.append(("simple_content_access", simple_content_access))
        if organization_name is not None:
            _form_params.append(("organization[name]", organization_name))
        if organization_description is not None:
            _form_params.append(("organization[description]", organization_description))
        if organization_user_ids is not None:
            _form_params.append(("organization[user_ids]", organization_user_ids))
        if organization_smart_proxy_ids is not None:
            _form_params.append(
                ("organization[smart_proxy_ids]", organization_smart_proxy_ids)
            )
        if organization_compute_resource_ids is not None:
            _form_params.append(
                (
                    "organization[compute_resource_ids]",
                    organization_compute_resource_ids,
                )
            )
        if organization_medium_ids is not None:
            _form_params.append(("organization[medium_ids]", organization_medium_ids))
        if organization_ptable_ids is not None:
            _form_params.append(("organization[ptable_ids]", organization_ptable_ids))
        if organization_provisioning_template_ids is not None:
            _form_params.append(
                (
                    "organization[provisioning_template_ids]",
                    organization_provisioning_template_ids,
                )
            )
        if organization_domain_ids is not None:
            _form_params.append(("organization[domain_ids]", organization_domain_ids))
        if organization_realm_ids is not None:
            _form_params.append(("organization[realm_ids]", organization_realm_ids))
        if organization_hostgroup_ids is not None:
            _form_params.append(
                ("organization[hostgroup_ids]", organization_hostgroup_ids)
            )
        if organization_environment_ids is not None:
            _form_params.append(
                ("organization[environment_ids]", organization_environment_ids)
            )
        if organization_subnet_ids is not None:
            _form_params.append(("organization[subnet_ids]", organization_subnet_ids))
        if organization_ignore_types is not None:
            _form_params.append(
                ("organization[ignore_types]", organization_ignore_types)
            )
        if organization_location_ids is not None:
            _form_params.append(
                ("organization[location_ids]", organization_location_ids)
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/organizations/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_organizations_id_cdn_configuration(
        self,
        id: Annotated[StrictStr, Field(description="ID of the Organization")],
        type: Annotated[
            StrictStr,
            Field(
                description="CDN configuration type. One of redhat_cdn, network_sync, export_sync, custom_cdn."
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        url: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream foreman server to sync CDN content from. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        username: Annotated[
            Optional[StrictStr],
            Field(
                description="Username for authentication. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        password: Annotated[
            Optional[StrictStr],
            Field(
                description="Password for authentication. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        upstream_organization_label: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream organization to sync CDN content from. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        upstream_content_view_label: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream Content View Label, default: Default_Organization_View. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        upstream_lifecycle_environment_label: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream Lifecycle Environment, default: Library. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        ssl_ca_credential_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Content Credential to use for SSL CA. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        custom_cdn_auth_enabled: Annotated[
            Optional[StrictBool],
            Field(
                description="If product certificates should be used to authenticate to a custom CDN."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update the CDN configuration


        :param id: ID of the Organization (required)
        :type id: str
        :param type: CDN configuration type. One of redhat_cdn, network_sync, export_sync, custom_cdn. (required)
        :type type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param url: Upstream foreman server to sync CDN content from. Relevant only for 'upstream_server' type.
        :type url: str
        :param username: Username for authentication. Relevant only for 'upstream_server' type.
        :type username: str
        :param password: Password for authentication. Relevant only for 'upstream_server' type.
        :type password: str
        :param upstream_organization_label: Upstream organization to sync CDN content from. Relevant only for 'upstream_server' type.
        :type upstream_organization_label: str
        :param upstream_content_view_label: Upstream Content View Label, default: Default_Organization_View. Relevant only for 'upstream_server' type.
        :type upstream_content_view_label: str
        :param upstream_lifecycle_environment_label: Upstream Lifecycle Environment, default: Library. Relevant only for 'upstream_server' type.
        :type upstream_lifecycle_environment_label: str
        :param ssl_ca_credential_id: Content Credential to use for SSL CA. Relevant only for 'upstream_server' type.
        :type ssl_ca_credential_id: float
        :param custom_cdn_auth_enabled: If product certificates should be used to authenticate to a custom CDN.
        :type custom_cdn_auth_enabled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_id_cdn_configuration_serialize(
            id=id,
            type=type,
            location_id=location_id,
            organization_id=organization_id,
            url=url,
            username=username,
            password=password,
            upstream_organization_label=upstream_organization_label,
            upstream_content_view_label=upstream_content_view_label,
            upstream_lifecycle_environment_label=upstream_lifecycle_environment_label,
            ssl_ca_credential_id=ssl_ca_credential_id,
            custom_cdn_auth_enabled=custom_cdn_auth_enabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_organizations_id_cdn_configuration_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the Organization")],
        type: Annotated[
            StrictStr,
            Field(
                description="CDN configuration type. One of redhat_cdn, network_sync, export_sync, custom_cdn."
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        url: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream foreman server to sync CDN content from. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        username: Annotated[
            Optional[StrictStr],
            Field(
                description="Username for authentication. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        password: Annotated[
            Optional[StrictStr],
            Field(
                description="Password for authentication. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        upstream_organization_label: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream organization to sync CDN content from. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        upstream_content_view_label: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream Content View Label, default: Default_Organization_View. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        upstream_lifecycle_environment_label: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream Lifecycle Environment, default: Library. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        ssl_ca_credential_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Content Credential to use for SSL CA. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        custom_cdn_auth_enabled: Annotated[
            Optional[StrictBool],
            Field(
                description="If product certificates should be used to authenticate to a custom CDN."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update the CDN configuration


        :param id: ID of the Organization (required)
        :type id: str
        :param type: CDN configuration type. One of redhat_cdn, network_sync, export_sync, custom_cdn. (required)
        :type type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param url: Upstream foreman server to sync CDN content from. Relevant only for 'upstream_server' type.
        :type url: str
        :param username: Username for authentication. Relevant only for 'upstream_server' type.
        :type username: str
        :param password: Password for authentication. Relevant only for 'upstream_server' type.
        :type password: str
        :param upstream_organization_label: Upstream organization to sync CDN content from. Relevant only for 'upstream_server' type.
        :type upstream_organization_label: str
        :param upstream_content_view_label: Upstream Content View Label, default: Default_Organization_View. Relevant only for 'upstream_server' type.
        :type upstream_content_view_label: str
        :param upstream_lifecycle_environment_label: Upstream Lifecycle Environment, default: Library. Relevant only for 'upstream_server' type.
        :type upstream_lifecycle_environment_label: str
        :param ssl_ca_credential_id: Content Credential to use for SSL CA. Relevant only for 'upstream_server' type.
        :type ssl_ca_credential_id: float
        :param custom_cdn_auth_enabled: If product certificates should be used to authenticate to a custom CDN.
        :type custom_cdn_auth_enabled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_id_cdn_configuration_serialize(
            id=id,
            type=type,
            location_id=location_id,
            organization_id=organization_id,
            url=url,
            username=username,
            password=password,
            upstream_organization_label=upstream_organization_label,
            upstream_content_view_label=upstream_content_view_label,
            upstream_lifecycle_environment_label=upstream_lifecycle_environment_label,
            ssl_ca_credential_id=ssl_ca_credential_id,
            custom_cdn_auth_enabled=custom_cdn_auth_enabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_organizations_id_cdn_configuration_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the Organization")],
        type: Annotated[
            StrictStr,
            Field(
                description="CDN configuration type. One of redhat_cdn, network_sync, export_sync, custom_cdn."
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        url: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream foreman server to sync CDN content from. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        username: Annotated[
            Optional[StrictStr],
            Field(
                description="Username for authentication. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        password: Annotated[
            Optional[StrictStr],
            Field(
                description="Password for authentication. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        upstream_organization_label: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream organization to sync CDN content from. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        upstream_content_view_label: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream Content View Label, default: Default_Organization_View. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        upstream_lifecycle_environment_label: Annotated[
            Optional[StrictStr],
            Field(
                description="Upstream Lifecycle Environment, default: Library. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        ssl_ca_credential_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Content Credential to use for SSL CA. Relevant only for 'upstream_server' type."
            ),
        ] = None,
        custom_cdn_auth_enabled: Annotated[
            Optional[StrictBool],
            Field(
                description="If product certificates should be used to authenticate to a custom CDN."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update the CDN configuration


        :param id: ID of the Organization (required)
        :type id: str
        :param type: CDN configuration type. One of redhat_cdn, network_sync, export_sync, custom_cdn. (required)
        :type type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param url: Upstream foreman server to sync CDN content from. Relevant only for 'upstream_server' type.
        :type url: str
        :param username: Username for authentication. Relevant only for 'upstream_server' type.
        :type username: str
        :param password: Password for authentication. Relevant only for 'upstream_server' type.
        :type password: str
        :param upstream_organization_label: Upstream organization to sync CDN content from. Relevant only for 'upstream_server' type.
        :type upstream_organization_label: str
        :param upstream_content_view_label: Upstream Content View Label, default: Default_Organization_View. Relevant only for 'upstream_server' type.
        :type upstream_content_view_label: str
        :param upstream_lifecycle_environment_label: Upstream Lifecycle Environment, default: Library. Relevant only for 'upstream_server' type.
        :type upstream_lifecycle_environment_label: str
        :param ssl_ca_credential_id: Content Credential to use for SSL CA. Relevant only for 'upstream_server' type.
        :type ssl_ca_credential_id: float
        :param custom_cdn_auth_enabled: If product certificates should be used to authenticate to a custom CDN.
        :type custom_cdn_auth_enabled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_id_cdn_configuration_serialize(
            id=id,
            type=type,
            location_id=location_id,
            organization_id=organization_id,
            url=url,
            username=username,
            password=password,
            upstream_organization_label=upstream_organization_label,
            upstream_content_view_label=upstream_content_view_label,
            upstream_lifecycle_environment_label=upstream_lifecycle_environment_label,
            ssl_ca_credential_id=ssl_ca_credential_id,
            custom_cdn_auth_enabled=custom_cdn_auth_enabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_organizations_id_cdn_configuration_serialize(
        self,
        id,
        type,
        location_id,
        organization_id,
        url,
        username,
        password,
        upstream_organization_label,
        upstream_content_view_label,
        upstream_lifecycle_environment_label,
        ssl_ca_credential_id,
        custom_cdn_auth_enabled,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if type is not None:
            _form_params.append(("type", type))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if url is not None:
            _form_params.append(("url", url))
        if username is not None:
            _form_params.append(("username", username))
        if password is not None:
            _form_params.append(("password", password))
        if upstream_organization_label is not None:
            _form_params.append(
                ("upstream_organization_label", upstream_organization_label)
            )
        if upstream_content_view_label is not None:
            _form_params.append(
                ("upstream_content_view_label", upstream_content_view_label)
            )
        if upstream_lifecycle_environment_label is not None:
            _form_params.append(
                (
                    "upstream_lifecycle_environment_label",
                    upstream_lifecycle_environment_label,
                )
            )
        if ssl_ca_credential_id is not None:
            _form_params.append(("ssl_ca_credential_id", ssl_ca_credential_id))
        if custom_cdn_auth_enabled is not None:
            _form_params.append(("custom_cdn_auth_enabled", custom_cdn_auth_enabled))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/organizations/{id}/cdn_configuration",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_organizations_id_repo_discover(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        url: Annotated[
            Optional[StrictStr],
            Field(description="Base URL to perform repo discovery on"),
        ] = None,
        content_type: Annotated[
            Optional[StrictStr], Field(description="One of yum or docker")
        ] = None,
        upstream_username: Annotated[
            Optional[StrictStr], Field(description="Username to access URL")
        ] = None,
        upstream_password: Annotated[
            Optional[StrictStr], Field(description="Password to access URL")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search pattern (defaults to '*')")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Discover Repositories


        :param id: Organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param url: Base URL to perform repo discovery on
        :type url: str
        :param content_type: One of yum or docker
        :type content_type: str
        :param upstream_username: Username to access URL
        :type upstream_username: str
        :param upstream_password: Password to access URL
        :type upstream_password: str
        :param search: Search pattern (defaults to '*')
        :type search: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_id_repo_discover_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            url=url,
            content_type=content_type,
            upstream_username=upstream_username,
            upstream_password=upstream_password,
            search=search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_organizations_id_repo_discover_with_http_info(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        url: Annotated[
            Optional[StrictStr],
            Field(description="Base URL to perform repo discovery on"),
        ] = None,
        content_type: Annotated[
            Optional[StrictStr], Field(description="One of yum or docker")
        ] = None,
        upstream_username: Annotated[
            Optional[StrictStr], Field(description="Username to access URL")
        ] = None,
        upstream_password: Annotated[
            Optional[StrictStr], Field(description="Password to access URL")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search pattern (defaults to '*')")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Discover Repositories


        :param id: Organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param url: Base URL to perform repo discovery on
        :type url: str
        :param content_type: One of yum or docker
        :type content_type: str
        :param upstream_username: Username to access URL
        :type upstream_username: str
        :param upstream_password: Password to access URL
        :type upstream_password: str
        :param search: Search pattern (defaults to '*')
        :type search: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_id_repo_discover_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            url=url,
            content_type=content_type,
            upstream_username=upstream_username,
            upstream_password=upstream_password,
            search=search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_organizations_id_repo_discover_without_preload_content(
        self,
        id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="Organization ID")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        url: Annotated[
            Optional[StrictStr],
            Field(description="Base URL to perform repo discovery on"),
        ] = None,
        content_type: Annotated[
            Optional[StrictStr], Field(description="One of yum or docker")
        ] = None,
        upstream_username: Annotated[
            Optional[StrictStr], Field(description="Username to access URL")
        ] = None,
        upstream_password: Annotated[
            Optional[StrictStr], Field(description="Password to access URL")
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search pattern (defaults to '*')")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Discover Repositories


        :param id: Organization ID (required)
        :type id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param url: Base URL to perform repo discovery on
        :type url: str
        :param content_type: One of yum or docker
        :type content_type: str
        :param upstream_username: Username to access URL
        :type upstream_username: str
        :param upstream_password: Password to access URL
        :type upstream_password: str
        :param search: Search pattern (defaults to '*')
        :type search: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_id_repo_discover_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            url=url,
            content_type=content_type,
            upstream_username=upstream_username,
            upstream_password=upstream_password,
            search=search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_organizations_id_repo_discover_serialize(
        self,
        id,
        location_id,
        organization_id,
        url,
        content_type,
        upstream_username,
        upstream_password,
        search,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if url is not None:
            _form_params.append(("url", url))
        if content_type is not None:
            _form_params.append(("content_type", content_type))
        if upstream_username is not None:
            _form_params.append(("upstream_username", upstream_username))
        if upstream_password is not None:
            _form_params.append(("upstream_password", upstream_password))
        if search is not None:
            _form_params.append(("search", search))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/organizations/{id}/repo_discover",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_organizations_label_cancel_repo_discover(
        self,
        label: Annotated[StrictStr, Field(description="Organization label")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        url: Annotated[
            Optional[StrictStr],
            Field(description="base url to perform repo discovery on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Cancel repository discovery


        :param label: Organization label (required)
        :type label: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param url: base url to perform repo discovery on
        :type url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_label_cancel_repo_discover_serialize(
            label=label,
            location_id=location_id,
            organization_id=organization_id,
            url=url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_organizations_label_cancel_repo_discover_with_http_info(
        self,
        label: Annotated[StrictStr, Field(description="Organization label")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        url: Annotated[
            Optional[StrictStr],
            Field(description="base url to perform repo discovery on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Cancel repository discovery


        :param label: Organization label (required)
        :type label: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param url: base url to perform repo discovery on
        :type url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_label_cancel_repo_discover_serialize(
            label=label,
            location_id=location_id,
            organization_id=organization_id,
            url=url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_organizations_label_cancel_repo_discover_without_preload_content(
        self,
        label: Annotated[StrictStr, Field(description="Organization label")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        url: Annotated[
            Optional[StrictStr],
            Field(description="base url to perform repo discovery on"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel repository discovery


        :param label: Organization label (required)
        :type label: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param url: base url to perform repo discovery on
        :type url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_organizations_label_cancel_repo_discover_serialize(
            label=label,
            location_id=location_id,
            organization_id=organization_id,
            url=url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_organizations_label_cancel_repo_discover_serialize(
        self,
        label,
        location_id,
        organization_id,
        url,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if label is not None:
            _path_params["label"] = label
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if url is not None:
            _form_params.append(("url", url))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/organizations/{label}/cancel_repo_discover",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
