# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr, field_validator

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class HostsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def delete_hosts_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_hosts_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_hosts_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_hosts_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/hosts/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_hosts_id_status_type(
        self,
        id: StrictStr,
        type: Annotated[StrictStr, Field(description="status type ")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Clear sub-status of host

        Clears a host sub-status of a given type

        :param id: (required)
        :type id: str
        :param type: status type  (required)
        :type type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_id_status_type_serialize(
            id=id,
            type=type,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_hosts_id_status_type_with_http_info(
        self,
        id: StrictStr,
        type: Annotated[StrictStr, Field(description="status type ")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Clear sub-status of host

        Clears a host sub-status of a given type

        :param id: (required)
        :type id: str
        :param type: status type  (required)
        :type type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_id_status_type_serialize(
            id=id,
            type=type,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_hosts_id_status_type_without_preload_content(
        self,
        id: StrictStr,
        type: Annotated[StrictStr, Field(description="status type ")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Clear sub-status of host

        Clears a host sub-status of a given type

        :param id: (required)
        :type id: str
        :param type: status type  (required)
        :type type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_hosts_id_status_type_serialize(
            id=id,
            type=type,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_hosts_id_status_type_serialize(
        self,
        id,
        type,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if type is not None:
            _path_params["type"] = type
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/hosts/{id}/status/{type}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hostgroups_hostgroup_id_hosts(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all hosts for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_hostgroup_id_hosts_serialize(
            hostgroup_id=hostgroup_id,
            location_id=location_id,
            organization_id=organization_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hostgroups_hostgroup_id_hosts_with_http_info(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all hosts for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_hostgroup_id_hosts_serialize(
            hostgroup_id=hostgroup_id,
            location_id=location_id,
            organization_id=organization_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hostgroups_hostgroup_id_hosts_without_preload_content(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all hosts for a host group


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hostgroups_hostgroup_id_hosts_serialize(
            hostgroup_id=hostgroup_id,
            location_id=location_id,
            organization_id=organization_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hostgroups_hostgroup_id_hosts_serialize(
        self,
        hostgroup_id,
        location_id,
        organization_id,
        thin,
        include,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hostgroup_id is not None:
            _path_params["hostgroup_id"] = hostgroup_id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if thin is not None:
            _query_params.append(("thin", thin))

        if include is not None:
            _query_params.append(("include", include))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hostgroups/{hostgroup_id}/hosts",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hosts(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List all hosts


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_serialize(
            hostgroup_id=hostgroup_id,
            location_id=location_id,
            organization_id=organization_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hosts_with_http_info(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List all hosts


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_serialize(
            hostgroup_id=hostgroup_id,
            location_id=location_id,
            organization_id=organization_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hosts_without_preload_content(
        self,
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all hosts


        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_serialize(
            hostgroup_id=hostgroup_id,
            location_id=location_id,
            organization_id=organization_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hosts_serialize(
        self,
        hostgroup_id,
        location_id,
        organization_id,
        thin,
        include,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if thin is not None:
            _query_params.append(("thin", thin))

        if include is not None:
            _query_params.append(("include", include))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hosts",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hosts_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hosts_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hosts_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        show_hidden_parameters: Annotated[
            Optional[StrictBool], Field(description="Display hidden parameter values")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param show_hidden_parameters: Display hidden parameter values
        :type show_hidden_parameters: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            show_hidden_parameters=show_hidden_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hosts_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        show_hidden_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if show_hidden_parameters is not None:
            _query_params.append(("show_hidden_parameters", show_hidden_parameters))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hosts/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hosts_id_enc(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get ENC values of host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_enc_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hosts_id_enc_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get ENC values of host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_enc_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hosts_id_enc_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get ENC values of host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_enc_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hosts_id_enc_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hosts/{id}/enc",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hosts_id_inherited_parameters(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get all inherited parameters for a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_inherited_parameters_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hosts_id_inherited_parameters_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get all inherited parameters for a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_inherited_parameters_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hosts_id_inherited_parameters_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all inherited parameters for a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_inherited_parameters_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hosts_id_inherited_parameters_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hosts/{id}/inherited_parameters",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hosts_id_power(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        timeout: Annotated[
            Optional[StrictStr],
            Field(
                description="Timeout to retrieve the power status of the host in seconds. Default is 3 seconds."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Fetch the status of whether the host is powered on or not. Supported hosts are VMs and physical hosts with BMCs.


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param timeout: Timeout to retrieve the power status of the host in seconds. Default is 3 seconds.
        :type timeout: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_power_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            timeout=timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hosts_id_power_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        timeout: Annotated[
            Optional[StrictStr],
            Field(
                description="Timeout to retrieve the power status of the host in seconds. Default is 3 seconds."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Fetch the status of whether the host is powered on or not. Supported hosts are VMs and physical hosts with BMCs.


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param timeout: Timeout to retrieve the power status of the host in seconds. Default is 3 seconds.
        :type timeout: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_power_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            timeout=timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hosts_id_power_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        timeout: Annotated[
            Optional[StrictStr],
            Field(
                description="Timeout to retrieve the power status of the host in seconds. Default is 3 seconds."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch the status of whether the host is powered on or not. Supported hosts are VMs and physical hosts with BMCs.


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param timeout: Timeout to retrieve the power status of the host in seconds. Default is 3 seconds.
        :type timeout: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_power_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            timeout=timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hosts_id_power_serialize(
        self,
        id,
        location_id,
        organization_id,
        timeout,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if timeout is not None:
            _query_params.append(("timeout", timeout))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hosts/{id}/power",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hosts_id_status_type(
        self,
        id: StrictStr,
        type: Annotated[
            StrictStr,
            Field(
                description="status type, can be one of * global * configuration * build "
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get status of host

        Returns string representing a host status of a given type

        :param id: (required)
        :type id: str
        :param type: status type, can be one of * global * configuration * build  (required)
        :type type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_status_type_serialize(
            id=id,
            type=type,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hosts_id_status_type_with_http_info(
        self,
        id: StrictStr,
        type: Annotated[
            StrictStr,
            Field(
                description="status type, can be one of * global * configuration * build "
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get status of host

        Returns string representing a host status of a given type

        :param id: (required)
        :type id: str
        :param type: status type, can be one of * global * configuration * build  (required)
        :type type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_status_type_serialize(
            id=id,
            type=type,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hosts_id_status_type_without_preload_content(
        self,
        id: StrictStr,
        type: Annotated[
            StrictStr,
            Field(
                description="status type, can be one of * global * configuration * build "
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get status of host

        Returns string representing a host status of a given type

        :param id: (required)
        :type id: str
        :param type: status type, can be one of * global * configuration * build  (required)
        :type type: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_status_type_serialize(
            id=id,
            type=type,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hosts_id_status_type_serialize(
        self,
        id,
        type,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if type is not None:
            _path_params["type"] = type
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hosts/{id}/status/{type}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hosts_id_template_kind(
        self,
        id: StrictStr,
        kind: Annotated[
            StrictStr,
            Field(
                description="Template kinds, available values: Bootdisk, PXELinux, PXEGrub, PXEGrub2, iPXE, provision, finish, script, user_data, ZTP, POAP, cloud-init, host_init_config, registration, kexec"
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Preview rendered provisioning template content


        :param id: (required)
        :type id: str
        :param kind: Template kinds, available values: Bootdisk, PXELinux, PXEGrub, PXEGrub2, iPXE, provision, finish, script, user_data, ZTP, POAP, cloud-init, host_init_config, registration, kexec (required)
        :type kind: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_template_kind_serialize(
            id=id,
            kind=kind,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hosts_id_template_kind_with_http_info(
        self,
        id: StrictStr,
        kind: Annotated[
            StrictStr,
            Field(
                description="Template kinds, available values: Bootdisk, PXELinux, PXEGrub, PXEGrub2, iPXE, provision, finish, script, user_data, ZTP, POAP, cloud-init, host_init_config, registration, kexec"
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Preview rendered provisioning template content


        :param id: (required)
        :type id: str
        :param kind: Template kinds, available values: Bootdisk, PXELinux, PXEGrub, PXEGrub2, iPXE, provision, finish, script, user_data, ZTP, POAP, cloud-init, host_init_config, registration, kexec (required)
        :type kind: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_template_kind_serialize(
            id=id,
            kind=kind,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hosts_id_template_kind_without_preload_content(
        self,
        id: StrictStr,
        kind: Annotated[
            StrictStr,
            Field(
                description="Template kinds, available values: Bootdisk, PXELinux, PXEGrub, PXEGrub2, iPXE, provision, finish, script, user_data, ZTP, POAP, cloud-init, host_init_config, registration, kexec"
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Preview rendered provisioning template content


        :param id: (required)
        :type id: str
        :param kind: Template kinds, available values: Bootdisk, PXELinux, PXEGrub, PXEGrub2, iPXE, provision, finish, script, user_data, ZTP, POAP, cloud-init, host_init_config, registration, kexec (required)
        :type kind: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_template_kind_serialize(
            id=id,
            kind=kind,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hosts_id_template_kind_serialize(
        self,
        id,
        kind,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if kind is not None:
            _path_params["kind"] = kind
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hosts/{id}/template/{kind}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hosts_id_templates(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get provisioning templates for the host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_templates_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hosts_id_templates_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get provisioning templates for the host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_templates_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hosts_id_templates_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get provisioning templates for the host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_templates_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hosts_id_templates_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hosts/{id}/templates",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_hosts_id_vm_compute_attributes(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get vm attributes of host

        Return the host's compute attributes that can be used to create a clone of this VM

        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_vm_compute_attributes_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_hosts_id_vm_compute_attributes_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get vm attributes of host

        Return the host's compute attributes that can be used to create a clone of this VM

        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_vm_compute_attributes_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_hosts_id_vm_compute_attributes_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get vm attributes of host

        Return the host's compute attributes that can be used to create a clone of this VM

        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_hosts_id_vm_compute_attributes_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_hosts_id_vm_compute_attributes_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/hosts/{id}/vm_compute_attributes",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_locations_location_id_hosts(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List hosts per location


        :param location_id: ID of location (required)
        :type location_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_hosts_serialize(
            location_id=location_id,
            hostgroup_id=hostgroup_id,
            organization_id=organization_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_locations_location_id_hosts_with_http_info(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List hosts per location


        :param location_id: ID of location (required)
        :type location_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_hosts_serialize(
            location_id=location_id,
            hostgroup_id=hostgroup_id,
            organization_id=organization_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_locations_location_id_hosts_without_preload_content(
        self,
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List hosts per location


        :param location_id: ID of location (required)
        :type location_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_locations_location_id_hosts_serialize(
            location_id=location_id,
            hostgroup_id=hostgroup_id,
            organization_id=organization_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_locations_location_id_hosts_serialize(
        self,
        location_id,
        hostgroup_id,
        organization_id,
        thin,
        include,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_id is not None:
            _path_params["location_id"] = location_id
        # process the query parameters
        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if thin is not None:
            _query_params.append(("thin", thin))

        if include is not None:
            _query_params.append(("include", include))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/locations/{location_id}/hosts",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_organizations_organization_id_hosts(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List hosts per organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_hosts_serialize(
            organization_id=organization_id,
            hostgroup_id=hostgroup_id,
            location_id=location_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_organizations_organization_id_hosts_with_http_info(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List hosts per organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_hosts_serialize(
            organization_id=organization_id,
            hostgroup_id=hostgroup_id,
            location_id=location_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_organizations_organization_id_hosts_without_preload_content(
        self,
        organization_id: Annotated[StrictStr, Field(description="ID of organization")],
        hostgroup_id: Annotated[StrictStr, Field(description="ID of host group")],
        location_id: Annotated[StrictStr, Field(description="ID of location")],
        thin: Annotated[
            Optional[StrictBool], Field(description="Only list ID and name of hosts")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(description="Array of extra information types to include"),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="filter results")
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(
                description="Sort and order by a searchable field, e.g. '<field> DESC'"
            ),
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results per page to return, 'all' to return all results"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List hosts per organization


        :param organization_id: ID of organization (required)
        :type organization_id: str
        :param hostgroup_id: ID of host group (required)
        :type hostgroup_id: str
        :param location_id: ID of location (required)
        :type location_id: str
        :param thin: Only list ID and name of hosts
        :type thin: bool
        :param include: Array of extra information types to include
        :type include: str
        :param search: filter results
        :type search: str
        :param order: Sort and order by a searchable field, e.g. '<field> DESC'
        :type order: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return, 'all' to return all results
        :type per_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_organizations_organization_id_hosts_serialize(
            organization_id=organization_id,
            hostgroup_id=hostgroup_id,
            location_id=location_id,
            thin=thin,
            include=include,
            search=search,
            order=order,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_organizations_organization_id_hosts_serialize(
        self,
        organization_id,
        hostgroup_id,
        location_id,
        thin,
        include,
        search,
        order,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organization_id"] = organization_id
        # process the query parameters
        if hostgroup_id is not None:
            _query_params.append(("hostgroup_id", hostgroup_id))

        if location_id is not None:
            _query_params.append(("location_id", location_id))

        if thin is not None:
            _query_params.append(("thin", thin))

        if include is not None:
            _query_params.append(("include", include))

        if search is not None:
            _query_params.append(("search", search))

        if order is not None:
            _query_params.append(("order", order))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/organizations/{organization_id}/hosts",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_hosts(
        self,
        host_name: StrictStr,
        host_location_id: Union[StrictFloat, StrictInt],
        host_organization_id: Union[StrictFloat, StrictInt],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        host_ip: Annotated[
            Optional[StrictStr],
            Field(description="not required if using a subnet with DHCP proxy"),
        ] = None,
        host_mac: Annotated[
            Optional[StrictStr],
            Field(
                description="required for managed host that is bare metal, not required if it's a virtual machine"
            ),
        ] = None,
        host_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_realm_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        host_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        host_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_medium_id: Annotated[
            Optional[StrictStr],
            Field(
                description="required if not imaged based provisioning and host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        host_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and custom partition has not been defined"
            ),
        ] = None,
        host_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="nil means host is bare metal"),
        ] = None,
        host_root_pass: Annotated[
            Optional[StrictStr],
            Field(
                description="required if host is managed and value is not inherited from host group or default password in settings"
            ),
        ] = None,
        host_model_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_hostgroup_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_type: Annotated[
            Optional[StrictStr], Field(description="Host's owner type")
        ] = None,
        host_image_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_host_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Host's parameters (array or indexed hash)"),
        ] = None,
        host_build: Optional[StrictBool] = None,
        host_enabled: Annotated[
            Optional[StrictBool],
            Field(description="Include this host within Foreman reporting"),
        ] = None,
        host_provision_method: Annotated[
            Optional[StrictStr],
            Field(description="The method used to provision the host."),
        ] = None,
        host_managed: Annotated[
            Optional[StrictBool],
            Field(
                description="True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not"
            ),
        ] = None,
        host_progress_report_id: Annotated[
            Optional[StrictStr],
            Field(
                description="UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks"
            ),
        ] = None,
        host_comment: Annotated[
            Optional[StrictStr],
            Field(description="Additional information about this host"),
        ] = None,
        host_capabilities: Optional[StrictStr] = None,
        host_compute_profile_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_interfaces_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Host's network interfaces.")
        ] = None,
        host_content_facet_attributes_content_view_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_lifecycle_environment_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_content_source_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Repository Id associated with the kickstart repo used for provisioning"
            ),
        ] = None,
        host_subscription_facet_attributes_release_version: Annotated[
            Optional[StrictStr],
            Field(
                description="Release version for this Host to use (7Server, 7.1, etc)"
            ),
        ] = None,
        host_subscription_facet_attributes_autoheal: Annotated[
            Optional[StrictBool],
            Field(
                description="Sets whether the Host will autoheal subscriptions upon checkin"
            ),
        ] = None,
        host_subscription_facet_attributes_purpose_usage: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_role: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_addons: Annotated[
            Optional[List[StrictStr]], Field(description="Sets the system add-ons")
        ] = None,
        host_subscription_facet_attributes_service_level: Annotated[
            Optional[StrictStr],
            Field(description="Service level to be used for autoheal"),
        ] = None,
        host_subscription_facet_attributes_hypervisor_guest_uuids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of hypervisor guest uuids"),
        ] = None,
        host_subscription_facet_attributes_installed_products_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of products installed on the host"),
        ] = None,
        host_overwrite: Annotated[
            Optional[StrictBool],
            Field(description="Overwrite existing host (true by default)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a host


        :param host_name: (required)
        :type host_name: str
        :param host_location_id: (required)
        :type host_location_id: float
        :param host_organization_id: (required)
        :type host_organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param host_ip: not required if using a subnet with DHCP proxy
        :type host_ip: str
        :param host_mac: required for managed host that is bare metal, not required if it's a virtual machine
        :type host_mac: str
        :param host_architecture_id: required if host is managed and value is not inherited from host group
        :type host_architecture_id: float
        :param host_domain_id: required if host is managed and value is not inherited from host group
        :type host_domain_id: float
        :param host_realm_id:
        :type host_realm_id: float
        :param host_puppet_proxy_id: Puppet proxy ID
        :type host_puppet_proxy_id: float
        :param host_puppet_ca_proxy_id: Puppet CA proxy ID
        :type host_puppet_ca_proxy_id: float
        :param host_operatingsystem_id: required if host is managed and value is not inherited from host group
        :type host_operatingsystem_id: float
        :param host_medium_id: required if not imaged based provisioning and host is managed and value is not inherited from host group
        :type host_medium_id: str
        :param host_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type host_pxe_loader: str
        :param host_ptable_id: required if host is managed and custom partition has not been defined
        :type host_ptable_id: float
        :param host_subnet_id: required if host is managed and value is not inherited from host group
        :type host_subnet_id: float
        :param host_compute_resource_id: nil means host is bare metal
        :type host_compute_resource_id: float
        :param host_root_pass: required if host is managed and value is not inherited from host group or default password in settings
        :type host_root_pass: str
        :param host_model_id:
        :type host_model_id: float
        :param host_hostgroup_id:
        :type host_hostgroup_id: float
        :param host_owner_id:
        :type host_owner_id: float
        :param host_owner_type: Host's owner type
        :type host_owner_type: str
        :param host_image_id:
        :type host_image_id: float
        :param host_host_parameters_attributes: Host's parameters (array or indexed hash)
        :type host_host_parameters_attributes: List[str]
        :param host_build:
        :type host_build: bool
        :param host_enabled: Include this host within Foreman reporting
        :type host_enabled: bool
        :param host_provision_method: The method used to provision the host.
        :type host_provision_method: str
        :param host_managed: True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not
        :type host_managed: bool
        :param host_progress_report_id: UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks
        :type host_progress_report_id: str
        :param host_comment: Additional information about this host
        :type host_comment: str
        :param host_capabilities:
        :type host_capabilities: str
        :param host_compute_profile_id:
        :type host_compute_profile_id: float
        :param host_interfaces_attributes: Host's network interfaces.
        :type host_interfaces_attributes: List[str]
        :param host_content_facet_attributes_content_view_id:
        :type host_content_facet_attributes_content_view_id: float
        :param host_content_facet_attributes_lifecycle_environment_id:
        :type host_content_facet_attributes_lifecycle_environment_id: float
        :param host_content_facet_attributes_content_source_id:
        :type host_content_facet_attributes_content_source_id: float
        :param host_content_facet_attributes_kickstart_repository_id: Repository Id associated with the kickstart repo used for provisioning
        :type host_content_facet_attributes_kickstart_repository_id: float
        :param host_subscription_facet_attributes_release_version: Release version for this Host to use (7Server, 7.1, etc)
        :type host_subscription_facet_attributes_release_version: str
        :param host_subscription_facet_attributes_autoheal: Sets whether the Host will autoheal subscriptions upon checkin
        :type host_subscription_facet_attributes_autoheal: bool
        :param host_subscription_facet_attributes_purpose_usage: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_usage: str
        :param host_subscription_facet_attributes_purpose_role: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_role: str
        :param host_subscription_facet_attributes_purpose_addons: Sets the system add-ons
        :type host_subscription_facet_attributes_purpose_addons: List[str]
        :param host_subscription_facet_attributes_service_level: Service level to be used for autoheal
        :type host_subscription_facet_attributes_service_level: str
        :param host_subscription_facet_attributes_hypervisor_guest_uuids: List of hypervisor guest uuids
        :type host_subscription_facet_attributes_hypervisor_guest_uuids: List[str]
        :param host_subscription_facet_attributes_installed_products_attributes: List of products installed on the host
        :type host_subscription_facet_attributes_installed_products_attributes: List[str]
        :param host_overwrite: Overwrite existing host (true by default)
        :type host_overwrite: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_serialize(
            host_name=host_name,
            host_location_id=host_location_id,
            host_organization_id=host_organization_id,
            location_id=location_id,
            organization_id=organization_id,
            host_ip=host_ip,
            host_mac=host_mac,
            host_architecture_id=host_architecture_id,
            host_domain_id=host_domain_id,
            host_realm_id=host_realm_id,
            host_puppet_proxy_id=host_puppet_proxy_id,
            host_puppet_ca_proxy_id=host_puppet_ca_proxy_id,
            host_operatingsystem_id=host_operatingsystem_id,
            host_medium_id=host_medium_id,
            host_pxe_loader=host_pxe_loader,
            host_ptable_id=host_ptable_id,
            host_subnet_id=host_subnet_id,
            host_compute_resource_id=host_compute_resource_id,
            host_root_pass=host_root_pass,
            host_model_id=host_model_id,
            host_hostgroup_id=host_hostgroup_id,
            host_owner_id=host_owner_id,
            host_owner_type=host_owner_type,
            host_image_id=host_image_id,
            host_host_parameters_attributes=host_host_parameters_attributes,
            host_build=host_build,
            host_enabled=host_enabled,
            host_provision_method=host_provision_method,
            host_managed=host_managed,
            host_progress_report_id=host_progress_report_id,
            host_comment=host_comment,
            host_capabilities=host_capabilities,
            host_compute_profile_id=host_compute_profile_id,
            host_interfaces_attributes=host_interfaces_attributes,
            host_content_facet_attributes_content_view_id=host_content_facet_attributes_content_view_id,
            host_content_facet_attributes_lifecycle_environment_id=host_content_facet_attributes_lifecycle_environment_id,
            host_content_facet_attributes_content_source_id=host_content_facet_attributes_content_source_id,
            host_content_facet_attributes_kickstart_repository_id=host_content_facet_attributes_kickstart_repository_id,
            host_subscription_facet_attributes_release_version=host_subscription_facet_attributes_release_version,
            host_subscription_facet_attributes_autoheal=host_subscription_facet_attributes_autoheal,
            host_subscription_facet_attributes_purpose_usage=host_subscription_facet_attributes_purpose_usage,
            host_subscription_facet_attributes_purpose_role=host_subscription_facet_attributes_purpose_role,
            host_subscription_facet_attributes_purpose_addons=host_subscription_facet_attributes_purpose_addons,
            host_subscription_facet_attributes_service_level=host_subscription_facet_attributes_service_level,
            host_subscription_facet_attributes_hypervisor_guest_uuids=host_subscription_facet_attributes_hypervisor_guest_uuids,
            host_subscription_facet_attributes_installed_products_attributes=host_subscription_facet_attributes_installed_products_attributes,
            host_overwrite=host_overwrite,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_hosts_with_http_info(
        self,
        host_name: StrictStr,
        host_location_id: Union[StrictFloat, StrictInt],
        host_organization_id: Union[StrictFloat, StrictInt],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        host_ip: Annotated[
            Optional[StrictStr],
            Field(description="not required if using a subnet with DHCP proxy"),
        ] = None,
        host_mac: Annotated[
            Optional[StrictStr],
            Field(
                description="required for managed host that is bare metal, not required if it's a virtual machine"
            ),
        ] = None,
        host_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_realm_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        host_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        host_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_medium_id: Annotated[
            Optional[StrictStr],
            Field(
                description="required if not imaged based provisioning and host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        host_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and custom partition has not been defined"
            ),
        ] = None,
        host_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="nil means host is bare metal"),
        ] = None,
        host_root_pass: Annotated[
            Optional[StrictStr],
            Field(
                description="required if host is managed and value is not inherited from host group or default password in settings"
            ),
        ] = None,
        host_model_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_hostgroup_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_type: Annotated[
            Optional[StrictStr], Field(description="Host's owner type")
        ] = None,
        host_image_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_host_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Host's parameters (array or indexed hash)"),
        ] = None,
        host_build: Optional[StrictBool] = None,
        host_enabled: Annotated[
            Optional[StrictBool],
            Field(description="Include this host within Foreman reporting"),
        ] = None,
        host_provision_method: Annotated[
            Optional[StrictStr],
            Field(description="The method used to provision the host."),
        ] = None,
        host_managed: Annotated[
            Optional[StrictBool],
            Field(
                description="True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not"
            ),
        ] = None,
        host_progress_report_id: Annotated[
            Optional[StrictStr],
            Field(
                description="UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks"
            ),
        ] = None,
        host_comment: Annotated[
            Optional[StrictStr],
            Field(description="Additional information about this host"),
        ] = None,
        host_capabilities: Optional[StrictStr] = None,
        host_compute_profile_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_interfaces_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Host's network interfaces.")
        ] = None,
        host_content_facet_attributes_content_view_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_lifecycle_environment_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_content_source_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Repository Id associated with the kickstart repo used for provisioning"
            ),
        ] = None,
        host_subscription_facet_attributes_release_version: Annotated[
            Optional[StrictStr],
            Field(
                description="Release version for this Host to use (7Server, 7.1, etc)"
            ),
        ] = None,
        host_subscription_facet_attributes_autoheal: Annotated[
            Optional[StrictBool],
            Field(
                description="Sets whether the Host will autoheal subscriptions upon checkin"
            ),
        ] = None,
        host_subscription_facet_attributes_purpose_usage: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_role: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_addons: Annotated[
            Optional[List[StrictStr]], Field(description="Sets the system add-ons")
        ] = None,
        host_subscription_facet_attributes_service_level: Annotated[
            Optional[StrictStr],
            Field(description="Service level to be used for autoheal"),
        ] = None,
        host_subscription_facet_attributes_hypervisor_guest_uuids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of hypervisor guest uuids"),
        ] = None,
        host_subscription_facet_attributes_installed_products_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of products installed on the host"),
        ] = None,
        host_overwrite: Annotated[
            Optional[StrictBool],
            Field(description="Overwrite existing host (true by default)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a host


        :param host_name: (required)
        :type host_name: str
        :param host_location_id: (required)
        :type host_location_id: float
        :param host_organization_id: (required)
        :type host_organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param host_ip: not required if using a subnet with DHCP proxy
        :type host_ip: str
        :param host_mac: required for managed host that is bare metal, not required if it's a virtual machine
        :type host_mac: str
        :param host_architecture_id: required if host is managed and value is not inherited from host group
        :type host_architecture_id: float
        :param host_domain_id: required if host is managed and value is not inherited from host group
        :type host_domain_id: float
        :param host_realm_id:
        :type host_realm_id: float
        :param host_puppet_proxy_id: Puppet proxy ID
        :type host_puppet_proxy_id: float
        :param host_puppet_ca_proxy_id: Puppet CA proxy ID
        :type host_puppet_ca_proxy_id: float
        :param host_operatingsystem_id: required if host is managed and value is not inherited from host group
        :type host_operatingsystem_id: float
        :param host_medium_id: required if not imaged based provisioning and host is managed and value is not inherited from host group
        :type host_medium_id: str
        :param host_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type host_pxe_loader: str
        :param host_ptable_id: required if host is managed and custom partition has not been defined
        :type host_ptable_id: float
        :param host_subnet_id: required if host is managed and value is not inherited from host group
        :type host_subnet_id: float
        :param host_compute_resource_id: nil means host is bare metal
        :type host_compute_resource_id: float
        :param host_root_pass: required if host is managed and value is not inherited from host group or default password in settings
        :type host_root_pass: str
        :param host_model_id:
        :type host_model_id: float
        :param host_hostgroup_id:
        :type host_hostgroup_id: float
        :param host_owner_id:
        :type host_owner_id: float
        :param host_owner_type: Host's owner type
        :type host_owner_type: str
        :param host_image_id:
        :type host_image_id: float
        :param host_host_parameters_attributes: Host's parameters (array or indexed hash)
        :type host_host_parameters_attributes: List[str]
        :param host_build:
        :type host_build: bool
        :param host_enabled: Include this host within Foreman reporting
        :type host_enabled: bool
        :param host_provision_method: The method used to provision the host.
        :type host_provision_method: str
        :param host_managed: True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not
        :type host_managed: bool
        :param host_progress_report_id: UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks
        :type host_progress_report_id: str
        :param host_comment: Additional information about this host
        :type host_comment: str
        :param host_capabilities:
        :type host_capabilities: str
        :param host_compute_profile_id:
        :type host_compute_profile_id: float
        :param host_interfaces_attributes: Host's network interfaces.
        :type host_interfaces_attributes: List[str]
        :param host_content_facet_attributes_content_view_id:
        :type host_content_facet_attributes_content_view_id: float
        :param host_content_facet_attributes_lifecycle_environment_id:
        :type host_content_facet_attributes_lifecycle_environment_id: float
        :param host_content_facet_attributes_content_source_id:
        :type host_content_facet_attributes_content_source_id: float
        :param host_content_facet_attributes_kickstart_repository_id: Repository Id associated with the kickstart repo used for provisioning
        :type host_content_facet_attributes_kickstart_repository_id: float
        :param host_subscription_facet_attributes_release_version: Release version for this Host to use (7Server, 7.1, etc)
        :type host_subscription_facet_attributes_release_version: str
        :param host_subscription_facet_attributes_autoheal: Sets whether the Host will autoheal subscriptions upon checkin
        :type host_subscription_facet_attributes_autoheal: bool
        :param host_subscription_facet_attributes_purpose_usage: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_usage: str
        :param host_subscription_facet_attributes_purpose_role: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_role: str
        :param host_subscription_facet_attributes_purpose_addons: Sets the system add-ons
        :type host_subscription_facet_attributes_purpose_addons: List[str]
        :param host_subscription_facet_attributes_service_level: Service level to be used for autoheal
        :type host_subscription_facet_attributes_service_level: str
        :param host_subscription_facet_attributes_hypervisor_guest_uuids: List of hypervisor guest uuids
        :type host_subscription_facet_attributes_hypervisor_guest_uuids: List[str]
        :param host_subscription_facet_attributes_installed_products_attributes: List of products installed on the host
        :type host_subscription_facet_attributes_installed_products_attributes: List[str]
        :param host_overwrite: Overwrite existing host (true by default)
        :type host_overwrite: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_serialize(
            host_name=host_name,
            host_location_id=host_location_id,
            host_organization_id=host_organization_id,
            location_id=location_id,
            organization_id=organization_id,
            host_ip=host_ip,
            host_mac=host_mac,
            host_architecture_id=host_architecture_id,
            host_domain_id=host_domain_id,
            host_realm_id=host_realm_id,
            host_puppet_proxy_id=host_puppet_proxy_id,
            host_puppet_ca_proxy_id=host_puppet_ca_proxy_id,
            host_operatingsystem_id=host_operatingsystem_id,
            host_medium_id=host_medium_id,
            host_pxe_loader=host_pxe_loader,
            host_ptable_id=host_ptable_id,
            host_subnet_id=host_subnet_id,
            host_compute_resource_id=host_compute_resource_id,
            host_root_pass=host_root_pass,
            host_model_id=host_model_id,
            host_hostgroup_id=host_hostgroup_id,
            host_owner_id=host_owner_id,
            host_owner_type=host_owner_type,
            host_image_id=host_image_id,
            host_host_parameters_attributes=host_host_parameters_attributes,
            host_build=host_build,
            host_enabled=host_enabled,
            host_provision_method=host_provision_method,
            host_managed=host_managed,
            host_progress_report_id=host_progress_report_id,
            host_comment=host_comment,
            host_capabilities=host_capabilities,
            host_compute_profile_id=host_compute_profile_id,
            host_interfaces_attributes=host_interfaces_attributes,
            host_content_facet_attributes_content_view_id=host_content_facet_attributes_content_view_id,
            host_content_facet_attributes_lifecycle_environment_id=host_content_facet_attributes_lifecycle_environment_id,
            host_content_facet_attributes_content_source_id=host_content_facet_attributes_content_source_id,
            host_content_facet_attributes_kickstart_repository_id=host_content_facet_attributes_kickstart_repository_id,
            host_subscription_facet_attributes_release_version=host_subscription_facet_attributes_release_version,
            host_subscription_facet_attributes_autoheal=host_subscription_facet_attributes_autoheal,
            host_subscription_facet_attributes_purpose_usage=host_subscription_facet_attributes_purpose_usage,
            host_subscription_facet_attributes_purpose_role=host_subscription_facet_attributes_purpose_role,
            host_subscription_facet_attributes_purpose_addons=host_subscription_facet_attributes_purpose_addons,
            host_subscription_facet_attributes_service_level=host_subscription_facet_attributes_service_level,
            host_subscription_facet_attributes_hypervisor_guest_uuids=host_subscription_facet_attributes_hypervisor_guest_uuids,
            host_subscription_facet_attributes_installed_products_attributes=host_subscription_facet_attributes_installed_products_attributes,
            host_overwrite=host_overwrite,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_hosts_without_preload_content(
        self,
        host_name: StrictStr,
        host_location_id: Union[StrictFloat, StrictInt],
        host_organization_id: Union[StrictFloat, StrictInt],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        host_ip: Annotated[
            Optional[StrictStr],
            Field(description="not required if using a subnet with DHCP proxy"),
        ] = None,
        host_mac: Annotated[
            Optional[StrictStr],
            Field(
                description="required for managed host that is bare metal, not required if it's a virtual machine"
            ),
        ] = None,
        host_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_realm_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        host_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        host_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_medium_id: Annotated[
            Optional[StrictStr],
            Field(
                description="required if not imaged based provisioning and host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        host_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and custom partition has not been defined"
            ),
        ] = None,
        host_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="nil means host is bare metal"),
        ] = None,
        host_root_pass: Annotated[
            Optional[StrictStr],
            Field(
                description="required if host is managed and value is not inherited from host group or default password in settings"
            ),
        ] = None,
        host_model_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_hostgroup_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_type: Annotated[
            Optional[StrictStr], Field(description="Host's owner type")
        ] = None,
        host_image_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_host_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Host's parameters (array or indexed hash)"),
        ] = None,
        host_build: Optional[StrictBool] = None,
        host_enabled: Annotated[
            Optional[StrictBool],
            Field(description="Include this host within Foreman reporting"),
        ] = None,
        host_provision_method: Annotated[
            Optional[StrictStr],
            Field(description="The method used to provision the host."),
        ] = None,
        host_managed: Annotated[
            Optional[StrictBool],
            Field(
                description="True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not"
            ),
        ] = None,
        host_progress_report_id: Annotated[
            Optional[StrictStr],
            Field(
                description="UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks"
            ),
        ] = None,
        host_comment: Annotated[
            Optional[StrictStr],
            Field(description="Additional information about this host"),
        ] = None,
        host_capabilities: Optional[StrictStr] = None,
        host_compute_profile_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_interfaces_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Host's network interfaces.")
        ] = None,
        host_content_facet_attributes_content_view_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_lifecycle_environment_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_content_source_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Repository Id associated with the kickstart repo used for provisioning"
            ),
        ] = None,
        host_subscription_facet_attributes_release_version: Annotated[
            Optional[StrictStr],
            Field(
                description="Release version for this Host to use (7Server, 7.1, etc)"
            ),
        ] = None,
        host_subscription_facet_attributes_autoheal: Annotated[
            Optional[StrictBool],
            Field(
                description="Sets whether the Host will autoheal subscriptions upon checkin"
            ),
        ] = None,
        host_subscription_facet_attributes_purpose_usage: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_role: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_addons: Annotated[
            Optional[List[StrictStr]], Field(description="Sets the system add-ons")
        ] = None,
        host_subscription_facet_attributes_service_level: Annotated[
            Optional[StrictStr],
            Field(description="Service level to be used for autoheal"),
        ] = None,
        host_subscription_facet_attributes_hypervisor_guest_uuids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of hypervisor guest uuids"),
        ] = None,
        host_subscription_facet_attributes_installed_products_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of products installed on the host"),
        ] = None,
        host_overwrite: Annotated[
            Optional[StrictBool],
            Field(description="Overwrite existing host (true by default)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a host


        :param host_name: (required)
        :type host_name: str
        :param host_location_id: (required)
        :type host_location_id: float
        :param host_organization_id: (required)
        :type host_organization_id: float
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param host_ip: not required if using a subnet with DHCP proxy
        :type host_ip: str
        :param host_mac: required for managed host that is bare metal, not required if it's a virtual machine
        :type host_mac: str
        :param host_architecture_id: required if host is managed and value is not inherited from host group
        :type host_architecture_id: float
        :param host_domain_id: required if host is managed and value is not inherited from host group
        :type host_domain_id: float
        :param host_realm_id:
        :type host_realm_id: float
        :param host_puppet_proxy_id: Puppet proxy ID
        :type host_puppet_proxy_id: float
        :param host_puppet_ca_proxy_id: Puppet CA proxy ID
        :type host_puppet_ca_proxy_id: float
        :param host_operatingsystem_id: required if host is managed and value is not inherited from host group
        :type host_operatingsystem_id: float
        :param host_medium_id: required if not imaged based provisioning and host is managed and value is not inherited from host group
        :type host_medium_id: str
        :param host_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type host_pxe_loader: str
        :param host_ptable_id: required if host is managed and custom partition has not been defined
        :type host_ptable_id: float
        :param host_subnet_id: required if host is managed and value is not inherited from host group
        :type host_subnet_id: float
        :param host_compute_resource_id: nil means host is bare metal
        :type host_compute_resource_id: float
        :param host_root_pass: required if host is managed and value is not inherited from host group or default password in settings
        :type host_root_pass: str
        :param host_model_id:
        :type host_model_id: float
        :param host_hostgroup_id:
        :type host_hostgroup_id: float
        :param host_owner_id:
        :type host_owner_id: float
        :param host_owner_type: Host's owner type
        :type host_owner_type: str
        :param host_image_id:
        :type host_image_id: float
        :param host_host_parameters_attributes: Host's parameters (array or indexed hash)
        :type host_host_parameters_attributes: List[str]
        :param host_build:
        :type host_build: bool
        :param host_enabled: Include this host within Foreman reporting
        :type host_enabled: bool
        :param host_provision_method: The method used to provision the host.
        :type host_provision_method: str
        :param host_managed: True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not
        :type host_managed: bool
        :param host_progress_report_id: UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks
        :type host_progress_report_id: str
        :param host_comment: Additional information about this host
        :type host_comment: str
        :param host_capabilities:
        :type host_capabilities: str
        :param host_compute_profile_id:
        :type host_compute_profile_id: float
        :param host_interfaces_attributes: Host's network interfaces.
        :type host_interfaces_attributes: List[str]
        :param host_content_facet_attributes_content_view_id:
        :type host_content_facet_attributes_content_view_id: float
        :param host_content_facet_attributes_lifecycle_environment_id:
        :type host_content_facet_attributes_lifecycle_environment_id: float
        :param host_content_facet_attributes_content_source_id:
        :type host_content_facet_attributes_content_source_id: float
        :param host_content_facet_attributes_kickstart_repository_id: Repository Id associated with the kickstart repo used for provisioning
        :type host_content_facet_attributes_kickstart_repository_id: float
        :param host_subscription_facet_attributes_release_version: Release version for this Host to use (7Server, 7.1, etc)
        :type host_subscription_facet_attributes_release_version: str
        :param host_subscription_facet_attributes_autoheal: Sets whether the Host will autoheal subscriptions upon checkin
        :type host_subscription_facet_attributes_autoheal: bool
        :param host_subscription_facet_attributes_purpose_usage: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_usage: str
        :param host_subscription_facet_attributes_purpose_role: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_role: str
        :param host_subscription_facet_attributes_purpose_addons: Sets the system add-ons
        :type host_subscription_facet_attributes_purpose_addons: List[str]
        :param host_subscription_facet_attributes_service_level: Service level to be used for autoheal
        :type host_subscription_facet_attributes_service_level: str
        :param host_subscription_facet_attributes_hypervisor_guest_uuids: List of hypervisor guest uuids
        :type host_subscription_facet_attributes_hypervisor_guest_uuids: List[str]
        :param host_subscription_facet_attributes_installed_products_attributes: List of products installed on the host
        :type host_subscription_facet_attributes_installed_products_attributes: List[str]
        :param host_overwrite: Overwrite existing host (true by default)
        :type host_overwrite: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_serialize(
            host_name=host_name,
            host_location_id=host_location_id,
            host_organization_id=host_organization_id,
            location_id=location_id,
            organization_id=organization_id,
            host_ip=host_ip,
            host_mac=host_mac,
            host_architecture_id=host_architecture_id,
            host_domain_id=host_domain_id,
            host_realm_id=host_realm_id,
            host_puppet_proxy_id=host_puppet_proxy_id,
            host_puppet_ca_proxy_id=host_puppet_ca_proxy_id,
            host_operatingsystem_id=host_operatingsystem_id,
            host_medium_id=host_medium_id,
            host_pxe_loader=host_pxe_loader,
            host_ptable_id=host_ptable_id,
            host_subnet_id=host_subnet_id,
            host_compute_resource_id=host_compute_resource_id,
            host_root_pass=host_root_pass,
            host_model_id=host_model_id,
            host_hostgroup_id=host_hostgroup_id,
            host_owner_id=host_owner_id,
            host_owner_type=host_owner_type,
            host_image_id=host_image_id,
            host_host_parameters_attributes=host_host_parameters_attributes,
            host_build=host_build,
            host_enabled=host_enabled,
            host_provision_method=host_provision_method,
            host_managed=host_managed,
            host_progress_report_id=host_progress_report_id,
            host_comment=host_comment,
            host_capabilities=host_capabilities,
            host_compute_profile_id=host_compute_profile_id,
            host_interfaces_attributes=host_interfaces_attributes,
            host_content_facet_attributes_content_view_id=host_content_facet_attributes_content_view_id,
            host_content_facet_attributes_lifecycle_environment_id=host_content_facet_attributes_lifecycle_environment_id,
            host_content_facet_attributes_content_source_id=host_content_facet_attributes_content_source_id,
            host_content_facet_attributes_kickstart_repository_id=host_content_facet_attributes_kickstart_repository_id,
            host_subscription_facet_attributes_release_version=host_subscription_facet_attributes_release_version,
            host_subscription_facet_attributes_autoheal=host_subscription_facet_attributes_autoheal,
            host_subscription_facet_attributes_purpose_usage=host_subscription_facet_attributes_purpose_usage,
            host_subscription_facet_attributes_purpose_role=host_subscription_facet_attributes_purpose_role,
            host_subscription_facet_attributes_purpose_addons=host_subscription_facet_attributes_purpose_addons,
            host_subscription_facet_attributes_service_level=host_subscription_facet_attributes_service_level,
            host_subscription_facet_attributes_hypervisor_guest_uuids=host_subscription_facet_attributes_hypervisor_guest_uuids,
            host_subscription_facet_attributes_installed_products_attributes=host_subscription_facet_attributes_installed_products_attributes,
            host_overwrite=host_overwrite,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_hosts_serialize(
        self,
        host_name,
        host_location_id,
        host_organization_id,
        location_id,
        organization_id,
        host_ip,
        host_mac,
        host_architecture_id,
        host_domain_id,
        host_realm_id,
        host_puppet_proxy_id,
        host_puppet_ca_proxy_id,
        host_operatingsystem_id,
        host_medium_id,
        host_pxe_loader,
        host_ptable_id,
        host_subnet_id,
        host_compute_resource_id,
        host_root_pass,
        host_model_id,
        host_hostgroup_id,
        host_owner_id,
        host_owner_type,
        host_image_id,
        host_host_parameters_attributes,
        host_build,
        host_enabled,
        host_provision_method,
        host_managed,
        host_progress_report_id,
        host_comment,
        host_capabilities,
        host_compute_profile_id,
        host_interfaces_attributes,
        host_content_facet_attributes_content_view_id,
        host_content_facet_attributes_lifecycle_environment_id,
        host_content_facet_attributes_content_source_id,
        host_content_facet_attributes_kickstart_repository_id,
        host_subscription_facet_attributes_release_version,
        host_subscription_facet_attributes_autoheal,
        host_subscription_facet_attributes_purpose_usage,
        host_subscription_facet_attributes_purpose_role,
        host_subscription_facet_attributes_purpose_addons,
        host_subscription_facet_attributes_service_level,
        host_subscription_facet_attributes_hypervisor_guest_uuids,
        host_subscription_facet_attributes_installed_products_attributes,
        host_overwrite,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "host[host_parameters_attributes]": "csv",
            "host[interfaces_attributes]": "csv",
            "host[subscription_facet_attributes][purpose_addons]": "csv",
            "host[subscription_facet_attributes][hypervisor_guest_uuids]": "csv",
            "host[subscription_facet_attributes][installed_products_attributes]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_name is not None:
            _form_params.append(("host[name]", host_name))
        if host_location_id is not None:
            _form_params.append(("host[location_id]", host_location_id))
        if host_organization_id is not None:
            _form_params.append(("host[organization_id]", host_organization_id))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if host_ip is not None:
            _form_params.append(("host[ip]", host_ip))
        if host_mac is not None:
            _form_params.append(("host[mac]", host_mac))
        if host_architecture_id is not None:
            _form_params.append(("host[architecture_id]", host_architecture_id))
        if host_domain_id is not None:
            _form_params.append(("host[domain_id]", host_domain_id))
        if host_realm_id is not None:
            _form_params.append(("host[realm_id]", host_realm_id))
        if host_puppet_proxy_id is not None:
            _form_params.append(("host[puppet_proxy_id]", host_puppet_proxy_id))
        if host_puppet_ca_proxy_id is not None:
            _form_params.append(("host[puppet_ca_proxy_id]", host_puppet_ca_proxy_id))
        if host_operatingsystem_id is not None:
            _form_params.append(("host[operatingsystem_id]", host_operatingsystem_id))
        if host_medium_id is not None:
            _form_params.append(("host[medium_id]", host_medium_id))
        if host_pxe_loader is not None:
            _form_params.append(("host[pxe_loader]", host_pxe_loader))
        if host_ptable_id is not None:
            _form_params.append(("host[ptable_id]", host_ptable_id))
        if host_subnet_id is not None:
            _form_params.append(("host[subnet_id]", host_subnet_id))
        if host_compute_resource_id is not None:
            _form_params.append(("host[compute_resource_id]", host_compute_resource_id))
        if host_root_pass is not None:
            _form_params.append(("host[root_pass]", host_root_pass))
        if host_model_id is not None:
            _form_params.append(("host[model_id]", host_model_id))
        if host_hostgroup_id is not None:
            _form_params.append(("host[hostgroup_id]", host_hostgroup_id))
        if host_owner_id is not None:
            _form_params.append(("host[owner_id]", host_owner_id))
        if host_owner_type is not None:
            _form_params.append(("host[owner_type]", host_owner_type))
        if host_image_id is not None:
            _form_params.append(("host[image_id]", host_image_id))
        if host_host_parameters_attributes is not None:
            _form_params.append(
                ("host[host_parameters_attributes]", host_host_parameters_attributes)
            )
        if host_build is not None:
            _form_params.append(("host[build]", host_build))
        if host_enabled is not None:
            _form_params.append(("host[enabled]", host_enabled))
        if host_provision_method is not None:
            _form_params.append(("host[provision_method]", host_provision_method))
        if host_managed is not None:
            _form_params.append(("host[managed]", host_managed))
        if host_progress_report_id is not None:
            _form_params.append(("host[progress_report_id]", host_progress_report_id))
        if host_comment is not None:
            _form_params.append(("host[comment]", host_comment))
        if host_capabilities is not None:
            _form_params.append(("host[capabilities]", host_capabilities))
        if host_compute_profile_id is not None:
            _form_params.append(("host[compute_profile_id]", host_compute_profile_id))
        if host_interfaces_attributes is not None:
            _form_params.append(
                ("host[interfaces_attributes]", host_interfaces_attributes)
            )
        if host_content_facet_attributes_content_view_id is not None:
            _form_params.append(
                (
                    "host[content_facet_attributes][content_view_id]",
                    host_content_facet_attributes_content_view_id,
                )
            )
        if host_content_facet_attributes_lifecycle_environment_id is not None:
            _form_params.append(
                (
                    "host[content_facet_attributes][lifecycle_environment_id]",
                    host_content_facet_attributes_lifecycle_environment_id,
                )
            )
        if host_content_facet_attributes_content_source_id is not None:
            _form_params.append(
                (
                    "host[content_facet_attributes][content_source_id]",
                    host_content_facet_attributes_content_source_id,
                )
            )
        if host_content_facet_attributes_kickstart_repository_id is not None:
            _form_params.append(
                (
                    "host[content_facet_attributes][kickstart_repository_id]",
                    host_content_facet_attributes_kickstart_repository_id,
                )
            )
        if host_subscription_facet_attributes_release_version is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][release_version]",
                    host_subscription_facet_attributes_release_version,
                )
            )
        if host_subscription_facet_attributes_autoheal is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][autoheal]",
                    host_subscription_facet_attributes_autoheal,
                )
            )
        if host_subscription_facet_attributes_purpose_usage is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_usage]",
                    host_subscription_facet_attributes_purpose_usage,
                )
            )
        if host_subscription_facet_attributes_purpose_role is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_role]",
                    host_subscription_facet_attributes_purpose_role,
                )
            )
        if host_subscription_facet_attributes_purpose_addons is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_addons]",
                    host_subscription_facet_attributes_purpose_addons,
                )
            )
        if host_subscription_facet_attributes_service_level is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][service_level]",
                    host_subscription_facet_attributes_service_level,
                )
            )
        if host_subscription_facet_attributes_hypervisor_guest_uuids is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][hypervisor_guest_uuids]",
                    host_subscription_facet_attributes_hypervisor_guest_uuids,
                )
            )
        if host_subscription_facet_attributes_installed_products_attributes is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][installed_products_attributes]",
                    host_subscription_facet_attributes_installed_products_attributes,
                )
            )
        if host_overwrite is not None:
            _form_params.append(("host[overwrite]", host_overwrite))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/hosts",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_hosts_facts(
        self,
        name: Annotated[StrictStr, Field(description="hostname of the host")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        certname: Annotated[
            Optional[StrictStr], Field(description="optional: certname of the host")
        ] = None,
        type: Annotated[
            Optional[StrictStr],
            Field(description="optional: the STI type of host to create"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Upload facts for a host, creating the host if required


        :param name: hostname of the host (required)
        :type name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param certname: optional: certname of the host
        :type certname: str
        :param type: optional: the STI type of host to create
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_facts_serialize(
            name=name,
            location_id=location_id,
            organization_id=organization_id,
            certname=certname,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_hosts_facts_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="hostname of the host")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        certname: Annotated[
            Optional[StrictStr], Field(description="optional: certname of the host")
        ] = None,
        type: Annotated[
            Optional[StrictStr],
            Field(description="optional: the STI type of host to create"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Upload facts for a host, creating the host if required


        :param name: hostname of the host (required)
        :type name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param certname: optional: certname of the host
        :type certname: str
        :param type: optional: the STI type of host to create
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_facts_serialize(
            name=name,
            location_id=location_id,
            organization_id=organization_id,
            certname=certname,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_hosts_facts_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="hostname of the host")],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        certname: Annotated[
            Optional[StrictStr], Field(description="optional: certname of the host")
        ] = None,
        type: Annotated[
            Optional[StrictStr],
            Field(description="optional: the STI type of host to create"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload facts for a host, creating the host if required


        :param name: hostname of the host (required)
        :type name: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param certname: optional: certname of the host
        :type certname: str
        :param type: optional: the STI type of host to create
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_hosts_facts_serialize(
            name=name,
            location_id=location_id,
            organization_id=organization_id,
            certname=certname,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_hosts_facts_serialize(
        self,
        name,
        location_id,
        organization_id,
        certname,
        type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(("name", name))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if certname is not None:
            _form_params.append(("certname", certname))
        if type is not None:
            _form_params.append(("type", type))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/hosts/facts",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_host_id_host_collections(
        self,
        host_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the host to alter"),
        ],
        host_collection_ids: Annotated[
            List[StrictStr], Field(description="List of host collection ids to update")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Alter a host's host collections


        :param host_id: The id of the host to alter (required)
        :type host_id: float
        :param host_collection_ids: List of host collection ids to update (required)
        :type host_collection_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_host_id_host_collections_serialize(
            host_id=host_id,
            host_collection_ids=host_collection_ids,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_host_id_host_collections_with_http_info(
        self,
        host_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the host to alter"),
        ],
        host_collection_ids: Annotated[
            List[StrictStr], Field(description="List of host collection ids to update")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Alter a host's host collections


        :param host_id: The id of the host to alter (required)
        :type host_id: float
        :param host_collection_ids: List of host collection ids to update (required)
        :type host_collection_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_host_id_host_collections_serialize(
            host_id=host_id,
            host_collection_ids=host_collection_ids,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_host_id_host_collections_without_preload_content(
        self,
        host_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="The id of the host to alter"),
        ],
        host_collection_ids: Annotated[
            List[StrictStr], Field(description="List of host collection ids to update")
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Alter a host's host collections


        :param host_id: The id of the host to alter (required)
        :type host_id: float
        :param host_collection_ids: List of host collection ids to update (required)
        :type host_collection_ids: List[str]
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_host_id_host_collections_serialize(
            host_id=host_id,
            host_collection_ids=host_collection_ids,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_host_id_host_collections_serialize(
        self,
        host_id,
        host_collection_ids,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "host_collection_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if host_id is not None:
            _path_params["host_id"] = host_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if host_collection_ids is not None:
            _form_params.append(("host_collection_ids", host_collection_ids))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/{host_id}/host_collections",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_id(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        host_name: Optional[StrictStr] = None,
        host_location_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_organization_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_ip: Annotated[
            Optional[StrictStr],
            Field(description="not required if using a subnet with DHCP proxy"),
        ] = None,
        host_mac: Annotated[
            Optional[StrictStr],
            Field(
                description="required for managed host that is bare metal, not required if it's a virtual machine"
            ),
        ] = None,
        host_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_realm_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        host_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        host_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_medium_id: Annotated[
            Optional[StrictStr],
            Field(
                description="required if not imaged based provisioning and host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        host_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and custom partition has not been defined"
            ),
        ] = None,
        host_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="nil means host is bare metal"),
        ] = None,
        host_root_pass: Annotated[
            Optional[StrictStr],
            Field(
                description="required if host is managed and value is not inherited from host group or default password in settings"
            ),
        ] = None,
        host_model_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_hostgroup_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_type: Annotated[
            Optional[StrictStr], Field(description="Host's owner type")
        ] = None,
        host_image_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_host_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Host's parameters (array or indexed hash)"),
        ] = None,
        host_build: Optional[StrictBool] = None,
        host_enabled: Annotated[
            Optional[StrictBool],
            Field(description="Include this host within Foreman reporting"),
        ] = None,
        host_provision_method: Annotated[
            Optional[StrictStr],
            Field(description="The method used to provision the host."),
        ] = None,
        host_managed: Annotated[
            Optional[StrictBool],
            Field(
                description="True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not"
            ),
        ] = None,
        host_progress_report_id: Annotated[
            Optional[StrictStr],
            Field(
                description="UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks"
            ),
        ] = None,
        host_comment: Annotated[
            Optional[StrictStr],
            Field(description="Additional information about this host"),
        ] = None,
        host_capabilities: Optional[StrictStr] = None,
        host_compute_profile_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_interfaces_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Host's network interfaces.")
        ] = None,
        host_content_facet_attributes_content_view_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_lifecycle_environment_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_content_source_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Repository Id associated with the kickstart repo used for provisioning"
            ),
        ] = None,
        host_subscription_facet_attributes_release_version: Annotated[
            Optional[StrictStr],
            Field(
                description="Release version for this Host to use (7Server, 7.1, etc)"
            ),
        ] = None,
        host_subscription_facet_attributes_autoheal: Annotated[
            Optional[StrictBool],
            Field(
                description="Sets whether the Host will autoheal subscriptions upon checkin"
            ),
        ] = None,
        host_subscription_facet_attributes_purpose_usage: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_role: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_addons: Annotated[
            Optional[List[StrictStr]], Field(description="Sets the system add-ons")
        ] = None,
        host_subscription_facet_attributes_service_level: Annotated[
            Optional[StrictStr],
            Field(description="Service level to be used for autoheal"),
        ] = None,
        host_subscription_facet_attributes_hypervisor_guest_uuids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of hypervisor guest uuids"),
        ] = None,
        host_subscription_facet_attributes_installed_products_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of products installed on the host"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param host_name:
        :type host_name: str
        :param host_location_id:
        :type host_location_id: float
        :param host_organization_id:
        :type host_organization_id: float
        :param host_ip: not required if using a subnet with DHCP proxy
        :type host_ip: str
        :param host_mac: required for managed host that is bare metal, not required if it's a virtual machine
        :type host_mac: str
        :param host_architecture_id: required if host is managed and value is not inherited from host group
        :type host_architecture_id: float
        :param host_domain_id: required if host is managed and value is not inherited from host group
        :type host_domain_id: float
        :param host_realm_id:
        :type host_realm_id: float
        :param host_puppet_proxy_id: Puppet proxy ID
        :type host_puppet_proxy_id: float
        :param host_puppet_ca_proxy_id: Puppet CA proxy ID
        :type host_puppet_ca_proxy_id: float
        :param host_operatingsystem_id: required if host is managed and value is not inherited from host group
        :type host_operatingsystem_id: float
        :param host_medium_id: required if not imaged based provisioning and host is managed and value is not inherited from host group
        :type host_medium_id: str
        :param host_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type host_pxe_loader: str
        :param host_ptable_id: required if host is managed and custom partition has not been defined
        :type host_ptable_id: float
        :param host_subnet_id: required if host is managed and value is not inherited from host group
        :type host_subnet_id: float
        :param host_compute_resource_id: nil means host is bare metal
        :type host_compute_resource_id: float
        :param host_root_pass: required if host is managed and value is not inherited from host group or default password in settings
        :type host_root_pass: str
        :param host_model_id:
        :type host_model_id: float
        :param host_hostgroup_id:
        :type host_hostgroup_id: float
        :param host_owner_id:
        :type host_owner_id: float
        :param host_owner_type: Host's owner type
        :type host_owner_type: str
        :param host_image_id:
        :type host_image_id: float
        :param host_host_parameters_attributes: Host's parameters (array or indexed hash)
        :type host_host_parameters_attributes: List[str]
        :param host_build:
        :type host_build: bool
        :param host_enabled: Include this host within Foreman reporting
        :type host_enabled: bool
        :param host_provision_method: The method used to provision the host.
        :type host_provision_method: str
        :param host_managed: True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not
        :type host_managed: bool
        :param host_progress_report_id: UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks
        :type host_progress_report_id: str
        :param host_comment: Additional information about this host
        :type host_comment: str
        :param host_capabilities:
        :type host_capabilities: str
        :param host_compute_profile_id:
        :type host_compute_profile_id: float
        :param host_interfaces_attributes: Host's network interfaces.
        :type host_interfaces_attributes: List[str]
        :param host_content_facet_attributes_content_view_id:
        :type host_content_facet_attributes_content_view_id: float
        :param host_content_facet_attributes_lifecycle_environment_id:
        :type host_content_facet_attributes_lifecycle_environment_id: float
        :param host_content_facet_attributes_content_source_id:
        :type host_content_facet_attributes_content_source_id: float
        :param host_content_facet_attributes_kickstart_repository_id: Repository Id associated with the kickstart repo used for provisioning
        :type host_content_facet_attributes_kickstart_repository_id: float
        :param host_subscription_facet_attributes_release_version: Release version for this Host to use (7Server, 7.1, etc)
        :type host_subscription_facet_attributes_release_version: str
        :param host_subscription_facet_attributes_autoheal: Sets whether the Host will autoheal subscriptions upon checkin
        :type host_subscription_facet_attributes_autoheal: bool
        :param host_subscription_facet_attributes_purpose_usage: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_usage: str
        :param host_subscription_facet_attributes_purpose_role: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_role: str
        :param host_subscription_facet_attributes_purpose_addons: Sets the system add-ons
        :type host_subscription_facet_attributes_purpose_addons: List[str]
        :param host_subscription_facet_attributes_service_level: Service level to be used for autoheal
        :type host_subscription_facet_attributes_service_level: str
        :param host_subscription_facet_attributes_hypervisor_guest_uuids: List of hypervisor guest uuids
        :type host_subscription_facet_attributes_hypervisor_guest_uuids: List[str]
        :param host_subscription_facet_attributes_installed_products_attributes: List of products installed on the host
        :type host_subscription_facet_attributes_installed_products_attributes: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            host_name=host_name,
            host_location_id=host_location_id,
            host_organization_id=host_organization_id,
            host_ip=host_ip,
            host_mac=host_mac,
            host_architecture_id=host_architecture_id,
            host_domain_id=host_domain_id,
            host_realm_id=host_realm_id,
            host_puppet_proxy_id=host_puppet_proxy_id,
            host_puppet_ca_proxy_id=host_puppet_ca_proxy_id,
            host_operatingsystem_id=host_operatingsystem_id,
            host_medium_id=host_medium_id,
            host_pxe_loader=host_pxe_loader,
            host_ptable_id=host_ptable_id,
            host_subnet_id=host_subnet_id,
            host_compute_resource_id=host_compute_resource_id,
            host_root_pass=host_root_pass,
            host_model_id=host_model_id,
            host_hostgroup_id=host_hostgroup_id,
            host_owner_id=host_owner_id,
            host_owner_type=host_owner_type,
            host_image_id=host_image_id,
            host_host_parameters_attributes=host_host_parameters_attributes,
            host_build=host_build,
            host_enabled=host_enabled,
            host_provision_method=host_provision_method,
            host_managed=host_managed,
            host_progress_report_id=host_progress_report_id,
            host_comment=host_comment,
            host_capabilities=host_capabilities,
            host_compute_profile_id=host_compute_profile_id,
            host_interfaces_attributes=host_interfaces_attributes,
            host_content_facet_attributes_content_view_id=host_content_facet_attributes_content_view_id,
            host_content_facet_attributes_lifecycle_environment_id=host_content_facet_attributes_lifecycle_environment_id,
            host_content_facet_attributes_content_source_id=host_content_facet_attributes_content_source_id,
            host_content_facet_attributes_kickstart_repository_id=host_content_facet_attributes_kickstart_repository_id,
            host_subscription_facet_attributes_release_version=host_subscription_facet_attributes_release_version,
            host_subscription_facet_attributes_autoheal=host_subscription_facet_attributes_autoheal,
            host_subscription_facet_attributes_purpose_usage=host_subscription_facet_attributes_purpose_usage,
            host_subscription_facet_attributes_purpose_role=host_subscription_facet_attributes_purpose_role,
            host_subscription_facet_attributes_purpose_addons=host_subscription_facet_attributes_purpose_addons,
            host_subscription_facet_attributes_service_level=host_subscription_facet_attributes_service_level,
            host_subscription_facet_attributes_hypervisor_guest_uuids=host_subscription_facet_attributes_hypervisor_guest_uuids,
            host_subscription_facet_attributes_installed_products_attributes=host_subscription_facet_attributes_installed_products_attributes,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_id_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        host_name: Optional[StrictStr] = None,
        host_location_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_organization_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_ip: Annotated[
            Optional[StrictStr],
            Field(description="not required if using a subnet with DHCP proxy"),
        ] = None,
        host_mac: Annotated[
            Optional[StrictStr],
            Field(
                description="required for managed host that is bare metal, not required if it's a virtual machine"
            ),
        ] = None,
        host_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_realm_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        host_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        host_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_medium_id: Annotated[
            Optional[StrictStr],
            Field(
                description="required if not imaged based provisioning and host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        host_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and custom partition has not been defined"
            ),
        ] = None,
        host_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="nil means host is bare metal"),
        ] = None,
        host_root_pass: Annotated[
            Optional[StrictStr],
            Field(
                description="required if host is managed and value is not inherited from host group or default password in settings"
            ),
        ] = None,
        host_model_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_hostgroup_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_type: Annotated[
            Optional[StrictStr], Field(description="Host's owner type")
        ] = None,
        host_image_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_host_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Host's parameters (array or indexed hash)"),
        ] = None,
        host_build: Optional[StrictBool] = None,
        host_enabled: Annotated[
            Optional[StrictBool],
            Field(description="Include this host within Foreman reporting"),
        ] = None,
        host_provision_method: Annotated[
            Optional[StrictStr],
            Field(description="The method used to provision the host."),
        ] = None,
        host_managed: Annotated[
            Optional[StrictBool],
            Field(
                description="True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not"
            ),
        ] = None,
        host_progress_report_id: Annotated[
            Optional[StrictStr],
            Field(
                description="UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks"
            ),
        ] = None,
        host_comment: Annotated[
            Optional[StrictStr],
            Field(description="Additional information about this host"),
        ] = None,
        host_capabilities: Optional[StrictStr] = None,
        host_compute_profile_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_interfaces_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Host's network interfaces.")
        ] = None,
        host_content_facet_attributes_content_view_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_lifecycle_environment_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_content_source_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Repository Id associated with the kickstart repo used for provisioning"
            ),
        ] = None,
        host_subscription_facet_attributes_release_version: Annotated[
            Optional[StrictStr],
            Field(
                description="Release version for this Host to use (7Server, 7.1, etc)"
            ),
        ] = None,
        host_subscription_facet_attributes_autoheal: Annotated[
            Optional[StrictBool],
            Field(
                description="Sets whether the Host will autoheal subscriptions upon checkin"
            ),
        ] = None,
        host_subscription_facet_attributes_purpose_usage: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_role: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_addons: Annotated[
            Optional[List[StrictStr]], Field(description="Sets the system add-ons")
        ] = None,
        host_subscription_facet_attributes_service_level: Annotated[
            Optional[StrictStr],
            Field(description="Service level to be used for autoheal"),
        ] = None,
        host_subscription_facet_attributes_hypervisor_guest_uuids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of hypervisor guest uuids"),
        ] = None,
        host_subscription_facet_attributes_installed_products_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of products installed on the host"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param host_name:
        :type host_name: str
        :param host_location_id:
        :type host_location_id: float
        :param host_organization_id:
        :type host_organization_id: float
        :param host_ip: not required if using a subnet with DHCP proxy
        :type host_ip: str
        :param host_mac: required for managed host that is bare metal, not required if it's a virtual machine
        :type host_mac: str
        :param host_architecture_id: required if host is managed and value is not inherited from host group
        :type host_architecture_id: float
        :param host_domain_id: required if host is managed and value is not inherited from host group
        :type host_domain_id: float
        :param host_realm_id:
        :type host_realm_id: float
        :param host_puppet_proxy_id: Puppet proxy ID
        :type host_puppet_proxy_id: float
        :param host_puppet_ca_proxy_id: Puppet CA proxy ID
        :type host_puppet_ca_proxy_id: float
        :param host_operatingsystem_id: required if host is managed and value is not inherited from host group
        :type host_operatingsystem_id: float
        :param host_medium_id: required if not imaged based provisioning and host is managed and value is not inherited from host group
        :type host_medium_id: str
        :param host_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type host_pxe_loader: str
        :param host_ptable_id: required if host is managed and custom partition has not been defined
        :type host_ptable_id: float
        :param host_subnet_id: required if host is managed and value is not inherited from host group
        :type host_subnet_id: float
        :param host_compute_resource_id: nil means host is bare metal
        :type host_compute_resource_id: float
        :param host_root_pass: required if host is managed and value is not inherited from host group or default password in settings
        :type host_root_pass: str
        :param host_model_id:
        :type host_model_id: float
        :param host_hostgroup_id:
        :type host_hostgroup_id: float
        :param host_owner_id:
        :type host_owner_id: float
        :param host_owner_type: Host's owner type
        :type host_owner_type: str
        :param host_image_id:
        :type host_image_id: float
        :param host_host_parameters_attributes: Host's parameters (array or indexed hash)
        :type host_host_parameters_attributes: List[str]
        :param host_build:
        :type host_build: bool
        :param host_enabled: Include this host within Foreman reporting
        :type host_enabled: bool
        :param host_provision_method: The method used to provision the host.
        :type host_provision_method: str
        :param host_managed: True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not
        :type host_managed: bool
        :param host_progress_report_id: UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks
        :type host_progress_report_id: str
        :param host_comment: Additional information about this host
        :type host_comment: str
        :param host_capabilities:
        :type host_capabilities: str
        :param host_compute_profile_id:
        :type host_compute_profile_id: float
        :param host_interfaces_attributes: Host's network interfaces.
        :type host_interfaces_attributes: List[str]
        :param host_content_facet_attributes_content_view_id:
        :type host_content_facet_attributes_content_view_id: float
        :param host_content_facet_attributes_lifecycle_environment_id:
        :type host_content_facet_attributes_lifecycle_environment_id: float
        :param host_content_facet_attributes_content_source_id:
        :type host_content_facet_attributes_content_source_id: float
        :param host_content_facet_attributes_kickstart_repository_id: Repository Id associated with the kickstart repo used for provisioning
        :type host_content_facet_attributes_kickstart_repository_id: float
        :param host_subscription_facet_attributes_release_version: Release version for this Host to use (7Server, 7.1, etc)
        :type host_subscription_facet_attributes_release_version: str
        :param host_subscription_facet_attributes_autoheal: Sets whether the Host will autoheal subscriptions upon checkin
        :type host_subscription_facet_attributes_autoheal: bool
        :param host_subscription_facet_attributes_purpose_usage: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_usage: str
        :param host_subscription_facet_attributes_purpose_role: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_role: str
        :param host_subscription_facet_attributes_purpose_addons: Sets the system add-ons
        :type host_subscription_facet_attributes_purpose_addons: List[str]
        :param host_subscription_facet_attributes_service_level: Service level to be used for autoheal
        :type host_subscription_facet_attributes_service_level: str
        :param host_subscription_facet_attributes_hypervisor_guest_uuids: List of hypervisor guest uuids
        :type host_subscription_facet_attributes_hypervisor_guest_uuids: List[str]
        :param host_subscription_facet_attributes_installed_products_attributes: List of products installed on the host
        :type host_subscription_facet_attributes_installed_products_attributes: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            host_name=host_name,
            host_location_id=host_location_id,
            host_organization_id=host_organization_id,
            host_ip=host_ip,
            host_mac=host_mac,
            host_architecture_id=host_architecture_id,
            host_domain_id=host_domain_id,
            host_realm_id=host_realm_id,
            host_puppet_proxy_id=host_puppet_proxy_id,
            host_puppet_ca_proxy_id=host_puppet_ca_proxy_id,
            host_operatingsystem_id=host_operatingsystem_id,
            host_medium_id=host_medium_id,
            host_pxe_loader=host_pxe_loader,
            host_ptable_id=host_ptable_id,
            host_subnet_id=host_subnet_id,
            host_compute_resource_id=host_compute_resource_id,
            host_root_pass=host_root_pass,
            host_model_id=host_model_id,
            host_hostgroup_id=host_hostgroup_id,
            host_owner_id=host_owner_id,
            host_owner_type=host_owner_type,
            host_image_id=host_image_id,
            host_host_parameters_attributes=host_host_parameters_attributes,
            host_build=host_build,
            host_enabled=host_enabled,
            host_provision_method=host_provision_method,
            host_managed=host_managed,
            host_progress_report_id=host_progress_report_id,
            host_comment=host_comment,
            host_capabilities=host_capabilities,
            host_compute_profile_id=host_compute_profile_id,
            host_interfaces_attributes=host_interfaces_attributes,
            host_content_facet_attributes_content_view_id=host_content_facet_attributes_content_view_id,
            host_content_facet_attributes_lifecycle_environment_id=host_content_facet_attributes_lifecycle_environment_id,
            host_content_facet_attributes_content_source_id=host_content_facet_attributes_content_source_id,
            host_content_facet_attributes_kickstart_repository_id=host_content_facet_attributes_kickstart_repository_id,
            host_subscription_facet_attributes_release_version=host_subscription_facet_attributes_release_version,
            host_subscription_facet_attributes_autoheal=host_subscription_facet_attributes_autoheal,
            host_subscription_facet_attributes_purpose_usage=host_subscription_facet_attributes_purpose_usage,
            host_subscription_facet_attributes_purpose_role=host_subscription_facet_attributes_purpose_role,
            host_subscription_facet_attributes_purpose_addons=host_subscription_facet_attributes_purpose_addons,
            host_subscription_facet_attributes_service_level=host_subscription_facet_attributes_service_level,
            host_subscription_facet_attributes_hypervisor_guest_uuids=host_subscription_facet_attributes_hypervisor_guest_uuids,
            host_subscription_facet_attributes_installed_products_attributes=host_subscription_facet_attributes_installed_products_attributes,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_id_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        host_name: Optional[StrictStr] = None,
        host_location_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_organization_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_ip: Annotated[
            Optional[StrictStr],
            Field(description="not required if using a subnet with DHCP proxy"),
        ] = None,
        host_mac: Annotated[
            Optional[StrictStr],
            Field(
                description="required for managed host that is bare metal, not required if it's a virtual machine"
            ),
        ] = None,
        host_architecture_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_domain_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_realm_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_puppet_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet proxy ID"),
        ] = None,
        host_puppet_ca_proxy_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Puppet CA proxy ID"),
        ] = None,
        host_operatingsystem_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_medium_id: Annotated[
            Optional[StrictStr],
            Field(
                description="required if not imaged based provisioning and host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_pxe_loader: Annotated[
            Optional[StrictStr],
            Field(description="DHCP filename option (Grub2/PXELinux by default)"),
        ] = None,
        host_ptable_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and custom partition has not been defined"
            ),
        ] = None,
        host_subnet_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="required if host is managed and value is not inherited from host group"
            ),
        ] = None,
        host_compute_resource_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="nil means host is bare metal"),
        ] = None,
        host_root_pass: Annotated[
            Optional[StrictStr],
            Field(
                description="required if host is managed and value is not inherited from host group or default password in settings"
            ),
        ] = None,
        host_model_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_hostgroup_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_owner_type: Annotated[
            Optional[StrictStr], Field(description="Host's owner type")
        ] = None,
        host_image_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_host_parameters_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="Host's parameters (array or indexed hash)"),
        ] = None,
        host_build: Optional[StrictBool] = None,
        host_enabled: Annotated[
            Optional[StrictBool],
            Field(description="Include this host within Foreman reporting"),
        ] = None,
        host_provision_method: Annotated[
            Optional[StrictStr],
            Field(description="The method used to provision the host."),
        ] = None,
        host_managed: Annotated[
            Optional[StrictBool],
            Field(
                description="True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not"
            ),
        ] = None,
        host_progress_report_id: Annotated[
            Optional[StrictStr],
            Field(
                description="UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks"
            ),
        ] = None,
        host_comment: Annotated[
            Optional[StrictStr],
            Field(description="Additional information about this host"),
        ] = None,
        host_capabilities: Optional[StrictStr] = None,
        host_compute_profile_id: Optional[Union[StrictFloat, StrictInt]] = None,
        host_interfaces_attributes: Annotated[
            Optional[List[StrictStr]], Field(description="Host's network interfaces.")
        ] = None,
        host_content_facet_attributes_content_view_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_lifecycle_environment_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_content_source_id: Optional[
            Union[StrictFloat, StrictInt]
        ] = None,
        host_content_facet_attributes_kickstart_repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Repository Id associated with the kickstart repo used for provisioning"
            ),
        ] = None,
        host_subscription_facet_attributes_release_version: Annotated[
            Optional[StrictStr],
            Field(
                description="Release version for this Host to use (7Server, 7.1, etc)"
            ),
        ] = None,
        host_subscription_facet_attributes_autoheal: Annotated[
            Optional[StrictBool],
            Field(
                description="Sets whether the Host will autoheal subscriptions upon checkin"
            ),
        ] = None,
        host_subscription_facet_attributes_purpose_usage: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_role: Annotated[
            Optional[StrictStr], Field(description="Sets the system purpose usage")
        ] = None,
        host_subscription_facet_attributes_purpose_addons: Annotated[
            Optional[List[StrictStr]], Field(description="Sets the system add-ons")
        ] = None,
        host_subscription_facet_attributes_service_level: Annotated[
            Optional[StrictStr],
            Field(description="Service level to be used for autoheal"),
        ] = None,
        host_subscription_facet_attributes_hypervisor_guest_uuids: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of hypervisor guest uuids"),
        ] = None,
        host_subscription_facet_attributes_installed_products_attributes: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of products installed on the host"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a host


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param host_name:
        :type host_name: str
        :param host_location_id:
        :type host_location_id: float
        :param host_organization_id:
        :type host_organization_id: float
        :param host_ip: not required if using a subnet with DHCP proxy
        :type host_ip: str
        :param host_mac: required for managed host that is bare metal, not required if it's a virtual machine
        :type host_mac: str
        :param host_architecture_id: required if host is managed and value is not inherited from host group
        :type host_architecture_id: float
        :param host_domain_id: required if host is managed and value is not inherited from host group
        :type host_domain_id: float
        :param host_realm_id:
        :type host_realm_id: float
        :param host_puppet_proxy_id: Puppet proxy ID
        :type host_puppet_proxy_id: float
        :param host_puppet_ca_proxy_id: Puppet CA proxy ID
        :type host_puppet_ca_proxy_id: float
        :param host_operatingsystem_id: required if host is managed and value is not inherited from host group
        :type host_operatingsystem_id: float
        :param host_medium_id: required if not imaged based provisioning and host is managed and value is not inherited from host group
        :type host_medium_id: str
        :param host_pxe_loader: DHCP filename option (Grub2/PXELinux by default)
        :type host_pxe_loader: str
        :param host_ptable_id: required if host is managed and custom partition has not been defined
        :type host_ptable_id: float
        :param host_subnet_id: required if host is managed and value is not inherited from host group
        :type host_subnet_id: float
        :param host_compute_resource_id: nil means host is bare metal
        :type host_compute_resource_id: float
        :param host_root_pass: required if host is managed and value is not inherited from host group or default password in settings
        :type host_root_pass: str
        :param host_model_id:
        :type host_model_id: float
        :param host_hostgroup_id:
        :type host_hostgroup_id: float
        :param host_owner_id:
        :type host_owner_id: float
        :param host_owner_type: Host's owner type
        :type host_owner_type: str
        :param host_image_id:
        :type host_image_id: float
        :param host_host_parameters_attributes: Host's parameters (array or indexed hash)
        :type host_host_parameters_attributes: List[str]
        :param host_build:
        :type host_build: bool
        :param host_enabled: Include this host within Foreman reporting
        :type host_enabled: bool
        :param host_provision_method: The method used to provision the host.
        :type host_provision_method: str
        :param host_managed: True/False flag whether a host is managed or unmanaged. Note: this value also determines whether several parameters are required or not
        :type host_managed: bool
        :param host_progress_report_id: UUID to track orchestration tasks status, GET /api/orchestration/:UUID/tasks
        :type host_progress_report_id: str
        :param host_comment: Additional information about this host
        :type host_comment: str
        :param host_capabilities:
        :type host_capabilities: str
        :param host_compute_profile_id:
        :type host_compute_profile_id: float
        :param host_interfaces_attributes: Host's network interfaces.
        :type host_interfaces_attributes: List[str]
        :param host_content_facet_attributes_content_view_id:
        :type host_content_facet_attributes_content_view_id: float
        :param host_content_facet_attributes_lifecycle_environment_id:
        :type host_content_facet_attributes_lifecycle_environment_id: float
        :param host_content_facet_attributes_content_source_id:
        :type host_content_facet_attributes_content_source_id: float
        :param host_content_facet_attributes_kickstart_repository_id: Repository Id associated with the kickstart repo used for provisioning
        :type host_content_facet_attributes_kickstart_repository_id: float
        :param host_subscription_facet_attributes_release_version: Release version for this Host to use (7Server, 7.1, etc)
        :type host_subscription_facet_attributes_release_version: str
        :param host_subscription_facet_attributes_autoheal: Sets whether the Host will autoheal subscriptions upon checkin
        :type host_subscription_facet_attributes_autoheal: bool
        :param host_subscription_facet_attributes_purpose_usage: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_usage: str
        :param host_subscription_facet_attributes_purpose_role: Sets the system purpose usage
        :type host_subscription_facet_attributes_purpose_role: str
        :param host_subscription_facet_attributes_purpose_addons: Sets the system add-ons
        :type host_subscription_facet_attributes_purpose_addons: List[str]
        :param host_subscription_facet_attributes_service_level: Service level to be used for autoheal
        :type host_subscription_facet_attributes_service_level: str
        :param host_subscription_facet_attributes_hypervisor_guest_uuids: List of hypervisor guest uuids
        :type host_subscription_facet_attributes_hypervisor_guest_uuids: List[str]
        :param host_subscription_facet_attributes_installed_products_attributes: List of products installed on the host
        :type host_subscription_facet_attributes_installed_products_attributes: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            host_name=host_name,
            host_location_id=host_location_id,
            host_organization_id=host_organization_id,
            host_ip=host_ip,
            host_mac=host_mac,
            host_architecture_id=host_architecture_id,
            host_domain_id=host_domain_id,
            host_realm_id=host_realm_id,
            host_puppet_proxy_id=host_puppet_proxy_id,
            host_puppet_ca_proxy_id=host_puppet_ca_proxy_id,
            host_operatingsystem_id=host_operatingsystem_id,
            host_medium_id=host_medium_id,
            host_pxe_loader=host_pxe_loader,
            host_ptable_id=host_ptable_id,
            host_subnet_id=host_subnet_id,
            host_compute_resource_id=host_compute_resource_id,
            host_root_pass=host_root_pass,
            host_model_id=host_model_id,
            host_hostgroup_id=host_hostgroup_id,
            host_owner_id=host_owner_id,
            host_owner_type=host_owner_type,
            host_image_id=host_image_id,
            host_host_parameters_attributes=host_host_parameters_attributes,
            host_build=host_build,
            host_enabled=host_enabled,
            host_provision_method=host_provision_method,
            host_managed=host_managed,
            host_progress_report_id=host_progress_report_id,
            host_comment=host_comment,
            host_capabilities=host_capabilities,
            host_compute_profile_id=host_compute_profile_id,
            host_interfaces_attributes=host_interfaces_attributes,
            host_content_facet_attributes_content_view_id=host_content_facet_attributes_content_view_id,
            host_content_facet_attributes_lifecycle_environment_id=host_content_facet_attributes_lifecycle_environment_id,
            host_content_facet_attributes_content_source_id=host_content_facet_attributes_content_source_id,
            host_content_facet_attributes_kickstart_repository_id=host_content_facet_attributes_kickstart_repository_id,
            host_subscription_facet_attributes_release_version=host_subscription_facet_attributes_release_version,
            host_subscription_facet_attributes_autoheal=host_subscription_facet_attributes_autoheal,
            host_subscription_facet_attributes_purpose_usage=host_subscription_facet_attributes_purpose_usage,
            host_subscription_facet_attributes_purpose_role=host_subscription_facet_attributes_purpose_role,
            host_subscription_facet_attributes_purpose_addons=host_subscription_facet_attributes_purpose_addons,
            host_subscription_facet_attributes_service_level=host_subscription_facet_attributes_service_level,
            host_subscription_facet_attributes_hypervisor_guest_uuids=host_subscription_facet_attributes_hypervisor_guest_uuids,
            host_subscription_facet_attributes_installed_products_attributes=host_subscription_facet_attributes_installed_products_attributes,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_id_serialize(
        self,
        id,
        location_id,
        organization_id,
        host_name,
        host_location_id,
        host_organization_id,
        host_ip,
        host_mac,
        host_architecture_id,
        host_domain_id,
        host_realm_id,
        host_puppet_proxy_id,
        host_puppet_ca_proxy_id,
        host_operatingsystem_id,
        host_medium_id,
        host_pxe_loader,
        host_ptable_id,
        host_subnet_id,
        host_compute_resource_id,
        host_root_pass,
        host_model_id,
        host_hostgroup_id,
        host_owner_id,
        host_owner_type,
        host_image_id,
        host_host_parameters_attributes,
        host_build,
        host_enabled,
        host_provision_method,
        host_managed,
        host_progress_report_id,
        host_comment,
        host_capabilities,
        host_compute_profile_id,
        host_interfaces_attributes,
        host_content_facet_attributes_content_view_id,
        host_content_facet_attributes_lifecycle_environment_id,
        host_content_facet_attributes_content_source_id,
        host_content_facet_attributes_kickstart_repository_id,
        host_subscription_facet_attributes_release_version,
        host_subscription_facet_attributes_autoheal,
        host_subscription_facet_attributes_purpose_usage,
        host_subscription_facet_attributes_purpose_role,
        host_subscription_facet_attributes_purpose_addons,
        host_subscription_facet_attributes_service_level,
        host_subscription_facet_attributes_hypervisor_guest_uuids,
        host_subscription_facet_attributes_installed_products_attributes,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "host[host_parameters_attributes]": "csv",
            "host[interfaces_attributes]": "csv",
            "host[subscription_facet_attributes][purpose_addons]": "csv",
            "host[subscription_facet_attributes][hypervisor_guest_uuids]": "csv",
            "host[subscription_facet_attributes][installed_products_attributes]": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if host_name is not None:
            _form_params.append(("host[name]", host_name))
        if host_location_id is not None:
            _form_params.append(("host[location_id]", host_location_id))
        if host_organization_id is not None:
            _form_params.append(("host[organization_id]", host_organization_id))
        if host_ip is not None:
            _form_params.append(("host[ip]", host_ip))
        if host_mac is not None:
            _form_params.append(("host[mac]", host_mac))
        if host_architecture_id is not None:
            _form_params.append(("host[architecture_id]", host_architecture_id))
        if host_domain_id is not None:
            _form_params.append(("host[domain_id]", host_domain_id))
        if host_realm_id is not None:
            _form_params.append(("host[realm_id]", host_realm_id))
        if host_puppet_proxy_id is not None:
            _form_params.append(("host[puppet_proxy_id]", host_puppet_proxy_id))
        if host_puppet_ca_proxy_id is not None:
            _form_params.append(("host[puppet_ca_proxy_id]", host_puppet_ca_proxy_id))
        if host_operatingsystem_id is not None:
            _form_params.append(("host[operatingsystem_id]", host_operatingsystem_id))
        if host_medium_id is not None:
            _form_params.append(("host[medium_id]", host_medium_id))
        if host_pxe_loader is not None:
            _form_params.append(("host[pxe_loader]", host_pxe_loader))
        if host_ptable_id is not None:
            _form_params.append(("host[ptable_id]", host_ptable_id))
        if host_subnet_id is not None:
            _form_params.append(("host[subnet_id]", host_subnet_id))
        if host_compute_resource_id is not None:
            _form_params.append(("host[compute_resource_id]", host_compute_resource_id))
        if host_root_pass is not None:
            _form_params.append(("host[root_pass]", host_root_pass))
        if host_model_id is not None:
            _form_params.append(("host[model_id]", host_model_id))
        if host_hostgroup_id is not None:
            _form_params.append(("host[hostgroup_id]", host_hostgroup_id))
        if host_owner_id is not None:
            _form_params.append(("host[owner_id]", host_owner_id))
        if host_owner_type is not None:
            _form_params.append(("host[owner_type]", host_owner_type))
        if host_image_id is not None:
            _form_params.append(("host[image_id]", host_image_id))
        if host_host_parameters_attributes is not None:
            _form_params.append(
                ("host[host_parameters_attributes]", host_host_parameters_attributes)
            )
        if host_build is not None:
            _form_params.append(("host[build]", host_build))
        if host_enabled is not None:
            _form_params.append(("host[enabled]", host_enabled))
        if host_provision_method is not None:
            _form_params.append(("host[provision_method]", host_provision_method))
        if host_managed is not None:
            _form_params.append(("host[managed]", host_managed))
        if host_progress_report_id is not None:
            _form_params.append(("host[progress_report_id]", host_progress_report_id))
        if host_comment is not None:
            _form_params.append(("host[comment]", host_comment))
        if host_capabilities is not None:
            _form_params.append(("host[capabilities]", host_capabilities))
        if host_compute_profile_id is not None:
            _form_params.append(("host[compute_profile_id]", host_compute_profile_id))
        if host_interfaces_attributes is not None:
            _form_params.append(
                ("host[interfaces_attributes]", host_interfaces_attributes)
            )
        if host_content_facet_attributes_content_view_id is not None:
            _form_params.append(
                (
                    "host[content_facet_attributes][content_view_id]",
                    host_content_facet_attributes_content_view_id,
                )
            )
        if host_content_facet_attributes_lifecycle_environment_id is not None:
            _form_params.append(
                (
                    "host[content_facet_attributes][lifecycle_environment_id]",
                    host_content_facet_attributes_lifecycle_environment_id,
                )
            )
        if host_content_facet_attributes_content_source_id is not None:
            _form_params.append(
                (
                    "host[content_facet_attributes][content_source_id]",
                    host_content_facet_attributes_content_source_id,
                )
            )
        if host_content_facet_attributes_kickstart_repository_id is not None:
            _form_params.append(
                (
                    "host[content_facet_attributes][kickstart_repository_id]",
                    host_content_facet_attributes_kickstart_repository_id,
                )
            )
        if host_subscription_facet_attributes_release_version is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][release_version]",
                    host_subscription_facet_attributes_release_version,
                )
            )
        if host_subscription_facet_attributes_autoheal is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][autoheal]",
                    host_subscription_facet_attributes_autoheal,
                )
            )
        if host_subscription_facet_attributes_purpose_usage is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_usage]",
                    host_subscription_facet_attributes_purpose_usage,
                )
            )
        if host_subscription_facet_attributes_purpose_role is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_role]",
                    host_subscription_facet_attributes_purpose_role,
                )
            )
        if host_subscription_facet_attributes_purpose_addons is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][purpose_addons]",
                    host_subscription_facet_attributes_purpose_addons,
                )
            )
        if host_subscription_facet_attributes_service_level is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][service_level]",
                    host_subscription_facet_attributes_service_level,
                )
            )
        if host_subscription_facet_attributes_hypervisor_guest_uuids is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][hypervisor_guest_uuids]",
                    host_subscription_facet_attributes_hypervisor_guest_uuids,
                )
            )
        if host_subscription_facet_attributes_installed_products_attributes is not None:
            _form_params.append(
                (
                    "host[subscription_facet_attributes][installed_products_attributes]",
                    host_subscription_facet_attributes_installed_products_attributes,
                )
            )
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_id_boot(
        self,
        id: StrictStr,
        device: Annotated[
            StrictStr,
            Field(description="boot device, valid devices are disk, cdrom, pxe, bios"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Boot host from specified device


        :param id: (required)
        :type id: str
        :param device: boot device, valid devices are disk, cdrom, pxe, bios (required)
        :type device: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_boot_serialize(
            id=id,
            device=device,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_id_boot_with_http_info(
        self,
        id: StrictStr,
        device: Annotated[
            StrictStr,
            Field(description="boot device, valid devices are disk, cdrom, pxe, bios"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Boot host from specified device


        :param id: (required)
        :type id: str
        :param device: boot device, valid devices are disk, cdrom, pxe, bios (required)
        :type device: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_boot_serialize(
            id=id,
            device=device,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_id_boot_without_preload_content(
        self,
        id: StrictStr,
        device: Annotated[
            StrictStr,
            Field(description="boot device, valid devices are disk, cdrom, pxe, bios"),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Boot host from specified device


        :param id: (required)
        :type id: str
        :param device: boot device, valid devices are disk, cdrom, pxe, bios (required)
        :type device: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_boot_serialize(
            id=id,
            device=device,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_id_boot_serialize(
        self,
        id,
        device,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if device is not None:
            _form_params.append(("device", device))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/{id}/boot",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_id_disassociate(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Disassociate the host from a VM


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_disassociate_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_id_disassociate_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Disassociate the host from a VM


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_disassociate_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_id_disassociate_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Disassociate the host from a VM


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_disassociate_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_id_disassociate_serialize(
        self,
        id,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/{id}/disassociate",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_id_power(
        self,
        id: StrictStr,
        power_action: Annotated[
            StrictStr,
            Field(
                description="power action, valid actions are (on/start), (off/stop), (soft/reboot), (cycle/reset), (state/status)"
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Run a power operation on host


        :param id: (required)
        :type id: str
        :param power_action: power action, valid actions are (on/start), (off/stop), (soft/reboot), (cycle/reset), (state/status) (required)
        :type power_action: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_power_serialize(
            id=id,
            power_action=power_action,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_id_power_with_http_info(
        self,
        id: StrictStr,
        power_action: Annotated[
            StrictStr,
            Field(
                description="power action, valid actions are (on/start), (off/stop), (soft/reboot), (cycle/reset), (state/status)"
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Run a power operation on host


        :param id: (required)
        :type id: str
        :param power_action: power action, valid actions are (on/start), (off/stop), (soft/reboot), (cycle/reset), (state/status) (required)
        :type power_action: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_power_serialize(
            id=id,
            power_action=power_action,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_id_power_without_preload_content(
        self,
        id: StrictStr,
        power_action: Annotated[
            StrictStr,
            Field(
                description="power action, valid actions are (on/start), (off/stop), (soft/reboot), (cycle/reset), (state/status)"
            ),
        ],
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Run a power operation on host


        :param id: (required)
        :type id: str
        :param power_action: power action, valid actions are (on/start), (off/stop), (soft/reboot), (cycle/reset), (state/status) (required)
        :type power_action: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_power_serialize(
            id=id,
            power_action=power_action,
            location_id=location_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_id_power_serialize(
        self,
        id,
        power_action,
        location_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if power_action is not None:
            _form_params.append(("power_action", power_action))
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/{id}/power",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def put_hosts_id_rebuild_config(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        only: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Rebuild orchestration config


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param only: Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status
        :type only: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_rebuild_config_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            only=only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def put_hosts_id_rebuild_config_with_http_info(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        only: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Rebuild orchestration config


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param only: Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status
        :type only: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_rebuild_config_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            only=only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def put_hosts_id_rebuild_config_without_preload_content(
        self,
        id: StrictStr,
        location_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current location context for the request"),
        ] = None,
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Set the current organization context for the request"),
        ] = None,
        only: Annotated[
            Optional[List[StrictStr]],
            Field(
                description="Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Rebuild orchestration config


        :param id: (required)
        :type id: str
        :param location_id: Set the current location context for the request
        :type location_id: float
        :param organization_id: Set the current organization context for the request
        :type organization_id: float
        :param only: Limit rebuild steps, valid steps are DHCP, DNS, TFTP, Content_Host_Status, Refresh_Content_Host_Status
        :type only: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._put_hosts_id_rebuild_config_serialize(
            id=id,
            location_id=location_id,
            organization_id=organization_id,
            only=only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _put_hosts_id_rebuild_config_serialize(
        self,
        id,
        location_id,
        organization_id,
        only,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "only": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if location_id is not None:
            _form_params.append(("location_id", location_id))
        if organization_id is not None:
            _form_params.append(("organization_id", organization_id))
        if only is not None:
            _form_params.append(("only", only))
        # process the body parameter

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/x-www-form-urlencoded", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/hosts/{id}/rebuild_config",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
