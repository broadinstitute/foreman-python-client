# coding: utf-8

"""
    Foreman (params in:formData)

     <p>Foreman API v2 is currently the default API version.</p> 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union


from foreman.api_client import ApiClient
from foreman.api_response import ApiResponse
from foreman.rest import RESTResponseType


class PackageGroupsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def get_content_view_filters_content_view_filter_id_package_groups(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List package_groups


        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_content_view_filter_id_package_groups_serialize(
            content_view_filter_id=content_view_filter_id,
            repository_id=repository_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_view_filters_content_view_filter_id_package_groups_with_http_info(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List package_groups


        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_content_view_filter_id_package_groups_serialize(
            content_view_filter_id=content_view_filter_id,
            repository_id=repository_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_view_filters_content_view_filter_id_package_groups_without_preload_content(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List package_groups


        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_view_filters_content_view_filter_id_package_groups_serialize(
            content_view_filter_id=content_view_filter_id,
            repository_id=repository_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_view_filters_content_view_filter_id_package_groups_serialize(
        self,
        content_view_filter_id,
        repository_id,
        organization_id,
        content_view_version_id,
        content_view_filter_rule_id,
        environment_id,
        ids,
        include_filter_ids,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_filter_id is not None:
            _path_params["content_view_filter_id"] = content_view_filter_id
        # process the query parameters
        if repository_id is not None:
            _query_params.append(("repository_id", repository_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if content_view_version_id is not None:
            _query_params.append(("content_view_version_id", content_view_version_id))

        if content_view_filter_rule_id is not None:
            _query_params.append(
                ("content_view_filter_rule_id", content_view_filter_rule_id)
            )

        if environment_id is not None:
            _query_params.append(("environment_id", environment_id))

        if ids is not None:
            _query_params.append(("ids", ids))

        if include_filter_ids is not None:
            _query_params.append(("include_filter_ids", include_filter_ids))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_view_filters/{content_view_filter_id}/package_groups",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_content_views_content_view_id_filters_filter_id_package_groups(
        self,
        content_view_id: Union[StrictFloat, StrictInt],
        filter_id: Union[StrictFloat, StrictInt],
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List package_groups


        :param content_view_id: (required)
        :type content_view_id: float
        :param filter_id: (required)
        :type filter_id: float
        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_content_view_id_filters_filter_id_package_groups_serialize(
            content_view_id=content_view_id,
            filter_id=filter_id,
            content_view_filter_id=content_view_filter_id,
            repository_id=repository_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_content_views_content_view_id_filters_filter_id_package_groups_with_http_info(
        self,
        content_view_id: Union[StrictFloat, StrictInt],
        filter_id: Union[StrictFloat, StrictInt],
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List package_groups


        :param content_view_id: (required)
        :type content_view_id: float
        :param filter_id: (required)
        :type filter_id: float
        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_content_view_id_filters_filter_id_package_groups_serialize(
            content_view_id=content_view_id,
            filter_id=filter_id,
            content_view_filter_id=content_view_filter_id,
            repository_id=repository_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_content_views_content_view_id_filters_filter_id_package_groups_without_preload_content(
        self,
        content_view_id: Union[StrictFloat, StrictInt],
        filter_id: Union[StrictFloat, StrictInt],
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List package_groups


        :param content_view_id: (required)
        :type content_view_id: float
        :param filter_id: (required)
        :type filter_id: float
        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_content_views_content_view_id_filters_filter_id_package_groups_serialize(
            content_view_id=content_view_id,
            filter_id=filter_id,
            content_view_filter_id=content_view_filter_id,
            repository_id=repository_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_content_views_content_view_id_filters_filter_id_package_groups_serialize(
        self,
        content_view_id,
        filter_id,
        content_view_filter_id,
        repository_id,
        organization_id,
        content_view_version_id,
        content_view_filter_rule_id,
        environment_id,
        ids,
        include_filter_ids,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if content_view_id is not None:
            _path_params["content_view_id"] = content_view_id
        if filter_id is not None:
            _path_params["filter_id"] = filter_id
        # process the query parameters
        if content_view_filter_id is not None:
            _query_params.append(("content_view_filter_id", content_view_filter_id))

        if repository_id is not None:
            _query_params.append(("repository_id", repository_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if content_view_version_id is not None:
            _query_params.append(("content_view_version_id", content_view_version_id))

        if content_view_filter_rule_id is not None:
            _query_params.append(
                ("content_view_filter_rule_id", content_view_filter_rule_id)
            )

        if environment_id is not None:
            _query_params.append(("environment_id", environment_id))

        if ids is not None:
            _query_params.append(("ids", ids))

        if include_filter_ids is not None:
            _query_params.append(("include_filter_ids", include_filter_ids))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/content_views/{content_view_id}/filters/{filter_id}/package_groups",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_package_groups(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List package_groups


        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_package_groups_serialize(
            content_view_filter_id=content_view_filter_id,
            repository_id=repository_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_package_groups_with_http_info(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List package_groups


        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_package_groups_serialize(
            content_view_filter_id=content_view_filter_id,
            repository_id=repository_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_package_groups_without_preload_content(
        self,
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List package_groups


        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_package_groups_serialize(
            content_view_filter_id=content_view_filter_id,
            repository_id=repository_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_package_groups_serialize(
        self,
        content_view_filter_id,
        repository_id,
        organization_id,
        content_view_version_id,
        content_view_filter_rule_id,
        environment_id,
        ids,
        include_filter_ids,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if content_view_filter_id is not None:
            _query_params.append(("content_view_filter_id", content_view_filter_id))

        if repository_id is not None:
            _query_params.append(("repository_id", repository_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if content_view_version_id is not None:
            _query_params.append(("content_view_version_id", content_view_version_id))

        if content_view_filter_rule_id is not None:
            _query_params.append(
                ("content_view_filter_rule_id", content_view_filter_rule_id)
            )

        if environment_id is not None:
            _query_params.append(("environment_id", environment_id))

        if ids is not None:
            _query_params.append(("ids", ids))

        if include_filter_ids is not None:
            _query_params.append(("include_filter_ids", include_filter_ids))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/package_groups",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_package_groups_compare(
        self,
        content_view_version_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="content view versions to compare"),
        ] = None,
        repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Library repository id to restrict comparisons to"),
        ] = None,
        restrict_comparison: Annotated[
            Optional[StrictStr],
            Field(description="Return same, different or all results"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List package_groups


        :param content_view_version_ids: content view versions to compare
        :type content_view_version_ids: List[str]
        :param repository_id: Library repository id to restrict comparisons to
        :type repository_id: float
        :param restrict_comparison: Return same, different or all results
        :type restrict_comparison: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_package_groups_compare_serialize(
            content_view_version_ids=content_view_version_ids,
            repository_id=repository_id,
            restrict_comparison=restrict_comparison,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_package_groups_compare_with_http_info(
        self,
        content_view_version_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="content view versions to compare"),
        ] = None,
        repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Library repository id to restrict comparisons to"),
        ] = None,
        restrict_comparison: Annotated[
            Optional[StrictStr],
            Field(description="Return same, different or all results"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List package_groups


        :param content_view_version_ids: content view versions to compare
        :type content_view_version_ids: List[str]
        :param repository_id: Library repository id to restrict comparisons to
        :type repository_id: float
        :param restrict_comparison: Return same, different or all results
        :type restrict_comparison: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_package_groups_compare_serialize(
            content_view_version_ids=content_view_version_ids,
            repository_id=repository_id,
            restrict_comparison=restrict_comparison,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_package_groups_compare_without_preload_content(
        self,
        content_view_version_ids: Annotated[
            Optional[List[StrictStr]],
            Field(description="content view versions to compare"),
        ] = None,
        repository_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Library repository id to restrict comparisons to"),
        ] = None,
        restrict_comparison: Annotated[
            Optional[StrictStr],
            Field(description="Return same, different or all results"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List package_groups


        :param content_view_version_ids: content view versions to compare
        :type content_view_version_ids: List[str]
        :param repository_id: Library repository id to restrict comparisons to
        :type repository_id: float
        :param restrict_comparison: Return same, different or all results
        :type restrict_comparison: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_package_groups_compare_serialize(
            content_view_version_ids=content_view_version_ids,
            repository_id=repository_id,
            restrict_comparison=restrict_comparison,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_package_groups_compare_serialize(
        self,
        content_view_version_ids,
        repository_id,
        restrict_comparison,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "content_view_version_ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if content_view_version_ids is not None:
            _query_params.append(("content_view_version_ids", content_view_version_ids))

        if repository_id is not None:
            _query_params.append(("repository_id", repository_id))

        if restrict_comparison is not None:
            _query_params.append(("restrict_comparison", restrict_comparison))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/package_groups/compare",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_package_groups_id(
        self,
        id: Annotated[StrictStr, Field(description=":a_resource identifier")],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a package group


        :param id: :a_resource identifier (required)
        :type id: str
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_package_groups_id_serialize(
            id=id,
            repository_id=repository_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_package_groups_id_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description=":a_resource identifier")],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a package group


        :param id: :a_resource identifier (required)
        :type id: str
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_package_groups_id_serialize(
            id=id,
            repository_id=repository_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_package_groups_id_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description=":a_resource identifier")],
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a package group


        :param id: :a_resource identifier (required)
        :type id: str
        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_package_groups_id_serialize(
            id=id,
            repository_id=repository_id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_package_groups_id_serialize(
        self,
        id,
        repository_id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if repository_id is not None:
            _query_params.append(("repository_id", repository_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/package_groups/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_repositories_repository_id_package_groups(
        self,
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """List package_groups


        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repositories_repository_id_package_groups_serialize(
            repository_id=repository_id,
            content_view_filter_id=content_view_filter_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_repositories_repository_id_package_groups_with_http_info(
        self,
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """List package_groups


        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repositories_repository_id_package_groups_serialize(
            repository_id=repository_id,
            content_view_filter_id=content_view_filter_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_repositories_repository_id_package_groups_without_preload_content(
        self,
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        content_view_filter_id: Annotated[
            Union[StrictFloat, StrictInt],
            Field(description="content view filter identifier"),
        ],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        content_view_version_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view version identifier"),
        ] = None,
        content_view_filter_rule_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="content view filter rule identifier"),
        ] = None,
        environment_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="environment identifier"),
        ] = None,
        ids: Annotated[
            Optional[List[StrictStr]], Field(description="ids to filter content by")
        ] = None,
        include_filter_ids: Annotated[
            Optional[StrictBool],
            Field(
                description="Includes associated content view filter ids in response"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr], Field(description="Search string")
        ] = None,
        page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Page number, starting at 1"),
        ] = None,
        per_page: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Number of results per page to return"),
        ] = None,
        order: Annotated[
            Optional[StrictStr],
            Field(description="Sort field and order, eg. 'id DESC'"),
        ] = None,
        full_result: Annotated[
            Optional[StrictBool],
            Field(description="Whether or not to show all results"),
        ] = None,
        sort_by: Annotated[
            Optional[StrictStr], Field(description="Field to sort the results on")
        ] = None,
        sort_order: Annotated[
            Optional[StrictStr],
            Field(
                description="How to order the sorted results (e.g. ASC for ascending)"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List package_groups


        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param content_view_filter_id: content view filter identifier (required)
        :type content_view_filter_id: float
        :param organization_id: organization identifier
        :type organization_id: float
        :param content_view_version_id: content view version identifier
        :type content_view_version_id: float
        :param content_view_filter_rule_id: content view filter rule identifier
        :type content_view_filter_rule_id: float
        :param environment_id: environment identifier
        :type environment_id: float
        :param ids: ids to filter content by
        :type ids: List[str]
        :param include_filter_ids: Includes associated content view filter ids in response
        :type include_filter_ids: bool
        :param search: Search string
        :type search: str
        :param page: Page number, starting at 1
        :type page: float
        :param per_page: Number of results per page to return
        :type per_page: float
        :param order: Sort field and order, eg. 'id DESC'
        :type order: str
        :param full_result: Whether or not to show all results
        :type full_result: bool
        :param sort_by: Field to sort the results on
        :type sort_by: str
        :param sort_order: How to order the sorted results (e.g. ASC for ascending)
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repositories_repository_id_package_groups_serialize(
            repository_id=repository_id,
            content_view_filter_id=content_view_filter_id,
            organization_id=organization_id,
            content_view_version_id=content_view_version_id,
            content_view_filter_rule_id=content_view_filter_rule_id,
            environment_id=environment_id,
            ids=ids,
            include_filter_ids=include_filter_ids,
            search=search,
            page=page,
            per_page=per_page,
            order=order,
            full_result=full_result,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_repositories_repository_id_package_groups_serialize(
        self,
        repository_id,
        content_view_filter_id,
        organization_id,
        content_view_version_id,
        content_view_filter_rule_id,
        environment_id,
        ids,
        include_filter_ids,
        search,
        page,
        per_page,
        order,
        full_result,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {
            "ids": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository_id is not None:
            _path_params["repository_id"] = repository_id
        # process the query parameters
        if content_view_filter_id is not None:
            _query_params.append(("content_view_filter_id", content_view_filter_id))

        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        if content_view_version_id is not None:
            _query_params.append(("content_view_version_id", content_view_version_id))

        if content_view_filter_rule_id is not None:
            _query_params.append(
                ("content_view_filter_rule_id", content_view_filter_rule_id)
            )

        if environment_id is not None:
            _query_params.append(("environment_id", environment_id))

        if ids is not None:
            _query_params.append(("ids", ids))

        if include_filter_ids is not None:
            _query_params.append(("include_filter_ids", include_filter_ids))

        if search is not None:
            _query_params.append(("search", search))

        if page is not None:
            _query_params.append(("page", page))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if order is not None:
            _query_params.append(("order", order))

        if full_result is not None:
            _query_params.append(("full_result", full_result))

        if sort_by is not None:
            _query_params.append(("sort_by", sort_by))

        if sort_order is not None:
            _query_params.append(("sort_order", sort_order))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/repositories/{repository_id}/package_groups",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_repositories_repository_id_package_groups_id(
        self,
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        id: Annotated[StrictStr, Field(description=":a_resource identifier")],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Show a package group


        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param id: :a_resource identifier (required)
        :type id: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repositories_repository_id_package_groups_id_serialize(
            repository_id=repository_id,
            id=id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_repositories_repository_id_package_groups_id_with_http_info(
        self,
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        id: Annotated[StrictStr, Field(description=":a_resource identifier")],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Show a package group


        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param id: :a_resource identifier (required)
        :type id: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repositories_repository_id_package_groups_id_serialize(
            repository_id=repository_id,
            id=id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_repositories_repository_id_package_groups_id_without_preload_content(
        self,
        repository_id: Annotated[
            Union[StrictFloat, StrictInt], Field(description="repository identifier")
        ],
        id: Annotated[StrictStr, Field(description=":a_resource identifier")],
        organization_id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="organization identifier"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show a package group


        :param repository_id: repository identifier (required)
        :type repository_id: float
        :param id: :a_resource identifier (required)
        :type id: str
        :param organization_id: organization identifier
        :type organization_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_repositories_repository_id_package_groups_id_serialize(
            repository_id=repository_id,
            id=id,
            organization_id=organization_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_repositories_repository_id_package_groups_id_serialize(
        self,
        repository_id,
        id,
        organization_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository_id is not None:
            _path_params["repository_id"] = repository_id
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if organization_id is not None:
            _query_params.append(("organization_id", organization_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/repositories/{repository_id}/package_groups/{id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
